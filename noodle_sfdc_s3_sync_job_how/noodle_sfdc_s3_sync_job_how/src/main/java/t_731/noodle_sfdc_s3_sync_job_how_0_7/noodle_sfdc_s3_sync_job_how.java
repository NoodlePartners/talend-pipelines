// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package t_731.noodle_sfdc_s3_sync_job_how_0_7;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	import java.util.concurrent.ConcurrentHashMap;

	//the import part of tJava_1
	import java.sql.Connection;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

	//the import part of tJava_56
	//import java.util.List;

	//the import part of tJava_2
	import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Properties;
import javax.mail.*;
import javax.mail.internet.*;
import javax.activation.*;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJava_10
	//import java.util.List;

	//the import part of tJava_9
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_12
	//import java.util.List;

	//the import part of tJava_14
	//import java.util.List;

	//the import part of tJava_13
	//import java.util.List;

	//the import part of tJava_19
	//import java.util.List;

	//the import part of tJava_20
	//import java.util.List;

	//the import part of tJava_21
	//import java.util.List;

	//the import part of tJava_22
	//import java.util.List;

	//the import part of tJava_17
	//import java.util.List;

	//the import part of tJava_18
	//import java.util.List;

	//the import part of tJava_23
	//import java.util.List;

	//the import part of tJava_24
	//import java.util.List;

	//the import part of tJava_27
	//import java.util.List;

	//the import part of tJava_28
	//import java.util.List;

	//the import part of tJava_32
	//import java.util.List;

	//the import part of tJava_31
	//import java.util.List;

	//the import part of tJava_29
	//import java.util.List;

	//the import part of tJava_30
	//import java.util.List;

	//the import part of tJava_34
	//import java.util.List;

	//the import part of tJava_33
	//import java.util.List;

	//the import part of tJava_25
	//import java.util.List;

	//the import part of tJava_26
	//import java.util.List;

	//the import part of tJava_36
	//import java.util.List;

	//the import part of tJava_35
	//import java.util.List;

	//the import part of tJava_15
	//import java.util.List;

	//the import part of tJava_16
	//import java.util.List;

	//the import part of tJava_38
	//import java.util.List;

	//the import part of tJava_37
	//import java.util.List;

	//the import part of tJava_45
	//import java.util.List;

	//the import part of tJava_46
	//import java.util.List;

	//the import part of tJava_40
	//import java.util.List;

	//the import part of tJava_39
	//import java.util.List;

	//the import part of tJava_47
	//import java.util.List;

	//the import part of tJava_48
	//import java.util.List;

	//the import part of tJava_41
	//import java.util.List;

	//the import part of tJava_42
	//import java.util.List;

	//the import part of tJava_59
	//import java.util.List;

	//the import part of tJava_60
	//import java.util.List;

	//the import part of tJava_55
	//import java.util.List;

	//the import part of tJava_58
	//import java.util.List;

	//the import part of tJava_53
	//import java.util.List;

	//the import part of tJava_54
	//import java.util.List;

	//the import part of tJava_52
	//import java.util.List;

	//the import part of tJava_51
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_11
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: noodle_sfdc_s3_sync_job_how Purpose: <br>
 * Description: 0.2 : Removed column noodlecrm__tran_3__c
0.3 : Added two table noodlecrm__inquiry__c and noodlecrm__application__c
0.4 : changed data type of opp is_test field
0.5 : Added noodlecrm__inquiry__c.noodlecrm__inquiry_action__c and opportunity.noodlecrm__first_inquiry_action__c
0.6 : Updated all date typeto datatime data type
0.7 : Updated DB password get from variable <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class noodle_sfdc_s3_sync_job_how implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(staging_S3_dir != null){
				
					this.setProperty("staging_S3_dir", staging_S3_dir.toString());
				
			}
			
			if(university_code != null){
				
					this.setProperty("university_code", university_code.toString());
				
			}
			
			if(new2 != null){
				
					this.setProperty("new2", new2.toString());
				
			}
			
			if(email_default_from != null){
				
					this.setProperty("email_default_from", email_default_from.toString());
				
			}
			
			if(email_default_to != null){
				
					this.setProperty("email_default_to", email_default_to.toString());
				
			}
			
			if(email_host != null){
				
					this.setProperty("email_host", email_host.toString());
				
			}
			
			if(email_port != null){
				
					this.setProperty("email_port", email_port.toString());
				
			}
			
			if(email_sender_name != null){
				
					this.setProperty("email_sender_name", email_sender_name.toString());
				
			}
			
			if(email_subject_stem != null){
				
					this.setProperty("email_subject_stem", email_subject_stem.toString());
				
			}
			
			if(ND_Heroku_Postgresql_AdditionalParams != null){
				
					this.setProperty("ND_Heroku_Postgresql_AdditionalParams", ND_Heroku_Postgresql_AdditionalParams.toString());
				
			}
			
			if(ND_Heroku_Postgresql_Database != null){
				
					this.setProperty("ND_Heroku_Postgresql_Database", ND_Heroku_Postgresql_Database.toString());
				
			}
			
			if(ND_Heroku_Postgresql_Login != null){
				
					this.setProperty("ND_Heroku_Postgresql_Login", ND_Heroku_Postgresql_Login.toString());
				
			}
			
			if(ND_Heroku_Postgresql_Password != null){
				
					this.setProperty("ND_Heroku_Postgresql_Password", ND_Heroku_Postgresql_Password.toString());
				
			}
			
			if(ND_Heroku_Postgresql_Port != null){
				
					this.setProperty("ND_Heroku_Postgresql_Port", ND_Heroku_Postgresql_Port.toString());
				
			}
			
			if(ND_Heroku_Postgresql_Schema != null){
				
					this.setProperty("ND_Heroku_Postgresql_Schema", ND_Heroku_Postgresql_Schema.toString());
				
			}
			
			if(ND_Heroku_Postgresql_Server != null){
				
					this.setProperty("ND_Heroku_Postgresql_Server", ND_Heroku_Postgresql_Server.toString());
				
			}
			
			if(ND_PostgreSQL_POND_AdditionalParams != null){
				
					this.setProperty("ND_PostgreSQL_POND_AdditionalParams", ND_PostgreSQL_POND_AdditionalParams.toString());
				
			}
			
			if(ND_PostgreSQL_POND_Database != null){
				
					this.setProperty("ND_PostgreSQL_POND_Database", ND_PostgreSQL_POND_Database.toString());
				
			}
			
			if(ND_PostgreSQL_POND_Login != null){
				
					this.setProperty("ND_PostgreSQL_POND_Login", ND_PostgreSQL_POND_Login.toString());
				
			}
			
			if(ND_PostgreSQL_POND_Password != null){
				
					this.setProperty("ND_PostgreSQL_POND_Password", ND_PostgreSQL_POND_Password.toString());
				
			}
			
			if(ND_PostgreSQL_POND_Port != null){
				
					this.setProperty("ND_PostgreSQL_POND_Port", ND_PostgreSQL_POND_Port.toString());
				
			}
			
			if(ND_PostgreSQL_POND_Schema != null){
				
					this.setProperty("ND_PostgreSQL_POND_Schema", ND_PostgreSQL_POND_Schema.toString());
				
			}
			
			if(ND_PostgreSQL_POND_Server != null){
				
					this.setProperty("ND_PostgreSQL_POND_Server", ND_PostgreSQL_POND_Server.toString());
				
			}
			
			if(nd_s3_bucket_QA_sfdc != null){
				
					this.setProperty("nd_s3_bucket_QA_sfdc", nd_s3_bucket_QA_sfdc.toString());
				
			}
			
			if(nd_s3_data_lake_path_sfdc != null){
				
					this.setProperty("nd_s3_data_lake_path_sfdc", nd_s3_data_lake_path_sfdc.toString());
				
			}
			
		}

public String staging_S3_dir;
public String getStaging_S3_dir(){
	return this.staging_S3_dir;
}
public String university_code;
public String getUniversity_code(){
	return this.university_code;
}
public String new2;
public String getNew2(){
	return this.new2;
}
public String email_default_from;
public String getEmail_default_from(){
	return this.email_default_from;
}
public String email_default_to;
public String getEmail_default_to(){
	return this.email_default_to;
}
public String email_host;
public String getEmail_host(){
	return this.email_host;
}
public String email_port;
public String getEmail_port(){
	return this.email_port;
}
public String email_sender_name;
public String getEmail_sender_name(){
	return this.email_sender_name;
}
public String email_subject_stem;
public String getEmail_subject_stem(){
	return this.email_subject_stem;
}
public String ND_Heroku_Postgresql_AdditionalParams;
public String getND_Heroku_Postgresql_AdditionalParams(){
	return this.ND_Heroku_Postgresql_AdditionalParams;
}
public String ND_Heroku_Postgresql_Database;
public String getND_Heroku_Postgresql_Database(){
	return this.ND_Heroku_Postgresql_Database;
}
public String ND_Heroku_Postgresql_Login;
public String getND_Heroku_Postgresql_Login(){
	return this.ND_Heroku_Postgresql_Login;
}
public java.lang.String ND_Heroku_Postgresql_Password;
public java.lang.String getND_Heroku_Postgresql_Password(){
	return this.ND_Heroku_Postgresql_Password;
}
public String ND_Heroku_Postgresql_Port;
public String getND_Heroku_Postgresql_Port(){
	return this.ND_Heroku_Postgresql_Port;
}
public String ND_Heroku_Postgresql_Schema;
public String getND_Heroku_Postgresql_Schema(){
	return this.ND_Heroku_Postgresql_Schema;
}
public String ND_Heroku_Postgresql_Server;
public String getND_Heroku_Postgresql_Server(){
	return this.ND_Heroku_Postgresql_Server;
}
public String ND_PostgreSQL_POND_AdditionalParams;
public String getND_PostgreSQL_POND_AdditionalParams(){
	return this.ND_PostgreSQL_POND_AdditionalParams;
}
public String ND_PostgreSQL_POND_Database;
public String getND_PostgreSQL_POND_Database(){
	return this.ND_PostgreSQL_POND_Database;
}
public String ND_PostgreSQL_POND_Login;
public String getND_PostgreSQL_POND_Login(){
	return this.ND_PostgreSQL_POND_Login;
}
public java.lang.String ND_PostgreSQL_POND_Password;
public java.lang.String getND_PostgreSQL_POND_Password(){
	return this.ND_PostgreSQL_POND_Password;
}
public String ND_PostgreSQL_POND_Port;
public String getND_PostgreSQL_POND_Port(){
	return this.ND_PostgreSQL_POND_Port;
}
public String ND_PostgreSQL_POND_Schema;
public String getND_PostgreSQL_POND_Schema(){
	return this.ND_PostgreSQL_POND_Schema;
}
public String ND_PostgreSQL_POND_Server;
public String getND_PostgreSQL_POND_Server(){
	return this.ND_PostgreSQL_POND_Server;
}
public String nd_s3_bucket_QA_sfdc;
public String getNd_s3_bucket_QA_sfdc(){
	return this.nd_s3_bucket_QA_sfdc;
}
public String nd_s3_data_lake_path_sfdc;
public String getNd_s3_data_lake_path_sfdc(){
	return this.nd_s3_data_lake_path_sfdc;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.7";
	private final String jobName = "noodle_sfdc_s3_sync_job_how";
	private final String projectName = "T_731";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				noodle_sfdc_s3_sync_job_how.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(noodle_sfdc_s3_sync_job_how.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSendMail_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tChronometerStart_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tChronometerStart_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_56_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_56_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tChronometerStop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_36_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_35_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_38_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_37_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_45_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_45_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_46_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_46_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_39_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_39_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_47_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_47_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_48_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_48_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_41_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_41_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_42_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_59_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_59_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_60_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_60_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_55_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_55_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_58_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_58_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_53_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_53_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_54_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_54_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_52_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_52_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_51_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_51_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Copy_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Copy_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Delete_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Delete_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSendMail_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tChronometerStart_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_56_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tChronometerStop_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_28_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_32_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_31_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_30_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_34_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_33_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_36_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_35_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_38_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_37_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_45_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_46_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_40_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_39_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_47_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_48_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_41_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_42_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_59_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_60_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_55_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_58_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_53_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_54_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_52_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_51_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Copy_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Delete_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row17.type = lcm.getType();
		row17.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row17.priority = lcm.getPriority();
		row17.message = lcm.getMessage();
		row17.code = lcm.getCode();
		
		row17.moment = java.util.Calendar.getInstance().getTime();
	
    	row17.pid = pid;
		row17.root_pid = rootPid;
		row17.father_pid = fatherPid;
	
    	row17.project = projectName;
    	row17.job = jobName;
    	row17.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					

    String msg=null;
String ChildJobStatus = (String) ((java.util.Map) globalMap.get("sharedMap")).get("Failure?");
String ParentJobStatus = (String) globalMap.get("parent_status");

if (ChildJobStatus.equals("True")) {
	msg = (String)((java.util.Map) globalMap.get("sharedMap")).get("ExceptionMsg"); 
	}
else if (ParentJobStatus.equals("running")) {
	msg = "Origin: " + row17.origin + ", Error: " + row17.message;
	}

System.out.println("The following job has failed: " + projectName + "." + jobName + ".\nPlease check the application log for more detailed information on the cause.\nException caught: \"" + msg + "\"");
globalMap.put("error_msg", msg);
globalMap.put("error_code", row17.code);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

   			if ((Integer)globalMap.get("error_code")==888) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If6", 0, "true");
					}
				tSendMail_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If6", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tSendMail_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSendMail_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSendMail_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_1", false);
		start_Hash.put("tSendMail_1", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_1";

	
		int tos_count_tSendMail_1 = 0;
		

 



/**
 * [tSendMail_1 begin ] stop
 */
	
	/**
	 * [tSendMail_1 main ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 

	String smtpHost_tSendMail_1 = context.email_host;
        String smtpPort_tSendMail_1 = "25";
	String from_tSendMail_1 = (context.email_default_from);
    String to_tSendMail_1 = (context.email_default_to).replace(";",",");
    String cc_tSendMail_1 = (("carbon@example.com")==null || "".equals("carbon@example.com"))?null:("carbon@example.com").replace(";",",");
    String bcc_tSendMail_1 = (("blindcarbon@example.com")==null || "".equals("blindcarbon@example.com"))?null:("blindcarbon@example.com").replace(";",",");
    String subject_tSendMail_1 = (context.email_subject_stem + " [" + contextStr + ": " + jobName + "]");
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_1 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_1 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_1 = new java.util.ArrayList<String>();

	String message_tSendMail_1 = (("The following job has failed: " + projectName + "." + jobName + ".\nPlease check the application log for more detailed information on the cause.\nException caught: \"" + (String)globalMap.get("error_msg") + "\""
) == null || "".equals("The following job has failed: " + projectName + "." + jobName + ".\nPlease check the application log for more detailed information on the cause.\nException caught: \"" + (String)globalMap.get("error_msg") + "\""
)) ? "\"\"" : ("The following job has failed: " + projectName + "." + jobName + ".\nPlease check the application log for more detailed information on the cause.\nException caught: \"" + (String)globalMap.get("error_msg") + "\""
) ;
	java.util.Properties props_tSendMail_1 = System.getProperties();     
	props_tSendMail_1.put("mail.smtp.host", smtpHost_tSendMail_1);
	props_tSendMail_1.put("mail.smtp.port", smtpPort_tSendMail_1);
		props_tSendMail_1.put("mail.smtp.localhost", context.email_host);
		props_tSendMail_1.put("mail.mime.encodefilename", "true");     
	try {
		
		  
			props_tSendMail_1.put("mail.smtp.auth", "false");
			javax.mail.Session session_tSendMail_1 = javax.mail.Session.getInstance(props_tSendMail_1, null);    
		
		
		javax.mail.Message msg_tSendMail_1 = new javax.mail.internet.MimeMessage(session_tSendMail_1);
		msg_tSendMail_1.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_1, "Hotchalk Data Services Team"));
		msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_1, false));
		if (cc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_1, false));
		if (bcc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_1, false));
		msg_tSendMail_1.setSubject(subject_tSendMail_1);

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < headers_tSendMail_1.size(); i_tSendMail_1++) {
			java.util.Map<String, String> header_tSendMail_1 = headers_tSendMail_1.get(i_tSendMail_1);
			msg_tSendMail_1.setHeader(header_tSendMail_1.get("KEY"), header_tSendMail_1.get("VALUE"));    
		}  
		msg_tSendMail_1.setSentDate(new Date());
		msg_tSendMail_1.setHeader("X-Priority", "3"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_1 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_1.setText(message_tSendMail_1,"ISO-8859-15", "plain");
		mp_tSendMail_1.addBodyPart(mbpText_tSendMail_1);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_1 = null;

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < attachments_tSendMail_1.size(); i_tSendMail_1++){
			String filename_tSendMail_1 = attachments_tSendMail_1.get(i_tSendMail_1);
			javax.activation.FileDataSource fds_tSendMail_1 = null;
			java.io.File file_tSendMail_1 = new java.io.File(filename_tSendMail_1);
			
    		if (file_tSendMail_1.isDirectory()){
				java.io.File[] subFiles_tSendMail_1 = file_tSendMail_1.listFiles();
				for(java.io.File subFile_tSendMail_1 : subFiles_tSendMail_1){
					if (subFile_tSendMail_1.isFile()){
						fds_tSendMail_1 = new javax.activation.FileDataSource(subFile_tSendMail_1.getAbsolutePath());
						mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1));
						mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
						if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
					}
				}
    		}else{
				mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_1 = new javax.activation.FileDataSource(filename_tSendMail_1);
				mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1)); 
				mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
				if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
			}
		}
		// -- set the content --
		msg_tSendMail_1.setContent(mp_tSendMail_1);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_1 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_1.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_1.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_1.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_1.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_1.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_1);
		// add com.sun.mail.handlers to job imports / depenencies (TESB-27110)
		com.sun.mail.handlers.text_plain text_plain_h_tSendMail_1 = null;
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_1);
	} catch(java.lang.Exception e){
  		
			throw(e);
		
	}finally{
		props_tSendMail_1.remove("mail.smtp.host");
		props_tSendMail_1.remove("mail.smtp.port");
		
			props_tSendMail_1.remove("mail.smtp.localhost");
		
		props_tSendMail_1.remove("mail.mime.encodefilename");
		
		props_tSendMail_1.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_1++;

/**
 * [tSendMail_1 main ] stop
 */
	
	/**
	 * [tSendMail_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 process_data_begin ] stop
 */
	
	/**
	 * [tSendMail_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 process_data_end ] stop
 */
	
	/**
	 * [tSendMail_1 end ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 

ok_Hash.put("tSendMail_1", true);
end_Hash.put("tSendMail_1", System.currentTimeMillis());




/**
 * [tSendMail_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSendMail_1 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk28", 0, "ok");
				}
				tChronometerStart_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tChronometerStart_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tChronometerStart_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tChronometerStart_1", false);
		start_Hash.put("tChronometerStart_1", System.currentTimeMillis());
		
	
	currentComponent="tChronometerStart_1";

	
		int tos_count_tChronometerStart_1 = 0;
		

	
	
	Long currentTimetChronometerStart_1 = System.currentTimeMillis();
	
	globalMap.put("tChronometerStart_1",currentTimetChronometerStart_1);
	globalMap.put("tChronometerStart_1_STARTTIME", currentTimetChronometerStart_1);
 



/**
 * [tChronometerStart_1 begin ] stop
 */
	
	/**
	 * [tChronometerStart_1 main ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 


	tos_count_tChronometerStart_1++;

/**
 * [tChronometerStart_1 main ] stop
 */
	
	/**
	 * [tChronometerStart_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 process_data_begin ] stop
 */
	
	/**
	 * [tChronometerStart_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 process_data_end ] stop
 */
	
	/**
	 * [tChronometerStart_1 end ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 

ok_Hash.put("tChronometerStart_1", true);
end_Hash.put("tChronometerStart_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk29", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tChronometerStart_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tChronometerStart_1 finally ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


Date start_datetime = new Date((Long)globalMap.get("tChronometerStart_1_STARTTIME"));
String start_time = TalendDate.formatDate("EEE, MMM dd HH:mm:ss.SSS z yyyy",start_datetime);
System.out.println("\n*** " + jobName + " ***");
System.out.println("Start Time: "+start_time);
System.out.println("Environment: " + contextStr);
context.email_subject_stem = "SalesForce LCV Object Refresh";

globalMap.put("datetime", TalendDate.formatDate("yyyyMMddHHmm", new Date()));
globalMap.put("compare_result", "true");

ConcurrentHashMap<String, String> CHM = new ConcurrentHashMap<String, String>();
CHM.put("Failure?", "False");
globalMap.put("sharedMap", CHM);
globalMap.put("parent_status", "running");





 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk30", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	    
		com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper();
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/7.3 Studio/7.3 (Talend Open Studio)");
		
				com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard()
					
		            
		            	
				        .withRegion("us-east-1") // The first region to try your request against
                        .withForceGlobalBucketAccessEnabled(true) // If a bucket is in a different region, try again in the correct region
		            
		            

                    .withCredentials(credentialsProvider_tS3Connection_1)
                    .withClientConfiguration(cc_tS3Connection_1)
                    .build();
			
	
		try{
			conn_tS3Connection_1.getBucketLoggingConfiguration("Check-Connection-Only");
	}catch(com.amazonaws.AmazonServiceException ase_tS3Connection_1){
			if(ase_tS3Connection_1.getErrorCode().equals("NoSuchBucket")){
			//ignore
			}else{
					throw ase_tS3Connection_1;
			}
	}
	
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk31", 0, "ok");
				}
				tJava_56Process(globalMap);



/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_56Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_56_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_56 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_56", false);
		start_Hash.put("tJava_56", System.currentTimeMillis());
		
	
	currentComponent="tJava_56";

	
		int tos_count_tJava_56 = 0;
		


context.ND_Heroku_Postgresql_Login = System.getenv("TALEND_HEROKU_LOGIN");
context.ND_Heroku_Postgresql_Password = System.getenv("TALEND_HEROKU_PASSWORD");
context.ND_PostgreSQL_POND_Login = System.getenv("TALEND_POND_LOGIN");
context.ND_PostgreSQL_POND_Password = System.getenv("TALEND_POND_PASSWORD");


//System.out.println(context.sfdc_keystore_password );
 



/**
 * [tJava_56 begin ] stop
 */
	
	/**
	 * [tJava_56 main ] start
	 */

	

	
	
	currentComponent="tJava_56";

	

 


	tos_count_tJava_56++;

/**
 * [tJava_56 main ] stop
 */
	
	/**
	 * [tJava_56 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_56";

	

 



/**
 * [tJava_56 process_data_begin ] stop
 */
	
	/**
	 * [tJava_56 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_56";

	

 



/**
 * [tJava_56 process_data_end ] stop
 */
	
	/**
	 * [tJava_56 end ] start
	 */

	

	
	
	currentComponent="tJava_56";

	

 

ok_Hash.put("tJava_56", true);
end_Hash.put("tJava_56", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk160", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tJava_56 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_56 finally ] start
	 */

	

	
	
	currentComponent="tJava_56";

	

 



/**
 * [tJava_56 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_56_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = context.ND_Heroku_Postgresql_AdditionalParams;
            String url_tDBConnection_1 = "jdbc:postgresql://"+context.ND_Heroku_Postgresql_Server+":"+context.ND_Heroku_Postgresql_Port+"/"+context.ND_Heroku_Postgresql_Database;
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = context.ND_Heroku_Postgresql_Login;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.ND_Heroku_Postgresql_Password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tDBConnection_1",context.ND_Heroku_Postgresql_Schema);

	globalMap.put("conn_" + "tDBConnection_1",conn_tDBConnection_1);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk147", 0, "ok");
				}
				tDBConnection_2Process(globalMap);



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";

	
		int tos_count_tDBConnection_2 = 0;
		


	
            String dbProperties_tDBConnection_2 = context.ND_PostgreSQL_POND_AdditionalParams;
            String url_tDBConnection_2 = "jdbc:postgresql://"+context.ND_PostgreSQL_POND_Server+":"+context.ND_PostgreSQL_POND_Port+"/"+context.ND_PostgreSQL_POND_Database;
            
            if(dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
                url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
            }
	String dbUser_tDBConnection_2 = context.ND_PostgreSQL_POND_Login;
	
	
		
	final String decryptedPassword_tDBConnection_2 = context.ND_PostgreSQL_POND_Password; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_2.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
        if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
                java.sql.DriverManager.registerDriver(d_tDBConnection_2);
            } catch (java.lang.Exception e_tDBConnection_2) {
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_2 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_2",context.university_code);

	globalMap.put("conn_" + "tDBConnection_2",conn_tDBConnection_2);

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk32", 0, "ok");
				}
				tChronometerStop_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tChronometerStop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tChronometerStop_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tChronometerStop_1", false);
		start_Hash.put("tChronometerStop_1", System.currentTimeMillis());
		
	
	currentComponent="tChronometerStop_1";

	
		int tos_count_tChronometerStop_1 = 0;
		
	
	long timetChronometerStop_1;
	
	  	timetChronometerStop_1 = System.currentTimeMillis() - ((Long)globalMap.get("tChronometerStart_1")).longValue();
		
	Long currentTimetChronometerStop_1 = System.currentTimeMillis();
	globalMap.put("tChronometerStop_1", currentTimetChronometerStop_1);
	
	globalMap.put("tChronometerStop_1_STOPTIME", currentTimetChronometerStop_1);
	globalMap.put("tChronometerStop_1_DURATION", timetChronometerStop_1);
 



/**
 * [tChronometerStop_1 begin ] stop
 */
	
	/**
	 * [tChronometerStop_1 main ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 


	tos_count_tChronometerStop_1++;

/**
 * [tChronometerStop_1 main ] stop
 */
	
	/**
	 * [tChronometerStop_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 process_data_begin ] stop
 */
	
	/**
	 * [tChronometerStop_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 process_data_end ] stop
 */
	
	/**
	 * [tChronometerStop_1 end ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 

ok_Hash.put("tChronometerStop_1", true);
end_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk33", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tChronometerStop_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tChronometerStop_1 finally ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


Date start_datetime = new Date(((Long)globalMap.get("tChronometerStop_1_STOPTIME")) - ((Long)globalMap.get("tChronometerStop_1_DURATION")));
String start_time = TalendDate.formatDate("EEE, MMM dd HH:mm:ss.SSS z yyyy",start_datetime);
Date end_datetime= new Date((Long)globalMap.get("tChronometerStop_1_STOPTIME"));
String end_time = TalendDate.formatDate("EEE, MMM dd HH:mm:ss.SSS z yyyy",end_datetime);
String Duration = TalendDate.formatDate("HH:mm:ss.SSS", TalendDate.parseDate("ss SSS", String.valueOf(((Long)globalMap.get("tChronometerStop_1_DURATION"))/1000)+" "+
String.valueOf(((Long)globalMap.get("tChronometerStop_1_DURATION"))%1000)));

System.out.println("Start Time: "+start_time);
System.out.println("End Time: "+end_time);
System.out.println("Run Duration: "+Duration);
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String jigsaw;

				public String getJigsaw () {
					return this.jigsaw;
				}
				
			    public Double shippinglongitude;

				public Double getShippinglongitude () {
					return this.shippinglongitude;
				}
				
			    public String shippingstate;

				public String getShippingstate () {
					return this.shippingstate;
				}
				
			    public Integer numberofemployees;

				public Integer getNumberofemployees () {
					return this.numberofemployees;
				}
				
			    public String parentid;

				public String getParentid () {
					return this.parentid;
				}
				
			    public String shippingpostalcode;

				public String getShippingpostalcode () {
					return this.shippingpostalcode;
				}
				
			    public String billingcity;

				public String getBillingcity () {
					return this.billingcity;
				}
				
			    public Double billinglatitude;

				public Double getBillinglatitude () {
					return this.billinglatitude;
				}
				
			    public String accountsource;

				public String getAccountsource () {
					return this.accountsource;
				}
				
			    public String shippingcountry;

				public String getShippingcountry () {
					return this.shippingcountry;
				}
				
			    public java.util.Date lastvieweddate;

				public java.util.Date getLastvieweddate () {
					return this.lastvieweddate;
				}
				
			    public String shippinggeocodeaccuracy;

				public String getShippinggeocodeaccuracy () {
					return this.shippinggeocodeaccuracy;
				}
				
			    public String noodlecrm__sla__c;

				public String getNoodlecrm__sla__c () {
					return this.noodlecrm__sla__c;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String noodlecrm__upsellopportunity__c;

				public String getNoodlecrm__upsellopportunity__c () {
					return this.noodlecrm__upsellopportunity__c;
				}
				
			    public String noodlecrm__slaserialnumber__c;

				public String getNoodlecrm__slaserialnumber__c () {
					return this.noodlecrm__slaserialnumber__c;
				}
				
			    public java.util.Date noodlecrm__slaexpirationdate__c;

				public java.util.Date getNoodlecrm__slaexpirationdate__c () {
					return this.noodlecrm__slaexpirationdate__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String noodlecrm__active__c;

				public String getNoodlecrm__active__c () {
					return this.noodlecrm__active__c;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				
			    public String masterrecordid;

				public String getMasterrecordid () {
					return this.masterrecordid;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String shippingstreet;

				public String getShippingstreet () {
					return this.shippingstreet;
				}
				
			    public String noodlecrm__customerpriority__c;

				public String getNoodlecrm__customerpriority__c () {
					return this.noodlecrm__customerpriority__c;
				}
				
			    public java.util.Date lastactivitydate;

				public java.util.Date getLastactivitydate () {
					return this.lastactivitydate;
				}
				
			    public String billingpostalcode;

				public String getBillingpostalcode () {
					return this.billingpostalcode;
				}
				
			    public Double billinglongitude;

				public Double getBillinglongitude () {
					return this.billinglongitude;
				}
				
			    public Double noodlecrm__numberoflocations__c;

				public Double getNoodlecrm__numberoflocations__c () {
					return this.noodlecrm__numberoflocations__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String billingstate;

				public String getBillingstate () {
					return this.billingstate;
				}
				
			    public String jigsawcompanyid;

				public String getJigsawcompanyid () {
					return this.jigsawcompanyid;
				}
				
			    public String shippingcity;

				public String getShippingcity () {
					return this.shippingcity;
				}
				
			    public Double shippinglatitude;

				public Double getShippinglatitude () {
					return this.shippinglatitude;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String website;

				public String getWebsite () {
					return this.website;
				}
				
			    public String billingcountry;

				public String getBillingcountry () {
					return this.billingcountry;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String billinggeocodeaccuracy;

				public String getBillinggeocodeaccuracy () {
					return this.billinggeocodeaccuracy;
				}
				
			    public String photourl;

				public String getPhotourl () {
					return this.photourl;
				}
				
			    public java.util.Date lastreferenceddate;

				public java.util.Date getLastreferenceddate () {
					return this.lastreferenceddate;
				}
				
			    public String sicdesc;

				public String getSicdesc () {
					return this.sicdesc;
				}
				
			    public String industry;

				public String getIndustry () {
					return this.industry;
				}
				
			    public String billingstreet;

				public String getBillingstreet () {
					return this.billingstreet;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String noodlecrm__school__c;

				public String getNoodlecrm__school__c () {
					return this.noodlecrm__school__c;
				}
				
			    public String noodlecrm__university__c;

				public String getNoodlecrm__university__c () {
					return this.noodlecrm__university__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.jigsaw = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.shippinglongitude = null;
           				} else {
           			    	this.shippinglongitude = dis.readDouble();
           				}
					
					this.shippingstate = readString(dis);
					
						this.numberofemployees = readInteger(dis);
					
					this.parentid = readString(dis);
					
					this.shippingpostalcode = readString(dis);
					
					this.billingcity = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.billinglatitude = null;
           				} else {
           			    	this.billinglatitude = dis.readDouble();
           				}
					
					this.accountsource = readString(dis);
					
					this.shippingcountry = readString(dis);
					
					this.lastvieweddate = readDate(dis);
					
					this.shippinggeocodeaccuracy = readString(dis);
					
					this.noodlecrm__sla__c = readString(dis);
					
					this.name = readString(dis);
					
					this.noodlecrm__upsellopportunity__c = readString(dis);
					
					this.noodlecrm__slaserialnumber__c = readString(dis);
					
					this.noodlecrm__slaexpirationdate__c = readDate(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__active__c = readString(dis);
					
					this.phone = readString(dis);
					
					this.masterrecordid = readString(dis);
					
					this.ownerid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.lastmodifiedbyid = readString(dis);
					
					this.shippingstreet = readString(dis);
					
					this.noodlecrm__customerpriority__c = readString(dis);
					
					this.lastactivitydate = readDate(dis);
					
					this.billingpostalcode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.billinglongitude = null;
           				} else {
           			    	this.billinglongitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__numberoflocations__c = null;
           				} else {
           			    	this.noodlecrm__numberoflocations__c = dis.readDouble();
           				}
					
					this.createddate = readDate(dis);
					
					this.billingstate = readString(dis);
					
					this.jigsawcompanyid = readString(dis);
					
					this.shippingcity = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.shippinglatitude = null;
           				} else {
           			    	this.shippinglatitude = dis.readDouble();
           				}
					
					this.createdbyid = readString(dis);
					
					this.type = readString(dis);
					
					this.website = readString(dis);
					
					this.billingcountry = readString(dis);
					
					this.description = readString(dis);
					
					this.billinggeocodeaccuracy = readString(dis);
					
					this.photourl = readString(dis);
					
					this.lastreferenceddate = readDate(dis);
					
					this.sicdesc = readString(dis);
					
					this.industry = readString(dis);
					
					this.billingstreet = readString(dis);
					
					this.sfid = readString(dis);
					
						this.id = readInteger(dis);
					
					this.noodlecrm__school__c = readString(dis);
					
					this.noodlecrm__university__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.jigsaw,dos);
					
					// Double
				
						if(this.shippinglongitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.shippinglongitude);
		            	}
					
					// String
				
						writeString(this.shippingstate,dos);
					
					// Integer
				
						writeInteger(this.numberofemployees,dos);
					
					// String
				
						writeString(this.parentid,dos);
					
					// String
				
						writeString(this.shippingpostalcode,dos);
					
					// String
				
						writeString(this.billingcity,dos);
					
					// Double
				
						if(this.billinglatitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.billinglatitude);
		            	}
					
					// String
				
						writeString(this.accountsource,dos);
					
					// String
				
						writeString(this.shippingcountry,dos);
					
					// java.util.Date
				
						writeDate(this.lastvieweddate,dos);
					
					// String
				
						writeString(this.shippinggeocodeaccuracy,dos);
					
					// String
				
						writeString(this.noodlecrm__sla__c,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.noodlecrm__upsellopportunity__c,dos);
					
					// String
				
						writeString(this.noodlecrm__slaserialnumber__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__slaexpirationdate__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.noodlecrm__active__c,dos);
					
					// String
				
						writeString(this.phone,dos);
					
					// String
				
						writeString(this.masterrecordid,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.shippingstreet,dos);
					
					// String
				
						writeString(this.noodlecrm__customerpriority__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastactivitydate,dos);
					
					// String
				
						writeString(this.billingpostalcode,dos);
					
					// Double
				
						if(this.billinglongitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.billinglongitude);
		            	}
					
					// Double
				
						if(this.noodlecrm__numberoflocations__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__numberoflocations__c);
		            	}
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.billingstate,dos);
					
					// String
				
						writeString(this.jigsawcompanyid,dos);
					
					// String
				
						writeString(this.shippingcity,dos);
					
					// Double
				
						if(this.shippinglatitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.shippinglatitude);
		            	}
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.website,dos);
					
					// String
				
						writeString(this.billingcountry,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.billinggeocodeaccuracy,dos);
					
					// String
				
						writeString(this.photourl,dos);
					
					// java.util.Date
				
						writeDate(this.lastreferenceddate,dos);
					
					// String
				
						writeString(this.sicdesc,dos);
					
					// String
				
						writeString(this.industry,dos);
					
					// String
				
						writeString(this.billingstreet,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.noodlecrm__school__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("jigsaw="+jigsaw);
		sb.append(",shippinglongitude="+String.valueOf(shippinglongitude));
		sb.append(",shippingstate="+shippingstate);
		sb.append(",numberofemployees="+String.valueOf(numberofemployees));
		sb.append(",parentid="+parentid);
		sb.append(",shippingpostalcode="+shippingpostalcode);
		sb.append(",billingcity="+billingcity);
		sb.append(",billinglatitude="+String.valueOf(billinglatitude));
		sb.append(",accountsource="+accountsource);
		sb.append(",shippingcountry="+shippingcountry);
		sb.append(",lastvieweddate="+String.valueOf(lastvieweddate));
		sb.append(",shippinggeocodeaccuracy="+shippinggeocodeaccuracy);
		sb.append(",noodlecrm__sla__c="+noodlecrm__sla__c);
		sb.append(",name="+name);
		sb.append(",noodlecrm__upsellopportunity__c="+noodlecrm__upsellopportunity__c);
		sb.append(",noodlecrm__slaserialnumber__c="+noodlecrm__slaserialnumber__c);
		sb.append(",noodlecrm__slaexpirationdate__c="+String.valueOf(noodlecrm__slaexpirationdate__c));
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__active__c="+noodlecrm__active__c);
		sb.append(",phone="+phone);
		sb.append(",masterrecordid="+masterrecordid);
		sb.append(",ownerid="+ownerid);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",shippingstreet="+shippingstreet);
		sb.append(",noodlecrm__customerpriority__c="+noodlecrm__customerpriority__c);
		sb.append(",lastactivitydate="+String.valueOf(lastactivitydate));
		sb.append(",billingpostalcode="+billingpostalcode);
		sb.append(",billinglongitude="+String.valueOf(billinglongitude));
		sb.append(",noodlecrm__numberoflocations__c="+String.valueOf(noodlecrm__numberoflocations__c));
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",billingstate="+billingstate);
		sb.append(",jigsawcompanyid="+jigsawcompanyid);
		sb.append(",shippingcity="+shippingcity);
		sb.append(",shippinglatitude="+String.valueOf(shippinglatitude));
		sb.append(",createdbyid="+createdbyid);
		sb.append(",type="+type);
		sb.append(",website="+website);
		sb.append(",billingcountry="+billingcountry);
		sb.append(",description="+description);
		sb.append(",billinggeocodeaccuracy="+billinggeocodeaccuracy);
		sb.append(",photourl="+photourl);
		sb.append(",lastreferenceddate="+String.valueOf(lastreferenceddate));
		sb.append(",sicdesc="+sicdesc);
		sb.append(",industry="+industry);
		sb.append(",billingstreet="+billingstreet);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__school__c="+noodlecrm__school__c);
		sb.append(",noodlecrm__university__c="+noodlecrm__university__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String jigsaw;

				public String getJigsaw () {
					return this.jigsaw;
				}
				
			    public Double shippinglongitude;

				public Double getShippinglongitude () {
					return this.shippinglongitude;
				}
				
			    public String shippingstate;

				public String getShippingstate () {
					return this.shippingstate;
				}
				
			    public Integer numberofemployees;

				public Integer getNumberofemployees () {
					return this.numberofemployees;
				}
				
			    public String parentid;

				public String getParentid () {
					return this.parentid;
				}
				
			    public String shippingpostalcode;

				public String getShippingpostalcode () {
					return this.shippingpostalcode;
				}
				
			    public String billingcity;

				public String getBillingcity () {
					return this.billingcity;
				}
				
			    public Double billinglatitude;

				public Double getBillinglatitude () {
					return this.billinglatitude;
				}
				
			    public String accountsource;

				public String getAccountsource () {
					return this.accountsource;
				}
				
			    public String shippingcountry;

				public String getShippingcountry () {
					return this.shippingcountry;
				}
				
			    public java.util.Date lastvieweddate;

				public java.util.Date getLastvieweddate () {
					return this.lastvieweddate;
				}
				
			    public String shippinggeocodeaccuracy;

				public String getShippinggeocodeaccuracy () {
					return this.shippinggeocodeaccuracy;
				}
				
			    public String noodlecrm__sla__c;

				public String getNoodlecrm__sla__c () {
					return this.noodlecrm__sla__c;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String noodlecrm__upsellopportunity__c;

				public String getNoodlecrm__upsellopportunity__c () {
					return this.noodlecrm__upsellopportunity__c;
				}
				
			    public String noodlecrm__slaserialnumber__c;

				public String getNoodlecrm__slaserialnumber__c () {
					return this.noodlecrm__slaserialnumber__c;
				}
				
			    public java.util.Date noodlecrm__slaexpirationdate__c;

				public java.util.Date getNoodlecrm__slaexpirationdate__c () {
					return this.noodlecrm__slaexpirationdate__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String noodlecrm__active__c;

				public String getNoodlecrm__active__c () {
					return this.noodlecrm__active__c;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				
			    public String masterrecordid;

				public String getMasterrecordid () {
					return this.masterrecordid;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String shippingstreet;

				public String getShippingstreet () {
					return this.shippingstreet;
				}
				
			    public String noodlecrm__customerpriority__c;

				public String getNoodlecrm__customerpriority__c () {
					return this.noodlecrm__customerpriority__c;
				}
				
			    public java.util.Date lastactivitydate;

				public java.util.Date getLastactivitydate () {
					return this.lastactivitydate;
				}
				
			    public String billingpostalcode;

				public String getBillingpostalcode () {
					return this.billingpostalcode;
				}
				
			    public Double billinglongitude;

				public Double getBillinglongitude () {
					return this.billinglongitude;
				}
				
			    public Double noodlecrm__numberoflocations__c;

				public Double getNoodlecrm__numberoflocations__c () {
					return this.noodlecrm__numberoflocations__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String billingstate;

				public String getBillingstate () {
					return this.billingstate;
				}
				
			    public String jigsawcompanyid;

				public String getJigsawcompanyid () {
					return this.jigsawcompanyid;
				}
				
			    public String shippingcity;

				public String getShippingcity () {
					return this.shippingcity;
				}
				
			    public Double shippinglatitude;

				public Double getShippinglatitude () {
					return this.shippinglatitude;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String website;

				public String getWebsite () {
					return this.website;
				}
				
			    public String billingcountry;

				public String getBillingcountry () {
					return this.billingcountry;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String billinggeocodeaccuracy;

				public String getBillinggeocodeaccuracy () {
					return this.billinggeocodeaccuracy;
				}
				
			    public String photourl;

				public String getPhotourl () {
					return this.photourl;
				}
				
			    public java.util.Date lastreferenceddate;

				public java.util.Date getLastreferenceddate () {
					return this.lastreferenceddate;
				}
				
			    public String sicdesc;

				public String getSicdesc () {
					return this.sicdesc;
				}
				
			    public String industry;

				public String getIndustry () {
					return this.industry;
				}
				
			    public String billingstreet;

				public String getBillingstreet () {
					return this.billingstreet;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String noodlecrm__school__c;

				public String getNoodlecrm__school__c () {
					return this.noodlecrm__school__c;
				}
				
			    public String noodlecrm__university__c;

				public String getNoodlecrm__university__c () {
					return this.noodlecrm__university__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.jigsaw = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.shippinglongitude = null;
           				} else {
           			    	this.shippinglongitude = dis.readDouble();
           				}
					
					this.shippingstate = readString(dis);
					
						this.numberofemployees = readInteger(dis);
					
					this.parentid = readString(dis);
					
					this.shippingpostalcode = readString(dis);
					
					this.billingcity = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.billinglatitude = null;
           				} else {
           			    	this.billinglatitude = dis.readDouble();
           				}
					
					this.accountsource = readString(dis);
					
					this.shippingcountry = readString(dis);
					
					this.lastvieweddate = readDate(dis);
					
					this.shippinggeocodeaccuracy = readString(dis);
					
					this.noodlecrm__sla__c = readString(dis);
					
					this.name = readString(dis);
					
					this.noodlecrm__upsellopportunity__c = readString(dis);
					
					this.noodlecrm__slaserialnumber__c = readString(dis);
					
					this.noodlecrm__slaexpirationdate__c = readDate(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__active__c = readString(dis);
					
					this.phone = readString(dis);
					
					this.masterrecordid = readString(dis);
					
					this.ownerid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.lastmodifiedbyid = readString(dis);
					
					this.shippingstreet = readString(dis);
					
					this.noodlecrm__customerpriority__c = readString(dis);
					
					this.lastactivitydate = readDate(dis);
					
					this.billingpostalcode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.billinglongitude = null;
           				} else {
           			    	this.billinglongitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__numberoflocations__c = null;
           				} else {
           			    	this.noodlecrm__numberoflocations__c = dis.readDouble();
           				}
					
					this.createddate = readDate(dis);
					
					this.billingstate = readString(dis);
					
					this.jigsawcompanyid = readString(dis);
					
					this.shippingcity = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.shippinglatitude = null;
           				} else {
           			    	this.shippinglatitude = dis.readDouble();
           				}
					
					this.createdbyid = readString(dis);
					
					this.type = readString(dis);
					
					this.website = readString(dis);
					
					this.billingcountry = readString(dis);
					
					this.description = readString(dis);
					
					this.billinggeocodeaccuracy = readString(dis);
					
					this.photourl = readString(dis);
					
					this.lastreferenceddate = readDate(dis);
					
					this.sicdesc = readString(dis);
					
					this.industry = readString(dis);
					
					this.billingstreet = readString(dis);
					
					this.sfid = readString(dis);
					
						this.id = readInteger(dis);
					
					this.noodlecrm__school__c = readString(dis);
					
					this.noodlecrm__university__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.jigsaw,dos);
					
					// Double
				
						if(this.shippinglongitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.shippinglongitude);
		            	}
					
					// String
				
						writeString(this.shippingstate,dos);
					
					// Integer
				
						writeInteger(this.numberofemployees,dos);
					
					// String
				
						writeString(this.parentid,dos);
					
					// String
				
						writeString(this.shippingpostalcode,dos);
					
					// String
				
						writeString(this.billingcity,dos);
					
					// Double
				
						if(this.billinglatitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.billinglatitude);
		            	}
					
					// String
				
						writeString(this.accountsource,dos);
					
					// String
				
						writeString(this.shippingcountry,dos);
					
					// java.util.Date
				
						writeDate(this.lastvieweddate,dos);
					
					// String
				
						writeString(this.shippinggeocodeaccuracy,dos);
					
					// String
				
						writeString(this.noodlecrm__sla__c,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.noodlecrm__upsellopportunity__c,dos);
					
					// String
				
						writeString(this.noodlecrm__slaserialnumber__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__slaexpirationdate__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.noodlecrm__active__c,dos);
					
					// String
				
						writeString(this.phone,dos);
					
					// String
				
						writeString(this.masterrecordid,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.shippingstreet,dos);
					
					// String
				
						writeString(this.noodlecrm__customerpriority__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastactivitydate,dos);
					
					// String
				
						writeString(this.billingpostalcode,dos);
					
					// Double
				
						if(this.billinglongitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.billinglongitude);
		            	}
					
					// Double
				
						if(this.noodlecrm__numberoflocations__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__numberoflocations__c);
		            	}
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.billingstate,dos);
					
					// String
				
						writeString(this.jigsawcompanyid,dos);
					
					// String
				
						writeString(this.shippingcity,dos);
					
					// Double
				
						if(this.shippinglatitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.shippinglatitude);
		            	}
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.website,dos);
					
					// String
				
						writeString(this.billingcountry,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.billinggeocodeaccuracy,dos);
					
					// String
				
						writeString(this.photourl,dos);
					
					// java.util.Date
				
						writeDate(this.lastreferenceddate,dos);
					
					// String
				
						writeString(this.sicdesc,dos);
					
					// String
				
						writeString(this.industry,dos);
					
					// String
				
						writeString(this.billingstreet,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.noodlecrm__school__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("jigsaw="+jigsaw);
		sb.append(",shippinglongitude="+String.valueOf(shippinglongitude));
		sb.append(",shippingstate="+shippingstate);
		sb.append(",numberofemployees="+String.valueOf(numberofemployees));
		sb.append(",parentid="+parentid);
		sb.append(",shippingpostalcode="+shippingpostalcode);
		sb.append(",billingcity="+billingcity);
		sb.append(",billinglatitude="+String.valueOf(billinglatitude));
		sb.append(",accountsource="+accountsource);
		sb.append(",shippingcountry="+shippingcountry);
		sb.append(",lastvieweddate="+String.valueOf(lastvieweddate));
		sb.append(",shippinggeocodeaccuracy="+shippinggeocodeaccuracy);
		sb.append(",noodlecrm__sla__c="+noodlecrm__sla__c);
		sb.append(",name="+name);
		sb.append(",noodlecrm__upsellopportunity__c="+noodlecrm__upsellopportunity__c);
		sb.append(",noodlecrm__slaserialnumber__c="+noodlecrm__slaserialnumber__c);
		sb.append(",noodlecrm__slaexpirationdate__c="+String.valueOf(noodlecrm__slaexpirationdate__c));
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__active__c="+noodlecrm__active__c);
		sb.append(",phone="+phone);
		sb.append(",masterrecordid="+masterrecordid);
		sb.append(",ownerid="+ownerid);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",shippingstreet="+shippingstreet);
		sb.append(",noodlecrm__customerpriority__c="+noodlecrm__customerpriority__c);
		sb.append(",lastactivitydate="+String.valueOf(lastactivitydate));
		sb.append(",billingpostalcode="+billingpostalcode);
		sb.append(",billinglongitude="+String.valueOf(billinglongitude));
		sb.append(",noodlecrm__numberoflocations__c="+String.valueOf(noodlecrm__numberoflocations__c));
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",billingstate="+billingstate);
		sb.append(",jigsawcompanyid="+jigsawcompanyid);
		sb.append(",shippingcity="+shippingcity);
		sb.append(",shippinglatitude="+String.valueOf(shippinglatitude));
		sb.append(",createdbyid="+createdbyid);
		sb.append(",type="+type);
		sb.append(",website="+website);
		sb.append(",billingcountry="+billingcountry);
		sb.append(",description="+description);
		sb.append(",billinggeocodeaccuracy="+billinggeocodeaccuracy);
		sb.append(",photourl="+photourl);
		sb.append(",lastreferenceddate="+String.valueOf(lastreferenceddate));
		sb.append(",sicdesc="+sicdesc);
		sb.append(",industry="+industry);
		sb.append(",billingstreet="+billingstreet);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__school__c="+noodlecrm__school__c);
		sb.append(",noodlecrm__university__c="+noodlecrm__university__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String jigsaw;

				public String getJigsaw () {
					return this.jigsaw;
				}
				
			    public Double shippinglongitude;

				public Double getShippinglongitude () {
					return this.shippinglongitude;
				}
				
			    public String shippingstate;

				public String getShippingstate () {
					return this.shippingstate;
				}
				
			    public Integer numberofemployees;

				public Integer getNumberofemployees () {
					return this.numberofemployees;
				}
				
			    public String parentid;

				public String getParentid () {
					return this.parentid;
				}
				
			    public String shippingpostalcode;

				public String getShippingpostalcode () {
					return this.shippingpostalcode;
				}
				
			    public String billingcity;

				public String getBillingcity () {
					return this.billingcity;
				}
				
			    public Double billinglatitude;

				public Double getBillinglatitude () {
					return this.billinglatitude;
				}
				
			    public String accountsource;

				public String getAccountsource () {
					return this.accountsource;
				}
				
			    public String shippingcountry;

				public String getShippingcountry () {
					return this.shippingcountry;
				}
				
			    public java.util.Date lastvieweddate;

				public java.util.Date getLastvieweddate () {
					return this.lastvieweddate;
				}
				
			    public String shippinggeocodeaccuracy;

				public String getShippinggeocodeaccuracy () {
					return this.shippinggeocodeaccuracy;
				}
				
			    public String noodlecrm__sla__c;

				public String getNoodlecrm__sla__c () {
					return this.noodlecrm__sla__c;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String noodlecrm__upsellopportunity__c;

				public String getNoodlecrm__upsellopportunity__c () {
					return this.noodlecrm__upsellopportunity__c;
				}
				
			    public String noodlecrm__slaserialnumber__c;

				public String getNoodlecrm__slaserialnumber__c () {
					return this.noodlecrm__slaserialnumber__c;
				}
				
			    public java.util.Date noodlecrm__slaexpirationdate__c;

				public java.util.Date getNoodlecrm__slaexpirationdate__c () {
					return this.noodlecrm__slaexpirationdate__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String noodlecrm__active__c;

				public String getNoodlecrm__active__c () {
					return this.noodlecrm__active__c;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				
			    public String masterrecordid;

				public String getMasterrecordid () {
					return this.masterrecordid;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String shippingstreet;

				public String getShippingstreet () {
					return this.shippingstreet;
				}
				
			    public String noodlecrm__customerpriority__c;

				public String getNoodlecrm__customerpriority__c () {
					return this.noodlecrm__customerpriority__c;
				}
				
			    public java.util.Date lastactivitydate;

				public java.util.Date getLastactivitydate () {
					return this.lastactivitydate;
				}
				
			    public String billingpostalcode;

				public String getBillingpostalcode () {
					return this.billingpostalcode;
				}
				
			    public Double billinglongitude;

				public Double getBillinglongitude () {
					return this.billinglongitude;
				}
				
			    public Double noodlecrm__numberoflocations__c;

				public Double getNoodlecrm__numberoflocations__c () {
					return this.noodlecrm__numberoflocations__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String billingstate;

				public String getBillingstate () {
					return this.billingstate;
				}
				
			    public String jigsawcompanyid;

				public String getJigsawcompanyid () {
					return this.jigsawcompanyid;
				}
				
			    public String shippingcity;

				public String getShippingcity () {
					return this.shippingcity;
				}
				
			    public Double shippinglatitude;

				public Double getShippinglatitude () {
					return this.shippinglatitude;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String website;

				public String getWebsite () {
					return this.website;
				}
				
			    public String billingcountry;

				public String getBillingcountry () {
					return this.billingcountry;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String billinggeocodeaccuracy;

				public String getBillinggeocodeaccuracy () {
					return this.billinggeocodeaccuracy;
				}
				
			    public String photourl;

				public String getPhotourl () {
					return this.photourl;
				}
				
			    public java.util.Date lastreferenceddate;

				public java.util.Date getLastreferenceddate () {
					return this.lastreferenceddate;
				}
				
			    public String sicdesc;

				public String getSicdesc () {
					return this.sicdesc;
				}
				
			    public String industry;

				public String getIndustry () {
					return this.industry;
				}
				
			    public String billingstreet;

				public String getBillingstreet () {
					return this.billingstreet;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__school__c;

				public String getNoodlecrm__school__c () {
					return this.noodlecrm__school__c;
				}
				
			    public String noodlecrm__university__c;

				public String getNoodlecrm__university__c () {
					return this.noodlecrm__university__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.jigsaw = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.shippinglongitude = null;
           				} else {
           			    	this.shippinglongitude = dis.readDouble();
           				}
					
					this.shippingstate = readString(dis);
					
						this.numberofemployees = readInteger(dis);
					
					this.parentid = readString(dis);
					
					this.shippingpostalcode = readString(dis);
					
					this.billingcity = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.billinglatitude = null;
           				} else {
           			    	this.billinglatitude = dis.readDouble();
           				}
					
					this.accountsource = readString(dis);
					
					this.shippingcountry = readString(dis);
					
					this.lastvieweddate = readDate(dis);
					
					this.shippinggeocodeaccuracy = readString(dis);
					
					this.noodlecrm__sla__c = readString(dis);
					
					this.name = readString(dis);
					
					this.noodlecrm__upsellopportunity__c = readString(dis);
					
					this.noodlecrm__slaserialnumber__c = readString(dis);
					
					this.noodlecrm__slaexpirationdate__c = readDate(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__active__c = readString(dis);
					
					this.phone = readString(dis);
					
					this.masterrecordid = readString(dis);
					
					this.ownerid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.lastmodifiedbyid = readString(dis);
					
					this.shippingstreet = readString(dis);
					
					this.noodlecrm__customerpriority__c = readString(dis);
					
					this.lastactivitydate = readDate(dis);
					
					this.billingpostalcode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.billinglongitude = null;
           				} else {
           			    	this.billinglongitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__numberoflocations__c = null;
           				} else {
           			    	this.noodlecrm__numberoflocations__c = dis.readDouble();
           				}
					
					this.createddate = readDate(dis);
					
					this.billingstate = readString(dis);
					
					this.jigsawcompanyid = readString(dis);
					
					this.shippingcity = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.shippinglatitude = null;
           				} else {
           			    	this.shippinglatitude = dis.readDouble();
           				}
					
					this.createdbyid = readString(dis);
					
					this.type = readString(dis);
					
					this.website = readString(dis);
					
					this.billingcountry = readString(dis);
					
					this.description = readString(dis);
					
					this.billinggeocodeaccuracy = readString(dis);
					
					this.photourl = readString(dis);
					
					this.lastreferenceddate = readDate(dis);
					
					this.sicdesc = readString(dis);
					
					this.industry = readString(dis);
					
					this.billingstreet = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__school__c = readString(dis);
					
					this.noodlecrm__university__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.jigsaw,dos);
					
					// Double
				
						if(this.shippinglongitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.shippinglongitude);
		            	}
					
					// String
				
						writeString(this.shippingstate,dos);
					
					// Integer
				
						writeInteger(this.numberofemployees,dos);
					
					// String
				
						writeString(this.parentid,dos);
					
					// String
				
						writeString(this.shippingpostalcode,dos);
					
					// String
				
						writeString(this.billingcity,dos);
					
					// Double
				
						if(this.billinglatitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.billinglatitude);
		            	}
					
					// String
				
						writeString(this.accountsource,dos);
					
					// String
				
						writeString(this.shippingcountry,dos);
					
					// java.util.Date
				
						writeDate(this.lastvieweddate,dos);
					
					// String
				
						writeString(this.shippinggeocodeaccuracy,dos);
					
					// String
				
						writeString(this.noodlecrm__sla__c,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.noodlecrm__upsellopportunity__c,dos);
					
					// String
				
						writeString(this.noodlecrm__slaserialnumber__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__slaexpirationdate__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.noodlecrm__active__c,dos);
					
					// String
				
						writeString(this.phone,dos);
					
					// String
				
						writeString(this.masterrecordid,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.shippingstreet,dos);
					
					// String
				
						writeString(this.noodlecrm__customerpriority__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastactivitydate,dos);
					
					// String
				
						writeString(this.billingpostalcode,dos);
					
					// Double
				
						if(this.billinglongitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.billinglongitude);
		            	}
					
					// Double
				
						if(this.noodlecrm__numberoflocations__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__numberoflocations__c);
		            	}
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.billingstate,dos);
					
					// String
				
						writeString(this.jigsawcompanyid,dos);
					
					// String
				
						writeString(this.shippingcity,dos);
					
					// Double
				
						if(this.shippinglatitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.shippinglatitude);
		            	}
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.website,dos);
					
					// String
				
						writeString(this.billingcountry,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.billinggeocodeaccuracy,dos);
					
					// String
				
						writeString(this.photourl,dos);
					
					// java.util.Date
				
						writeDate(this.lastreferenceddate,dos);
					
					// String
				
						writeString(this.sicdesc,dos);
					
					// String
				
						writeString(this.industry,dos);
					
					// String
				
						writeString(this.billingstreet,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__school__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("jigsaw="+jigsaw);
		sb.append(",shippinglongitude="+String.valueOf(shippinglongitude));
		sb.append(",shippingstate="+shippingstate);
		sb.append(",numberofemployees="+String.valueOf(numberofemployees));
		sb.append(",parentid="+parentid);
		sb.append(",shippingpostalcode="+shippingpostalcode);
		sb.append(",billingcity="+billingcity);
		sb.append(",billinglatitude="+String.valueOf(billinglatitude));
		sb.append(",accountsource="+accountsource);
		sb.append(",shippingcountry="+shippingcountry);
		sb.append(",lastvieweddate="+String.valueOf(lastvieweddate));
		sb.append(",shippinggeocodeaccuracy="+shippinggeocodeaccuracy);
		sb.append(",noodlecrm__sla__c="+noodlecrm__sla__c);
		sb.append(",name="+name);
		sb.append(",noodlecrm__upsellopportunity__c="+noodlecrm__upsellopportunity__c);
		sb.append(",noodlecrm__slaserialnumber__c="+noodlecrm__slaserialnumber__c);
		sb.append(",noodlecrm__slaexpirationdate__c="+String.valueOf(noodlecrm__slaexpirationdate__c));
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__active__c="+noodlecrm__active__c);
		sb.append(",phone="+phone);
		sb.append(",masterrecordid="+masterrecordid);
		sb.append(",ownerid="+ownerid);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",shippingstreet="+shippingstreet);
		sb.append(",noodlecrm__customerpriority__c="+noodlecrm__customerpriority__c);
		sb.append(",lastactivitydate="+String.valueOf(lastactivitydate));
		sb.append(",billingpostalcode="+billingpostalcode);
		sb.append(",billinglongitude="+String.valueOf(billinglongitude));
		sb.append(",noodlecrm__numberoflocations__c="+String.valueOf(noodlecrm__numberoflocations__c));
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",billingstate="+billingstate);
		sb.append(",jigsawcompanyid="+jigsawcompanyid);
		sb.append(",shippingcity="+shippingcity);
		sb.append(",shippinglatitude="+String.valueOf(shippinglatitude));
		sb.append(",createdbyid="+createdbyid);
		sb.append(",type="+type);
		sb.append(",website="+website);
		sb.append(",billingcountry="+billingcountry);
		sb.append(",description="+description);
		sb.append(",billinggeocodeaccuracy="+billinggeocodeaccuracy);
		sb.append(",photourl="+photourl);
		sb.append(",lastreferenceddate="+String.valueOf(lastreferenceddate));
		sb.append(",sicdesc="+sicdesc);
		sb.append(",industry="+industry);
		sb.append(",billingstreet="+billingstreet);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__school__c="+noodlecrm__school__c);
		sb.append(",noodlecrm__university__c="+noodlecrm__university__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.staging_S3_dir + "account.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
                String[] headColutFileOutputDelimited_1=new String[51];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                            if(fileToDelete_tFileOutputDelimited_1.exists()) {
                                fileToDelete_tFileOutputDelimited_1.delete();
                            }
                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_1.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                        if(filetFileOutputDelimited_1.length()==0){
                                    headColutFileOutputDelimited_1[0]="jigsaw";
                                    headColutFileOutputDelimited_1[1]="shippinglongitude";
                                    headColutFileOutputDelimited_1[2]="shippingstate";
                                    headColutFileOutputDelimited_1[3]="numberofemployees";
                                    headColutFileOutputDelimited_1[4]="parentid";
                                    headColutFileOutputDelimited_1[5]="shippingpostalcode";
                                    headColutFileOutputDelimited_1[6]="billingcity";
                                    headColutFileOutputDelimited_1[7]="billinglatitude";
                                    headColutFileOutputDelimited_1[8]="accountsource";
                                    headColutFileOutputDelimited_1[9]="shippingcountry";
                                    headColutFileOutputDelimited_1[10]="lastvieweddate";
                                    headColutFileOutputDelimited_1[11]="shippinggeocodeaccuracy";
                                    headColutFileOutputDelimited_1[12]="noodlecrm__sla__c";
                                    headColutFileOutputDelimited_1[13]="name";
                                    headColutFileOutputDelimited_1[14]="noodlecrm__upsellopportunity__c";
                                    headColutFileOutputDelimited_1[15]="noodlecrm__slaserialnumber__c";
                                    headColutFileOutputDelimited_1[16]="noodlecrm__slaexpirationdate__c";
                                    headColutFileOutputDelimited_1[17]="lastmodifieddate";
                                    headColutFileOutputDelimited_1[18]="noodlecrm__active__c";
                                    headColutFileOutputDelimited_1[19]="phone";
                                    headColutFileOutputDelimited_1[20]="masterrecordid";
                                    headColutFileOutputDelimited_1[21]="ownerid";
                                    headColutFileOutputDelimited_1[22]="isdeleted";
                                    headColutFileOutputDelimited_1[23]="systemmodstamp";
                                    headColutFileOutputDelimited_1[24]="lastmodifiedbyid";
                                    headColutFileOutputDelimited_1[25]="shippingstreet";
                                    headColutFileOutputDelimited_1[26]="noodlecrm__customerpriority__c";
                                    headColutFileOutputDelimited_1[27]="lastactivitydate";
                                    headColutFileOutputDelimited_1[28]="billingpostalcode";
                                    headColutFileOutputDelimited_1[29]="billinglongitude";
                                    headColutFileOutputDelimited_1[30]="noodlecrm__numberoflocations__c";
                                    headColutFileOutputDelimited_1[31]="createddate";
                                    headColutFileOutputDelimited_1[32]="billingstate";
                                    headColutFileOutputDelimited_1[33]="jigsawcompanyid";
                                    headColutFileOutputDelimited_1[34]="shippingcity";
                                    headColutFileOutputDelimited_1[35]="shippinglatitude";
                                    headColutFileOutputDelimited_1[36]="createdbyid";
                                    headColutFileOutputDelimited_1[37]="type";
                                    headColutFileOutputDelimited_1[38]="website";
                                    headColutFileOutputDelimited_1[39]="billingcountry";
                                    headColutFileOutputDelimited_1[40]="description";
                                    headColutFileOutputDelimited_1[41]="billinggeocodeaccuracy";
                                    headColutFileOutputDelimited_1[42]="photourl";
                                    headColutFileOutputDelimited_1[43]="lastreferenceddate";
                                    headColutFileOutputDelimited_1[44]="sicdesc";
                                    headColutFileOutputDelimited_1[45]="industry";
                                    headColutFileOutputDelimited_1[46]="billingstreet";
                                    headColutFileOutputDelimited_1[47]="sfid";
                                    headColutFileOutputDelimited_1[48]="id";
                                    headColutFileOutputDelimited_1[49]="noodlecrm__school__c";
                                    headColutFileOutputDelimited_1[50]="noodlecrm__university__c";
                            CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
                            CsvWritertFileOutputDelimited_1.flush();
                        }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */




	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("account");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("account");
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_1 = 100000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
            try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                stmtClear_tDBOutput_1.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_1 + "\"");
            }
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"jigsaw\",\"shippinglongitude\",\"shippingstate\",\"numberofemployees\",\"parentid\",\"shippingpostalcode\",\"billingcity\",\"billinglatitude\",\"accountsource\",\"shippingcountry\",\"lastvieweddate\",\"shippinggeocodeaccuracy\",\"noodlecrm__sla__c\",\"name\",\"noodlecrm__upsellopportunity__c\",\"noodlecrm__slaserialnumber__c\",\"noodlecrm__slaexpirationdate__c\",\"lastmodifieddate\",\"noodlecrm__active__c\",\"phone\",\"masterrecordid\",\"ownerid\",\"isdeleted\",\"systemmodstamp\",\"lastmodifiedbyid\",\"shippingstreet\",\"noodlecrm__customerpriority__c\",\"lastactivitydate\",\"billingpostalcode\",\"billinglongitude\",\"noodlecrm__numberoflocations__c\",\"createddate\",\"billingstate\",\"jigsawcompanyid\",\"shippingcity\",\"shippinglatitude\",\"createdbyid\",\"type\",\"website\",\"billingcountry\",\"description\",\"billinggeocodeaccuracy\",\"photourl\",\"lastreferenceddate\",\"sicdesc\",\"industry\",\"billingstreet\",\"sfid\",\"id\",\"noodlecrm__school__c\",\"noodlecrm__university__c\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT jigsaw\n       , shippinglongitude\n       , shippingstate\n       , numberofemployees\n       , parentid\n     "
+"  , shippingpostalcode\n       , billingcity\n       , billinglatitude\n       , accountsource\n       , shippingcountry"
+"\n       , lastvieweddate\n       , shippinggeocodeaccuracy\n       , noodlecrm__sla__c\n       , name\n       , noodlec"
+"rm__upsellopportunity__c\n       , noodlecrm__slaserialnumber__c\n       , noodlecrm__slaexpirationdate__c\n       , las"
+"tmodifieddate\n       , noodlecrm__active__c\n       , phone\n       , masterrecordid\n       , ownerid\n       , isdele"
+"ted\n       , systemmodstamp\n       , lastmodifiedbyid\n       , shippingstreet\n       , noodlecrm__customerpriority__"
+"c\n       , lastactivitydate\n       , billingpostalcode\n       , billinglongitude\n       , noodlecrm__numberoflocatio"
+"ns__c\n       , createddate\n       , billingstate\n       , jigsawcompanyid\n       , shippingcity\n       , shippingla"
+"titude\n       , createdbyid\n       , type\n       , website\n       , billingcountry\n       , description\n       , b"
+"illinggeocodeaccuracy\n       , photourl\n       , lastreferenceddate\n       , sicdesc\n       , industry\n       , bil"
+"lingstreet\n       , sfid\n       , id\n       , noodlecrm__school__c\n       , noodlecrm__university__c\n FROM "+context.university_code+".account ";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.jigsaw = null;
							} else {
	                         		
        	row1.jigsaw = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.shippinglongitude = null;
							} else {
	                         		
            row1.shippinglongitude = rs_tDBInput_1.getDouble(2);
            if(rs_tDBInput_1.wasNull()){
                    row1.shippinglongitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.shippingstate = null;
							} else {
	                         		
        	row1.shippingstate = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.numberofemployees = null;
							} else {
		                          
            row1.numberofemployees = rs_tDBInput_1.getInt(4);
            if(rs_tDBInput_1.wasNull()){
                    row1.numberofemployees = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.parentid = null;
							} else {
	                         		
        	row1.parentid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.shippingpostalcode = null;
							} else {
	                         		
        	row1.shippingpostalcode = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.billingcity = null;
							} else {
	                         		
        	row1.billingcity = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.billinglatitude = null;
							} else {
	                         		
            row1.billinglatitude = rs_tDBInput_1.getDouble(8);
            if(rs_tDBInput_1.wasNull()){
                    row1.billinglatitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.accountsource = null;
							} else {
	                         		
        	row1.accountsource = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.shippingcountry = null;
							} else {
	                         		
        	row1.shippingcountry = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.lastvieweddate = null;
							} else {
										
			row1.lastvieweddate = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 11);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.shippinggeocodeaccuracy = null;
							} else {
	                         		
        	row1.shippinggeocodeaccuracy = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.noodlecrm__sla__c = null;
							} else {
	                         		
        	row1.noodlecrm__sla__c = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.name = null;
							} else {
	                         		
        	row1.name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.noodlecrm__upsellopportunity__c = null;
							} else {
	                         		
        	row1.noodlecrm__upsellopportunity__c = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.noodlecrm__slaserialnumber__c = null;
							} else {
	                         		
        	row1.noodlecrm__slaserialnumber__c = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.noodlecrm__slaexpirationdate__c = null;
							} else {
										
			row1.noodlecrm__slaexpirationdate__c = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 17);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.lastmodifieddate = null;
							} else {
										
			row1.lastmodifieddate = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 18);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.noodlecrm__active__c = null;
							} else {
	                         		
        	row1.noodlecrm__active__c = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.phone = null;
							} else {
	                         		
        	row1.phone = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.masterrecordid = null;
							} else {
	                         		
        	row1.masterrecordid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.ownerid = null;
							} else {
	                         		
        	row1.ownerid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.isdeleted = null;
							} else {
	                         		
            row1.isdeleted = rs_tDBInput_1.getBoolean(23);
            if(rs_tDBInput_1.wasNull()){
                    row1.isdeleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.systemmodstamp = null;
							} else {
										
			row1.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 24);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.lastmodifiedbyid = null;
							} else {
	                         		
        	row1.lastmodifiedbyid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.shippingstreet = null;
							} else {
	                         		
        	row1.shippingstreet = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.noodlecrm__customerpriority__c = null;
							} else {
	                         		
        	row1.noodlecrm__customerpriority__c = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.lastactivitydate = null;
							} else {
										
			row1.lastactivitydate = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 28);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.billingpostalcode = null;
							} else {
	                         		
        	row1.billingpostalcode = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.billinglongitude = null;
							} else {
	                         		
            row1.billinglongitude = rs_tDBInput_1.getDouble(30);
            if(rs_tDBInput_1.wasNull()){
                    row1.billinglongitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.noodlecrm__numberoflocations__c = null;
							} else {
	                         		
            row1.noodlecrm__numberoflocations__c = rs_tDBInput_1.getDouble(31);
            if(rs_tDBInput_1.wasNull()){
                    row1.noodlecrm__numberoflocations__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.createddate = null;
							} else {
										
			row1.createddate = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 32);
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.billingstate = null;
							} else {
	                         		
        	row1.billingstate = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.jigsawcompanyid = null;
							} else {
	                         		
        	row1.jigsawcompanyid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.shippingcity = null;
							} else {
	                         		
        	row1.shippingcity = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.shippinglatitude = null;
							} else {
	                         		
            row1.shippinglatitude = rs_tDBInput_1.getDouble(36);
            if(rs_tDBInput_1.wasNull()){
                    row1.shippinglatitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.createdbyid = null;
							} else {
	                         		
        	row1.createdbyid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.type = null;
							} else {
	                         		
        	row1.type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.website = null;
							} else {
	                         		
        	row1.website = routines.system.JDBCUtil.getString(rs_tDBInput_1, 39, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.billingcountry = null;
							} else {
	                         		
        	row1.billingcountry = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.description = null;
							} else {
	                         		
        	row1.description = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.billinggeocodeaccuracy = null;
							} else {
	                         		
        	row1.billinggeocodeaccuracy = routines.system.JDBCUtil.getString(rs_tDBInput_1, 42, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.photourl = null;
							} else {
	                         		
        	row1.photourl = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.lastreferenceddate = null;
							} else {
										
			row1.lastreferenceddate = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 44);
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.sicdesc = null;
							} else {
	                         		
        	row1.sicdesc = routines.system.JDBCUtil.getString(rs_tDBInput_1, 45, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.industry = null;
							} else {
	                         		
        	row1.industry = routines.system.JDBCUtil.getString(rs_tDBInput_1, 46, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.billingstreet = null;
							} else {
	                         		
        	row1.billingstreet = routines.system.JDBCUtil.getString(rs_tDBInput_1, 47, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.sfid = null;
							} else {
	                         		
        	row1.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 48, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.id = 0;
							} else {
		                          
            row1.id = rs_tDBInput_1.getInt(49);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.noodlecrm__school__c = null;
							} else {
	                         		
        	row1.noodlecrm__school__c = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.noodlecrm__university__c = null;
							} else {
	                         		
        	row1.noodlecrm__university__c = routines.system.JDBCUtil.getString(rs_tDBInput_1, 51, true);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;
out2 = null;


// # Output table : 'out1'
out1_tmp.jigsaw = row1.jigsaw ;
out1_tmp.shippinglongitude = row1.shippinglongitude ;
out1_tmp.shippingstate = row1.shippingstate ;
out1_tmp.numberofemployees = row1.numberofemployees ;
out1_tmp.parentid = row1.parentid ;
out1_tmp.shippingpostalcode = row1.shippingpostalcode ;
out1_tmp.billingcity = row1.billingcity ;
out1_tmp.billinglatitude = row1.billinglatitude ;
out1_tmp.accountsource = row1.accountsource ;
out1_tmp.shippingcountry = row1.shippingcountry ;
out1_tmp.lastvieweddate = row1.lastvieweddate ;
out1_tmp.shippinggeocodeaccuracy = row1.shippinggeocodeaccuracy ;
out1_tmp.noodlecrm__sla__c = row1.noodlecrm__sla__c ;
out1_tmp.name = row1.name ;
out1_tmp.noodlecrm__upsellopportunity__c = row1.noodlecrm__upsellopportunity__c ;
out1_tmp.noodlecrm__slaserialnumber__c = row1.noodlecrm__slaserialnumber__c ;
out1_tmp.noodlecrm__slaexpirationdate__c = row1.noodlecrm__slaexpirationdate__c ;
out1_tmp.lastmodifieddate = row1.lastmodifieddate ;
out1_tmp.noodlecrm__active__c = row1.noodlecrm__active__c ;
out1_tmp.phone = row1.phone ;
out1_tmp.masterrecordid = row1.masterrecordid ;
out1_tmp.ownerid = row1.ownerid ;
out1_tmp.isdeleted = row1.isdeleted ;
out1_tmp.systemmodstamp = row1.systemmodstamp ;
out1_tmp.lastmodifiedbyid = row1.lastmodifiedbyid ;
out1_tmp.shippingstreet = row1.shippingstreet ;
out1_tmp.noodlecrm__customerpriority__c = row1.noodlecrm__customerpriority__c ;
out1_tmp.lastactivitydate = row1.lastactivitydate ;
out1_tmp.billingpostalcode = row1.billingpostalcode ;
out1_tmp.billinglongitude = row1.billinglongitude ;
out1_tmp.noodlecrm__numberoflocations__c = row1.noodlecrm__numberoflocations__c ;
out1_tmp.createddate = row1.createddate ;
out1_tmp.billingstate = row1.billingstate ;
out1_tmp.jigsawcompanyid = row1.jigsawcompanyid ;
out1_tmp.shippingcity = row1.shippingcity ;
out1_tmp.shippinglatitude = row1.shippinglatitude ;
out1_tmp.createdbyid = row1.createdbyid ;
out1_tmp.type = row1.type ;
out1_tmp.website = row1.website ;
out1_tmp.billingcountry = row1.billingcountry ;
out1_tmp.description = row1.description ;
out1_tmp.billinggeocodeaccuracy = row1.billinggeocodeaccuracy ;
out1_tmp.photourl = row1.photourl ;
out1_tmp.lastreferenceddate = row1.lastreferenceddate ;
out1_tmp.sicdesc = row1.sicdesc ;
out1_tmp.industry = row1.industry ;
out1_tmp.billingstreet = row1.billingstreet ;
out1_tmp.sfid = row1.sfid ;
out1_tmp.id = row1.id ;
out1_tmp.noodlecrm__school__c = row1.noodlecrm__school__c ;
out1_tmp.noodlecrm__university__c = row1.noodlecrm__university__c ;
out1 = out1_tmp;

// # Output table : 'out2'
out2_tmp.jigsaw = row1.jigsaw ;
out2_tmp.shippinglongitude = row1.shippinglongitude ;
out2_tmp.shippingstate = row1.shippingstate ;
out2_tmp.numberofemployees = row1.numberofemployees ;
out2_tmp.parentid = row1.parentid ;
out2_tmp.shippingpostalcode = row1.shippingpostalcode ;
out2_tmp.billingcity = row1.billingcity ;
out2_tmp.billinglatitude = row1.billinglatitude ;
out2_tmp.accountsource = row1.accountsource ;
out2_tmp.shippingcountry = row1.shippingcountry ;
out2_tmp.lastvieweddate = row1.lastvieweddate ;
out2_tmp.shippinggeocodeaccuracy = row1.shippinggeocodeaccuracy ;
out2_tmp.noodlecrm__sla__c = row1.noodlecrm__sla__c ;
out2_tmp.name = row1.name ;
out2_tmp.noodlecrm__upsellopportunity__c = row1.noodlecrm__upsellopportunity__c ;
out2_tmp.noodlecrm__slaserialnumber__c = row1.noodlecrm__slaserialnumber__c ;
out2_tmp.noodlecrm__slaexpirationdate__c = row1.noodlecrm__slaexpirationdate__c ;
out2_tmp.lastmodifieddate = row1.lastmodifieddate ;
out2_tmp.noodlecrm__active__c = row1.noodlecrm__active__c ;
out2_tmp.phone = row1.phone ;
out2_tmp.masterrecordid = row1.masterrecordid ;
out2_tmp.ownerid = row1.ownerid ;
out2_tmp.isdeleted = row1.isdeleted ;
out2_tmp.systemmodstamp = row1.systemmodstamp ;
out2_tmp.lastmodifiedbyid = row1.lastmodifiedbyid ;
out2_tmp.shippingstreet = row1.shippingstreet ;
out2_tmp.noodlecrm__customerpriority__c = row1.noodlecrm__customerpriority__c ;
out2_tmp.lastactivitydate = row1.lastactivitydate ;
out2_tmp.billingpostalcode = row1.billingpostalcode ;
out2_tmp.billinglongitude = row1.billinglongitude ;
out2_tmp.noodlecrm__numberoflocations__c = row1.noodlecrm__numberoflocations__c ;
out2_tmp.createddate = row1.createddate ;
out2_tmp.billingstate = row1.billingstate ;
out2_tmp.jigsawcompanyid = row1.jigsawcompanyid ;
out2_tmp.shippingcity = row1.shippingcity ;
out2_tmp.shippinglatitude = row1.shippinglatitude ;
out2_tmp.createdbyid = row1.createdbyid ;
out2_tmp.type = row1.type ;
out2_tmp.website = row1.website ;
out2_tmp.billingcountry = row1.billingcountry ;
out2_tmp.description = row1.description ;
out2_tmp.billinggeocodeaccuracy = row1.billinggeocodeaccuracy ;
out2_tmp.photourl = row1.photourl ;
out2_tmp.lastreferenceddate = row1.lastreferenceddate ;
out2_tmp.sicdesc = row1.sicdesc ;
out2_tmp.industry = row1.industry ;
out2_tmp.billingstreet = row1.billingstreet ;
out2_tmp.sfid = row1.sfid ;
out2_tmp.id = row1.id ;
out2_tmp.noodlecrm__school__c = row1.noodlecrm__school__c ;
out2_tmp.noodlecrm__university__c = row1.noodlecrm__university__c ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					


                        String[] rowtFileOutputDelimited_1=new String[51];
                            rowtFileOutputDelimited_1[0]=out1.jigsaw == null ? null : out1.jigsaw;
                            rowtFileOutputDelimited_1[1]=out1.shippinglongitude == null ? null : String.valueOf(out1.shippinglongitude);
                            rowtFileOutputDelimited_1[2]=out1.shippingstate == null ? null : out1.shippingstate;
                            rowtFileOutputDelimited_1[3]=out1.numberofemployees == null ? null : String.valueOf(out1.numberofemployees);
                            rowtFileOutputDelimited_1[4]=out1.parentid == null ? null : out1.parentid;
                            rowtFileOutputDelimited_1[5]=out1.shippingpostalcode == null ? null : out1.shippingpostalcode;
                            rowtFileOutputDelimited_1[6]=out1.billingcity == null ? null : out1.billingcity;
                            rowtFileOutputDelimited_1[7]=out1.billinglatitude == null ? null : String.valueOf(out1.billinglatitude);
                            rowtFileOutputDelimited_1[8]=out1.accountsource == null ? null : out1.accountsource;
                            rowtFileOutputDelimited_1[9]=out1.shippingcountry == null ? null : out1.shippingcountry;
                            rowtFileOutputDelimited_1[10]=out1.lastvieweddate == null ? null : FormatterUtils.format_Date(out1.lastvieweddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_1[11]=out1.shippinggeocodeaccuracy == null ? null : out1.shippinggeocodeaccuracy;
                            rowtFileOutputDelimited_1[12]=out1.noodlecrm__sla__c == null ? null : out1.noodlecrm__sla__c;
                            rowtFileOutputDelimited_1[13]=out1.name == null ? null : out1.name;
                            rowtFileOutputDelimited_1[14]=out1.noodlecrm__upsellopportunity__c == null ? null : out1.noodlecrm__upsellopportunity__c;
                            rowtFileOutputDelimited_1[15]=out1.noodlecrm__slaserialnumber__c == null ? null : out1.noodlecrm__slaserialnumber__c;
                            rowtFileOutputDelimited_1[16]=out1.noodlecrm__slaexpirationdate__c == null ? null : FormatterUtils.format_Date(out1.noodlecrm__slaexpirationdate__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_1[17]=out1.lastmodifieddate == null ? null : FormatterUtils.format_Date(out1.lastmodifieddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_1[18]=out1.noodlecrm__active__c == null ? null : out1.noodlecrm__active__c;
                            rowtFileOutputDelimited_1[19]=out1.phone == null ? null : out1.phone;
                            rowtFileOutputDelimited_1[20]=out1.masterrecordid == null ? null : out1.masterrecordid;
                            rowtFileOutputDelimited_1[21]=out1.ownerid == null ? null : out1.ownerid;
                            rowtFileOutputDelimited_1[22]=out1.isdeleted == null ? null : String.valueOf(out1.isdeleted);
                            rowtFileOutputDelimited_1[23]=out1.systemmodstamp == null ? null : FormatterUtils.format_Date(out1.systemmodstamp, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_1[24]=out1.lastmodifiedbyid == null ? null : out1.lastmodifiedbyid;
                            rowtFileOutputDelimited_1[25]=out1.shippingstreet == null ? null : out1.shippingstreet;
                            rowtFileOutputDelimited_1[26]=out1.noodlecrm__customerpriority__c == null ? null : out1.noodlecrm__customerpriority__c;
                            rowtFileOutputDelimited_1[27]=out1.lastactivitydate == null ? null : FormatterUtils.format_Date(out1.lastactivitydate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_1[28]=out1.billingpostalcode == null ? null : out1.billingpostalcode;
                            rowtFileOutputDelimited_1[29]=out1.billinglongitude == null ? null : String.valueOf(out1.billinglongitude);
                            rowtFileOutputDelimited_1[30]=out1.noodlecrm__numberoflocations__c == null ? null : String.valueOf(out1.noodlecrm__numberoflocations__c);
                            rowtFileOutputDelimited_1[31]=out1.createddate == null ? null : FormatterUtils.format_Date(out1.createddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_1[32]=out1.billingstate == null ? null : out1.billingstate;
                            rowtFileOutputDelimited_1[33]=out1.jigsawcompanyid == null ? null : out1.jigsawcompanyid;
                            rowtFileOutputDelimited_1[34]=out1.shippingcity == null ? null : out1.shippingcity;
                            rowtFileOutputDelimited_1[35]=out1.shippinglatitude == null ? null : String.valueOf(out1.shippinglatitude);
                            rowtFileOutputDelimited_1[36]=out1.createdbyid == null ? null : out1.createdbyid;
                            rowtFileOutputDelimited_1[37]=out1.type == null ? null : out1.type;
                            rowtFileOutputDelimited_1[38]=out1.website == null ? null : out1.website;
                            rowtFileOutputDelimited_1[39]=out1.billingcountry == null ? null : out1.billingcountry;
                            rowtFileOutputDelimited_1[40]=out1.description == null ? null : out1.description;
                            rowtFileOutputDelimited_1[41]=out1.billinggeocodeaccuracy == null ? null : out1.billinggeocodeaccuracy;
                            rowtFileOutputDelimited_1[42]=out1.photourl == null ? null : out1.photourl;
                            rowtFileOutputDelimited_1[43]=out1.lastreferenceddate == null ? null : FormatterUtils.format_Date(out1.lastreferenceddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_1[44]=out1.sicdesc == null ? null : out1.sicdesc;
                            rowtFileOutputDelimited_1[45]=out1.industry == null ? null : out1.industry;
                            rowtFileOutputDelimited_1[46]=out1.billingstreet == null ? null : out1.billingstreet;
                            rowtFileOutputDelimited_1[47]=out1.sfid == null ? null : out1.sfid;
                            rowtFileOutputDelimited_1[48]=out1.id == null ? null : String.valueOf(out1.id);
                            rowtFileOutputDelimited_1[49]=out1.noodlecrm__school__c == null ? null : out1.noodlecrm__school__c;
                            rowtFileOutputDelimited_1[50]=out1.noodlecrm__university__c == null ? null : out1.noodlecrm__university__c;
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "out1"




// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(out2.jigsaw == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, out2.jigsaw);
}

                    if(out2.shippinglongitude == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(2, out2.shippinglongitude);
}

                    if(out2.shippingstate == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, out2.shippingstate);
}

                    if(out2.numberofemployees == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(4, out2.numberofemployees);
}

                    if(out2.parentid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, out2.parentid);
}

                    if(out2.shippingpostalcode == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, out2.shippingpostalcode);
}

                    if(out2.billingcity == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, out2.billingcity);
}

                    if(out2.billinglatitude == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(8, out2.billinglatitude);
}

                    if(out2.accountsource == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, out2.accountsource);
}

                    if(out2.shippingcountry == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, out2.shippingcountry);
}

                    if(out2.lastvieweddate != null) {
pstmt_tDBOutput_1.setTimestamp(11, new java.sql.Timestamp(out2.lastvieweddate.getTime()));
} else {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.TIMESTAMP);
}

                    if(out2.shippinggeocodeaccuracy == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, out2.shippinggeocodeaccuracy);
}

                    if(out2.noodlecrm__sla__c == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, out2.noodlecrm__sla__c);
}

                    if(out2.name == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, out2.name);
}

                    if(out2.noodlecrm__upsellopportunity__c == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, out2.noodlecrm__upsellopportunity__c);
}

                    if(out2.noodlecrm__slaserialnumber__c == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, out2.noodlecrm__slaserialnumber__c);
}

                    if(out2.noodlecrm__slaexpirationdate__c != null) {
pstmt_tDBOutput_1.setTimestamp(17, new java.sql.Timestamp(out2.noodlecrm__slaexpirationdate__c.getTime()));
} else {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.TIMESTAMP);
}

                    if(out2.lastmodifieddate != null) {
pstmt_tDBOutput_1.setTimestamp(18, new java.sql.Timestamp(out2.lastmodifieddate.getTime()));
} else {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.TIMESTAMP);
}

                    if(out2.noodlecrm__active__c == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, out2.noodlecrm__active__c);
}

                    if(out2.phone == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(20, out2.phone);
}

                    if(out2.masterrecordid == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(21, out2.masterrecordid);
}

                    if(out2.ownerid == null) {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(22, out2.ownerid);
}

                    if(out2.isdeleted == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_1.setBoolean(23, out2.isdeleted);
}

                    if(out2.systemmodstamp != null) {
pstmt_tDBOutput_1.setTimestamp(24, new java.sql.Timestamp(out2.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.TIMESTAMP);
}

                    if(out2.lastmodifiedbyid == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(25, out2.lastmodifiedbyid);
}

                    if(out2.shippingstreet == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, out2.shippingstreet);
}

                    if(out2.noodlecrm__customerpriority__c == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(27, out2.noodlecrm__customerpriority__c);
}

                    if(out2.lastactivitydate != null) {
pstmt_tDBOutput_1.setTimestamp(28, new java.sql.Timestamp(out2.lastactivitydate.getTime()));
} else {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.TIMESTAMP);
}

                    if(out2.billingpostalcode == null) {
pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(29, out2.billingpostalcode);
}

                    if(out2.billinglongitude == null) {
pstmt_tDBOutput_1.setNull(30, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(30, out2.billinglongitude);
}

                    if(out2.noodlecrm__numberoflocations__c == null) {
pstmt_tDBOutput_1.setNull(31, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(31, out2.noodlecrm__numberoflocations__c);
}

                    if(out2.createddate != null) {
pstmt_tDBOutput_1.setTimestamp(32, new java.sql.Timestamp(out2.createddate.getTime()));
} else {
pstmt_tDBOutput_1.setNull(32, java.sql.Types.TIMESTAMP);
}

                    if(out2.billingstate == null) {
pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(33, out2.billingstate);
}

                    if(out2.jigsawcompanyid == null) {
pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(34, out2.jigsawcompanyid);
}

                    if(out2.shippingcity == null) {
pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(35, out2.shippingcity);
}

                    if(out2.shippinglatitude == null) {
pstmt_tDBOutput_1.setNull(36, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(36, out2.shippinglatitude);
}

                    if(out2.createdbyid == null) {
pstmt_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(37, out2.createdbyid);
}

                    if(out2.type == null) {
pstmt_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(38, out2.type);
}

                    if(out2.website == null) {
pstmt_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(39, out2.website);
}

                    if(out2.billingcountry == null) {
pstmt_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(40, out2.billingcountry);
}

                    if(out2.description == null) {
pstmt_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(41, out2.description);
}

                    if(out2.billinggeocodeaccuracy == null) {
pstmt_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(42, out2.billinggeocodeaccuracy);
}

                    if(out2.photourl == null) {
pstmt_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(43, out2.photourl);
}

                    if(out2.lastreferenceddate != null) {
pstmt_tDBOutput_1.setTimestamp(44, new java.sql.Timestamp(out2.lastreferenceddate.getTime()));
} else {
pstmt_tDBOutput_1.setNull(44, java.sql.Types.TIMESTAMP);
}

                    if(out2.sicdesc == null) {
pstmt_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(45, out2.sicdesc);
}

                    if(out2.industry == null) {
pstmt_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(46, out2.industry);
}

                    if(out2.billingstreet == null) {
pstmt_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(47, out2.billingstreet);
}

                    if(out2.sfid == null) {
pstmt_tDBOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(48, out2.sfid);
}

                    if(out2.id == null) {
pstmt_tDBOutput_1.setNull(49, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(49, out2.id);
}

                    if(out2.noodlecrm__school__c == null) {
pstmt_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(50, out2.noodlecrm__school__c);
}

                    if(out2.noodlecrm__university__c == null) {
pstmt_tDBOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(51, out2.noodlecrm__university__c);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
            if(!whetherReject_tDBOutput_1) {
            }
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk34", 0, "ok");
				}
				tFileArchive_1Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */




	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk35", 0, "ok");
				}
				tJava_6Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */




	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_1", false);
		start_Hash.put("tFileArchive_1", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_1";

	
		int tos_count_tFileArchive_1 = 0;
		

 



/**
 * [tFileArchive_1 begin ] stop
 */
	
	/**
	 * [tFileArchive_1 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

	

		String sourceFile_tFileArchive_1 = context.staging_S3_dir + "account.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_1), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_1 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_1 = context.staging_S3_dir + "account.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_1 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_1, zipFile_tFileArchive_1);
    zip_tFileArchive_1.setOverwriteExistTargetZip(true);
	zip_tFileArchive_1.setMakeTargetDir(true);
	zip_tFileArchive_1.setCompressLevel(9);
	zip_tFileArchive_1.setArchiveFormat("gzip");
	zip_tFileArchive_1.setAllFiles(true);
	
	
		zip_tFileArchive_1.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_1_ARCHIVE_FILEPATH",zipFile_tFileArchive_1);
   
   globalMap.put("tFileArchive_1_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_1).getName());

   zip_tFileArchive_1.doZip();


 


	tos_count_tFileArchive_1++;

/**
 * [tFileArchive_1 main ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_1 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 

ok_Hash.put("tFileArchive_1", true);
end_Hash.put("tFileArchive_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk36", 0, "ok");
				}
				tS3Put_1Process(globalMap);



/**
 * [tFileArchive_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_1 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = context.nd_s3_data_lake_path_sfdc +"/account/latest/university_id="+context.university_code+"/account.csv.gz";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = context.staging_S3_dir + "account.csv.gz";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		sourceStream_tS3Put_1.read(buffer_tS3Put_1);
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.getLength(buffer_tS3Put_1);
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				

    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = sourceStream_tS3Put_1.read(probeAvailability_tS3Put_1) != -1;
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	sourceStream_tS3Put_1.read(buffer_tS3Put_1,1,partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	curPartSize_tS3Put_1 = streamUtil_tS3Put_1.getLength(buffer_tS3Put_1);
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
		
			throw(e_tS3Put_1);
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk37", 0, "ok");
				}
				tJava_5Process(globalMap);



/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";

	
		int tos_count_tJava_5 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	

public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";

	
		int tos_count_tJava_6 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_1_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");
 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());




/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String lastname;

				public String getLastname () {
					return this.lastname;
				}
				
			    public String mailingpostalcode;

				public String getMailingpostalcode () {
					return this.mailingpostalcode;
				}
				
			    public String mailingstate;

				public String getMailingstate () {
					return this.mailingstate;
				}
				
			    public String mailingcountry;

				public String getMailingcountry () {
					return this.mailingcountry;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String mobilephone;

				public String getMobilephone () {
					return this.mobilephone;
				}
				
			    public String mailingstreet;

				public String getMailingstreet () {
					return this.mailingstreet;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public String homephone;

				public String getHomephone () {
					return this.homephone;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String targetx_srmb__gender__c;

				public String getTargetx_srmb__gender__c () {
					return this.targetx_srmb__gender__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String mailingcity;

				public String getMailingcity () {
					return this.mailingcity;
				}
				
			    public String firstname;

				public String getFirstname () {
					return this.firstname;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String hed__universityemail__c;

				public String getHed__universityemail__c () {
					return this.hed__universityemail__c;
				}
				
			    public String noodlecrm__university_sis_id__c;

				public String getNoodlecrm__university_sis_id__c () {
					return this.noodlecrm__university_sis_id__c;
				}
				
			    public String targetx_srmb__citizenship__c;

				public String getTargetx_srmb__citizenship__c () {
					return this.targetx_srmb__citizenship__c;
				}
				
			    public java.util.Date birthdate;

				public java.util.Date getBirthdate () {
					return this.birthdate;
				}
				
			    public String hed__workphone__c;

				public String getHed__workphone__c () {
					return this.hed__workphone__c;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out3Struct other = (out3Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out3Struct other) {

		other.lastname = this.lastname;
	            other.mailingpostalcode = this.mailingpostalcode;
	            other.mailingstate = this.mailingstate;
	            other.mailingcountry = this.mailingcountry;
	            other.name = this.name;
	            other.mobilephone = this.mobilephone;
	            other.mailingstreet = this.mailingstreet;
	            other.isdeleted = this.isdeleted;
	            other.homephone = this.homephone;
	            other.systemmodstamp = this.systemmodstamp;
	            other.targetx_srmb__gender__c = this.targetx_srmb__gender__c;
	            other.createddate = this.createddate;
	            other.mailingcity = this.mailingcity;
	            other.firstname = this.firstname;
	            other.email = this.email;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            other.hed__universityemail__c = this.hed__universityemail__c;
	            other.noodlecrm__university_sis_id__c = this.noodlecrm__university_sis_id__c;
	            other.targetx_srmb__citizenship__c = this.targetx_srmb__citizenship__c;
	            other.birthdate = this.birthdate;
	            other.hed__workphone__c = this.hed__workphone__c;
	            other.phone = this.phone;
	            
	}

	public void copyKeysDataTo(out3Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.lastname = readString(dis);
					
					this.mailingpostalcode = readString(dis);
					
					this.mailingstate = readString(dis);
					
					this.mailingcountry = readString(dis);
					
					this.name = readString(dis);
					
					this.mobilephone = readString(dis);
					
					this.mailingstreet = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.homephone = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.targetx_srmb__gender__c = readString(dis);
					
					this.createddate = readDate(dis);
					
					this.mailingcity = readString(dis);
					
					this.firstname = readString(dis);
					
					this.email = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.hed__universityemail__c = readString(dis);
					
					this.noodlecrm__university_sis_id__c = readString(dis);
					
					this.targetx_srmb__citizenship__c = readString(dis);
					
					this.birthdate = readDate(dis);
					
					this.hed__workphone__c = readString(dis);
					
					this.phone = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.lastname,dos);
					
					// String
				
						writeString(this.mailingpostalcode,dos);
					
					// String
				
						writeString(this.mailingstate,dos);
					
					// String
				
						writeString(this.mailingcountry,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.mobilephone,dos);
					
					// String
				
						writeString(this.mailingstreet,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// String
				
						writeString(this.homephone,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.targetx_srmb__gender__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.mailingcity,dos);
					
					// String
				
						writeString(this.firstname,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.hed__universityemail__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university_sis_id__c,dos);
					
					// String
				
						writeString(this.targetx_srmb__citizenship__c,dos);
					
					// java.util.Date
				
						writeDate(this.birthdate,dos);
					
					// String
				
						writeString(this.hed__workphone__c,dos);
					
					// String
				
						writeString(this.phone,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("lastname="+lastname);
		sb.append(",mailingpostalcode="+mailingpostalcode);
		sb.append(",mailingstate="+mailingstate);
		sb.append(",mailingcountry="+mailingcountry);
		sb.append(",name="+name);
		sb.append(",mobilephone="+mobilephone);
		sb.append(",mailingstreet="+mailingstreet);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",homephone="+homephone);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",targetx_srmb__gender__c="+targetx_srmb__gender__c);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",mailingcity="+mailingcity);
		sb.append(",firstname="+firstname);
		sb.append(",email="+email);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",hed__universityemail__c="+hed__universityemail__c);
		sb.append(",noodlecrm__university_sis_id__c="+noodlecrm__university_sis_id__c);
		sb.append(",targetx_srmb__citizenship__c="+targetx_srmb__citizenship__c);
		sb.append(",birthdate="+String.valueOf(birthdate));
		sb.append(",hed__workphone__c="+hed__workphone__c);
		sb.append(",phone="+phone);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String lastname;

				public String getLastname () {
					return this.lastname;
				}
				
			    public String mailingpostalcode;

				public String getMailingpostalcode () {
					return this.mailingpostalcode;
				}
				
			    public String mailingstate;

				public String getMailingstate () {
					return this.mailingstate;
				}
				
			    public String mailingcountry;

				public String getMailingcountry () {
					return this.mailingcountry;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String mobilephone;

				public String getMobilephone () {
					return this.mobilephone;
				}
				
			    public String mailingstreet;

				public String getMailingstreet () {
					return this.mailingstreet;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public String homephone;

				public String getHomephone () {
					return this.homephone;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String targetx_srmb__gender__c;

				public String getTargetx_srmb__gender__c () {
					return this.targetx_srmb__gender__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String mailingcity;

				public String getMailingcity () {
					return this.mailingcity;
				}
				
			    public String firstname;

				public String getFirstname () {
					return this.firstname;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String hed__universityemail__c;

				public String getHed__universityemail__c () {
					return this.hed__universityemail__c;
				}
				
			    public String noodlecrm__university_sis_id__c;

				public String getNoodlecrm__university_sis_id__c () {
					return this.noodlecrm__university_sis_id__c;
				}
				
			    public String targetx_srmb__citizenship__c;

				public String getTargetx_srmb__citizenship__c () {
					return this.targetx_srmb__citizenship__c;
				}
				
			    public java.util.Date birthdate;

				public java.util.Date getBirthdate () {
					return this.birthdate;
				}
				
			    public String hed__workphone__c;

				public String getHed__workphone__c () {
					return this.hed__workphone__c;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out4Struct other = (out4Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out4Struct other) {

		other.lastname = this.lastname;
	            other.mailingpostalcode = this.mailingpostalcode;
	            other.mailingstate = this.mailingstate;
	            other.mailingcountry = this.mailingcountry;
	            other.name = this.name;
	            other.mobilephone = this.mobilephone;
	            other.mailingstreet = this.mailingstreet;
	            other.isdeleted = this.isdeleted;
	            other.homephone = this.homephone;
	            other.systemmodstamp = this.systemmodstamp;
	            other.targetx_srmb__gender__c = this.targetx_srmb__gender__c;
	            other.createddate = this.createddate;
	            other.mailingcity = this.mailingcity;
	            other.firstname = this.firstname;
	            other.email = this.email;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            other.hed__universityemail__c = this.hed__universityemail__c;
	            other.noodlecrm__university_sis_id__c = this.noodlecrm__university_sis_id__c;
	            other.targetx_srmb__citizenship__c = this.targetx_srmb__citizenship__c;
	            other.birthdate = this.birthdate;
	            other.hed__workphone__c = this.hed__workphone__c;
	            other.phone = this.phone;
	            
	}

	public void copyKeysDataTo(out4Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.lastname = readString(dis);
					
					this.mailingpostalcode = readString(dis);
					
					this.mailingstate = readString(dis);
					
					this.mailingcountry = readString(dis);
					
					this.name = readString(dis);
					
					this.mobilephone = readString(dis);
					
					this.mailingstreet = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.homephone = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.targetx_srmb__gender__c = readString(dis);
					
					this.createddate = readDate(dis);
					
					this.mailingcity = readString(dis);
					
					this.firstname = readString(dis);
					
					this.email = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.hed__universityemail__c = readString(dis);
					
					this.noodlecrm__university_sis_id__c = readString(dis);
					
					this.targetx_srmb__citizenship__c = readString(dis);
					
					this.birthdate = readDate(dis);
					
					this.hed__workphone__c = readString(dis);
					
					this.phone = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.lastname,dos);
					
					// String
				
						writeString(this.mailingpostalcode,dos);
					
					// String
				
						writeString(this.mailingstate,dos);
					
					// String
				
						writeString(this.mailingcountry,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.mobilephone,dos);
					
					// String
				
						writeString(this.mailingstreet,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// String
				
						writeString(this.homephone,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.targetx_srmb__gender__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.mailingcity,dos);
					
					// String
				
						writeString(this.firstname,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.hed__universityemail__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university_sis_id__c,dos);
					
					// String
				
						writeString(this.targetx_srmb__citizenship__c,dos);
					
					// java.util.Date
				
						writeDate(this.birthdate,dos);
					
					// String
				
						writeString(this.hed__workphone__c,dos);
					
					// String
				
						writeString(this.phone,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("lastname="+lastname);
		sb.append(",mailingpostalcode="+mailingpostalcode);
		sb.append(",mailingstate="+mailingstate);
		sb.append(",mailingcountry="+mailingcountry);
		sb.append(",name="+name);
		sb.append(",mobilephone="+mobilephone);
		sb.append(",mailingstreet="+mailingstreet);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",homephone="+homephone);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",targetx_srmb__gender__c="+targetx_srmb__gender__c);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",mailingcity="+mailingcity);
		sb.append(",firstname="+firstname);
		sb.append(",email="+email);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",hed__universityemail__c="+hed__universityemail__c);
		sb.append(",noodlecrm__university_sis_id__c="+noodlecrm__university_sis_id__c);
		sb.append(",targetx_srmb__citizenship__c="+targetx_srmb__citizenship__c);
		sb.append(",birthdate="+String.valueOf(birthdate));
		sb.append(",hed__workphone__c="+hed__workphone__c);
		sb.append(",phone="+phone);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String lastname;

				public String getLastname () {
					return this.lastname;
				}
				
			    public String mailingpostalcode;

				public String getMailingpostalcode () {
					return this.mailingpostalcode;
				}
				
			    public String mailingstate;

				public String getMailingstate () {
					return this.mailingstate;
				}
				
			    public String mailingcountry;

				public String getMailingcountry () {
					return this.mailingcountry;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String mobilephone;

				public String getMobilephone () {
					return this.mobilephone;
				}
				
			    public String mailingstreet;

				public String getMailingstreet () {
					return this.mailingstreet;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public String homephone;

				public String getHomephone () {
					return this.homephone;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String targetx_srmb__gender__c;

				public String getTargetx_srmb__gender__c () {
					return this.targetx_srmb__gender__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String mailingcity;

				public String getMailingcity () {
					return this.mailingcity;
				}
				
			    public String firstname;

				public String getFirstname () {
					return this.firstname;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String hed__universityemail__c;

				public String getHed__universityemail__c () {
					return this.hed__universityemail__c;
				}
				
			    public String noodlecrm__university_sis_id__c;

				public String getNoodlecrm__university_sis_id__c () {
					return this.noodlecrm__university_sis_id__c;
				}
				
			    public String targetx_srmb__citizenship__c;

				public String getTargetx_srmb__citizenship__c () {
					return this.targetx_srmb__citizenship__c;
				}
				
			    public java.util.Date birthdate;

				public java.util.Date getBirthdate () {
					return this.birthdate;
				}
				
			    public String hed__workphone__c;

				public String getHed__workphone__c () {
					return this.hed__workphone__c;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.lastname = readString(dis);
					
					this.mailingpostalcode = readString(dis);
					
					this.mailingstate = readString(dis);
					
					this.mailingcountry = readString(dis);
					
					this.name = readString(dis);
					
					this.mobilephone = readString(dis);
					
					this.mailingstreet = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.homephone = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.targetx_srmb__gender__c = readString(dis);
					
					this.createddate = readDate(dis);
					
					this.mailingcity = readString(dis);
					
					this.firstname = readString(dis);
					
					this.email = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.hed__universityemail__c = readString(dis);
					
					this.noodlecrm__university_sis_id__c = readString(dis);
					
					this.targetx_srmb__citizenship__c = readString(dis);
					
					this.birthdate = readDate(dis);
					
					this.hed__workphone__c = readString(dis);
					
					this.phone = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.lastname,dos);
					
					// String
				
						writeString(this.mailingpostalcode,dos);
					
					// String
				
						writeString(this.mailingstate,dos);
					
					// String
				
						writeString(this.mailingcountry,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.mobilephone,dos);
					
					// String
				
						writeString(this.mailingstreet,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// String
				
						writeString(this.homephone,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.targetx_srmb__gender__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.mailingcity,dos);
					
					// String
				
						writeString(this.firstname,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.hed__universityemail__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university_sis_id__c,dos);
					
					// String
				
						writeString(this.targetx_srmb__citizenship__c,dos);
					
					// java.util.Date
				
						writeDate(this.birthdate,dos);
					
					// String
				
						writeString(this.hed__workphone__c,dos);
					
					// String
				
						writeString(this.phone,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("lastname="+lastname);
		sb.append(",mailingpostalcode="+mailingpostalcode);
		sb.append(",mailingstate="+mailingstate);
		sb.append(",mailingcountry="+mailingcountry);
		sb.append(",name="+name);
		sb.append(",mobilephone="+mobilephone);
		sb.append(",mailingstreet="+mailingstreet);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",homephone="+homephone);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",targetx_srmb__gender__c="+targetx_srmb__gender__c);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",mailingcity="+mailingcity);
		sb.append(",firstname="+firstname);
		sb.append(",email="+email);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",hed__universityemail__c="+hed__universityemail__c);
		sb.append(",noodlecrm__university_sis_id__c="+noodlecrm__university_sis_id__c);
		sb.append(",targetx_srmb__citizenship__c="+targetx_srmb__citizenship__c);
		sb.append(",birthdate="+String.valueOf(birthdate));
		sb.append(",hed__workphone__c="+hed__workphone__c);
		sb.append(",phone="+phone);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
out3Struct out3 = new out3Struct();
out4Struct out4 = new out4Struct();





	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.staging_S3_dir + "contact.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
                String[] headColutFileOutputDelimited_2=new String[23];
            class CSVBasicSet_tFileOutputDelimited_2{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_2[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_2 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_2[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_2 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_2[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_2[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_2 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 =0;
            int currentRow_tFileOutputDelimited_2 = 0;


            CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
            csvSettings_tFileOutputDelimited_2.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                            if(fileToDelete_tFileOutputDelimited_2.exists()) {
                                fileToDelete_tFileOutputDelimited_2.delete();
                            }
                            CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_2.setSeparator(csvSettings_tFileOutputDelimited_2.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_2.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_2.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_2.setLineEnd(""+csvSettings_tFileOutputDelimited_2.getRowDelim());
                    }
                        if(filetFileOutputDelimited_2.length()==0){
                                    headColutFileOutputDelimited_2[0]="lastname";
                                    headColutFileOutputDelimited_2[1]="mailingpostalcode";
                                    headColutFileOutputDelimited_2[2]="mailingstate";
                                    headColutFileOutputDelimited_2[3]="mailingcountry";
                                    headColutFileOutputDelimited_2[4]="name";
                                    headColutFileOutputDelimited_2[5]="mobilephone";
                                    headColutFileOutputDelimited_2[6]="mailingstreet";
                                    headColutFileOutputDelimited_2[7]="isdeleted";
                                    headColutFileOutputDelimited_2[8]="homephone";
                                    headColutFileOutputDelimited_2[9]="systemmodstamp";
                                    headColutFileOutputDelimited_2[10]="targetx_srmb__gender__c";
                                    headColutFileOutputDelimited_2[11]="createddate";
                                    headColutFileOutputDelimited_2[12]="mailingcity";
                                    headColutFileOutputDelimited_2[13]="firstname";
                                    headColutFileOutputDelimited_2[14]="email";
                                    headColutFileOutputDelimited_2[15]="sfid";
                                    headColutFileOutputDelimited_2[16]="id";
                                    headColutFileOutputDelimited_2[17]="hed__universityemail__c";
                                    headColutFileOutputDelimited_2[18]="noodlecrm__university_sis_id__c";
                                    headColutFileOutputDelimited_2[19]="targetx_srmb__citizenship__c";
                                    headColutFileOutputDelimited_2[20]="birthdate";
                                    headColutFileOutputDelimited_2[21]="hed__workphone__c";
                                    headColutFileOutputDelimited_2[22]="phone";
                            CsvWritertFileOutputDelimited_2.writeNext(headColutFileOutputDelimited_2);
                            CsvWritertFileOutputDelimited_2.flush();
                        }
                CsvWritertFileOutputDelimited_2.setEscapeChar(csvSettings_tFileOutputDelimited_2.getEscapeChar());
                CsvWritertFileOutputDelimited_2.setQuoteChar(csvSettings_tFileOutputDelimited_2.getTextEnclosure());
                CsvWritertFileOutputDelimited_2.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_2", CsvWritertFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */




	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("contact");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("contact");
}

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_2 = 100000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
            try (java.sql.Statement stmtClear_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                stmtClear_tDBOutput_2.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_2 + "\"");
            }
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"lastname\",\"mailingpostalcode\",\"mailingstate\",\"mailingcountry\",\"name\",\"mobilephone\",\"mailingstreet\",\"isdeleted\",\"homephone\",\"systemmodstamp\",\"targetx_srmb__gender__c\",\"createddate\",\"mailingcity\",\"firstname\",\"email\",\"sfid\",\"id\",\"hed__universityemail__c\",\"noodlecrm__university_sis_id__c\",\"targetx_srmb__citizenship__c\",\"birthdate\",\"hed__workphone__c\",\"phone\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT lastname\n       , mailingpostalcode\n       , mailingstate\n       , mailingcountry\n       , name\n       , mo"
+"bilephone\n       , mailingstreet\n       , isdeleted\n       , homephone\n       , systemmodstamp\n       , targetx_srm"
+"b__gender__c\n       , createddate\n       , mailingcity\n       , firstname\n       , email\n       , sfid\n       , id"
+"\n       , hed__universityemail__c\n      , noodlecrm__university_sis_id__c\n       , targetx_srmb__citizenship__c\n    "
+"   , birthdate\n       , hed__workphone__c\n       , phone\n FROM how.contact ";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.lastname = null;
							} else {
	                         		
        	row2.lastname = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.mailingpostalcode = null;
							} else {
	                         		
        	row2.mailingpostalcode = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.mailingstate = null;
							} else {
	                         		
        	row2.mailingstate = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.mailingcountry = null;
							} else {
	                         		
        	row2.mailingcountry = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row2.name = null;
							} else {
	                         		
        	row2.name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row2.mobilephone = null;
							} else {
	                         		
        	row2.mobilephone = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row2.mailingstreet = null;
							} else {
	                         		
        	row2.mailingstreet = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row2.isdeleted = null;
							} else {
	                         		
            row2.isdeleted = rs_tDBInput_2.getBoolean(8);
            if(rs_tDBInput_2.wasNull()){
                    row2.isdeleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row2.homephone = null;
							} else {
	                         		
        	row2.homephone = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row2.systemmodstamp = null;
							} else {
										
			row2.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 10);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row2.targetx_srmb__gender__c = null;
							} else {
	                         		
        	row2.targetx_srmb__gender__c = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row2.createddate = null;
							} else {
										
			row2.createddate = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 12);
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row2.mailingcity = null;
							} else {
	                         		
        	row2.mailingcity = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row2.firstname = null;
							} else {
	                         		
        	row2.firstname = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row2.email = null;
							} else {
	                         		
        	row2.email = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row2.sfid = null;
							} else {
	                         		
        	row2.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row2.id = 0;
							} else {
		                          
            row2.id = rs_tDBInput_2.getInt(17);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row2.hed__universityemail__c = null;
							} else {
	                         		
        	row2.hed__universityemail__c = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row2.noodlecrm__university_sis_id__c = null;
							} else {
	                         		
        	row2.noodlecrm__university_sis_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row2.targetx_srmb__citizenship__c = null;
							} else {
	                         		
        	row2.targetx_srmb__citizenship__c = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row2.birthdate = null;
							} else {
										
			row2.birthdate = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 21);
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								row2.hed__workphone__c = null;
							} else {
	                         		
        	row2.hed__workphone__c = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								row2.phone = null;
							} else {
	                         		
        	row2.phone = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, true);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out3 = null;
out4 = null;


// # Output table : 'out3'
out3_tmp.lastname = row2.lastname ;
out3_tmp.mailingpostalcode = row2.mailingpostalcode ;
out3_tmp.mailingstate = row2.mailingstate ;
out3_tmp.mailingcountry = row2.mailingcountry ;
out3_tmp.name = row2.name ;
out3_tmp.mobilephone = row2.mobilephone ;
out3_tmp.mailingstreet = row2.mailingstreet ;
out3_tmp.isdeleted = row2.isdeleted ;
out3_tmp.homephone = row2.homephone ;
out3_tmp.systemmodstamp = row2.systemmodstamp ;
out3_tmp.targetx_srmb__gender__c = row2.targetx_srmb__gender__c ;
out3_tmp.createddate = row2.createddate ;
out3_tmp.mailingcity = row2.mailingcity ;
out3_tmp.firstname = row2.firstname ;
out3_tmp.email = row2.email ;
out3_tmp.sfid = row2.sfid ;
out3_tmp.id = row2.id ;
out3_tmp.hed__universityemail__c = row2.hed__universityemail__c ;
out3_tmp.noodlecrm__university_sis_id__c = row2.noodlecrm__university_sis_id__c ;
out3_tmp.targetx_srmb__citizenship__c = row2.targetx_srmb__citizenship__c ;
out3_tmp.birthdate = row2.birthdate ;
out3_tmp.hed__workphone__c = row2.hed__workphone__c ;
out3_tmp.phone = row2.phone ;
out3 = out3_tmp;

// # Output table : 'out4'
out4_tmp.lastname = row2.lastname ;
out4_tmp.mailingpostalcode = row2.mailingpostalcode ;
out4_tmp.mailingstate = row2.mailingstate ;
out4_tmp.mailingcountry = row2.mailingcountry ;
out4_tmp.name = row2.name ;
out4_tmp.mobilephone = row2.mobilephone ;
out4_tmp.mailingstreet = row2.mailingstreet ;
out4_tmp.isdeleted = row2.isdeleted ;
out4_tmp.homephone = row2.homephone ;
out4_tmp.systemmodstamp = row2.systemmodstamp ;
out4_tmp.targetx_srmb__gender__c = row2.targetx_srmb__gender__c ;
out4_tmp.createddate = row2.createddate ;
out4_tmp.mailingcity = row2.mailingcity ;
out4_tmp.firstname = row2.firstname ;
out4_tmp.email = row2.email ;
out4_tmp.sfid = row2.sfid ;
out4_tmp.id = row2.id ;
out4_tmp.hed__universityemail__c = row2.hed__universityemail__c ;
out4_tmp.noodlecrm__university_sis_id__c = row2.noodlecrm__university_sis_id__c ;
out4_tmp.targetx_srmb__citizenship__c = row2.targetx_srmb__citizenship__c ;
out4_tmp.birthdate = row2.birthdate ;
out4_tmp.hed__workphone__c = row2.hed__workphone__c ;
out4_tmp.phone = row2.phone ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out3");
					}
					


                        String[] rowtFileOutputDelimited_2=new String[23];
                            rowtFileOutputDelimited_2[0]=out3.lastname == null ? null : out3.lastname;
                            rowtFileOutputDelimited_2[1]=out3.mailingpostalcode == null ? null : out3.mailingpostalcode;
                            rowtFileOutputDelimited_2[2]=out3.mailingstate == null ? null : out3.mailingstate;
                            rowtFileOutputDelimited_2[3]=out3.mailingcountry == null ? null : out3.mailingcountry;
                            rowtFileOutputDelimited_2[4]=out3.name == null ? null : out3.name;
                            rowtFileOutputDelimited_2[5]=out3.mobilephone == null ? null : out3.mobilephone;
                            rowtFileOutputDelimited_2[6]=out3.mailingstreet == null ? null : out3.mailingstreet;
                            rowtFileOutputDelimited_2[7]=out3.isdeleted == null ? null : String.valueOf(out3.isdeleted);
                            rowtFileOutputDelimited_2[8]=out3.homephone == null ? null : out3.homephone;
                            rowtFileOutputDelimited_2[9]=out3.systemmodstamp == null ? null : FormatterUtils.format_Date(out3.systemmodstamp, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_2[10]=out3.targetx_srmb__gender__c == null ? null : out3.targetx_srmb__gender__c;
                            rowtFileOutputDelimited_2[11]=out3.createddate == null ? null : FormatterUtils.format_Date(out3.createddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_2[12]=out3.mailingcity == null ? null : out3.mailingcity;
                            rowtFileOutputDelimited_2[13]=out3.firstname == null ? null : out3.firstname;
                            rowtFileOutputDelimited_2[14]=out3.email == null ? null : out3.email;
                            rowtFileOutputDelimited_2[15]=out3.sfid == null ? null : out3.sfid;
                            rowtFileOutputDelimited_2[16]=String.valueOf(out3.id);
                            rowtFileOutputDelimited_2[17]=out3.hed__universityemail__c == null ? null : out3.hed__universityemail__c;
                            rowtFileOutputDelimited_2[18]=out3.noodlecrm__university_sis_id__c == null ? null : out3.noodlecrm__university_sis_id__c;
                            rowtFileOutputDelimited_2[19]=out3.targetx_srmb__citizenship__c == null ? null : out3.targetx_srmb__citizenship__c;
                            rowtFileOutputDelimited_2[20]=out3.birthdate == null ? null : FormatterUtils.format_Date(out3.birthdate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_2[21]=out3.hed__workphone__c == null ? null : out3.hed__workphone__c;
                            rowtFileOutputDelimited_2[22]=out3.phone == null ? null : out3.phone;
                nb_line_tFileOutputDelimited_2++;
                resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
                                       CsvWritertFileOutputDelimited_2.writeNext(rowtFileOutputDelimited_2);




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "out3"




// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out4");
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(out4.lastname == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, out4.lastname);
}

                    if(out4.mailingpostalcode == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, out4.mailingpostalcode);
}

                    if(out4.mailingstate == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, out4.mailingstate);
}

                    if(out4.mailingcountry == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, out4.mailingcountry);
}

                    if(out4.name == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, out4.name);
}

                    if(out4.mobilephone == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, out4.mobilephone);
}

                    if(out4.mailingstreet == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(7, out4.mailingstreet);
}

                    if(out4.isdeleted == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_2.setBoolean(8, out4.isdeleted);
}

                    if(out4.homephone == null) {
pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(9, out4.homephone);
}

                    if(out4.systemmodstamp != null) {
pstmt_tDBOutput_2.setTimestamp(10, new java.sql.Timestamp(out4.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_2.setNull(10, java.sql.Types.TIMESTAMP);
}

                    if(out4.targetx_srmb__gender__c == null) {
pstmt_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(11, out4.targetx_srmb__gender__c);
}

                    if(out4.createddate != null) {
pstmt_tDBOutput_2.setTimestamp(12, new java.sql.Timestamp(out4.createddate.getTime()));
} else {
pstmt_tDBOutput_2.setNull(12, java.sql.Types.TIMESTAMP);
}

                    if(out4.mailingcity == null) {
pstmt_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(13, out4.mailingcity);
}

                    if(out4.firstname == null) {
pstmt_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(14, out4.firstname);
}

                    if(out4.email == null) {
pstmt_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(15, out4.email);
}

                    if(out4.sfid == null) {
pstmt_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(16, out4.sfid);
}

                    pstmt_tDBOutput_2.setInt(17, out4.id);

                    if(out4.hed__universityemail__c == null) {
pstmt_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(18, out4.hed__universityemail__c);
}

                    if(out4.noodlecrm__university_sis_id__c == null) {
pstmt_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(19, out4.noodlecrm__university_sis_id__c);
}

                    if(out4.targetx_srmb__citizenship__c == null) {
pstmt_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(20, out4.targetx_srmb__citizenship__c);
}

                    if(out4.birthdate != null) {
pstmt_tDBOutput_2.setTimestamp(21, new java.sql.Timestamp(out4.birthdate.getTime()));
} else {
pstmt_tDBOutput_2.setNull(21, java.sql.Types.TIMESTAMP);
}

                    if(out4.hed__workphone__c == null) {
pstmt_tDBOutput_2.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(22, out4.hed__workphone__c);
}

                    if(out4.phone == null) {
pstmt_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(23, out4.phone);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
            if(!whetherReject_tDBOutput_2) {
            }
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_2!=null) {
				    	CsvWritertFileOutputDelimited_2.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk41", 0, "ok");
				}
				tFileArchive_2Process(globalMap);



/**
 * [tFileOutputDelimited_2 end ] stop
 */




	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk42", 0, "ok");
				}
				tJava_9Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_2");
					
						if(CsvWritertFileOutputDelimited_2!=null) {
					    	CsvWritertFileOutputDelimited_2.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */




	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_2", false);
		start_Hash.put("tFileArchive_2", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_2";

	
		int tos_count_tFileArchive_2 = 0;
		

 



/**
 * [tFileArchive_2 begin ] stop
 */
	
	/**
	 * [tFileArchive_2 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_2";

	

	

		String sourceFile_tFileArchive_2 = context.staging_S3_dir + "contact.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_2), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_2 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_2 = context.staging_S3_dir + "contact.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_2 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_2, zipFile_tFileArchive_2);
    zip_tFileArchive_2.setOverwriteExistTargetZip(true);
	zip_tFileArchive_2.setMakeTargetDir(true);
	zip_tFileArchive_2.setCompressLevel(9);
	zip_tFileArchive_2.setArchiveFormat("gzip");
	zip_tFileArchive_2.setAllFiles(true);
	
	
		zip_tFileArchive_2.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_2_ARCHIVE_FILEPATH",zipFile_tFileArchive_2);
   
   globalMap.put("tFileArchive_2_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_2).getName());

   zip_tFileArchive_2.doZip();


 


	tos_count_tFileArchive_2++;

/**
 * [tFileArchive_2 main ] stop
 */
	
	/**
	 * [tFileArchive_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_2";

	

 



/**
 * [tFileArchive_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_2";

	

 



/**
 * [tFileArchive_2 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_2 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_2";

	

 

ok_Hash.put("tFileArchive_2", true);
end_Hash.put("tFileArchive_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk46", 0, "ok");
				}
				tS3Put_2Process(globalMap);



/**
 * [tFileArchive_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_2 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_2";

	

 



/**
 * [tFileArchive_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_2_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_2", false);
		start_Hash.put("tS3Put_2", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_2";

	
		int tos_count_tS3Put_2 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_2 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_2 = context.nd_s3_data_lake_path_sfdc +"/contact/latest/university_id="+context.university_code+"/contact.csv.gz";
	
	int partSizeInBytes_tS3Put_2 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_2 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_2 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_2 = context.staging_S3_dir + "contact.csv.gz";
	
	boolean useStream_tS3Put_2 = false;
	java.io.InputStream uploadStream_tS3Put_2 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_2 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_2 instanceof String){
		    useStream_tS3Put_2 = false;
		}else if(fileOrStream_tS3Put_2 instanceof java.io.InputStream){
		    useStream_tS3Put_2 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_2 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_2) {
				java.io.File inputFile_tS3Put_2 = new java.io.File((String)fileOrStream_tS3Put_2);
				
				long multipart_upload_threshold_tS3Put_2 = 5 * 1024 * 1024;
				
    		tm_tS3Put_2 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_2)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_2)
    			.withS3Client(conn_tS3Put_2)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_2 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_2, inputFile_tS3Put_2).withMetadata(objectMetadata_tS3Put_2);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_2 = tm_tS3Put_2.upload(putRequest_tS3Put_2);
  		
  			upload_tS3Put_2.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_2 = ((java.io.InputStream)fileOrStream_tS3Put_2);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_2 = new S3StreamUtil();
    		byte[] buffer_tS3Put_2 = new byte[partSizeInBytes_tS3Put_2];
    		sourceStream_tS3Put_2.read(buffer_tS3Put_2);
    		long curPartSize_tS3Put_2 = streamUtil_tS3Put_2.getLength(buffer_tS3Put_2);
    		boolean multiUpload_tS3Put_2 = curPartSize_tS3Put_2 == partSizeInBytes_tS3Put_2;
    		
    		if(!multiUpload_tS3Put_2) {
    				objectMetadata_tS3Put_2.setContentLength(curPartSize_tS3Put_2);
    				uploadStream_tS3Put_2 = new java.io.ByteArrayInputStream(buffer_tS3Put_2,0,Long.valueOf(curPartSize_tS3Put_2).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_2 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_2, uploadStream_tS3Put_2, objectMetadata_tS3Put_2);
			
    				
    				

    				
    				conn_tS3Put_2.putObject(putRequest_tS3Put_2);
    		} else {
    				uploadStream_tS3Put_2 = new java.io.ByteArrayInputStream(buffer_tS3Put_2);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_2 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_2 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_2, objectMetadata_tS3Put_2);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_2 = conn_tS3Put_2.initiateMultipartUpload(putRequest_tS3Put_2);
      			String uploadId_tS3Put_2 = initResponse_tS3Put_2.getUploadId();
      			int partNumber_tS3Put_2 = 1;
      			boolean streamHasNext_tS3Put_2 = true;
      			byte[] probeAvailability_tS3Put_2 = new byte[1];
				try {
					while (streamHasNext_tS3Put_2) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_2 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_2)
						.withUploadId(uploadId_tS3Put_2)
                    	.withPartNumber(partNumber_tS3Put_2)
						.withPartSize(curPartSize_tS3Put_2);
            		    uploadRequest_tS3Put_2.setInputStream(uploadStream_tS3Put_2);
            		    streamHasNext_tS3Put_2 = sourceStream_tS3Put_2.read(probeAvailability_tS3Put_2) != -1;
            		    if(!streamHasNext_tS3Put_2){
                    	    uploadRequest_tS3Put_2.setLastPart(true);
                    	}

                		partTags_tS3Put_2.add(conn_tS3Put_2.uploadPart(uploadRequest_tS3Put_2).getPartETag());
                  	    partNumber_tS3Put_2++;

          		     	if(uploadStream_tS3Put_2!=null){
      		         			uploadStream_tS3Put_2.close();
          		     	}
          		     	buffer_tS3Put_2 = new byte[partSizeInBytes_tS3Put_2];
          		     	sourceStream_tS3Put_2.read(buffer_tS3Put_2,1,partSizeInBytes_tS3Put_2-1);
          		     	buffer_tS3Put_2[0] = probeAvailability_tS3Put_2[0];
          		     	probeAvailability_tS3Put_2 = new byte[1];
          		     	curPartSize_tS3Put_2 = streamUtil_tS3Put_2.getLength(buffer_tS3Put_2);
          		     	uploadStream_tS3Put_2 = new java.io.ByteArrayInputStream(buffer_tS3Put_2);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_2 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_2,
                        uploadId_tS3Put_2, partTags_tS3Put_2);
            		conn_tS3Put_2.completeMultipartUpload(compRequest_tS3Put_2);
            } catch (java.lang.Exception uploadException_tS3Put_2) {
  							conn_tS3Put_2.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_2, uploadId_tS3Put_2));
    						throw uploadException_tS3Put_2;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_2){
		
			throw(e_tS3Put_2);
		
	}finally{
		if(useStream_tS3Put_2 && uploadStream_tS3Put_2!=null){
    	uploadStream_tS3Put_2.close();
    }
    
    if(tm_tS3Put_2 != null){
        tm_tS3Put_2.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_2 begin ] stop
 */
	
	/**
	 * [tS3Put_2 main ] start
	 */

	

	
	
	currentComponent="tS3Put_2";

	

 


	tos_count_tS3Put_2++;

/**
 * [tS3Put_2 main ] stop
 */
	
	/**
	 * [tS3Put_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_2";

	

 



/**
 * [tS3Put_2 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_2";

	

 



/**
 * [tS3Put_2 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_2 end ] start
	 */

	

	
	
	currentComponent="tS3Put_2";

	

 

ok_Hash.put("tS3Put_2", true);
end_Hash.put("tS3Put_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk47", 0, "ok");
				}
				tJava_10Process(globalMap);



/**
 * [tS3Put_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_2 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_2";

	

 



/**
 * [tS3Put_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_10", false);
		start_Hash.put("tJava_10", System.currentTimeMillis());
		
	
	currentComponent="tJava_10";

	
		int tos_count_tJava_10 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_10 begin ] stop
 */
	
	/**
	 * [tJava_10 main ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 


	tos_count_tJava_10++;

/**
 * [tJava_10 main ] stop
 */
	
	/**
	 * [tJava_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 



/**
 * [tJava_10 process_data_begin ] stop
 */
	
	/**
	 * [tJava_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 



/**
 * [tJava_10 process_data_end ] stop
 */
	
	/**
	 * [tJava_10 end ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 

ok_Hash.put("tJava_10", true);
end_Hash.put("tJava_10", System.currentTimeMillis());




/**
 * [tJava_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_10 finally ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 



/**
 * [tJava_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}
	

public void tJava_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_9", false);
		start_Hash.put("tJava_9", System.currentTimeMillis());
		
	
	currentComponent="tJava_9";

	
		int tos_count_tJava_9 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_2_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");

 



/**
 * [tJava_9 begin ] stop
 */
	
	/**
	 * [tJava_9 main ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 


	tos_count_tJava_9++;

/**
 * [tJava_9 main ] stop
 */
	
	/**
	 * [tJava_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 process_data_begin ] stop
 */
	
	/**
	 * [tJava_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 process_data_end ] stop
 */
	
	/**
	 * [tJava_9 end ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 

ok_Hash.put("tJava_9", true);
end_Hash.put("tJava_9", System.currentTimeMillis());




/**
 * [tJava_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_9 finally ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_2", false);
		start_Hash.put("tS3Copy_2", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_2";

	
		int tos_count_tS3Copy_2 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_2 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_2 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_2 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_2 = null;
		
		
		final String from_bucket_tS3Copy_2 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_2 = context.nd_s3_data_lake_path_sfdc+"/contact/latest/university_id="+context.university_code+"/contact.csv.gz";
		final String to_bucket_tS3Copy_2 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_2 = context.nd_s3_data_lake_path_sfdc+"/contact/archive/university_id="+context.university_code+"/contact_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_2 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_2, from_key_tS3Copy_2);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_2 = conn_tS3Copy_2.getObjectMetadata(metadataRequest_tS3Copy_2);
    long objectSize_tS3Copy_2 = metadataResult_tS3Copy_2.getContentLength();
    
    boolean multiUpload_tS3Copy_2 = objectSize_tS3Copy_2 > maxBytes4SingleCopyCall_tS3Copy_2;
    
    if(!multiUpload_tS3Copy_2) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_2 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_2, from_key_tS3Copy_2, to_bucket_tS3Copy_2, to_key_tS3Copy_2);
    		if(objectMetadata_tS3Copy_2 != null) {
    				putRequest_tS3Copy_2.setNewObjectMetadata(objectMetadata_tS3Copy_2);
    		}
    		
    		

    		
    		conn_tS3Copy_2.copyObject(putRequest_tS3Copy_2);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_2 = metadataResult_tS3Copy_2.getUserMetadata();
						if((userMetadata_tS3Copy_2!=null) && userMetadata_tS3Copy_2.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_2 = null;
    				if(objectMetadata_tS3Copy_2 != null) {
    						putRequest_tS3Copy_2 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_2, to_key_tS3Copy_2, objectMetadata_tS3Copy_2);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_2 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_2, to_key_tS3Copy_2, metadataResult_tS3Copy_2);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_2 = conn_tS3Copy_2.initiateMultipartUpload(putRequest_tS3Copy_2);
            
            long bytePosition_tS3Copy_2 = 0;
            int partNum_tS3Copy_2 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_2 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_2 < objectSize_tS3Copy_2) {
                long lastByte_tS3Copy_2 = java.lang.Math.min(bytePosition_tS3Copy_2 + partSizeInBytes_tS3Copy_2 - 1, objectSize_tS3Copy_2 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_2 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_2)
                        .withSourceKey(from_key_tS3Copy_2)
                        .withDestinationBucketName(to_bucket_tS3Copy_2)
                        .withDestinationKey(to_key_tS3Copy_2)
                        .withUploadId(initResult_tS3Copy_2.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_2)
                        .withLastByte(lastByte_tS3Copy_2)
                        .withPartNumber(partNum_tS3Copy_2++);
                partTags_tS3Copy_2.add(conn_tS3Copy_2.copyPart(copyPartRequest_tS3Copy_2).getPartETag());
                bytePosition_tS3Copy_2 += partSizeInBytes_tS3Copy_2;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_2 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_2,
                                                                        to_key_tS3Copy_2, 
                                                                        initResult_tS3Copy_2.getUploadId(),
                                                                        partTags_tS3Copy_2);
            conn_tS3Copy_2.completeMultipartUpload(completeRequest_tS3Copy_2);
    		} catch (java.lang.Exception uploadException_tS3Copy_2) {
    				conn_tS3Copy_2.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_2, to_key_tS3Copy_2, initResult_tS3Copy_2.getUploadId()));
    				throw uploadException_tS3Copy_2;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_2){
		
			System.err.println(e_tS3Copy_2.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_2 begin ] stop
 */
	
	/**
	 * [tS3Copy_2 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_2";

	

 


	tos_count_tS3Copy_2++;

/**
 * [tS3Copy_2 main ] stop
 */
	
	/**
	 * [tS3Copy_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_2";

	

 



/**
 * [tS3Copy_2 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_2";

	

 



/**
 * [tS3Copy_2 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_2 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_2";

	

 

ok_Hash.put("tS3Copy_2", true);
end_Hash.put("tS3Copy_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk43", 0, "ok");
				}
				tJava_7Process(globalMap);



/**
 * [tS3Copy_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Copy_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tS3Copy_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_2 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_2";

	

 



/**
 * [tS3Copy_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";

	
		int tos_count_tJava_7 = 0;
		


System.out.println("Step 0: Running For Contact Object");
System.out.println("Step 1: Copied Previous Run File To Archive");
 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk44", 0, "ok");
				}
				tS3Delete_2Process(globalMap);



/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_2", false);
		start_Hash.put("tS3Delete_2", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_2";

	
		int tos_count_tS3Delete_2 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_2 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_2 = context.nd_s3_data_lake_path_sfdc +"/contact/latest/university_id="+context.university_code+"/contact.csv.gz";
		if(key_tS3Delete_2!=null && key_tS3Delete_2.trim().length()>0){
			
			conn_tS3Delete_2.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_2);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_2){
		
			System.err.println(e_tS3Delete_2.getMessage());
		
	}
	
 



/**
 * [tS3Delete_2 begin ] stop
 */
	
	/**
	 * [tS3Delete_2 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_2";

	

 


	tos_count_tS3Delete_2++;

/**
 * [tS3Delete_2 main ] stop
 */
	
	/**
	 * [tS3Delete_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_2";

	

 



/**
 * [tS3Delete_2 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_2";

	

 



/**
 * [tS3Delete_2 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_2 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_2";

	

 

ok_Hash.put("tS3Delete_2", true);
end_Hash.put("tS3Delete_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk45", 0, "ok");
				}
				tJava_8Process(globalMap);



/**
 * [tS3Delete_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_2 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_2";

	

 



/**
 * [tS3Delete_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";

	
		int tos_count_tJava_8 = 0;
		


System.out.println("Step 2: Deleted Previous Run File From Latest Folder");
System.out.println("Step 3: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 process_data_begin ] stop
 */
	
	/**
	 * [tJava_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 process_data_end ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk27", 0, "ok");
				}
				tDBInput_2Process(globalMap);



/**
 * [tJava_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_1", false);
		start_Hash.put("tS3Copy_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_1";

	
		int tos_count_tS3Copy_1 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_1 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_1 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_1 = null;
		
		
		final String from_bucket_tS3Copy_1 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_1 = context.nd_s3_data_lake_path_sfdc+"/event/latest/university_id="+context.university_code+"/event.csv.gz";
		final String to_bucket_tS3Copy_1 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_1 = context.nd_s3_data_lake_path_sfdc+"/event/archive/university_id="+context.university_code+"/event_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_1 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_1, from_key_tS3Copy_1);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_1 = conn_tS3Copy_1.getObjectMetadata(metadataRequest_tS3Copy_1);
    long objectSize_tS3Copy_1 = metadataResult_tS3Copy_1.getContentLength();
    
    boolean multiUpload_tS3Copy_1 = objectSize_tS3Copy_1 > maxBytes4SingleCopyCall_tS3Copy_1;
    
    if(!multiUpload_tS3Copy_1) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_1 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_1, from_key_tS3Copy_1, to_bucket_tS3Copy_1, to_key_tS3Copy_1);
    		if(objectMetadata_tS3Copy_1 != null) {
    				putRequest_tS3Copy_1.setNewObjectMetadata(objectMetadata_tS3Copy_1);
    		}
    		
    		

    		
    		conn_tS3Copy_1.copyObject(putRequest_tS3Copy_1);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_1 = metadataResult_tS3Copy_1.getUserMetadata();
						if((userMetadata_tS3Copy_1!=null) && userMetadata_tS3Copy_1.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_1 = null;
    				if(objectMetadata_tS3Copy_1 != null) {
    						putRequest_tS3Copy_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_1, to_key_tS3Copy_1, objectMetadata_tS3Copy_1);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_1, to_key_tS3Copy_1, metadataResult_tS3Copy_1);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_1 = conn_tS3Copy_1.initiateMultipartUpload(putRequest_tS3Copy_1);
            
            long bytePosition_tS3Copy_1 = 0;
            int partNum_tS3Copy_1 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_1 < objectSize_tS3Copy_1) {
                long lastByte_tS3Copy_1 = java.lang.Math.min(bytePosition_tS3Copy_1 + partSizeInBytes_tS3Copy_1 - 1, objectSize_tS3Copy_1 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_1 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_1)
                        .withSourceKey(from_key_tS3Copy_1)
                        .withDestinationBucketName(to_bucket_tS3Copy_1)
                        .withDestinationKey(to_key_tS3Copy_1)
                        .withUploadId(initResult_tS3Copy_1.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_1)
                        .withLastByte(lastByte_tS3Copy_1)
                        .withPartNumber(partNum_tS3Copy_1++);
                partTags_tS3Copy_1.add(conn_tS3Copy_1.copyPart(copyPartRequest_tS3Copy_1).getPartETag());
                bytePosition_tS3Copy_1 += partSizeInBytes_tS3Copy_1;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_1,
                                                                        to_key_tS3Copy_1, 
                                                                        initResult_tS3Copy_1.getUploadId(),
                                                                        partTags_tS3Copy_1);
            conn_tS3Copy_1.completeMultipartUpload(completeRequest_tS3Copy_1);
    		} catch (java.lang.Exception uploadException_tS3Copy_1) {
    				conn_tS3Copy_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_1, to_key_tS3Copy_1, initResult_tS3Copy_1.getUploadId()));
    				throw uploadException_tS3Copy_1;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_1){
		
			System.err.println(e_tS3Copy_1.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_1 begin ] stop
 */
	
	/**
	 * [tS3Copy_1 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_1";

	

 


	tos_count_tS3Copy_1++;

/**
 * [tS3Copy_1 main ] stop
 */
	
	/**
	 * [tS3Copy_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_1";

	

 



/**
 * [tS3Copy_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_1";

	

 



/**
 * [tS3Copy_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_1 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_1";

	

 

ok_Hash.put("tS3Copy_1", true);
end_Hash.put("tS3Copy_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk38", 0, "ok");
				}
				tJava_4Process(globalMap);



/**
 * [tS3Copy_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Copy_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tS3Copy_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_1";

	

 



/**
 * [tS3Copy_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		


System.out.println("Step 0: Running For Event Object");
System.out.println("Step 1: Copied Previous Run File To Archive");
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk39", 0, "ok");
				}
				tS3Delete_1Process(globalMap);



/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_1", false);
		start_Hash.put("tS3Delete_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_1";

	
		int tos_count_tS3Delete_1 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_1 = context.nd_s3_data_lake_path_sfdc +"/event/latest/university_id="+context.university_code+"/event.csv.gz";
		if(key_tS3Delete_1!=null && key_tS3Delete_1.trim().length()>0){
			
			conn_tS3Delete_1.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_1);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_1){
		
			System.err.println(e_tS3Delete_1.getMessage());
		
	}
	
 



/**
 * [tS3Delete_1 begin ] stop
 */
	
	/**
	 * [tS3Delete_1 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_1";

	

 


	tos_count_tS3Delete_1++;

/**
 * [tS3Delete_1 main ] stop
 */
	
	/**
	 * [tS3Delete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_1";

	

 



/**
 * [tS3Delete_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_1";

	

 



/**
 * [tS3Delete_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_1 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_1";

	

 

ok_Hash.put("tS3Delete_1", true);
end_Hash.put("tS3Delete_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk40", 0, "ok");
				}
				tJava_12Process(globalMap);



/**
 * [tS3Delete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_1";

	

 



/**
 * [tS3Delete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_12", false);
		start_Hash.put("tJava_12", System.currentTimeMillis());
		
	
	currentComponent="tJava_12";

	
		int tos_count_tJava_12 = 0;
		


System.out.println("Step 2: Deleted Previous Run File From Latest Folder");
System.out.println("Step 3: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_12 begin ] stop
 */
	
	/**
	 * [tJava_12 main ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 


	tos_count_tJava_12++;

/**
 * [tJava_12 main ] stop
 */
	
	/**
	 * [tJava_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 



/**
 * [tJava_12 process_data_begin ] stop
 */
	
	/**
	 * [tJava_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 



/**
 * [tJava_12 process_data_end ] stop
 */
	
	/**
	 * [tJava_12 end ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 

ok_Hash.put("tJava_12", true);
end_Hash.put("tJava_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk48", 0, "ok");
				}
				tDBInput_3Process(globalMap);



/**
 * [tJava_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_12 finally ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 



/**
 * [tJava_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}
	


public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String eventsubtype;

				public String getEventsubtype () {
					return this.eventsubtype;
				}
				
			    public java.util.Date recurrence2patternstartdate;

				public java.util.Date getRecurrence2patternstartdate () {
					return this.recurrence2patternstartdate;
				}
				
			    public String rcsfl__rc_logging_type__c;

				public String getRcsfl__rc_logging_type__c () {
					return this.rcsfl__rc_logging_type__c;
				}
				
			    public Integer recurrencedayofweekmask;

				public Integer getRecurrencedayofweekmask () {
					return this.recurrencedayofweekmask;
				}
				
			    public String recurrencemonthofyear;

				public String getRecurrencemonthofyear () {
					return this.recurrencemonthofyear;
				}
				
			    public String recurrenceinstance;

				public String getRecurrenceinstance () {
					return this.recurrenceinstance;
				}
				
			    public Boolean isgroupevent;

				public Boolean getIsgroupevent () {
					return this.isgroupevent;
				}
				
			    public java.util.Date recurrenceenddateonly;

				public java.util.Date getRecurrenceenddateonly () {
					return this.recurrenceenddateonly;
				}
				
			    public Integer durationinminutes;

				public Integer getDurationinminutes () {
					return this.durationinminutes;
				}
				
			    public Boolean isreminderset;

				public Boolean getIsreminderset () {
					return this.isreminderset;
				}
				
			    public String recurrence2patterntimezone;

				public String getRecurrence2patterntimezone () {
					return this.recurrence2patterntimezone;
				}
				
			    public String accountid;

				public String getAccountid () {
					return this.accountid;
				}
				
			    public java.util.Date enddate;

				public java.util.Date getEnddate () {
					return this.enddate;
				}
				
			    public String recurrence2patternversion;

				public String getRecurrence2patternversion () {
					return this.recurrence2patternversion;
				}
				
			    public String recurrencetype;

				public String getRecurrencetype () {
					return this.recurrencetype;
				}
				
			    public java.util.Date activitydatetime;

				public java.util.Date getActivitydatetime () {
					return this.activitydatetime;
				}
				
			    public String subject;

				public String getSubject () {
					return this.subject;
				}
				
			    public String rcsfl__key__c;

				public String getRcsfl__key__c () {
					return this.rcsfl__key__c;
				}
				
			    public java.util.Date recurrencestartdatetime;

				public java.util.Date getRecurrencestartdatetime () {
					return this.recurrencestartdatetime;
				}
				
			    public java.util.Date reminderdatetime;

				public java.util.Date getReminderdatetime () {
					return this.reminderdatetime;
				}
				
			    public String rcsfl__recording_information__c;

				public String getRcsfl__recording_information__c () {
					return this.rcsfl__recording_information__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public String showas;

				public String getShowas () {
					return this.showas;
				}
				
			    public String rcsfl__call_uuid__c;

				public String getRcsfl__call_uuid__c () {
					return this.rcsfl__call_uuid__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public Boolean ischild;

				public Boolean getIschild () {
					return this.ischild;
				}
				
			    public String rcsfl__call_unique_id__c;

				public String getRcsfl__call_unique_id__c () {
					return this.rcsfl__call_unique_id__c;
				}
				
			    public Integer recurrenceinterval;

				public Integer getRecurrenceinterval () {
					return this.recurrenceinterval;
				}
				
			    public String groupeventtype;

				public String getGroupeventtype () {
					return this.groupeventtype;
				}
				
			    public Boolean isalldayevent;

				public Boolean getIsalldayevent () {
					return this.isalldayevent;
				}
				
			    public String location;

				public String getLocation () {
					return this.location;
				}
				
			    public String rcsfl__external_whoid__c;

				public String getRcsfl__external_whoid__c () {
					return this.rcsfl__external_whoid__c;
				}
				
			    public Boolean isrecurrence2exclusion;

				public Boolean getIsrecurrence2exclusion () {
					return this.isrecurrence2exclusion;
				}
				
			    public java.util.Date enddatetime;

				public java.util.Date getEnddatetime () {
					return this.enddatetime;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean isrecurrence2exception;

				public Boolean getIsrecurrence2exception () {
					return this.isrecurrence2exception;
				}
				
			    public Boolean isrecurrence2;

				public Boolean getIsrecurrence2 () {
					return this.isrecurrence2;
				}
				
			    public Boolean isprivate;

				public Boolean getIsprivate () {
					return this.isprivate;
				}
				
			    public String whoid;

				public String getWhoid () {
					return this.whoid;
				}
				
			    public Boolean isrecurrence;

				public Boolean getIsrecurrence () {
					return this.isrecurrence;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String recurrencetimezonesidkey;

				public String getRecurrencetimezonesidkey () {
					return this.recurrencetimezonesidkey;
				}
				
			    public String recurrenceactivityid;

				public String getRecurrenceactivityid () {
					return this.recurrenceactivityid;
				}
				
			    public String recurrence2patterntext;

				public String getRecurrence2patterntext () {
					return this.recurrence2patterntext;
				}
				
			    public String noodlecrm__contact_type__c;

				public String getNoodlecrm__contact_type__c () {
					return this.noodlecrm__contact_type__c;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public java.util.Date startdatetime;

				public java.util.Date getStartdatetime () {
					return this.startdatetime;
				}
				
			    public Integer recurrencedayofmonth;

				public Integer getRecurrencedayofmonth () {
					return this.recurrencedayofmonth;
				}
				
			    public java.util.Date activitydate;

				public java.util.Date getActivitydate () {
					return this.activitydate;
				}
				
			    public String whatid;

				public String getWhatid () {
					return this.whatid;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__category__c;

				public String getNoodlecrm__category__c () {
					return this.noodlecrm__category__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.eventsubtype = readString(dis);
					
					this.recurrence2patternstartdate = readDate(dis);
					
					this.rcsfl__rc_logging_type__c = readString(dis);
					
						this.recurrencedayofweekmask = readInteger(dis);
					
					this.recurrencemonthofyear = readString(dis);
					
					this.recurrenceinstance = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isgroupevent = null;
           				} else {
           			    	this.isgroupevent = dis.readBoolean();
           				}
					
					this.recurrenceenddateonly = readDate(dis);
					
						this.durationinminutes = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isreminderset = null;
           				} else {
           			    	this.isreminderset = dis.readBoolean();
           				}
					
					this.recurrence2patterntimezone = readString(dis);
					
					this.accountid = readString(dis);
					
					this.enddate = readDate(dis);
					
					this.recurrence2patternversion = readString(dis);
					
					this.recurrencetype = readString(dis);
					
					this.activitydatetime = readDate(dis);
					
					this.subject = readString(dis);
					
					this.rcsfl__key__c = readString(dis);
					
					this.recurrencestartdatetime = readDate(dis);
					
					this.reminderdatetime = readDate(dis);
					
					this.rcsfl__recording_information__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.ownerid = readString(dis);
					
					this.showas = readString(dis);
					
					this.rcsfl__call_uuid__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.lastmodifiedbyid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ischild = null;
           				} else {
           			    	this.ischild = dis.readBoolean();
           				}
					
					this.rcsfl__call_unique_id__c = readString(dis);
					
						this.recurrenceinterval = readInteger(dis);
					
					this.groupeventtype = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isalldayevent = null;
           				} else {
           			    	this.isalldayevent = dis.readBoolean();
           				}
					
					this.location = readString(dis);
					
					this.rcsfl__external_whoid__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence2exclusion = null;
           				} else {
           			    	this.isrecurrence2exclusion = dis.readBoolean();
           				}
					
					this.enddatetime = readDate(dis);
					
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence2exception = null;
           				} else {
           			    	this.isrecurrence2exception = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence2 = null;
           				} else {
           			    	this.isrecurrence2 = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isprivate = null;
           				} else {
           			    	this.isprivate = dis.readBoolean();
           				}
					
					this.whoid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence = null;
           				} else {
           			    	this.isrecurrence = dis.readBoolean();
           				}
					
					this.createdbyid = readString(dis);
					
					this.recurrencetimezonesidkey = readString(dis);
					
					this.recurrenceactivityid = readString(dis);
					
					this.recurrence2patterntext = readString(dis);
					
					this.noodlecrm__contact_type__c = readString(dis);
					
					this.description = readString(dis);
					
					this.startdatetime = readDate(dis);
					
						this.recurrencedayofmonth = readInteger(dis);
					
					this.activitydate = readDate(dis);
					
					this.whatid = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__category__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.eventsubtype,dos);
					
					// java.util.Date
				
						writeDate(this.recurrence2patternstartdate,dos);
					
					// String
				
						writeString(this.rcsfl__rc_logging_type__c,dos);
					
					// Integer
				
						writeInteger(this.recurrencedayofweekmask,dos);
					
					// String
				
						writeString(this.recurrencemonthofyear,dos);
					
					// String
				
						writeString(this.recurrenceinstance,dos);
					
					// Boolean
				
						if(this.isgroupevent == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isgroupevent);
		            	}
					
					// java.util.Date
				
						writeDate(this.recurrenceenddateonly,dos);
					
					// Integer
				
						writeInteger(this.durationinminutes,dos);
					
					// Boolean
				
						if(this.isreminderset == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isreminderset);
		            	}
					
					// String
				
						writeString(this.recurrence2patterntimezone,dos);
					
					// String
				
						writeString(this.accountid,dos);
					
					// java.util.Date
				
						writeDate(this.enddate,dos);
					
					// String
				
						writeString(this.recurrence2patternversion,dos);
					
					// String
				
						writeString(this.recurrencetype,dos);
					
					// java.util.Date
				
						writeDate(this.activitydatetime,dos);
					
					// String
				
						writeString(this.subject,dos);
					
					// String
				
						writeString(this.rcsfl__key__c,dos);
					
					// java.util.Date
				
						writeDate(this.recurrencestartdatetime,dos);
					
					// java.util.Date
				
						writeDate(this.reminderdatetime,dos);
					
					// String
				
						writeString(this.rcsfl__recording_information__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// String
				
						writeString(this.showas,dos);
					
					// String
				
						writeString(this.rcsfl__call_uuid__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// Boolean
				
						if(this.ischild == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.ischild);
		            	}
					
					// String
				
						writeString(this.rcsfl__call_unique_id__c,dos);
					
					// Integer
				
						writeInteger(this.recurrenceinterval,dos);
					
					// String
				
						writeString(this.groupeventtype,dos);
					
					// Boolean
				
						if(this.isalldayevent == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isalldayevent);
		            	}
					
					// String
				
						writeString(this.location,dos);
					
					// String
				
						writeString(this.rcsfl__external_whoid__c,dos);
					
					// Boolean
				
						if(this.isrecurrence2exclusion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence2exclusion);
		            	}
					
					// java.util.Date
				
						writeDate(this.enddatetime,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.isrecurrence2exception == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence2exception);
		            	}
					
					// Boolean
				
						if(this.isrecurrence2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence2);
		            	}
					
					// Boolean
				
						if(this.isprivate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isprivate);
		            	}
					
					// String
				
						writeString(this.whoid,dos);
					
					// Boolean
				
						if(this.isrecurrence == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence);
		            	}
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.recurrencetimezonesidkey,dos);
					
					// String
				
						writeString(this.recurrenceactivityid,dos);
					
					// String
				
						writeString(this.recurrence2patterntext,dos);
					
					// String
				
						writeString(this.noodlecrm__contact_type__c,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// java.util.Date
				
						writeDate(this.startdatetime,dos);
					
					// Integer
				
						writeInteger(this.recurrencedayofmonth,dos);
					
					// java.util.Date
				
						writeDate(this.activitydate,dos);
					
					// String
				
						writeString(this.whatid,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__category__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("eventsubtype="+eventsubtype);
		sb.append(",recurrence2patternstartdate="+String.valueOf(recurrence2patternstartdate));
		sb.append(",rcsfl__rc_logging_type__c="+rcsfl__rc_logging_type__c);
		sb.append(",recurrencedayofweekmask="+String.valueOf(recurrencedayofweekmask));
		sb.append(",recurrencemonthofyear="+recurrencemonthofyear);
		sb.append(",recurrenceinstance="+recurrenceinstance);
		sb.append(",isgroupevent="+String.valueOf(isgroupevent));
		sb.append(",recurrenceenddateonly="+String.valueOf(recurrenceenddateonly));
		sb.append(",durationinminutes="+String.valueOf(durationinminutes));
		sb.append(",isreminderset="+String.valueOf(isreminderset));
		sb.append(",recurrence2patterntimezone="+recurrence2patterntimezone);
		sb.append(",accountid="+accountid);
		sb.append(",enddate="+String.valueOf(enddate));
		sb.append(",recurrence2patternversion="+recurrence2patternversion);
		sb.append(",recurrencetype="+recurrencetype);
		sb.append(",activitydatetime="+String.valueOf(activitydatetime));
		sb.append(",subject="+subject);
		sb.append(",rcsfl__key__c="+rcsfl__key__c);
		sb.append(",recurrencestartdatetime="+String.valueOf(recurrencestartdatetime));
		sb.append(",reminderdatetime="+String.valueOf(reminderdatetime));
		sb.append(",rcsfl__recording_information__c="+rcsfl__recording_information__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",ownerid="+ownerid);
		sb.append(",showas="+showas);
		sb.append(",rcsfl__call_uuid__c="+rcsfl__call_uuid__c);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",ischild="+String.valueOf(ischild));
		sb.append(",rcsfl__call_unique_id__c="+rcsfl__call_unique_id__c);
		sb.append(",recurrenceinterval="+String.valueOf(recurrenceinterval));
		sb.append(",groupeventtype="+groupeventtype);
		sb.append(",isalldayevent="+String.valueOf(isalldayevent));
		sb.append(",location="+location);
		sb.append(",rcsfl__external_whoid__c="+rcsfl__external_whoid__c);
		sb.append(",isrecurrence2exclusion="+String.valueOf(isrecurrence2exclusion));
		sb.append(",enddatetime="+String.valueOf(enddatetime));
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",isrecurrence2exception="+String.valueOf(isrecurrence2exception));
		sb.append(",isrecurrence2="+String.valueOf(isrecurrence2));
		sb.append(",isprivate="+String.valueOf(isprivate));
		sb.append(",whoid="+whoid);
		sb.append(",isrecurrence="+String.valueOf(isrecurrence));
		sb.append(",createdbyid="+createdbyid);
		sb.append(",recurrencetimezonesidkey="+recurrencetimezonesidkey);
		sb.append(",recurrenceactivityid="+recurrenceactivityid);
		sb.append(",recurrence2patterntext="+recurrence2patterntext);
		sb.append(",noodlecrm__contact_type__c="+noodlecrm__contact_type__c);
		sb.append(",description="+description);
		sb.append(",startdatetime="+String.valueOf(startdatetime));
		sb.append(",recurrencedayofmonth="+String.valueOf(recurrencedayofmonth));
		sb.append(",activitydate="+String.valueOf(activitydate));
		sb.append(",whatid="+whatid);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__category__c="+noodlecrm__category__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String eventsubtype;

				public String getEventsubtype () {
					return this.eventsubtype;
				}
				
			    public java.util.Date recurrence2patternstartdate;

				public java.util.Date getRecurrence2patternstartdate () {
					return this.recurrence2patternstartdate;
				}
				
			    public String rcsfl__rc_logging_type__c;

				public String getRcsfl__rc_logging_type__c () {
					return this.rcsfl__rc_logging_type__c;
				}
				
			    public Integer recurrencedayofweekmask;

				public Integer getRecurrencedayofweekmask () {
					return this.recurrencedayofweekmask;
				}
				
			    public String recurrencemonthofyear;

				public String getRecurrencemonthofyear () {
					return this.recurrencemonthofyear;
				}
				
			    public String recurrenceinstance;

				public String getRecurrenceinstance () {
					return this.recurrenceinstance;
				}
				
			    public Boolean isgroupevent;

				public Boolean getIsgroupevent () {
					return this.isgroupevent;
				}
				
			    public java.util.Date recurrenceenddateonly;

				public java.util.Date getRecurrenceenddateonly () {
					return this.recurrenceenddateonly;
				}
				
			    public Integer durationinminutes;

				public Integer getDurationinminutes () {
					return this.durationinminutes;
				}
				
			    public Boolean isreminderset;

				public Boolean getIsreminderset () {
					return this.isreminderset;
				}
				
			    public String recurrence2patterntimezone;

				public String getRecurrence2patterntimezone () {
					return this.recurrence2patterntimezone;
				}
				
			    public String accountid;

				public String getAccountid () {
					return this.accountid;
				}
				
			    public java.util.Date enddate;

				public java.util.Date getEnddate () {
					return this.enddate;
				}
				
			    public String recurrence2patternversion;

				public String getRecurrence2patternversion () {
					return this.recurrence2patternversion;
				}
				
			    public String recurrencetype;

				public String getRecurrencetype () {
					return this.recurrencetype;
				}
				
			    public java.util.Date activitydatetime;

				public java.util.Date getActivitydatetime () {
					return this.activitydatetime;
				}
				
			    public String subject;

				public String getSubject () {
					return this.subject;
				}
				
			    public String rcsfl__key__c;

				public String getRcsfl__key__c () {
					return this.rcsfl__key__c;
				}
				
			    public java.util.Date recurrencestartdatetime;

				public java.util.Date getRecurrencestartdatetime () {
					return this.recurrencestartdatetime;
				}
				
			    public java.util.Date reminderdatetime;

				public java.util.Date getReminderdatetime () {
					return this.reminderdatetime;
				}
				
			    public String rcsfl__recording_information__c;

				public String getRcsfl__recording_information__c () {
					return this.rcsfl__recording_information__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public String showas;

				public String getShowas () {
					return this.showas;
				}
				
			    public String rcsfl__call_uuid__c;

				public String getRcsfl__call_uuid__c () {
					return this.rcsfl__call_uuid__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public Boolean ischild;

				public Boolean getIschild () {
					return this.ischild;
				}
				
			    public String rcsfl__call_unique_id__c;

				public String getRcsfl__call_unique_id__c () {
					return this.rcsfl__call_unique_id__c;
				}
				
			    public Integer recurrenceinterval;

				public Integer getRecurrenceinterval () {
					return this.recurrenceinterval;
				}
				
			    public String groupeventtype;

				public String getGroupeventtype () {
					return this.groupeventtype;
				}
				
			    public Boolean isalldayevent;

				public Boolean getIsalldayevent () {
					return this.isalldayevent;
				}
				
			    public String location;

				public String getLocation () {
					return this.location;
				}
				
			    public String rcsfl__external_whoid__c;

				public String getRcsfl__external_whoid__c () {
					return this.rcsfl__external_whoid__c;
				}
				
			    public Boolean isrecurrence2exclusion;

				public Boolean getIsrecurrence2exclusion () {
					return this.isrecurrence2exclusion;
				}
				
			    public java.util.Date enddatetime;

				public java.util.Date getEnddatetime () {
					return this.enddatetime;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean isrecurrence2exception;

				public Boolean getIsrecurrence2exception () {
					return this.isrecurrence2exception;
				}
				
			    public Boolean isrecurrence2;

				public Boolean getIsrecurrence2 () {
					return this.isrecurrence2;
				}
				
			    public Boolean isprivate;

				public Boolean getIsprivate () {
					return this.isprivate;
				}
				
			    public String whoid;

				public String getWhoid () {
					return this.whoid;
				}
				
			    public Boolean isrecurrence;

				public Boolean getIsrecurrence () {
					return this.isrecurrence;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String recurrencetimezonesidkey;

				public String getRecurrencetimezonesidkey () {
					return this.recurrencetimezonesidkey;
				}
				
			    public String recurrenceactivityid;

				public String getRecurrenceactivityid () {
					return this.recurrenceactivityid;
				}
				
			    public String recurrence2patterntext;

				public String getRecurrence2patterntext () {
					return this.recurrence2patterntext;
				}
				
			    public String noodlecrm__contact_type__c;

				public String getNoodlecrm__contact_type__c () {
					return this.noodlecrm__contact_type__c;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public java.util.Date startdatetime;

				public java.util.Date getStartdatetime () {
					return this.startdatetime;
				}
				
			    public Integer recurrencedayofmonth;

				public Integer getRecurrencedayofmonth () {
					return this.recurrencedayofmonth;
				}
				
			    public java.util.Date activitydate;

				public java.util.Date getActivitydate () {
					return this.activitydate;
				}
				
			    public String whatid;

				public String getWhatid () {
					return this.whatid;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__category__c;

				public String getNoodlecrm__category__c () {
					return this.noodlecrm__category__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.eventsubtype = readString(dis);
					
					this.recurrence2patternstartdate = readDate(dis);
					
					this.rcsfl__rc_logging_type__c = readString(dis);
					
						this.recurrencedayofweekmask = readInteger(dis);
					
					this.recurrencemonthofyear = readString(dis);
					
					this.recurrenceinstance = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isgroupevent = null;
           				} else {
           			    	this.isgroupevent = dis.readBoolean();
           				}
					
					this.recurrenceenddateonly = readDate(dis);
					
						this.durationinminutes = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isreminderset = null;
           				} else {
           			    	this.isreminderset = dis.readBoolean();
           				}
					
					this.recurrence2patterntimezone = readString(dis);
					
					this.accountid = readString(dis);
					
					this.enddate = readDate(dis);
					
					this.recurrence2patternversion = readString(dis);
					
					this.recurrencetype = readString(dis);
					
					this.activitydatetime = readDate(dis);
					
					this.subject = readString(dis);
					
					this.rcsfl__key__c = readString(dis);
					
					this.recurrencestartdatetime = readDate(dis);
					
					this.reminderdatetime = readDate(dis);
					
					this.rcsfl__recording_information__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.ownerid = readString(dis);
					
					this.showas = readString(dis);
					
					this.rcsfl__call_uuid__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.lastmodifiedbyid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ischild = null;
           				} else {
           			    	this.ischild = dis.readBoolean();
           				}
					
					this.rcsfl__call_unique_id__c = readString(dis);
					
						this.recurrenceinterval = readInteger(dis);
					
					this.groupeventtype = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isalldayevent = null;
           				} else {
           			    	this.isalldayevent = dis.readBoolean();
           				}
					
					this.location = readString(dis);
					
					this.rcsfl__external_whoid__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence2exclusion = null;
           				} else {
           			    	this.isrecurrence2exclusion = dis.readBoolean();
           				}
					
					this.enddatetime = readDate(dis);
					
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence2exception = null;
           				} else {
           			    	this.isrecurrence2exception = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence2 = null;
           				} else {
           			    	this.isrecurrence2 = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isprivate = null;
           				} else {
           			    	this.isprivate = dis.readBoolean();
           				}
					
					this.whoid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence = null;
           				} else {
           			    	this.isrecurrence = dis.readBoolean();
           				}
					
					this.createdbyid = readString(dis);
					
					this.recurrencetimezonesidkey = readString(dis);
					
					this.recurrenceactivityid = readString(dis);
					
					this.recurrence2patterntext = readString(dis);
					
					this.noodlecrm__contact_type__c = readString(dis);
					
					this.description = readString(dis);
					
					this.startdatetime = readDate(dis);
					
						this.recurrencedayofmonth = readInteger(dis);
					
					this.activitydate = readDate(dis);
					
					this.whatid = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__category__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.eventsubtype,dos);
					
					// java.util.Date
				
						writeDate(this.recurrence2patternstartdate,dos);
					
					// String
				
						writeString(this.rcsfl__rc_logging_type__c,dos);
					
					// Integer
				
						writeInteger(this.recurrencedayofweekmask,dos);
					
					// String
				
						writeString(this.recurrencemonthofyear,dos);
					
					// String
				
						writeString(this.recurrenceinstance,dos);
					
					// Boolean
				
						if(this.isgroupevent == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isgroupevent);
		            	}
					
					// java.util.Date
				
						writeDate(this.recurrenceenddateonly,dos);
					
					// Integer
				
						writeInteger(this.durationinminutes,dos);
					
					// Boolean
				
						if(this.isreminderset == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isreminderset);
		            	}
					
					// String
				
						writeString(this.recurrence2patterntimezone,dos);
					
					// String
				
						writeString(this.accountid,dos);
					
					// java.util.Date
				
						writeDate(this.enddate,dos);
					
					// String
				
						writeString(this.recurrence2patternversion,dos);
					
					// String
				
						writeString(this.recurrencetype,dos);
					
					// java.util.Date
				
						writeDate(this.activitydatetime,dos);
					
					// String
				
						writeString(this.subject,dos);
					
					// String
				
						writeString(this.rcsfl__key__c,dos);
					
					// java.util.Date
				
						writeDate(this.recurrencestartdatetime,dos);
					
					// java.util.Date
				
						writeDate(this.reminderdatetime,dos);
					
					// String
				
						writeString(this.rcsfl__recording_information__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// String
				
						writeString(this.showas,dos);
					
					// String
				
						writeString(this.rcsfl__call_uuid__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// Boolean
				
						if(this.ischild == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.ischild);
		            	}
					
					// String
				
						writeString(this.rcsfl__call_unique_id__c,dos);
					
					// Integer
				
						writeInteger(this.recurrenceinterval,dos);
					
					// String
				
						writeString(this.groupeventtype,dos);
					
					// Boolean
				
						if(this.isalldayevent == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isalldayevent);
		            	}
					
					// String
				
						writeString(this.location,dos);
					
					// String
				
						writeString(this.rcsfl__external_whoid__c,dos);
					
					// Boolean
				
						if(this.isrecurrence2exclusion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence2exclusion);
		            	}
					
					// java.util.Date
				
						writeDate(this.enddatetime,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.isrecurrence2exception == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence2exception);
		            	}
					
					// Boolean
				
						if(this.isrecurrence2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence2);
		            	}
					
					// Boolean
				
						if(this.isprivate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isprivate);
		            	}
					
					// String
				
						writeString(this.whoid,dos);
					
					// Boolean
				
						if(this.isrecurrence == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence);
		            	}
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.recurrencetimezonesidkey,dos);
					
					// String
				
						writeString(this.recurrenceactivityid,dos);
					
					// String
				
						writeString(this.recurrence2patterntext,dos);
					
					// String
				
						writeString(this.noodlecrm__contact_type__c,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// java.util.Date
				
						writeDate(this.startdatetime,dos);
					
					// Integer
				
						writeInteger(this.recurrencedayofmonth,dos);
					
					// java.util.Date
				
						writeDate(this.activitydate,dos);
					
					// String
				
						writeString(this.whatid,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__category__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("eventsubtype="+eventsubtype);
		sb.append(",recurrence2patternstartdate="+String.valueOf(recurrence2patternstartdate));
		sb.append(",rcsfl__rc_logging_type__c="+rcsfl__rc_logging_type__c);
		sb.append(",recurrencedayofweekmask="+String.valueOf(recurrencedayofweekmask));
		sb.append(",recurrencemonthofyear="+recurrencemonthofyear);
		sb.append(",recurrenceinstance="+recurrenceinstance);
		sb.append(",isgroupevent="+String.valueOf(isgroupevent));
		sb.append(",recurrenceenddateonly="+String.valueOf(recurrenceenddateonly));
		sb.append(",durationinminutes="+String.valueOf(durationinminutes));
		sb.append(",isreminderset="+String.valueOf(isreminderset));
		sb.append(",recurrence2patterntimezone="+recurrence2patterntimezone);
		sb.append(",accountid="+accountid);
		sb.append(",enddate="+String.valueOf(enddate));
		sb.append(",recurrence2patternversion="+recurrence2patternversion);
		sb.append(",recurrencetype="+recurrencetype);
		sb.append(",activitydatetime="+String.valueOf(activitydatetime));
		sb.append(",subject="+subject);
		sb.append(",rcsfl__key__c="+rcsfl__key__c);
		sb.append(",recurrencestartdatetime="+String.valueOf(recurrencestartdatetime));
		sb.append(",reminderdatetime="+String.valueOf(reminderdatetime));
		sb.append(",rcsfl__recording_information__c="+rcsfl__recording_information__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",ownerid="+ownerid);
		sb.append(",showas="+showas);
		sb.append(",rcsfl__call_uuid__c="+rcsfl__call_uuid__c);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",ischild="+String.valueOf(ischild));
		sb.append(",rcsfl__call_unique_id__c="+rcsfl__call_unique_id__c);
		sb.append(",recurrenceinterval="+String.valueOf(recurrenceinterval));
		sb.append(",groupeventtype="+groupeventtype);
		sb.append(",isalldayevent="+String.valueOf(isalldayevent));
		sb.append(",location="+location);
		sb.append(",rcsfl__external_whoid__c="+rcsfl__external_whoid__c);
		sb.append(",isrecurrence2exclusion="+String.valueOf(isrecurrence2exclusion));
		sb.append(",enddatetime="+String.valueOf(enddatetime));
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",isrecurrence2exception="+String.valueOf(isrecurrence2exception));
		sb.append(",isrecurrence2="+String.valueOf(isrecurrence2));
		sb.append(",isprivate="+String.valueOf(isprivate));
		sb.append(",whoid="+whoid);
		sb.append(",isrecurrence="+String.valueOf(isrecurrence));
		sb.append(",createdbyid="+createdbyid);
		sb.append(",recurrencetimezonesidkey="+recurrencetimezonesidkey);
		sb.append(",recurrenceactivityid="+recurrenceactivityid);
		sb.append(",recurrence2patterntext="+recurrence2patterntext);
		sb.append(",noodlecrm__contact_type__c="+noodlecrm__contact_type__c);
		sb.append(",description="+description);
		sb.append(",startdatetime="+String.valueOf(startdatetime));
		sb.append(",recurrencedayofmonth="+String.valueOf(recurrencedayofmonth));
		sb.append(",activitydate="+String.valueOf(activitydate));
		sb.append(",whatid="+whatid);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__category__c="+noodlecrm__category__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String eventsubtype;

				public String getEventsubtype () {
					return this.eventsubtype;
				}
				
			    public java.util.Date recurrence2patternstartdate;

				public java.util.Date getRecurrence2patternstartdate () {
					return this.recurrence2patternstartdate;
				}
				
			    public String rcsfl__rc_logging_type__c;

				public String getRcsfl__rc_logging_type__c () {
					return this.rcsfl__rc_logging_type__c;
				}
				
			    public Integer recurrencedayofweekmask;

				public Integer getRecurrencedayofweekmask () {
					return this.recurrencedayofweekmask;
				}
				
			    public String recurrencemonthofyear;

				public String getRecurrencemonthofyear () {
					return this.recurrencemonthofyear;
				}
				
			    public String recurrenceinstance;

				public String getRecurrenceinstance () {
					return this.recurrenceinstance;
				}
				
			    public Boolean isgroupevent;

				public Boolean getIsgroupevent () {
					return this.isgroupevent;
				}
				
			    public java.util.Date recurrenceenddateonly;

				public java.util.Date getRecurrenceenddateonly () {
					return this.recurrenceenddateonly;
				}
				
			    public Integer durationinminutes;

				public Integer getDurationinminutes () {
					return this.durationinminutes;
				}
				
			    public Boolean isreminderset;

				public Boolean getIsreminderset () {
					return this.isreminderset;
				}
				
			    public String recurrence2patterntimezone;

				public String getRecurrence2patterntimezone () {
					return this.recurrence2patterntimezone;
				}
				
			    public String accountid;

				public String getAccountid () {
					return this.accountid;
				}
				
			    public java.util.Date enddate;

				public java.util.Date getEnddate () {
					return this.enddate;
				}
				
			    public String recurrence2patternversion;

				public String getRecurrence2patternversion () {
					return this.recurrence2patternversion;
				}
				
			    public String recurrencetype;

				public String getRecurrencetype () {
					return this.recurrencetype;
				}
				
			    public java.util.Date activitydatetime;

				public java.util.Date getActivitydatetime () {
					return this.activitydatetime;
				}
				
			    public String subject;

				public String getSubject () {
					return this.subject;
				}
				
			    public String rcsfl__key__c;

				public String getRcsfl__key__c () {
					return this.rcsfl__key__c;
				}
				
			    public java.util.Date recurrencestartdatetime;

				public java.util.Date getRecurrencestartdatetime () {
					return this.recurrencestartdatetime;
				}
				
			    public java.util.Date reminderdatetime;

				public java.util.Date getReminderdatetime () {
					return this.reminderdatetime;
				}
				
			    public String rcsfl__recording_information__c;

				public String getRcsfl__recording_information__c () {
					return this.rcsfl__recording_information__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public String showas;

				public String getShowas () {
					return this.showas;
				}
				
			    public String rcsfl__call_uuid__c;

				public String getRcsfl__call_uuid__c () {
					return this.rcsfl__call_uuid__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public Boolean ischild;

				public Boolean getIschild () {
					return this.ischild;
				}
				
			    public String rcsfl__call_unique_id__c;

				public String getRcsfl__call_unique_id__c () {
					return this.rcsfl__call_unique_id__c;
				}
				
			    public Integer recurrenceinterval;

				public Integer getRecurrenceinterval () {
					return this.recurrenceinterval;
				}
				
			    public String groupeventtype;

				public String getGroupeventtype () {
					return this.groupeventtype;
				}
				
			    public Boolean isalldayevent;

				public Boolean getIsalldayevent () {
					return this.isalldayevent;
				}
				
			    public String location;

				public String getLocation () {
					return this.location;
				}
				
			    public String rcsfl__external_whoid__c;

				public String getRcsfl__external_whoid__c () {
					return this.rcsfl__external_whoid__c;
				}
				
			    public Boolean isrecurrence2exclusion;

				public Boolean getIsrecurrence2exclusion () {
					return this.isrecurrence2exclusion;
				}
				
			    public java.util.Date enddatetime;

				public java.util.Date getEnddatetime () {
					return this.enddatetime;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean isrecurrence2exception;

				public Boolean getIsrecurrence2exception () {
					return this.isrecurrence2exception;
				}
				
			    public Boolean isrecurrence2;

				public Boolean getIsrecurrence2 () {
					return this.isrecurrence2;
				}
				
			    public Boolean isprivate;

				public Boolean getIsprivate () {
					return this.isprivate;
				}
				
			    public String whoid;

				public String getWhoid () {
					return this.whoid;
				}
				
			    public Boolean isrecurrence;

				public Boolean getIsrecurrence () {
					return this.isrecurrence;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String recurrencetimezonesidkey;

				public String getRecurrencetimezonesidkey () {
					return this.recurrencetimezonesidkey;
				}
				
			    public String recurrenceactivityid;

				public String getRecurrenceactivityid () {
					return this.recurrenceactivityid;
				}
				
			    public String recurrence2patterntext;

				public String getRecurrence2patterntext () {
					return this.recurrence2patterntext;
				}
				
			    public String noodlecrm__contact_type__c;

				public String getNoodlecrm__contact_type__c () {
					return this.noodlecrm__contact_type__c;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public java.util.Date startdatetime;

				public java.util.Date getStartdatetime () {
					return this.startdatetime;
				}
				
			    public Integer recurrencedayofmonth;

				public Integer getRecurrencedayofmonth () {
					return this.recurrencedayofmonth;
				}
				
			    public java.util.Date activitydate;

				public java.util.Date getActivitydate () {
					return this.activitydate;
				}
				
			    public String whatid;

				public String getWhatid () {
					return this.whatid;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__category__c;

				public String getNoodlecrm__category__c () {
					return this.noodlecrm__category__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.eventsubtype = readString(dis);
					
					this.recurrence2patternstartdate = readDate(dis);
					
					this.rcsfl__rc_logging_type__c = readString(dis);
					
						this.recurrencedayofweekmask = readInteger(dis);
					
					this.recurrencemonthofyear = readString(dis);
					
					this.recurrenceinstance = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isgroupevent = null;
           				} else {
           			    	this.isgroupevent = dis.readBoolean();
           				}
					
					this.recurrenceenddateonly = readDate(dis);
					
						this.durationinminutes = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isreminderset = null;
           				} else {
           			    	this.isreminderset = dis.readBoolean();
           				}
					
					this.recurrence2patterntimezone = readString(dis);
					
					this.accountid = readString(dis);
					
					this.enddate = readDate(dis);
					
					this.recurrence2patternversion = readString(dis);
					
					this.recurrencetype = readString(dis);
					
					this.activitydatetime = readDate(dis);
					
					this.subject = readString(dis);
					
					this.rcsfl__key__c = readString(dis);
					
					this.recurrencestartdatetime = readDate(dis);
					
					this.reminderdatetime = readDate(dis);
					
					this.rcsfl__recording_information__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.ownerid = readString(dis);
					
					this.showas = readString(dis);
					
					this.rcsfl__call_uuid__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.lastmodifiedbyid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ischild = null;
           				} else {
           			    	this.ischild = dis.readBoolean();
           				}
					
					this.rcsfl__call_unique_id__c = readString(dis);
					
						this.recurrenceinterval = readInteger(dis);
					
					this.groupeventtype = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isalldayevent = null;
           				} else {
           			    	this.isalldayevent = dis.readBoolean();
           				}
					
					this.location = readString(dis);
					
					this.rcsfl__external_whoid__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence2exclusion = null;
           				} else {
           			    	this.isrecurrence2exclusion = dis.readBoolean();
           				}
					
					this.enddatetime = readDate(dis);
					
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence2exception = null;
           				} else {
           			    	this.isrecurrence2exception = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence2 = null;
           				} else {
           			    	this.isrecurrence2 = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isprivate = null;
           				} else {
           			    	this.isprivate = dis.readBoolean();
           				}
					
					this.whoid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence = null;
           				} else {
           			    	this.isrecurrence = dis.readBoolean();
           				}
					
					this.createdbyid = readString(dis);
					
					this.recurrencetimezonesidkey = readString(dis);
					
					this.recurrenceactivityid = readString(dis);
					
					this.recurrence2patterntext = readString(dis);
					
					this.noodlecrm__contact_type__c = readString(dis);
					
					this.description = readString(dis);
					
					this.startdatetime = readDate(dis);
					
						this.recurrencedayofmonth = readInteger(dis);
					
					this.activitydate = readDate(dis);
					
					this.whatid = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__category__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.eventsubtype,dos);
					
					// java.util.Date
				
						writeDate(this.recurrence2patternstartdate,dos);
					
					// String
				
						writeString(this.rcsfl__rc_logging_type__c,dos);
					
					// Integer
				
						writeInteger(this.recurrencedayofweekmask,dos);
					
					// String
				
						writeString(this.recurrencemonthofyear,dos);
					
					// String
				
						writeString(this.recurrenceinstance,dos);
					
					// Boolean
				
						if(this.isgroupevent == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isgroupevent);
		            	}
					
					// java.util.Date
				
						writeDate(this.recurrenceenddateonly,dos);
					
					// Integer
				
						writeInteger(this.durationinminutes,dos);
					
					// Boolean
				
						if(this.isreminderset == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isreminderset);
		            	}
					
					// String
				
						writeString(this.recurrence2patterntimezone,dos);
					
					// String
				
						writeString(this.accountid,dos);
					
					// java.util.Date
				
						writeDate(this.enddate,dos);
					
					// String
				
						writeString(this.recurrence2patternversion,dos);
					
					// String
				
						writeString(this.recurrencetype,dos);
					
					// java.util.Date
				
						writeDate(this.activitydatetime,dos);
					
					// String
				
						writeString(this.subject,dos);
					
					// String
				
						writeString(this.rcsfl__key__c,dos);
					
					// java.util.Date
				
						writeDate(this.recurrencestartdatetime,dos);
					
					// java.util.Date
				
						writeDate(this.reminderdatetime,dos);
					
					// String
				
						writeString(this.rcsfl__recording_information__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// String
				
						writeString(this.showas,dos);
					
					// String
				
						writeString(this.rcsfl__call_uuid__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// Boolean
				
						if(this.ischild == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.ischild);
		            	}
					
					// String
				
						writeString(this.rcsfl__call_unique_id__c,dos);
					
					// Integer
				
						writeInteger(this.recurrenceinterval,dos);
					
					// String
				
						writeString(this.groupeventtype,dos);
					
					// Boolean
				
						if(this.isalldayevent == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isalldayevent);
		            	}
					
					// String
				
						writeString(this.location,dos);
					
					// String
				
						writeString(this.rcsfl__external_whoid__c,dos);
					
					// Boolean
				
						if(this.isrecurrence2exclusion == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence2exclusion);
		            	}
					
					// java.util.Date
				
						writeDate(this.enddatetime,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.isrecurrence2exception == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence2exception);
		            	}
					
					// Boolean
				
						if(this.isrecurrence2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence2);
		            	}
					
					// Boolean
				
						if(this.isprivate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isprivate);
		            	}
					
					// String
				
						writeString(this.whoid,dos);
					
					// Boolean
				
						if(this.isrecurrence == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence);
		            	}
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.recurrencetimezonesidkey,dos);
					
					// String
				
						writeString(this.recurrenceactivityid,dos);
					
					// String
				
						writeString(this.recurrence2patterntext,dos);
					
					// String
				
						writeString(this.noodlecrm__contact_type__c,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// java.util.Date
				
						writeDate(this.startdatetime,dos);
					
					// Integer
				
						writeInteger(this.recurrencedayofmonth,dos);
					
					// java.util.Date
				
						writeDate(this.activitydate,dos);
					
					// String
				
						writeString(this.whatid,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__category__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("eventsubtype="+eventsubtype);
		sb.append(",recurrence2patternstartdate="+String.valueOf(recurrence2patternstartdate));
		sb.append(",rcsfl__rc_logging_type__c="+rcsfl__rc_logging_type__c);
		sb.append(",recurrencedayofweekmask="+String.valueOf(recurrencedayofweekmask));
		sb.append(",recurrencemonthofyear="+recurrencemonthofyear);
		sb.append(",recurrenceinstance="+recurrenceinstance);
		sb.append(",isgroupevent="+String.valueOf(isgroupevent));
		sb.append(",recurrenceenddateonly="+String.valueOf(recurrenceenddateonly));
		sb.append(",durationinminutes="+String.valueOf(durationinminutes));
		sb.append(",isreminderset="+String.valueOf(isreminderset));
		sb.append(",recurrence2patterntimezone="+recurrence2patterntimezone);
		sb.append(",accountid="+accountid);
		sb.append(",enddate="+String.valueOf(enddate));
		sb.append(",recurrence2patternversion="+recurrence2patternversion);
		sb.append(",recurrencetype="+recurrencetype);
		sb.append(",activitydatetime="+String.valueOf(activitydatetime));
		sb.append(",subject="+subject);
		sb.append(",rcsfl__key__c="+rcsfl__key__c);
		sb.append(",recurrencestartdatetime="+String.valueOf(recurrencestartdatetime));
		sb.append(",reminderdatetime="+String.valueOf(reminderdatetime));
		sb.append(",rcsfl__recording_information__c="+rcsfl__recording_information__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",ownerid="+ownerid);
		sb.append(",showas="+showas);
		sb.append(",rcsfl__call_uuid__c="+rcsfl__call_uuid__c);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",ischild="+String.valueOf(ischild));
		sb.append(",rcsfl__call_unique_id__c="+rcsfl__call_unique_id__c);
		sb.append(",recurrenceinterval="+String.valueOf(recurrenceinterval));
		sb.append(",groupeventtype="+groupeventtype);
		sb.append(",isalldayevent="+String.valueOf(isalldayevent));
		sb.append(",location="+location);
		sb.append(",rcsfl__external_whoid__c="+rcsfl__external_whoid__c);
		sb.append(",isrecurrence2exclusion="+String.valueOf(isrecurrence2exclusion));
		sb.append(",enddatetime="+String.valueOf(enddatetime));
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",isrecurrence2exception="+String.valueOf(isrecurrence2exception));
		sb.append(",isrecurrence2="+String.valueOf(isrecurrence2));
		sb.append(",isprivate="+String.valueOf(isprivate));
		sb.append(",whoid="+whoid);
		sb.append(",isrecurrence="+String.valueOf(isrecurrence));
		sb.append(",createdbyid="+createdbyid);
		sb.append(",recurrencetimezonesidkey="+recurrencetimezonesidkey);
		sb.append(",recurrenceactivityid="+recurrenceactivityid);
		sb.append(",recurrence2patterntext="+recurrence2patterntext);
		sb.append(",noodlecrm__contact_type__c="+noodlecrm__contact_type__c);
		sb.append(",description="+description);
		sb.append(",startdatetime="+String.valueOf(startdatetime));
		sb.append(",recurrencedayofmonth="+String.valueOf(recurrencedayofmonth));
		sb.append(",activitydate="+String.valueOf(activitydate));
		sb.append(",whatid="+whatid);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__category__c="+noodlecrm__category__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
out5Struct out5 = new out5Struct();
out6Struct out6 = new out6Struct();





	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File(context.staging_S3_dir + "event.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
                String[] headColutFileOutputDelimited_3=new String[56];
            class CSVBasicSet_tFileOutputDelimited_3{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_3[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_3 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_3[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_3 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_3[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_3[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_3 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 =0;
            int currentRow_tFileOutputDelimited_3 = 0;


            CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
            csvSettings_tFileOutputDelimited_3.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_3.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_3.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                            if(fileToDelete_tFileOutputDelimited_3.exists()) {
                                fileToDelete_tFileOutputDelimited_3.delete();
                            }
                            CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_3.setSeparator(csvSettings_tFileOutputDelimited_3.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_3.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_3.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_3.setLineEnd(""+csvSettings_tFileOutputDelimited_3.getRowDelim());
                    }
                        if(filetFileOutputDelimited_3.length()==0){
                                    headColutFileOutputDelimited_3[0]="eventsubtype";
                                    headColutFileOutputDelimited_3[1]="recurrence2patternstartdate";
                                    headColutFileOutputDelimited_3[2]="rcsfl__rc_logging_type__c";
                                    headColutFileOutputDelimited_3[3]="recurrencedayofweekmask";
                                    headColutFileOutputDelimited_3[4]="recurrencemonthofyear";
                                    headColutFileOutputDelimited_3[5]="recurrenceinstance";
                                    headColutFileOutputDelimited_3[6]="isgroupevent";
                                    headColutFileOutputDelimited_3[7]="recurrenceenddateonly";
                                    headColutFileOutputDelimited_3[8]="durationinminutes";
                                    headColutFileOutputDelimited_3[9]="isreminderset";
                                    headColutFileOutputDelimited_3[10]="recurrence2patterntimezone";
                                    headColutFileOutputDelimited_3[11]="accountid";
                                    headColutFileOutputDelimited_3[12]="enddate";
                                    headColutFileOutputDelimited_3[13]="recurrence2patternversion";
                                    headColutFileOutputDelimited_3[14]="recurrencetype";
                                    headColutFileOutputDelimited_3[15]="activitydatetime";
                                    headColutFileOutputDelimited_3[16]="subject";
                                    headColutFileOutputDelimited_3[17]="rcsfl__key__c";
                                    headColutFileOutputDelimited_3[18]="recurrencestartdatetime";
                                    headColutFileOutputDelimited_3[19]="reminderdatetime";
                                    headColutFileOutputDelimited_3[20]="rcsfl__recording_information__c";
                                    headColutFileOutputDelimited_3[21]="lastmodifieddate";
                                    headColutFileOutputDelimited_3[22]="ownerid";
                                    headColutFileOutputDelimited_3[23]="showas";
                                    headColutFileOutputDelimited_3[24]="rcsfl__call_uuid__c";
                                    headColutFileOutputDelimited_3[25]="isdeleted";
                                    headColutFileOutputDelimited_3[26]="systemmodstamp";
                                    headColutFileOutputDelimited_3[27]="lastmodifiedbyid";
                                    headColutFileOutputDelimited_3[28]="ischild";
                                    headColutFileOutputDelimited_3[29]="rcsfl__call_unique_id__c";
                                    headColutFileOutputDelimited_3[30]="recurrenceinterval";
                                    headColutFileOutputDelimited_3[31]="groupeventtype";
                                    headColutFileOutputDelimited_3[32]="isalldayevent";
                                    headColutFileOutputDelimited_3[33]="location";
                                    headColutFileOutputDelimited_3[34]="rcsfl__external_whoid__c";
                                    headColutFileOutputDelimited_3[35]="isrecurrence2exclusion";
                                    headColutFileOutputDelimited_3[36]="enddatetime";
                                    headColutFileOutputDelimited_3[37]="createddate";
                                    headColutFileOutputDelimited_3[38]="isrecurrence2exception";
                                    headColutFileOutputDelimited_3[39]="isrecurrence2";
                                    headColutFileOutputDelimited_3[40]="isprivate";
                                    headColutFileOutputDelimited_3[41]="whoid";
                                    headColutFileOutputDelimited_3[42]="isrecurrence";
                                    headColutFileOutputDelimited_3[43]="createdbyid";
                                    headColutFileOutputDelimited_3[44]="recurrencetimezonesidkey";
                                    headColutFileOutputDelimited_3[45]="recurrenceactivityid";
                                    headColutFileOutputDelimited_3[46]="recurrence2patterntext";
                                    headColutFileOutputDelimited_3[47]="noodlecrm__contact_type__c";
                                    headColutFileOutputDelimited_3[48]="description";
                                    headColutFileOutputDelimited_3[49]="startdatetime";
                                    headColutFileOutputDelimited_3[50]="recurrencedayofmonth";
                                    headColutFileOutputDelimited_3[51]="activitydate";
                                    headColutFileOutputDelimited_3[52]="whatid";
                                    headColutFileOutputDelimited_3[53]="sfid";
                                    headColutFileOutputDelimited_3[54]="id";
                                    headColutFileOutputDelimited_3[55]="noodlecrm__category__c";
                            CsvWritertFileOutputDelimited_3.writeNext(headColutFileOutputDelimited_3);
                            CsvWritertFileOutputDelimited_3.flush();
                        }
                CsvWritertFileOutputDelimited_3.setEscapeChar(csvSettings_tFileOutputDelimited_3.getEscapeChar());
                CsvWritertFileOutputDelimited_3.setQuoteChar(csvSettings_tFileOutputDelimited_3.getTextEnclosure());
                CsvWritertFileOutputDelimited_3.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_3", CsvWritertFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */




	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("event");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("event");
}

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_3 = 100000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
            try (java.sql.Statement stmtClear_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                stmtClear_tDBOutput_3.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_3 + "\"");
            }
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"eventsubtype\",\"recurrence2patternstartdate\",\"rcsfl__rc_logging_type__c\",\"recurrencedayofweekmask\",\"recurrencemonthofyear\",\"recurrenceinstance\",\"isgroupevent\",\"recurrenceenddateonly\",\"durationinminutes\",\"isreminderset\",\"recurrence2patterntimezone\",\"accountid\",\"enddate\",\"recurrence2patternversion\",\"recurrencetype\",\"activitydatetime\",\"subject\",\"rcsfl__key__c\",\"recurrencestartdatetime\",\"reminderdatetime\",\"rcsfl__recording_information__c\",\"lastmodifieddate\",\"ownerid\",\"showas\",\"rcsfl__call_uuid__c\",\"isdeleted\",\"systemmodstamp\",\"lastmodifiedbyid\",\"ischild\",\"rcsfl__call_unique_id__c\",\"recurrenceinterval\",\"groupeventtype\",\"isalldayevent\",\"location\",\"rcsfl__external_whoid__c\",\"isrecurrence2exclusion\",\"enddatetime\",\"createddate\",\"isrecurrence2exception\",\"isrecurrence2\",\"isprivate\",\"whoid\",\"isrecurrence\",\"createdbyid\",\"recurrencetimezonesidkey\",\"recurrenceactivityid\",\"recurrence2patterntext\",\"noodlecrm__contact_type__c\",\"description\",\"startdatetime\",\"recurrencedayofmonth\",\"activitydate\",\"whatid\",\"sfid\",\"id\",\"noodlecrm__category__c\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
out6Struct out6_tmp = new out6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT eventsubtype\n       , recurrence2patternstartdate\n       , rcsfl__rc_logging_type__c\n       , recurrencedayof"
+"weekmask\n       , recurrencemonthofyear\n       , recurrenceinstance\n       , isgroupevent\n       , recurrenceenddate"
+"only\n       , durationinminutes\n       , isreminderset\n       , recurrence2patterntimezone\n       , accountid\n     "
+"  , enddate\n       , recurrence2patternversion\n       , recurrencetype\n       , activitydatetime\n       , subject\n "
+"      , rcsfl__key__c\n       , recurrencestartdatetime\n       , reminderdatetime\n       , rcsfl__recording_informatio"
+"n__c\n       , lastmodifieddate\n       , ownerid\n       , showas\n       , rcsfl__call_uuid__c\n       , isdeleted\n  "
+"     , systemmodstamp\n       , lastmodifiedbyid\n       , ischild\n       , rcsfl__call_unique_id__c\n       , recurren"
+"ceinterval\n       , groupeventtype\n       , isalldayevent\n       , location\n       , rcsfl__external_whoid__c\n     "
+"  , isrecurrence2exclusion\n       , enddatetime\n       , createddate\n       , isrecurrence2exception\n       , isrecu"
+"rrence2\n       , isprivate\n       , whoid\n       , isrecurrence\n       , createdbyid\n       , recurrencetimezonesid"
+"key\n       , recurrenceactivityid\n       , recurrence2patterntext\n       , noodlecrm__contact_type__c\n       , descr"
+"iption\n       , startdatetime\n       , recurrencedayofmonth\n       , activitydate\n       , whatid\n       , sfid\n  "
+"     , id\n       ,noodlecrm__category__c\n FROM "+context.university_code+".event ";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row3.eventsubtype = null;
							} else {
	                         		
        	row3.eventsubtype = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row3.recurrence2patternstartdate = null;
							} else {
										
			row3.recurrence2patternstartdate = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 2);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row3.rcsfl__rc_logging_type__c = null;
							} else {
	                         		
        	row3.rcsfl__rc_logging_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row3.recurrencedayofweekmask = null;
							} else {
		                          
            row3.recurrencedayofweekmask = rs_tDBInput_3.getInt(4);
            if(rs_tDBInput_3.wasNull()){
                    row3.recurrencedayofweekmask = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row3.recurrencemonthofyear = null;
							} else {
	                         		
        	row3.recurrencemonthofyear = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row3.recurrenceinstance = null;
							} else {
	                         		
        	row3.recurrenceinstance = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row3.isgroupevent = null;
							} else {
	                         		
            row3.isgroupevent = rs_tDBInput_3.getBoolean(7);
            if(rs_tDBInput_3.wasNull()){
                    row3.isgroupevent = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row3.recurrenceenddateonly = null;
							} else {
										
			row3.recurrenceenddateonly = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 8);
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row3.durationinminutes = null;
							} else {
		                          
            row3.durationinminutes = rs_tDBInput_3.getInt(9);
            if(rs_tDBInput_3.wasNull()){
                    row3.durationinminutes = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row3.isreminderset = null;
							} else {
	                         		
            row3.isreminderset = rs_tDBInput_3.getBoolean(10);
            if(rs_tDBInput_3.wasNull()){
                    row3.isreminderset = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row3.recurrence2patterntimezone = null;
							} else {
	                         		
        	row3.recurrence2patterntimezone = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row3.accountid = null;
							} else {
	                         		
        	row3.accountid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row3.enddate = null;
							} else {
										
			row3.enddate = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 13);
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row3.recurrence2patternversion = null;
							} else {
	                         		
        	row3.recurrence2patternversion = routines.system.JDBCUtil.getString(rs_tDBInput_3, 14, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row3.recurrencetype = null;
							} else {
	                         		
        	row3.recurrencetype = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row3.activitydatetime = null;
							} else {
										
			row3.activitydatetime = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 16);
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row3.subject = null;
							} else {
	                         		
        	row3.subject = routines.system.JDBCUtil.getString(rs_tDBInput_3, 17, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row3.rcsfl__key__c = null;
							} else {
	                         		
        	row3.rcsfl__key__c = routines.system.JDBCUtil.getString(rs_tDBInput_3, 18, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 19) {
								row3.recurrencestartdatetime = null;
							} else {
										
			row3.recurrencestartdatetime = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 19);
		                    }
							if(colQtyInRs_tDBInput_3 < 20) {
								row3.reminderdatetime = null;
							} else {
										
			row3.reminderdatetime = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 20);
		                    }
							if(colQtyInRs_tDBInput_3 < 21) {
								row3.rcsfl__recording_information__c = null;
							} else {
	                         		
        	row3.rcsfl__recording_information__c = routines.system.JDBCUtil.getString(rs_tDBInput_3, 21, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 22) {
								row3.lastmodifieddate = null;
							} else {
										
			row3.lastmodifieddate = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 22);
		                    }
							if(colQtyInRs_tDBInput_3 < 23) {
								row3.ownerid = null;
							} else {
	                         		
        	row3.ownerid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 23, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 24) {
								row3.showas = null;
							} else {
	                         		
        	row3.showas = routines.system.JDBCUtil.getString(rs_tDBInput_3, 24, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 25) {
								row3.rcsfl__call_uuid__c = null;
							} else {
	                         		
        	row3.rcsfl__call_uuid__c = routines.system.JDBCUtil.getString(rs_tDBInput_3, 25, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 26) {
								row3.isdeleted = null;
							} else {
	                         		
            row3.isdeleted = rs_tDBInput_3.getBoolean(26);
            if(rs_tDBInput_3.wasNull()){
                    row3.isdeleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 27) {
								row3.systemmodstamp = null;
							} else {
										
			row3.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 27);
		                    }
							if(colQtyInRs_tDBInput_3 < 28) {
								row3.lastmodifiedbyid = null;
							} else {
	                         		
        	row3.lastmodifiedbyid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 28, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 29) {
								row3.ischild = null;
							} else {
	                         		
            row3.ischild = rs_tDBInput_3.getBoolean(29);
            if(rs_tDBInput_3.wasNull()){
                    row3.ischild = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 30) {
								row3.rcsfl__call_unique_id__c = null;
							} else {
	                         		
        	row3.rcsfl__call_unique_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_3, 30, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 31) {
								row3.recurrenceinterval = null;
							} else {
		                          
            row3.recurrenceinterval = rs_tDBInput_3.getInt(31);
            if(rs_tDBInput_3.wasNull()){
                    row3.recurrenceinterval = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 32) {
								row3.groupeventtype = null;
							} else {
	                         		
        	row3.groupeventtype = routines.system.JDBCUtil.getString(rs_tDBInput_3, 32, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 33) {
								row3.isalldayevent = null;
							} else {
	                         		
            row3.isalldayevent = rs_tDBInput_3.getBoolean(33);
            if(rs_tDBInput_3.wasNull()){
                    row3.isalldayevent = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 34) {
								row3.location = null;
							} else {
	                         		
        	row3.location = routines.system.JDBCUtil.getString(rs_tDBInput_3, 34, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 35) {
								row3.rcsfl__external_whoid__c = null;
							} else {
	                         		
        	row3.rcsfl__external_whoid__c = routines.system.JDBCUtil.getString(rs_tDBInput_3, 35, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 36) {
								row3.isrecurrence2exclusion = null;
							} else {
	                         		
            row3.isrecurrence2exclusion = rs_tDBInput_3.getBoolean(36);
            if(rs_tDBInput_3.wasNull()){
                    row3.isrecurrence2exclusion = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 37) {
								row3.enddatetime = null;
							} else {
										
			row3.enddatetime = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 37);
		                    }
							if(colQtyInRs_tDBInput_3 < 38) {
								row3.createddate = null;
							} else {
										
			row3.createddate = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 38);
		                    }
							if(colQtyInRs_tDBInput_3 < 39) {
								row3.isrecurrence2exception = null;
							} else {
	                         		
            row3.isrecurrence2exception = rs_tDBInput_3.getBoolean(39);
            if(rs_tDBInput_3.wasNull()){
                    row3.isrecurrence2exception = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 40) {
								row3.isrecurrence2 = null;
							} else {
	                         		
            row3.isrecurrence2 = rs_tDBInput_3.getBoolean(40);
            if(rs_tDBInput_3.wasNull()){
                    row3.isrecurrence2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 41) {
								row3.isprivate = null;
							} else {
	                         		
            row3.isprivate = rs_tDBInput_3.getBoolean(41);
            if(rs_tDBInput_3.wasNull()){
                    row3.isprivate = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 42) {
								row3.whoid = null;
							} else {
	                         		
        	row3.whoid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 42, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 43) {
								row3.isrecurrence = null;
							} else {
	                         		
            row3.isrecurrence = rs_tDBInput_3.getBoolean(43);
            if(rs_tDBInput_3.wasNull()){
                    row3.isrecurrence = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 44) {
								row3.createdbyid = null;
							} else {
	                         		
        	row3.createdbyid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 44, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 45) {
								row3.recurrencetimezonesidkey = null;
							} else {
	                         		
        	row3.recurrencetimezonesidkey = routines.system.JDBCUtil.getString(rs_tDBInput_3, 45, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 46) {
								row3.recurrenceactivityid = null;
							} else {
	                         		
        	row3.recurrenceactivityid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 46, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 47) {
								row3.recurrence2patterntext = null;
							} else {
	                         		
        	row3.recurrence2patterntext = routines.system.JDBCUtil.getString(rs_tDBInput_3, 47, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 48) {
								row3.noodlecrm__contact_type__c = null;
							} else {
	                         		
        	row3.noodlecrm__contact_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_3, 48, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 49) {
								row3.description = null;
							} else {
	                         		
        	row3.description = routines.system.JDBCUtil.getString(rs_tDBInput_3, 49, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 50) {
								row3.startdatetime = null;
							} else {
										
			row3.startdatetime = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 50);
		                    }
							if(colQtyInRs_tDBInput_3 < 51) {
								row3.recurrencedayofmonth = null;
							} else {
		                          
            row3.recurrencedayofmonth = rs_tDBInput_3.getInt(51);
            if(rs_tDBInput_3.wasNull()){
                    row3.recurrencedayofmonth = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 52) {
								row3.activitydate = null;
							} else {
										
			row3.activitydate = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 52);
		                    }
							if(colQtyInRs_tDBInput_3 < 53) {
								row3.whatid = null;
							} else {
	                         		
        	row3.whatid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 53, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 54) {
								row3.sfid = null;
							} else {
	                         		
        	row3.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 54, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 55) {
								row3.id = 0;
							} else {
		                          
            row3.id = rs_tDBInput_3.getInt(55);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 56) {
								row3.noodlecrm__category__c = null;
							} else {
	                         		
        	row3.noodlecrm__category__c = routines.system.JDBCUtil.getString(rs_tDBInput_3, 56, true);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out5 = null;
out6 = null;


// # Output table : 'out5'
out5_tmp.eventsubtype = row3.eventsubtype ;
out5_tmp.recurrence2patternstartdate = row3.recurrence2patternstartdate ;
out5_tmp.rcsfl__rc_logging_type__c = row3.rcsfl__rc_logging_type__c ;
out5_tmp.recurrencedayofweekmask = row3.recurrencedayofweekmask ;
out5_tmp.recurrencemonthofyear = row3.recurrencemonthofyear ;
out5_tmp.recurrenceinstance = row3.recurrenceinstance ;
out5_tmp.isgroupevent = row3.isgroupevent ;
out5_tmp.recurrenceenddateonly = row3.recurrenceenddateonly ;
out5_tmp.durationinminutes = row3.durationinminutes ;
out5_tmp.isreminderset = row3.isreminderset ;
out5_tmp.recurrence2patterntimezone = row3.recurrence2patterntimezone ;
out5_tmp.accountid = row3.accountid ;
out5_tmp.enddate = row3.enddate ;
out5_tmp.recurrence2patternversion = row3.recurrence2patternversion ;
out5_tmp.recurrencetype = row3.recurrencetype ;
out5_tmp.activitydatetime = row3.activitydatetime ;
out5_tmp.subject = row3.subject ;
out5_tmp.rcsfl__key__c = row3.rcsfl__key__c ;
out5_tmp.recurrencestartdatetime = row3.recurrencestartdatetime ;
out5_tmp.reminderdatetime = row3.reminderdatetime ;
out5_tmp.rcsfl__recording_information__c = row3.rcsfl__recording_information__c ;
out5_tmp.lastmodifieddate = row3.lastmodifieddate ;
out5_tmp.ownerid = row3.ownerid ;
out5_tmp.showas = row3.showas ;
out5_tmp.rcsfl__call_uuid__c = row3.rcsfl__call_uuid__c ;
out5_tmp.isdeleted = row3.isdeleted ;
out5_tmp.systemmodstamp = row3.systemmodstamp ;
out5_tmp.lastmodifiedbyid = row3.lastmodifiedbyid ;
out5_tmp.ischild = row3.ischild ;
out5_tmp.rcsfl__call_unique_id__c = row3.rcsfl__call_unique_id__c ;
out5_tmp.recurrenceinterval = row3.recurrenceinterval ;
out5_tmp.groupeventtype = row3.groupeventtype ;
out5_tmp.isalldayevent = row3.isalldayevent ;
out5_tmp.location = row3.location ;
out5_tmp.rcsfl__external_whoid__c = row3.rcsfl__external_whoid__c ;
out5_tmp.isrecurrence2exclusion = row3.isrecurrence2exclusion ;
out5_tmp.enddatetime = row3.enddatetime ;
out5_tmp.createddate = row3.createddate ;
out5_tmp.isrecurrence2exception = row3.isrecurrence2exception ;
out5_tmp.isrecurrence2 = row3.isrecurrence2 ;
out5_tmp.isprivate = row3.isprivate ;
out5_tmp.whoid = row3.whoid ;
out5_tmp.isrecurrence = row3.isrecurrence ;
out5_tmp.createdbyid = row3.createdbyid ;
out5_tmp.recurrencetimezonesidkey = row3.recurrencetimezonesidkey ;
out5_tmp.recurrenceactivityid = row3.recurrenceactivityid ;
out5_tmp.recurrence2patterntext = row3.recurrence2patterntext ;
out5_tmp.noodlecrm__contact_type__c = row3.noodlecrm__contact_type__c ;
out5_tmp.description = row3.description ;
out5_tmp.startdatetime = row3.startdatetime ;
out5_tmp.recurrencedayofmonth = row3.recurrencedayofmonth ;
out5_tmp.activitydate = row3.activitydate ;
out5_tmp.whatid = row3.whatid ;
out5_tmp.sfid = row3.sfid ;
out5_tmp.id = row3.id ;
out5_tmp.noodlecrm__category__c = row3.noodlecrm__category__c ;
out5 = out5_tmp;

// # Output table : 'out6'
out6_tmp.eventsubtype = row3.eventsubtype ;
out6_tmp.recurrence2patternstartdate = row3.recurrence2patternstartdate ;
out6_tmp.rcsfl__rc_logging_type__c = row3.rcsfl__rc_logging_type__c ;
out6_tmp.recurrencedayofweekmask = row3.recurrencedayofweekmask ;
out6_tmp.recurrencemonthofyear = row3.recurrencemonthofyear ;
out6_tmp.recurrenceinstance = row3.recurrenceinstance ;
out6_tmp.isgroupevent = row3.isgroupevent ;
out6_tmp.recurrenceenddateonly = row3.recurrenceenddateonly ;
out6_tmp.durationinminutes = row3.durationinminutes ;
out6_tmp.isreminderset = row3.isreminderset ;
out6_tmp.recurrence2patterntimezone = row3.recurrence2patterntimezone ;
out6_tmp.accountid = row3.accountid ;
out6_tmp.enddate = row3.enddate ;
out6_tmp.recurrence2patternversion = row3.recurrence2patternversion ;
out6_tmp.recurrencetype = row3.recurrencetype ;
out6_tmp.activitydatetime = row3.activitydatetime ;
out6_tmp.subject = row3.subject ;
out6_tmp.rcsfl__key__c = row3.rcsfl__key__c ;
out6_tmp.recurrencestartdatetime = row3.recurrencestartdatetime ;
out6_tmp.reminderdatetime = row3.reminderdatetime ;
out6_tmp.rcsfl__recording_information__c = row3.rcsfl__recording_information__c ;
out6_tmp.lastmodifieddate = row3.lastmodifieddate ;
out6_tmp.ownerid = row3.ownerid ;
out6_tmp.showas = row3.showas ;
out6_tmp.rcsfl__call_uuid__c = row3.rcsfl__call_uuid__c ;
out6_tmp.isdeleted = row3.isdeleted ;
out6_tmp.systemmodstamp = row3.systemmodstamp ;
out6_tmp.lastmodifiedbyid = row3.lastmodifiedbyid ;
out6_tmp.ischild = row3.ischild ;
out6_tmp.rcsfl__call_unique_id__c = row3.rcsfl__call_unique_id__c ;
out6_tmp.recurrenceinterval = row3.recurrenceinterval ;
out6_tmp.groupeventtype = row3.groupeventtype ;
out6_tmp.isalldayevent = row3.isalldayevent ;
out6_tmp.location = row3.location ;
out6_tmp.rcsfl__external_whoid__c = row3.rcsfl__external_whoid__c ;
out6_tmp.isrecurrence2exclusion = row3.isrecurrence2exclusion ;
out6_tmp.enddatetime = row3.enddatetime ;
out6_tmp.createddate = row3.createddate ;
out6_tmp.isrecurrence2exception = row3.isrecurrence2exception ;
out6_tmp.isrecurrence2 = row3.isrecurrence2 ;
out6_tmp.isprivate = row3.isprivate ;
out6_tmp.whoid = row3.whoid ;
out6_tmp.isrecurrence = row3.isrecurrence ;
out6_tmp.createdbyid = row3.createdbyid ;
out6_tmp.recurrencetimezonesidkey = row3.recurrencetimezonesidkey ;
out6_tmp.recurrenceactivityid = row3.recurrenceactivityid ;
out6_tmp.recurrence2patterntext = row3.recurrence2patterntext ;
out6_tmp.noodlecrm__contact_type__c = row3.noodlecrm__contact_type__c ;
out6_tmp.description = row3.description ;
out6_tmp.startdatetime = row3.startdatetime ;
out6_tmp.recurrencedayofmonth = row3.recurrencedayofmonth ;
out6_tmp.activitydate = row3.activitydate ;
out6_tmp.whatid = row3.whatid ;
out6_tmp.sfid = row3.sfid ;
out6_tmp.id = row3.id ;
out6_tmp.noodlecrm__category__c = row3.noodlecrm__category__c ;
out6 = out6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out5");
					}
					


                        String[] rowtFileOutputDelimited_3=new String[56];
                            rowtFileOutputDelimited_3[0]=out5.eventsubtype == null ? null : out5.eventsubtype;
                            rowtFileOutputDelimited_3[1]=out5.recurrence2patternstartdate == null ? null : FormatterUtils.format_Date(out5.recurrence2patternstartdate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_3[2]=out5.rcsfl__rc_logging_type__c == null ? null : out5.rcsfl__rc_logging_type__c;
                            rowtFileOutputDelimited_3[3]=out5.recurrencedayofweekmask == null ? null : String.valueOf(out5.recurrencedayofweekmask);
                            rowtFileOutputDelimited_3[4]=out5.recurrencemonthofyear == null ? null : out5.recurrencemonthofyear;
                            rowtFileOutputDelimited_3[5]=out5.recurrenceinstance == null ? null : out5.recurrenceinstance;
                            rowtFileOutputDelimited_3[6]=out5.isgroupevent == null ? null : String.valueOf(out5.isgroupevent);
                            rowtFileOutputDelimited_3[7]=out5.recurrenceenddateonly == null ? null : FormatterUtils.format_Date(out5.recurrenceenddateonly, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_3[8]=out5.durationinminutes == null ? null : String.valueOf(out5.durationinminutes);
                            rowtFileOutputDelimited_3[9]=out5.isreminderset == null ? null : String.valueOf(out5.isreminderset);
                            rowtFileOutputDelimited_3[10]=out5.recurrence2patterntimezone == null ? null : out5.recurrence2patterntimezone;
                            rowtFileOutputDelimited_3[11]=out5.accountid == null ? null : out5.accountid;
                            rowtFileOutputDelimited_3[12]=out5.enddate == null ? null : FormatterUtils.format_Date(out5.enddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_3[13]=out5.recurrence2patternversion == null ? null : out5.recurrence2patternversion;
                            rowtFileOutputDelimited_3[14]=out5.recurrencetype == null ? null : out5.recurrencetype;
                            rowtFileOutputDelimited_3[15]=out5.activitydatetime == null ? null : FormatterUtils.format_Date(out5.activitydatetime, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_3[16]=out5.subject == null ? null : out5.subject;
                            rowtFileOutputDelimited_3[17]=out5.rcsfl__key__c == null ? null : out5.rcsfl__key__c;
                            rowtFileOutputDelimited_3[18]=out5.recurrencestartdatetime == null ? null : FormatterUtils.format_Date(out5.recurrencestartdatetime, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_3[19]=out5.reminderdatetime == null ? null : FormatterUtils.format_Date(out5.reminderdatetime, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_3[20]=out5.rcsfl__recording_information__c == null ? null : out5.rcsfl__recording_information__c;
                            rowtFileOutputDelimited_3[21]=out5.lastmodifieddate == null ? null : FormatterUtils.format_Date(out5.lastmodifieddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_3[22]=out5.ownerid == null ? null : out5.ownerid;
                            rowtFileOutputDelimited_3[23]=out5.showas == null ? null : out5.showas;
                            rowtFileOutputDelimited_3[24]=out5.rcsfl__call_uuid__c == null ? null : out5.rcsfl__call_uuid__c;
                            rowtFileOutputDelimited_3[25]=out5.isdeleted == null ? null : String.valueOf(out5.isdeleted);
                            rowtFileOutputDelimited_3[26]=out5.systemmodstamp == null ? null : FormatterUtils.format_Date(out5.systemmodstamp, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_3[27]=out5.lastmodifiedbyid == null ? null : out5.lastmodifiedbyid;
                            rowtFileOutputDelimited_3[28]=out5.ischild == null ? null : String.valueOf(out5.ischild);
                            rowtFileOutputDelimited_3[29]=out5.rcsfl__call_unique_id__c == null ? null : out5.rcsfl__call_unique_id__c;
                            rowtFileOutputDelimited_3[30]=out5.recurrenceinterval == null ? null : String.valueOf(out5.recurrenceinterval);
                            rowtFileOutputDelimited_3[31]=out5.groupeventtype == null ? null : out5.groupeventtype;
                            rowtFileOutputDelimited_3[32]=out5.isalldayevent == null ? null : String.valueOf(out5.isalldayevent);
                            rowtFileOutputDelimited_3[33]=out5.location == null ? null : out5.location;
                            rowtFileOutputDelimited_3[34]=out5.rcsfl__external_whoid__c == null ? null : out5.rcsfl__external_whoid__c;
                            rowtFileOutputDelimited_3[35]=out5.isrecurrence2exclusion == null ? null : String.valueOf(out5.isrecurrence2exclusion);
                            rowtFileOutputDelimited_3[36]=out5.enddatetime == null ? null : FormatterUtils.format_Date(out5.enddatetime, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_3[37]=out5.createddate == null ? null : FormatterUtils.format_Date(out5.createddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_3[38]=out5.isrecurrence2exception == null ? null : String.valueOf(out5.isrecurrence2exception);
                            rowtFileOutputDelimited_3[39]=out5.isrecurrence2 == null ? null : String.valueOf(out5.isrecurrence2);
                            rowtFileOutputDelimited_3[40]=out5.isprivate == null ? null : String.valueOf(out5.isprivate);
                            rowtFileOutputDelimited_3[41]=out5.whoid == null ? null : out5.whoid;
                            rowtFileOutputDelimited_3[42]=out5.isrecurrence == null ? null : String.valueOf(out5.isrecurrence);
                            rowtFileOutputDelimited_3[43]=out5.createdbyid == null ? null : out5.createdbyid;
                            rowtFileOutputDelimited_3[44]=out5.recurrencetimezonesidkey == null ? null : out5.recurrencetimezonesidkey;
                            rowtFileOutputDelimited_3[45]=out5.recurrenceactivityid == null ? null : out5.recurrenceactivityid;
                            rowtFileOutputDelimited_3[46]=out5.recurrence2patterntext == null ? null : out5.recurrence2patterntext;
                            rowtFileOutputDelimited_3[47]=out5.noodlecrm__contact_type__c == null ? null : out5.noodlecrm__contact_type__c;
                            rowtFileOutputDelimited_3[48]=out5.description == null ? null : out5.description;
                            rowtFileOutputDelimited_3[49]=out5.startdatetime == null ? null : FormatterUtils.format_Date(out5.startdatetime, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_3[50]=out5.recurrencedayofmonth == null ? null : String.valueOf(out5.recurrencedayofmonth);
                            rowtFileOutputDelimited_3[51]=out5.activitydate == null ? null : FormatterUtils.format_Date(out5.activitydate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_3[52]=out5.whatid == null ? null : out5.whatid;
                            rowtFileOutputDelimited_3[53]=out5.sfid == null ? null : out5.sfid;
                            rowtFileOutputDelimited_3[54]=String.valueOf(out5.id);
                            rowtFileOutputDelimited_3[55]=out5.noodlecrm__category__c == null ? null : out5.noodlecrm__category__c;
                nb_line_tFileOutputDelimited_3++;
                resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);
                                       CsvWritertFileOutputDelimited_3.writeNext(rowtFileOutputDelimited_3);




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */

} // End of branch "out5"




// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out6");
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(out6.eventsubtype == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, out6.eventsubtype);
}

                    if(out6.recurrence2patternstartdate != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(out6.recurrence2patternstartdate.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(out6.rcsfl__rc_logging_type__c == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, out6.rcsfl__rc_logging_type__c);
}

                    if(out6.recurrencedayofweekmask == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(4, out6.recurrencedayofweekmask);
}

                    if(out6.recurrencemonthofyear == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, out6.recurrencemonthofyear);
}

                    if(out6.recurrenceinstance == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, out6.recurrenceinstance);
}

                    if(out6.isgroupevent == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(7, out6.isgroupevent);
}

                    if(out6.recurrenceenddateonly != null) {
pstmt_tDBOutput_3.setTimestamp(8, new java.sql.Timestamp(out6.recurrenceenddateonly.getTime()));
} else {
pstmt_tDBOutput_3.setNull(8, java.sql.Types.TIMESTAMP);
}

                    if(out6.durationinminutes == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(9, out6.durationinminutes);
}

                    if(out6.isreminderset == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(10, out6.isreminderset);
}

                    if(out6.recurrence2patterntimezone == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(11, out6.recurrence2patterntimezone);
}

                    if(out6.accountid == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(12, out6.accountid);
}

                    if(out6.enddate != null) {
pstmt_tDBOutput_3.setTimestamp(13, new java.sql.Timestamp(out6.enddate.getTime()));
} else {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.TIMESTAMP);
}

                    if(out6.recurrence2patternversion == null) {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(14, out6.recurrence2patternversion);
}

                    if(out6.recurrencetype == null) {
pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(15, out6.recurrencetype);
}

                    if(out6.activitydatetime != null) {
pstmt_tDBOutput_3.setTimestamp(16, new java.sql.Timestamp(out6.activitydatetime.getTime()));
} else {
pstmt_tDBOutput_3.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(out6.subject == null) {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(17, out6.subject);
}

                    if(out6.rcsfl__key__c == null) {
pstmt_tDBOutput_3.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(18, out6.rcsfl__key__c);
}

                    if(out6.recurrencestartdatetime != null) {
pstmt_tDBOutput_3.setTimestamp(19, new java.sql.Timestamp(out6.recurrencestartdatetime.getTime()));
} else {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.TIMESTAMP);
}

                    if(out6.reminderdatetime != null) {
pstmt_tDBOutput_3.setTimestamp(20, new java.sql.Timestamp(out6.reminderdatetime.getTime()));
} else {
pstmt_tDBOutput_3.setNull(20, java.sql.Types.TIMESTAMP);
}

                    if(out6.rcsfl__recording_information__c == null) {
pstmt_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(21, out6.rcsfl__recording_information__c);
}

                    if(out6.lastmodifieddate != null) {
pstmt_tDBOutput_3.setTimestamp(22, new java.sql.Timestamp(out6.lastmodifieddate.getTime()));
} else {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.TIMESTAMP);
}

                    if(out6.ownerid == null) {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(23, out6.ownerid);
}

                    if(out6.showas == null) {
pstmt_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(24, out6.showas);
}

                    if(out6.rcsfl__call_uuid__c == null) {
pstmt_tDBOutput_3.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(25, out6.rcsfl__call_uuid__c);
}

                    if(out6.isdeleted == null) {
pstmt_tDBOutput_3.setNull(26, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(26, out6.isdeleted);
}

                    if(out6.systemmodstamp != null) {
pstmt_tDBOutput_3.setTimestamp(27, new java.sql.Timestamp(out6.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_3.setNull(27, java.sql.Types.TIMESTAMP);
}

                    if(out6.lastmodifiedbyid == null) {
pstmt_tDBOutput_3.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(28, out6.lastmodifiedbyid);
}

                    if(out6.ischild == null) {
pstmt_tDBOutput_3.setNull(29, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(29, out6.ischild);
}

                    if(out6.rcsfl__call_unique_id__c == null) {
pstmt_tDBOutput_3.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(30, out6.rcsfl__call_unique_id__c);
}

                    if(out6.recurrenceinterval == null) {
pstmt_tDBOutput_3.setNull(31, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(31, out6.recurrenceinterval);
}

                    if(out6.groupeventtype == null) {
pstmt_tDBOutput_3.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(32, out6.groupeventtype);
}

                    if(out6.isalldayevent == null) {
pstmt_tDBOutput_3.setNull(33, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(33, out6.isalldayevent);
}

                    if(out6.location == null) {
pstmt_tDBOutput_3.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(34, out6.location);
}

                    if(out6.rcsfl__external_whoid__c == null) {
pstmt_tDBOutput_3.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(35, out6.rcsfl__external_whoid__c);
}

                    if(out6.isrecurrence2exclusion == null) {
pstmt_tDBOutput_3.setNull(36, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(36, out6.isrecurrence2exclusion);
}

                    if(out6.enddatetime != null) {
pstmt_tDBOutput_3.setTimestamp(37, new java.sql.Timestamp(out6.enddatetime.getTime()));
} else {
pstmt_tDBOutput_3.setNull(37, java.sql.Types.TIMESTAMP);
}

                    if(out6.createddate != null) {
pstmt_tDBOutput_3.setTimestamp(38, new java.sql.Timestamp(out6.createddate.getTime()));
} else {
pstmt_tDBOutput_3.setNull(38, java.sql.Types.TIMESTAMP);
}

                    if(out6.isrecurrence2exception == null) {
pstmt_tDBOutput_3.setNull(39, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(39, out6.isrecurrence2exception);
}

                    if(out6.isrecurrence2 == null) {
pstmt_tDBOutput_3.setNull(40, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(40, out6.isrecurrence2);
}

                    if(out6.isprivate == null) {
pstmt_tDBOutput_3.setNull(41, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(41, out6.isprivate);
}

                    if(out6.whoid == null) {
pstmt_tDBOutput_3.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(42, out6.whoid);
}

                    if(out6.isrecurrence == null) {
pstmt_tDBOutput_3.setNull(43, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(43, out6.isrecurrence);
}

                    if(out6.createdbyid == null) {
pstmt_tDBOutput_3.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(44, out6.createdbyid);
}

                    if(out6.recurrencetimezonesidkey == null) {
pstmt_tDBOutput_3.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(45, out6.recurrencetimezonesidkey);
}

                    if(out6.recurrenceactivityid == null) {
pstmt_tDBOutput_3.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(46, out6.recurrenceactivityid);
}

                    if(out6.recurrence2patterntext == null) {
pstmt_tDBOutput_3.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(47, out6.recurrence2patterntext);
}

                    if(out6.noodlecrm__contact_type__c == null) {
pstmt_tDBOutput_3.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(48, out6.noodlecrm__contact_type__c);
}

                    if(out6.description == null) {
pstmt_tDBOutput_3.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(49, out6.description);
}

                    if(out6.startdatetime != null) {
pstmt_tDBOutput_3.setTimestamp(50, new java.sql.Timestamp(out6.startdatetime.getTime()));
} else {
pstmt_tDBOutput_3.setNull(50, java.sql.Types.TIMESTAMP);
}

                    if(out6.recurrencedayofmonth == null) {
pstmt_tDBOutput_3.setNull(51, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(51, out6.recurrencedayofmonth);
}

                    if(out6.activitydate != null) {
pstmt_tDBOutput_3.setTimestamp(52, new java.sql.Timestamp(out6.activitydate.getTime()));
} else {
pstmt_tDBOutput_3.setNull(52, java.sql.Types.TIMESTAMP);
}

                    if(out6.whatid == null) {
pstmt_tDBOutput_3.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(53, out6.whatid);
}

                    if(out6.sfid == null) {
pstmt_tDBOutput_3.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(54, out6.sfid);
}

                    pstmt_tDBOutput_3.setInt(55, out6.id);

                    if(out6.noodlecrm__category__c == null) {
pstmt_tDBOutput_3.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(56, out6.noodlecrm__category__c);
}

			
    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
            if(!whetherReject_tDBOutput_3) {
            }
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						
				    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "out6"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_3!=null) {
				    	CsvWritertFileOutputDelimited_3.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk49", 0, "ok");
				}
				tFileArchive_3Process(globalMap);



/**
 * [tFileOutputDelimited_3 end ] stop
 */




	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			
	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk50", 0, "ok");
				}
				tJava_13Process(globalMap);



/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_3");
					
						if(CsvWritertFileOutputDelimited_3!=null) {
					    	CsvWritertFileOutputDelimited_3.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */




	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_3", false);
		start_Hash.put("tFileArchive_3", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_3";

	
		int tos_count_tFileArchive_3 = 0;
		

 



/**
 * [tFileArchive_3 begin ] stop
 */
	
	/**
	 * [tFileArchive_3 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_3";

	

	

		String sourceFile_tFileArchive_3 = context.staging_S3_dir + "event.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_3), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_3 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_3 = context.staging_S3_dir + "event.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_3 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_3, zipFile_tFileArchive_3);
    zip_tFileArchive_3.setOverwriteExistTargetZip(true);
	zip_tFileArchive_3.setMakeTargetDir(true);
	zip_tFileArchive_3.setCompressLevel(9);
	zip_tFileArchive_3.setArchiveFormat("gzip");
	zip_tFileArchive_3.setAllFiles(true);
	
	
		zip_tFileArchive_3.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_3_ARCHIVE_FILEPATH",zipFile_tFileArchive_3);
   
   globalMap.put("tFileArchive_3_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_3).getName());

   zip_tFileArchive_3.doZip();


 


	tos_count_tFileArchive_3++;

/**
 * [tFileArchive_3 main ] stop
 */
	
	/**
	 * [tFileArchive_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_3";

	

 



/**
 * [tFileArchive_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_3";

	

 



/**
 * [tFileArchive_3 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_3 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_3";

	

 

ok_Hash.put("tFileArchive_3", true);
end_Hash.put("tFileArchive_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk51", 0, "ok");
				}
				tS3Put_3Process(globalMap);



/**
 * [tFileArchive_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_3 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_3";

	

 



/**
 * [tFileArchive_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_3_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_3", false);
		start_Hash.put("tS3Put_3", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_3";

	
		int tos_count_tS3Put_3 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_3 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_3 = context.nd_s3_data_lake_path_sfdc +"/event/latest/university_id="+context.university_code+"/event.csv.gz";
	
	int partSizeInBytes_tS3Put_3 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_3 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_3 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_3 = context.staging_S3_dir + "event.csv.gz";
	
	boolean useStream_tS3Put_3 = false;
	java.io.InputStream uploadStream_tS3Put_3 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_3 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_3 instanceof String){
		    useStream_tS3Put_3 = false;
		}else if(fileOrStream_tS3Put_3 instanceof java.io.InputStream){
		    useStream_tS3Put_3 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_3 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_3) {
				java.io.File inputFile_tS3Put_3 = new java.io.File((String)fileOrStream_tS3Put_3);
				
				long multipart_upload_threshold_tS3Put_3 = 5 * 1024 * 1024;
				
    		tm_tS3Put_3 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_3)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_3)
    			.withS3Client(conn_tS3Put_3)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_3 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_3, inputFile_tS3Put_3).withMetadata(objectMetadata_tS3Put_3);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_3 = tm_tS3Put_3.upload(putRequest_tS3Put_3);
  		
  			upload_tS3Put_3.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_3 = ((java.io.InputStream)fileOrStream_tS3Put_3);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_3 = new S3StreamUtil();
    		byte[] buffer_tS3Put_3 = new byte[partSizeInBytes_tS3Put_3];
    		sourceStream_tS3Put_3.read(buffer_tS3Put_3);
    		long curPartSize_tS3Put_3 = streamUtil_tS3Put_3.getLength(buffer_tS3Put_3);
    		boolean multiUpload_tS3Put_3 = curPartSize_tS3Put_3 == partSizeInBytes_tS3Put_3;
    		
    		if(!multiUpload_tS3Put_3) {
    				objectMetadata_tS3Put_3.setContentLength(curPartSize_tS3Put_3);
    				uploadStream_tS3Put_3 = new java.io.ByteArrayInputStream(buffer_tS3Put_3,0,Long.valueOf(curPartSize_tS3Put_3).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_3 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_3, uploadStream_tS3Put_3, objectMetadata_tS3Put_3);
			
    				
    				

    				
    				conn_tS3Put_3.putObject(putRequest_tS3Put_3);
    		} else {
    				uploadStream_tS3Put_3 = new java.io.ByteArrayInputStream(buffer_tS3Put_3);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_3 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_3 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_3, objectMetadata_tS3Put_3);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_3 = conn_tS3Put_3.initiateMultipartUpload(putRequest_tS3Put_3);
      			String uploadId_tS3Put_3 = initResponse_tS3Put_3.getUploadId();
      			int partNumber_tS3Put_3 = 1;
      			boolean streamHasNext_tS3Put_3 = true;
      			byte[] probeAvailability_tS3Put_3 = new byte[1];
				try {
					while (streamHasNext_tS3Put_3) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_3 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_3)
						.withUploadId(uploadId_tS3Put_3)
                    	.withPartNumber(partNumber_tS3Put_3)
						.withPartSize(curPartSize_tS3Put_3);
            		    uploadRequest_tS3Put_3.setInputStream(uploadStream_tS3Put_3);
            		    streamHasNext_tS3Put_3 = sourceStream_tS3Put_3.read(probeAvailability_tS3Put_3) != -1;
            		    if(!streamHasNext_tS3Put_3){
                    	    uploadRequest_tS3Put_3.setLastPart(true);
                    	}

                		partTags_tS3Put_3.add(conn_tS3Put_3.uploadPart(uploadRequest_tS3Put_3).getPartETag());
                  	    partNumber_tS3Put_3++;

          		     	if(uploadStream_tS3Put_3!=null){
      		         			uploadStream_tS3Put_3.close();
          		     	}
          		     	buffer_tS3Put_3 = new byte[partSizeInBytes_tS3Put_3];
          		     	sourceStream_tS3Put_3.read(buffer_tS3Put_3,1,partSizeInBytes_tS3Put_3-1);
          		     	buffer_tS3Put_3[0] = probeAvailability_tS3Put_3[0];
          		     	probeAvailability_tS3Put_3 = new byte[1];
          		     	curPartSize_tS3Put_3 = streamUtil_tS3Put_3.getLength(buffer_tS3Put_3);
          		     	uploadStream_tS3Put_3 = new java.io.ByteArrayInputStream(buffer_tS3Put_3);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_3 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_3,
                        uploadId_tS3Put_3, partTags_tS3Put_3);
            		conn_tS3Put_3.completeMultipartUpload(compRequest_tS3Put_3);
            } catch (java.lang.Exception uploadException_tS3Put_3) {
  							conn_tS3Put_3.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_3, uploadId_tS3Put_3));
    						throw uploadException_tS3Put_3;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_3){
		
			throw(e_tS3Put_3);
		
	}finally{
		if(useStream_tS3Put_3 && uploadStream_tS3Put_3!=null){
    	uploadStream_tS3Put_3.close();
    }
    
    if(tm_tS3Put_3 != null){
        tm_tS3Put_3.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_3 begin ] stop
 */
	
	/**
	 * [tS3Put_3 main ] start
	 */

	

	
	
	currentComponent="tS3Put_3";

	

 


	tos_count_tS3Put_3++;

/**
 * [tS3Put_3 main ] stop
 */
	
	/**
	 * [tS3Put_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_3";

	

 



/**
 * [tS3Put_3 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_3";

	

 



/**
 * [tS3Put_3 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_3 end ] start
	 */

	

	
	
	currentComponent="tS3Put_3";

	

 

ok_Hash.put("tS3Put_3", true);
end_Hash.put("tS3Put_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk52", 0, "ok");
				}
				tJava_14Process(globalMap);



/**
 * [tS3Put_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_3 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_3";

	

 



/**
 * [tS3Put_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_14", false);
		start_Hash.put("tJava_14", System.currentTimeMillis());
		
	
	currentComponent="tJava_14";

	
		int tos_count_tJava_14 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_14 begin ] stop
 */
	
	/**
	 * [tJava_14 main ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 


	tos_count_tJava_14++;

/**
 * [tJava_14 main ] stop
 */
	
	/**
	 * [tJava_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 



/**
 * [tJava_14 process_data_begin ] stop
 */
	
	/**
	 * [tJava_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 



/**
 * [tJava_14 process_data_end ] stop
 */
	
	/**
	 * [tJava_14 end ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 

ok_Hash.put("tJava_14", true);
end_Hash.put("tJava_14", System.currentTimeMillis());




/**
 * [tJava_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_14 finally ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 



/**
 * [tJava_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}
	

public void tJava_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_13", false);
		start_Hash.put("tJava_13", System.currentTimeMillis());
		
	
	currentComponent="tJava_13";

	
		int tos_count_tJava_13 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_3_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");
 



/**
 * [tJava_13 begin ] stop
 */
	
	/**
	 * [tJava_13 main ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 


	tos_count_tJava_13++;

/**
 * [tJava_13 main ] stop
 */
	
	/**
	 * [tJava_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 



/**
 * [tJava_13 process_data_begin ] stop
 */
	
	/**
	 * [tJava_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 



/**
 * [tJava_13 process_data_end ] stop
 */
	
	/**
	 * [tJava_13 end ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 

ok_Hash.put("tJava_13", true);
end_Hash.put("tJava_13", System.currentTimeMillis());




/**
 * [tJava_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_13 finally ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 



/**
 * [tJava_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_6", false);
		start_Hash.put("tS3Copy_6", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_6";

	
		int tos_count_tS3Copy_6 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_6 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_6 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_6 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_6 = null;
		
		
		final String from_bucket_tS3Copy_6 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_6 = context.nd_s3_data_lake_path_sfdc+"/lead/latest/university_id="+context.university_code+"/lead.csv.gz";
		final String to_bucket_tS3Copy_6 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_6 = context.nd_s3_data_lake_path_sfdc+"/lead/archive/university_id="+context.university_code+"/lead_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_6 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_6, from_key_tS3Copy_6);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_6 = conn_tS3Copy_6.getObjectMetadata(metadataRequest_tS3Copy_6);
    long objectSize_tS3Copy_6 = metadataResult_tS3Copy_6.getContentLength();
    
    boolean multiUpload_tS3Copy_6 = objectSize_tS3Copy_6 > maxBytes4SingleCopyCall_tS3Copy_6;
    
    if(!multiUpload_tS3Copy_6) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_6 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_6, from_key_tS3Copy_6, to_bucket_tS3Copy_6, to_key_tS3Copy_6);
    		if(objectMetadata_tS3Copy_6 != null) {
    				putRequest_tS3Copy_6.setNewObjectMetadata(objectMetadata_tS3Copy_6);
    		}
    		
    		

    		
    		conn_tS3Copy_6.copyObject(putRequest_tS3Copy_6);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_6 = metadataResult_tS3Copy_6.getUserMetadata();
						if((userMetadata_tS3Copy_6!=null) && userMetadata_tS3Copy_6.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_6 = null;
    				if(objectMetadata_tS3Copy_6 != null) {
    						putRequest_tS3Copy_6 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_6, to_key_tS3Copy_6, objectMetadata_tS3Copy_6);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_6 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_6, to_key_tS3Copy_6, metadataResult_tS3Copy_6);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_6 = conn_tS3Copy_6.initiateMultipartUpload(putRequest_tS3Copy_6);
            
            long bytePosition_tS3Copy_6 = 0;
            int partNum_tS3Copy_6 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_6 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_6 < objectSize_tS3Copy_6) {
                long lastByte_tS3Copy_6 = java.lang.Math.min(bytePosition_tS3Copy_6 + partSizeInBytes_tS3Copy_6 - 1, objectSize_tS3Copy_6 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_6 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_6)
                        .withSourceKey(from_key_tS3Copy_6)
                        .withDestinationBucketName(to_bucket_tS3Copy_6)
                        .withDestinationKey(to_key_tS3Copy_6)
                        .withUploadId(initResult_tS3Copy_6.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_6)
                        .withLastByte(lastByte_tS3Copy_6)
                        .withPartNumber(partNum_tS3Copy_6++);
                partTags_tS3Copy_6.add(conn_tS3Copy_6.copyPart(copyPartRequest_tS3Copy_6).getPartETag());
                bytePosition_tS3Copy_6 += partSizeInBytes_tS3Copy_6;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_6 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_6,
                                                                        to_key_tS3Copy_6, 
                                                                        initResult_tS3Copy_6.getUploadId(),
                                                                        partTags_tS3Copy_6);
            conn_tS3Copy_6.completeMultipartUpload(completeRequest_tS3Copy_6);
    		} catch (java.lang.Exception uploadException_tS3Copy_6) {
    				conn_tS3Copy_6.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_6, to_key_tS3Copy_6, initResult_tS3Copy_6.getUploadId()));
    				throw uploadException_tS3Copy_6;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_6){
		
			System.err.println(e_tS3Copy_6.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_6 begin ] stop
 */
	
	/**
	 * [tS3Copy_6 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_6";

	

 


	tos_count_tS3Copy_6++;

/**
 * [tS3Copy_6 main ] stop
 */
	
	/**
	 * [tS3Copy_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_6";

	

 



/**
 * [tS3Copy_6 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_6";

	

 



/**
 * [tS3Copy_6 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_6 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_6";

	

 

ok_Hash.put("tS3Copy_6", true);
end_Hash.put("tS3Copy_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk59", 0, "ok");
				}
				tJava_19Process(globalMap);



/**
 * [tS3Copy_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Copy_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tS3Copy_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_6 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_6";

	

 



/**
 * [tS3Copy_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_6_SUBPROCESS_STATE", 1);
	}
	

public void tJava_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_19", false);
		start_Hash.put("tJava_19", System.currentTimeMillis());
		
	
	currentComponent="tJava_19";

	
		int tos_count_tJava_19 = 0;
		


System.out.println("Step 0: Running For Lead Object");
System.out.println("Step 1: Copied Previous Run File To Archive");
 



/**
 * [tJava_19 begin ] stop
 */
	
	/**
	 * [tJava_19 main ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 


	tos_count_tJava_19++;

/**
 * [tJava_19 main ] stop
 */
	
	/**
	 * [tJava_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 



/**
 * [tJava_19 process_data_begin ] stop
 */
	
	/**
	 * [tJava_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 



/**
 * [tJava_19 process_data_end ] stop
 */
	
	/**
	 * [tJava_19 end ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 

ok_Hash.put("tJava_19", true);
end_Hash.put("tJava_19", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk60", 0, "ok");
				}
				tS3Delete_6Process(globalMap);



/**
 * [tJava_19 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_19 finally ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 



/**
 * [tJava_19 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_19_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_6", false);
		start_Hash.put("tS3Delete_6", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_6";

	
		int tos_count_tS3Delete_6 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_6 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_6 = context.nd_s3_data_lake_path_sfdc +"/lead/latest/university_id="+context.university_code+"/lead.csv.gz";
		if(key_tS3Delete_6!=null && key_tS3Delete_6.trim().length()>0){
			
			conn_tS3Delete_6.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_6);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_6){
		
			System.err.println(e_tS3Delete_6.getMessage());
		
	}
	
 



/**
 * [tS3Delete_6 begin ] stop
 */
	
	/**
	 * [tS3Delete_6 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_6";

	

 


	tos_count_tS3Delete_6++;

/**
 * [tS3Delete_6 main ] stop
 */
	
	/**
	 * [tS3Delete_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_6";

	

 



/**
 * [tS3Delete_6 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_6";

	

 



/**
 * [tS3Delete_6 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_6 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_6";

	

 

ok_Hash.put("tS3Delete_6", true);
end_Hash.put("tS3Delete_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk61", 0, "ok");
				}
				tJava_20Process(globalMap);



/**
 * [tS3Delete_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_6 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_6";

	

 



/**
 * [tS3Delete_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_6_SUBPROCESS_STATE", 1);
	}
	

public void tJava_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_20", false);
		start_Hash.put("tJava_20", System.currentTimeMillis());
		
	
	currentComponent="tJava_20";

	
		int tos_count_tJava_20 = 0;
		


System.out.println("Step 2: Deleted Previous Run File From Latest Folder");
System.out.println("Step 3: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_20 begin ] stop
 */
	
	/**
	 * [tJava_20 main ] start
	 */

	

	
	
	currentComponent="tJava_20";

	

 


	tos_count_tJava_20++;

/**
 * [tJava_20 main ] stop
 */
	
	/**
	 * [tJava_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_20";

	

 



/**
 * [tJava_20 process_data_begin ] stop
 */
	
	/**
	 * [tJava_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_20";

	

 



/**
 * [tJava_20 process_data_end ] stop
 */
	
	/**
	 * [tJava_20 end ] start
	 */

	

	
	
	currentComponent="tJava_20";

	

 

ok_Hash.put("tJava_20", true);
end_Hash.put("tJava_20", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk62", 0, "ok");
				}
				tDBInput_4Process(globalMap);



/**
 * [tJava_20 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_20 finally ] start
	 */

	

	
	
	currentComponent="tJava_20";

	

 



/**
 * [tJava_20 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_20_SUBPROCESS_STATE", 1);
	}
	


public static class out7Struct implements routines.system.IPersistableRow<out7Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String noodlecrm__university_scholarship_details__c;

				public String getNoodlecrm__university_scholarship_details__c () {
					return this.noodlecrm__university_scholarship_details__c;
				}
				
			    public java.util.Date converteddate;

				public java.util.Date getConverteddate () {
					return this.converteddate;
				}
				
			    public String noodlecrm__subscriber_id__c;

				public String getNoodlecrm__subscriber_id__c () {
					return this.noodlecrm__subscriber_id__c;
				}
				
			    public String jigsaw;

				public String getJigsaw () {
					return this.jigsaw;
				}
				
			    public String noodlecrm__lead_ranking__c;

				public String getNoodlecrm__lead_ranking__c () {
					return this.noodlecrm__lead_ranking__c;
				}
				
			    public String noodlecrm__years_experience__c;

				public String getNoodlecrm__years_experience__c () {
					return this.noodlecrm__years_experience__c;
				}
				
			    public String lastname;

				public String getLastname () {
					return this.lastname;
				}
				
			    public Double noodlecrm__total_emails__c;

				public Double getNoodlecrm__total_emails__c () {
					return this.noodlecrm__total_emails__c;
				}
				
			    public String street;

				public String getStreet () {
					return this.street;
				}
				
			    public String noodlecrm__scholarships__c;

				public String getNoodlecrm__scholarships__c () {
					return this.noodlecrm__scholarships__c;
				}
				
			    public String noodlecrm__ea_stated_gpa__c;

				public String getNoodlecrm__ea_stated_gpa__c () {
					return this.noodlecrm__ea_stated_gpa__c;
				}
				
			    public Boolean isunreadbyowner;

				public Boolean getIsunreadbyowner () {
					return this.isunreadbyowner;
				}
				
			    public String noodlecrm__url__c;

				public String getNoodlecrm__url__c () {
					return this.noodlecrm__url__c;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__lead_stated_gpa__c;

				public String getNoodlecrm__lead_stated_gpa__c () {
					return this.noodlecrm__lead_stated_gpa__c;
				}
				
			    public java.util.Date noodlecrm__last_attended_zoom__c;

				public java.util.Date getNoodlecrm__last_attended_zoom__c () {
					return this.noodlecrm__last_attended_zoom__c;
				}
				
			    public String emailbouncedreason;

				public String getEmailbouncedreason () {
					return this.emailbouncedreason;
				}
				
			    public String noodlecrm__partnerships__c;

				public String getNoodlecrm__partnerships__c () {
					return this.noodlecrm__partnerships__c;
				}
				
			    public Integer numberofemployees;

				public Integer getNumberofemployees () {
					return this.numberofemployees;
				}
				
			    public String noodlecrm__bad_lead_reason__c;

				public String getNoodlecrm__bad_lead_reason__c () {
					return this.noodlecrm__bad_lead_reason__c;
				}
				
			    public String noodlecrm__out_of_pocket__c;

				public String getNoodlecrm__out_of_pocket__c () {
					return this.noodlecrm__out_of_pocket__c;
				}
				
			    public String noodlecrm__competitor_details__c;

				public String getNoodlecrm__competitor_details__c () {
					return this.noodlecrm__competitor_details__c;
				}
				
			    public java.util.Date noodlecrm__last_attended_webinar_date_time__c;

				public java.util.Date getNoodlecrm__last_attended_webinar_date_time__c () {
					return this.noodlecrm__last_attended_webinar_date_time__c;
				}
				
			    public String noodlecrm__program2__c;

				public String getNoodlecrm__program2__c () {
					return this.noodlecrm__program2__c;
				}
				
			    public String noodlecrm__noodle_crm_id__c;

				public String getNoodlecrm__noodle_crm_id__c () {
					return this.noodlecrm__noodle_crm_id__c;
				}
				
			    public String noodlecrm__university__c;

				public String getNoodlecrm__university__c () {
					return this.noodlecrm__university__c;
				}
				
			    public String noodlecrm__military__c;

				public String getNoodlecrm__military__c () {
					return this.noodlecrm__military__c;
				}
				
			    public String noodlecrm__universitycrmid__c;

				public String getNoodlecrm__universitycrmid__c () {
					return this.noodlecrm__universitycrmid__c;
				}
				
			    public String noodlecrm__meets_program_criteria__c;

				public String getNoodlecrm__meets_program_criteria__c () {
					return this.noodlecrm__meets_program_criteria__c;
				}
				
			    public String noodlecrm__best_time_to_call__c;

				public String getNoodlecrm__best_time_to_call__c () {
					return this.noodlecrm__best_time_to_call__c;
				}
				
			    public Double noodlecrm__total_texts__c;

				public Double getNoodlecrm__total_texts__c () {
					return this.noodlecrm__total_texts__c;
				}
				
			    public String noodlecrm__utm_source__c;

				public String getNoodlecrm__utm_source__c () {
					return this.noodlecrm__utm_source__c;
				}
				
			    public java.util.Date noodlecrm__first_call_date_time__c;

				public java.util.Date getNoodlecrm__first_call_date_time__c () {
					return this.noodlecrm__first_call_date_time__c;
				}
				
			    public String noodlecrm__lead_external_id__c;

				public String getNoodlecrm__lead_external_id__c () {
					return this.noodlecrm__lead_external_id__c;
				}
				
			    public java.util.Date noodlecrm__webinar_signup_date_time__c;

				public java.util.Date getNoodlecrm__webinar_signup_date_time__c () {
					return this.noodlecrm__webinar_signup_date_time__c;
				}
				
			    public java.util.Date lastvieweddate;

				public java.util.Date getLastvieweddate () {
					return this.lastvieweddate;
				}
				
			    public Boolean isconverted;

				public Boolean getIsconverted () {
					return this.isconverted;
				}
				
			    public String convertedcontactid;

				public String getConvertedcontactid () {
					return this.convertedcontactid;
				}
				
			    public String noodlecrm__responsiveness__c;

				public String getNoodlecrm__responsiveness__c () {
					return this.noodlecrm__responsiveness__c;
				}
				
			    public String noodlecrm__utm_content__c;

				public String getNoodlecrm__utm_content__c () {
					return this.noodlecrm__utm_content__c;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String noodlecrm__related_student__c;

				public String getNoodlecrm__related_student__c () {
					return this.noodlecrm__related_student__c;
				}
				
			    public Double latitude;

				public Double getLatitude () {
					return this.latitude;
				}
				
			    public java.util.Date noodlecrm__last_call_date_time__c;

				public java.util.Date getNoodlecrm__last_call_date_time__c () {
					return this.noodlecrm__last_call_date_time__c;
				}
				
			    public java.util.Date noodlecrm__missed_attempt_date_time__c;

				public java.util.Date getNoodlecrm__missed_attempt_date_time__c () {
					return this.noodlecrm__missed_attempt_date_time__c;
				}
				
			    public String mobilephone;

				public String getMobilephone () {
					return this.mobilephone;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public java.util.Date noodlecrm__expected_date_to_meet_requirement__c;

				public java.util.Date getNoodlecrm__expected_date_to_meet_requirement__c () {
					return this.noodlecrm__expected_date_to_meet_requirement__c;
				}
				
			    public Double noodlecrm__missed_attempt_counter__c;

				public Double getNoodlecrm__missed_attempt_counter__c () {
					return this.noodlecrm__missed_attempt_counter__c;
				}
				
			    public String noodlecrm__program__c;

				public String getNoodlecrm__program__c () {
					return this.noodlecrm__program__c;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				
			    public String masterrecordid;

				public String getMasterrecordid () {
					return this.masterrecordid;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public java.util.Date emailbounceddate;

				public java.util.Date getEmailbounceddate () {
					return this.emailbounceddate;
				}
				
			    public String noodlecrm__utm_medium__c;

				public String getNoodlecrm__utm_medium__c () {
					return this.noodlecrm__utm_medium__c;
				}
				
			    public String noodlecrm__manager_comments__c;

				public String getNoodlecrm__manager_comments__c () {
					return this.noodlecrm__manager_comments__c;
				}
				
			    public java.util.Date noodlecrm__last_call_date__c;

				public java.util.Date getNoodlecrm__last_call_date__c () {
					return this.noodlecrm__last_call_date__c;
				}
				
			    public Double longitude;

				public Double getLongitude () {
					return this.longitude;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public String noodlecrm__primary__c;

				public String getNoodlecrm__primary__c () {
					return this.noodlecrm__primary__c;
				}
				
			    public java.util.Date noodlecrm__follow_up_date__c;

				public java.util.Date getNoodlecrm__follow_up_date__c () {
					return this.noodlecrm__follow_up_date__c;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public Boolean noodlecrm__attended_webinar__c;

				public Boolean getNoodlecrm__attended_webinar__c () {
					return this.noodlecrm__attended_webinar__c;
				}
				
			    public String noodlecrm__supplemental__c;

				public String getNoodlecrm__supplemental__c () {
					return this.noodlecrm__supplemental__c;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date noodlecrm__meaningful_conversation_date_time__c;

				public java.util.Date getNoodlecrm__meaningful_conversation_date_time__c () {
					return this.noodlecrm__meaningful_conversation_date_time__c;
				}
				
			    public String noodlecrm__applying_to_a_competitor__c;

				public String getNoodlecrm__applying_to_a_competitor__c () {
					return this.noodlecrm__applying_to_a_competitor__c;
				}
				
			    public String noodlecrm__lead_stated_professional_status__c;

				public String getNoodlecrm__lead_stated_professional_status__c () {
					return this.noodlecrm__lead_stated_professional_status__c;
				}
				
			    public String noodlecrm__ea_stated_professional_status__c;

				public String getNoodlecrm__ea_stated_professional_status__c () {
					return this.noodlecrm__ea_stated_professional_status__c;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String noodlecrm__ea_indicated_start_term__c;

				public String getNoodlecrm__ea_indicated_start_term__c () {
					return this.noodlecrm__ea_indicated_start_term__c;
				}
				
			    public String noodlecrm__employer_benefits__c;

				public String getNoodlecrm__employer_benefits__c () {
					return this.noodlecrm__employer_benefits__c;
				}
				
			    public String noodlecrm__external_id_unique__c;

				public String getNoodlecrm__external_id_unique__c () {
					return this.noodlecrm__external_id_unique__c;
				}
				
			    public String noodlecrm__utm_campaign__c;

				public String getNoodlecrm__utm_campaign__c () {
					return this.noodlecrm__utm_campaign__c;
				}
				
			    public java.util.Date lastactivitydate;

				public java.util.Date getLastactivitydate () {
					return this.lastactivitydate;
				}
				
			    public String noodlecrm__will_not_apply_reason_other__c;

				public String getNoodlecrm__will_not_apply_reason_other__c () {
					return this.noodlecrm__will_not_apply_reason_other__c;
				}
				
			    public String noodlecrm__last_activity_type__c;

				public String getNoodlecrm__last_activity_type__c () {
					return this.noodlecrm__last_activity_type__c;
				}
				
			    public String noodlecrm__student_loans__c;

				public String getNoodlecrm__student_loans__c () {
					return this.noodlecrm__student_loans__c;
				}
				
			    public String individualid;

				public String getIndividualid () {
					return this.individualid;
				}
				
			    public Double noodlecrm__numberoflocations__c;

				public Double getNoodlecrm__numberoflocations__c () {
					return this.noodlecrm__numberoflocations__c;
				}
				
			    public String noodlecrm__time_zone__c;

				public String getNoodlecrm__time_zone__c () {
					return this.noodlecrm__time_zone__c;
				}
				
			    public String noodlecrm__do_not_call__c;

				public String getNoodlecrm__do_not_call__c () {
					return this.noodlecrm__do_not_call__c;
				}
				
			    public java.util.Date noodlecrm__university_scholarship_date__c;

				public java.util.Date getNoodlecrm__university_scholarship_date__c () {
					return this.noodlecrm__university_scholarship_date__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String convertedaccountid;

				public String getConvertedaccountid () {
					return this.convertedaccountid;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public String noodlecrm__lead_stated_licensure__c;

				public String getNoodlecrm__lead_stated_licensure__c () {
					return this.noodlecrm__lead_stated_licensure__c;
				}
				
			    public String noodlecrm__ea_stated_licensure__c;

				public String getNoodlecrm__ea_stated_licensure__c () {
					return this.noodlecrm__ea_stated_licensure__c;
				}
				
			    public String leadsource;

				public String getLeadsource () {
					return this.leadsource;
				}
				
			    public String noodlecrm__utm_term__c;

				public String getNoodlecrm__utm_term__c () {
					return this.noodlecrm__utm_term__c;
				}
				
			    public String geocodeaccuracy;

				public String getGeocodeaccuracy () {
					return this.geocodeaccuracy;
				}
				
			    public String noodlecrm__google_analytics_id__c;

				public String getNoodlecrm__google_analytics_id__c () {
					return this.noodlecrm__google_analytics_id__c;
				}
				
			    public String postalcode;

				public String getPostalcode () {
					return this.postalcode;
				}
				
			    public String salutation;

				public String getSalutation () {
					return this.salutation;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String noodlecrm__ip_address__c;

				public String getNoodlecrm__ip_address__c () {
					return this.noodlecrm__ip_address__c;
				}
				
			    public Double noodlecrm__total_calls__c;

				public Double getNoodlecrm__total_calls__c () {
					return this.noodlecrm__total_calls__c;
				}
				
			    public String noodlecrm__siccode__c;

				public String getNoodlecrm__siccode__c () {
					return this.noodlecrm__siccode__c;
				}
				
			    public String noodlecrm__test_status_gre__c;

				public String getNoodlecrm__test_status_gre__c () {
					return this.noodlecrm__test_status_gre__c;
				}
				
			    public Boolean noodlecrm__attended_zoom__c;

				public Boolean getNoodlecrm__attended_zoom__c () {
					return this.noodlecrm__attended_zoom__c;
				}
				
			    public String noodlecrm__fafsa__c;

				public String getNoodlecrm__fafsa__c () {
					return this.noodlecrm__fafsa__c;
				}
				
			    public String noodlecrm__ea_stated_taken_course_req__c;

				public String getNoodlecrm__ea_stated_taken_course_req__c () {
					return this.noodlecrm__ea_stated_taken_course_req__c;
				}
				
			    public String noodlecrm__level_of_education__c;

				public String getNoodlecrm__level_of_education__c () {
					return this.noodlecrm__level_of_education__c;
				}
				
			    public String noodlecrm__currentgenerators__c;

				public String getNoodlecrm__currentgenerators__c () {
					return this.noodlecrm__currentgenerators__c;
				}
				
			    public String noodlecrm__lead_stated_taken_course_req__c;

				public String getNoodlecrm__lead_stated_taken_course_req__c () {
					return this.noodlecrm__lead_stated_taken_course_req__c;
				}
				
			    public String noodlecrm__productinterest__c;

				public String getNoodlecrm__productinterest__c () {
					return this.noodlecrm__productinterest__c;
				}
				
			    public String noodlecrm__follow_up_reason__c;

				public String getNoodlecrm__follow_up_reason__c () {
					return this.noodlecrm__follow_up_reason__c;
				}
				
			    public java.util.Date noodlecrm__will_not_apply_date__c;

				public java.util.Date getNoodlecrm__will_not_apply_date__c () {
					return this.noodlecrm__will_not_apply_date__c;
				}
				
			    public String noodlecrm__fa_comments__c;

				public String getNoodlecrm__fa_comments__c () {
					return this.noodlecrm__fa_comments__c;
				}
				
			    public String jigsawcontactid;

				public String getJigsawcontactid () {
					return this.jigsawcontactid;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String website;

				public String getWebsite () {
					return this.website;
				}
				
			    public String firstname;

				public String getFirstname () {
					return this.firstname;
				}
				
			    public String noodlecrm__contact_type__c;

				public String getNoodlecrm__contact_type__c () {
					return this.noodlecrm__contact_type__c;
				}
				
			    public java.util.Date noodlecrm__conversion_date__c;

				public java.util.Date getNoodlecrm__conversion_date__c () {
					return this.noodlecrm__conversion_date__c;
				}
				
			    public Boolean noodlecrm__re_open__c;

				public Boolean getNoodlecrm__re_open__c () {
					return this.noodlecrm__re_open__c;
				}
				
			    public String noodlecrm__applying_to_a_competitor_type__c;

				public String getNoodlecrm__applying_to_a_competitor_type__c () {
					return this.noodlecrm__applying_to_a_competitor_type__c;
				}
				
			    public String convertedopportunityid;

				public String getConvertedopportunityid () {
					return this.convertedopportunityid;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String company;

				public String getCompany () {
					return this.company;
				}
				
			    public String rating;

				public String getRating () {
					return this.rating;
				}
				
			    public String photourl;

				public String getPhotourl () {
					return this.photourl;
				}
				
			    public java.util.Date lastreferenceddate;

				public java.util.Date getLastreferenceddate () {
					return this.lastreferenceddate;
				}
				
			    public String noodlecrm__temperature__c;

				public String getNoodlecrm__temperature__c () {
					return this.noodlecrm__temperature__c;
				}
				
			    public String noodlecrm__competitor_university_2__c;

				public String getNoodlecrm__competitor_university_2__c () {
					return this.noodlecrm__competitor_university_2__c;
				}
				
			    public String industry;

				public String getIndustry () {
					return this.industry;
				}
				
			    public String noodlecrm__competitor_university_1__c;

				public String getNoodlecrm__competitor_university_1__c () {
					return this.noodlecrm__competitor_university_1__c;
				}
				
			    public java.util.Date noodlecrm__bad_lead_date_time__c;

				public java.util.Date getNoodlecrm__bad_lead_date_time__c () {
					return this.noodlecrm__bad_lead_date_time__c;
				}
				
			    public Boolean noodlecrm__signed_up_for_webinar__c;

				public Boolean getNoodlecrm__signed_up_for_webinar__c () {
					return this.noodlecrm__signed_up_for_webinar__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__preferred_phone__c;

				public String getNoodlecrm__preferred_phone__c () {
					return this.noodlecrm__preferred_phone__c;
				}
				
			    public String noodlecrm__program3__c;

				public String getNoodlecrm__program3__c () {
					return this.noodlecrm__program3__c;
				}
				
			    public String noodlecrm__program2__r__noodlecrm__external_id__c;

				public String getNoodlecrm__program2__r__noodlecrm__external_id__c () {
					return this.noodlecrm__program2__r__noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__program3__r__noodlecrm__external_id__c;

				public String getNoodlecrm__program3__r__noodlecrm__external_id__c () {
					return this.noodlecrm__program3__r__noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__lead_indicated_start_term__c;

				public String getNoodlecrm__lead_indicated_start_term__c () {
					return this.noodlecrm__lead_indicated_start_term__c;
				}
				
			    public String noodlecrm__preferred_email__c;

				public String getNoodlecrm__preferred_email__c () {
					return this.noodlecrm__preferred_email__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.noodlecrm__university_scholarship_details__c = readString(dis);
					
					this.converteddate = readDate(dis);
					
					this.noodlecrm__subscriber_id__c = readString(dis);
					
					this.jigsaw = readString(dis);
					
					this.noodlecrm__lead_ranking__c = readString(dis);
					
					this.noodlecrm__years_experience__c = readString(dis);
					
					this.lastname = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_emails__c = null;
           				} else {
           			    	this.noodlecrm__total_emails__c = dis.readDouble();
           				}
					
					this.street = readString(dis);
					
					this.noodlecrm__scholarships__c = readString(dis);
					
					this.noodlecrm__ea_stated_gpa__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isunreadbyowner = null;
           				} else {
           			    	this.isunreadbyowner = dis.readBoolean();
           				}
					
					this.noodlecrm__url__c = readString(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__lead_stated_gpa__c = readString(dis);
					
					this.noodlecrm__last_attended_zoom__c = readDate(dis);
					
					this.emailbouncedreason = readString(dis);
					
					this.noodlecrm__partnerships__c = readString(dis);
					
						this.numberofemployees = readInteger(dis);
					
					this.noodlecrm__bad_lead_reason__c = readString(dis);
					
					this.noodlecrm__out_of_pocket__c = readString(dis);
					
					this.noodlecrm__competitor_details__c = readString(dis);
					
					this.noodlecrm__last_attended_webinar_date_time__c = readDate(dis);
					
					this.noodlecrm__program2__c = readString(dis);
					
					this.noodlecrm__noodle_crm_id__c = readString(dis);
					
					this.noodlecrm__university__c = readString(dis);
					
					this.noodlecrm__military__c = readString(dis);
					
					this.noodlecrm__universitycrmid__c = readString(dis);
					
					this.noodlecrm__meets_program_criteria__c = readString(dis);
					
					this.noodlecrm__best_time_to_call__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_texts__c = null;
           				} else {
           			    	this.noodlecrm__total_texts__c = dis.readDouble();
           				}
					
					this.noodlecrm__utm_source__c = readString(dis);
					
					this.noodlecrm__first_call_date_time__c = readDate(dis);
					
					this.noodlecrm__lead_external_id__c = readString(dis);
					
					this.noodlecrm__webinar_signup_date_time__c = readDate(dis);
					
					this.lastvieweddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isconverted = null;
           				} else {
           			    	this.isconverted = dis.readBoolean();
           				}
					
					this.convertedcontactid = readString(dis);
					
					this.noodlecrm__responsiveness__c = readString(dis);
					
					this.noodlecrm__utm_content__c = readString(dis);
					
					this.city = readString(dis);
					
					this.name = readString(dis);
					
					this.noodlecrm__related_student__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.latitude = null;
           				} else {
           			    	this.latitude = dis.readDouble();
           				}
					
					this.noodlecrm__last_call_date_time__c = readDate(dis);
					
					this.noodlecrm__missed_attempt_date_time__c = readDate(dis);
					
					this.mobilephone = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__expected_date_to_meet_requirement__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__missed_attempt_counter__c = null;
           				} else {
           			    	this.noodlecrm__missed_attempt_counter__c = dis.readDouble();
           				}
					
					this.noodlecrm__program__c = readString(dis);
					
					this.phone = readString(dis);
					
					this.masterrecordid = readString(dis);
					
					this.ownerid = readString(dis);
					
					this.emailbounceddate = readDate(dis);
					
					this.noodlecrm__utm_medium__c = readString(dis);
					
					this.noodlecrm__manager_comments__c = readString(dis);
					
					this.noodlecrm__last_call_date__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.longitude = null;
           				} else {
           			    	this.longitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.noodlecrm__primary__c = readString(dis);
					
					this.noodlecrm__follow_up_date__c = readDate(dis);
					
					this.systemmodstamp = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__attended_webinar__c = null;
           				} else {
           			    	this.noodlecrm__attended_webinar__c = dis.readBoolean();
           				}
					
					this.noodlecrm__supplemental__c = readString(dis);
					
					this.lastmodifiedbyid = readString(dis);
					
					this.state = readString(dis);
					
					this.noodlecrm__meaningful_conversation_date_time__c = readDate(dis);
					
					this.noodlecrm__applying_to_a_competitor__c = readString(dis);
					
					this.noodlecrm__lead_stated_professional_status__c = readString(dis);
					
					this.noodlecrm__ea_stated_professional_status__c = readString(dis);
					
					this.status = readString(dis);
					
					this.noodlecrm__ea_indicated_start_term__c = readString(dis);
					
					this.noodlecrm__employer_benefits__c = readString(dis);
					
					this.noodlecrm__external_id_unique__c = readString(dis);
					
					this.noodlecrm__utm_campaign__c = readString(dis);
					
					this.lastactivitydate = readDate(dis);
					
					this.noodlecrm__will_not_apply_reason_other__c = readString(dis);
					
					this.noodlecrm__last_activity_type__c = readString(dis);
					
					this.noodlecrm__student_loans__c = readString(dis);
					
					this.individualid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__numberoflocations__c = null;
           				} else {
           			    	this.noodlecrm__numberoflocations__c = dis.readDouble();
           				}
					
					this.noodlecrm__time_zone__c = readString(dis);
					
					this.noodlecrm__do_not_call__c = readString(dis);
					
					this.noodlecrm__university_scholarship_date__c = readDate(dis);
					
					this.createddate = readDate(dis);
					
					this.convertedaccountid = readString(dis);
					
					this.country = readString(dis);
					
					this.noodlecrm__lead_stated_licensure__c = readString(dis);
					
					this.noodlecrm__ea_stated_licensure__c = readString(dis);
					
					this.leadsource = readString(dis);
					
					this.noodlecrm__utm_term__c = readString(dis);
					
					this.geocodeaccuracy = readString(dis);
					
					this.noodlecrm__google_analytics_id__c = readString(dis);
					
					this.postalcode = readString(dis);
					
					this.salutation = readString(dis);
					
					this.title = readString(dis);
					
					this.noodlecrm__ip_address__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_calls__c = null;
           				} else {
           			    	this.noodlecrm__total_calls__c = dis.readDouble();
           				}
					
					this.noodlecrm__siccode__c = readString(dis);
					
					this.noodlecrm__test_status_gre__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__attended_zoom__c = null;
           				} else {
           			    	this.noodlecrm__attended_zoom__c = dis.readBoolean();
           				}
					
					this.noodlecrm__fafsa__c = readString(dis);
					
					this.noodlecrm__ea_stated_taken_course_req__c = readString(dis);
					
					this.noodlecrm__level_of_education__c = readString(dis);
					
					this.noodlecrm__currentgenerators__c = readString(dis);
					
					this.noodlecrm__lead_stated_taken_course_req__c = readString(dis);
					
					this.noodlecrm__productinterest__c = readString(dis);
					
					this.noodlecrm__follow_up_reason__c = readString(dis);
					
					this.noodlecrm__will_not_apply_date__c = readDate(dis);
					
					this.noodlecrm__fa_comments__c = readString(dis);
					
					this.jigsawcontactid = readString(dis);
					
					this.createdbyid = readString(dis);
					
					this.website = readString(dis);
					
					this.firstname = readString(dis);
					
					this.noodlecrm__contact_type__c = readString(dis);
					
					this.noodlecrm__conversion_date__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__re_open__c = null;
           				} else {
           			    	this.noodlecrm__re_open__c = dis.readBoolean();
           				}
					
					this.noodlecrm__applying_to_a_competitor_type__c = readString(dis);
					
					this.convertedopportunityid = readString(dis);
					
					this.email = readString(dis);
					
					this.description = readString(dis);
					
					this.company = readString(dis);
					
					this.rating = readString(dis);
					
					this.photourl = readString(dis);
					
					this.lastreferenceddate = readDate(dis);
					
					this.noodlecrm__temperature__c = readString(dis);
					
					this.noodlecrm__competitor_university_2__c = readString(dis);
					
					this.industry = readString(dis);
					
					this.noodlecrm__competitor_university_1__c = readString(dis);
					
					this.noodlecrm__bad_lead_date_time__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__signed_up_for_webinar__c = null;
           				} else {
           			    	this.noodlecrm__signed_up_for_webinar__c = dis.readBoolean();
           				}
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__preferred_phone__c = readString(dis);
					
					this.noodlecrm__program3__c = readString(dis);
					
					this.noodlecrm__program2__r__noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__program3__r__noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__lead_indicated_start_term__c = readString(dis);
					
					this.noodlecrm__preferred_email__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.noodlecrm__university_scholarship_details__c,dos);
					
					// java.util.Date
				
						writeDate(this.converteddate,dos);
					
					// String
				
						writeString(this.noodlecrm__subscriber_id__c,dos);
					
					// String
				
						writeString(this.jigsaw,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_ranking__c,dos);
					
					// String
				
						writeString(this.noodlecrm__years_experience__c,dos);
					
					// String
				
						writeString(this.lastname,dos);
					
					// Double
				
						if(this.noodlecrm__total_emails__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_emails__c);
		            	}
					
					// String
				
						writeString(this.street,dos);
					
					// String
				
						writeString(this.noodlecrm__scholarships__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_stated_gpa__c,dos);
					
					// Boolean
				
						if(this.isunreadbyowner == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isunreadbyowner);
		            	}
					
					// String
				
						writeString(this.noodlecrm__url__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_gpa__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_attended_zoom__c,dos);
					
					// String
				
						writeString(this.emailbouncedreason,dos);
					
					// String
				
						writeString(this.noodlecrm__partnerships__c,dos);
					
					// Integer
				
						writeInteger(this.numberofemployees,dos);
					
					// String
				
						writeString(this.noodlecrm__bad_lead_reason__c,dos);
					
					// String
				
						writeString(this.noodlecrm__out_of_pocket__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_details__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_attended_webinar_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program2__c,dos);
					
					// String
				
						writeString(this.noodlecrm__noodle_crm_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university__c,dos);
					
					// String
				
						writeString(this.noodlecrm__military__c,dos);
					
					// String
				
						writeString(this.noodlecrm__universitycrmid__c,dos);
					
					// String
				
						writeString(this.noodlecrm__meets_program_criteria__c,dos);
					
					// String
				
						writeString(this.noodlecrm__best_time_to_call__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_texts__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_texts__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__utm_source__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__first_call_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_external_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__webinar_signup_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastvieweddate,dos);
					
					// Boolean
				
						if(this.isconverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isconverted);
		            	}
					
					// String
				
						writeString(this.convertedcontactid,dos);
					
					// String
				
						writeString(this.noodlecrm__responsiveness__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_content__c,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.noodlecrm__related_student__c,dos);
					
					// Double
				
						if(this.latitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.latitude);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_call_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__missed_attempt_date_time__c,dos);
					
					// String
				
						writeString(this.mobilephone,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__expected_date_to_meet_requirement__c,dos);
					
					// Double
				
						if(this.noodlecrm__missed_attempt_counter__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__missed_attempt_counter__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__program__c,dos);
					
					// String
				
						writeString(this.phone,dos);
					
					// String
				
						writeString(this.masterrecordid,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// java.util.Date
				
						writeDate(this.emailbounceddate,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_medium__c,dos);
					
					// String
				
						writeString(this.noodlecrm__manager_comments__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_call_date__c,dos);
					
					// Double
				
						if(this.longitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.longitude);
		            	}
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// String
				
						writeString(this.noodlecrm__primary__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__follow_up_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// Boolean
				
						if(this.noodlecrm__attended_webinar__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__attended_webinar__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__supplemental__c,dos);
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__meaningful_conversation_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__applying_to_a_competitor__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_professional_status__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_stated_professional_status__c,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_indicated_start_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__employer_benefits__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id_unique__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_campaign__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastactivitydate,dos);
					
					// String
				
						writeString(this.noodlecrm__will_not_apply_reason_other__c,dos);
					
					// String
				
						writeString(this.noodlecrm__last_activity_type__c,dos);
					
					// String
				
						writeString(this.noodlecrm__student_loans__c,dos);
					
					// String
				
						writeString(this.individualid,dos);
					
					// Double
				
						if(this.noodlecrm__numberoflocations__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__numberoflocations__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__time_zone__c,dos);
					
					// String
				
						writeString(this.noodlecrm__do_not_call__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__university_scholarship_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.convertedaccountid,dos);
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_licensure__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_stated_licensure__c,dos);
					
					// String
				
						writeString(this.leadsource,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_term__c,dos);
					
					// String
				
						writeString(this.geocodeaccuracy,dos);
					
					// String
				
						writeString(this.noodlecrm__google_analytics_id__c,dos);
					
					// String
				
						writeString(this.postalcode,dos);
					
					// String
				
						writeString(this.salutation,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.noodlecrm__ip_address__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_calls__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_calls__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__siccode__c,dos);
					
					// String
				
						writeString(this.noodlecrm__test_status_gre__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__attended_zoom__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__attended_zoom__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__fafsa__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_stated_taken_course_req__c,dos);
					
					// String
				
						writeString(this.noodlecrm__level_of_education__c,dos);
					
					// String
				
						writeString(this.noodlecrm__currentgenerators__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_taken_course_req__c,dos);
					
					// String
				
						writeString(this.noodlecrm__productinterest__c,dos);
					
					// String
				
						writeString(this.noodlecrm__follow_up_reason__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__will_not_apply_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__fa_comments__c,dos);
					
					// String
				
						writeString(this.jigsawcontactid,dos);
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.website,dos);
					
					// String
				
						writeString(this.firstname,dos);
					
					// String
				
						writeString(this.noodlecrm__contact_type__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__conversion_date__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__re_open__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__re_open__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__applying_to_a_competitor_type__c,dos);
					
					// String
				
						writeString(this.convertedopportunityid,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.company,dos);
					
					// String
				
						writeString(this.rating,dos);
					
					// String
				
						writeString(this.photourl,dos);
					
					// java.util.Date
				
						writeDate(this.lastreferenceddate,dos);
					
					// String
				
						writeString(this.noodlecrm__temperature__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_university_2__c,dos);
					
					// String
				
						writeString(this.industry,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_university_1__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__bad_lead_date_time__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__signed_up_for_webinar__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__signed_up_for_webinar__c);
		            	}
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__preferred_phone__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program3__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program2__r__noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program3__r__noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_indicated_start_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__preferred_email__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("noodlecrm__university_scholarship_details__c="+noodlecrm__university_scholarship_details__c);
		sb.append(",converteddate="+String.valueOf(converteddate));
		sb.append(",noodlecrm__subscriber_id__c="+noodlecrm__subscriber_id__c);
		sb.append(",jigsaw="+jigsaw);
		sb.append(",noodlecrm__lead_ranking__c="+noodlecrm__lead_ranking__c);
		sb.append(",noodlecrm__years_experience__c="+noodlecrm__years_experience__c);
		sb.append(",lastname="+lastname);
		sb.append(",noodlecrm__total_emails__c="+String.valueOf(noodlecrm__total_emails__c));
		sb.append(",street="+street);
		sb.append(",noodlecrm__scholarships__c="+noodlecrm__scholarships__c);
		sb.append(",noodlecrm__ea_stated_gpa__c="+noodlecrm__ea_stated_gpa__c);
		sb.append(",isunreadbyowner="+String.valueOf(isunreadbyowner));
		sb.append(",noodlecrm__url__c="+noodlecrm__url__c);
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",noodlecrm__lead_stated_gpa__c="+noodlecrm__lead_stated_gpa__c);
		sb.append(",noodlecrm__last_attended_zoom__c="+String.valueOf(noodlecrm__last_attended_zoom__c));
		sb.append(",emailbouncedreason="+emailbouncedreason);
		sb.append(",noodlecrm__partnerships__c="+noodlecrm__partnerships__c);
		sb.append(",numberofemployees="+String.valueOf(numberofemployees));
		sb.append(",noodlecrm__bad_lead_reason__c="+noodlecrm__bad_lead_reason__c);
		sb.append(",noodlecrm__out_of_pocket__c="+noodlecrm__out_of_pocket__c);
		sb.append(",noodlecrm__competitor_details__c="+noodlecrm__competitor_details__c);
		sb.append(",noodlecrm__last_attended_webinar_date_time__c="+String.valueOf(noodlecrm__last_attended_webinar_date_time__c));
		sb.append(",noodlecrm__program2__c="+noodlecrm__program2__c);
		sb.append(",noodlecrm__noodle_crm_id__c="+noodlecrm__noodle_crm_id__c);
		sb.append(",noodlecrm__university__c="+noodlecrm__university__c);
		sb.append(",noodlecrm__military__c="+noodlecrm__military__c);
		sb.append(",noodlecrm__universitycrmid__c="+noodlecrm__universitycrmid__c);
		sb.append(",noodlecrm__meets_program_criteria__c="+noodlecrm__meets_program_criteria__c);
		sb.append(",noodlecrm__best_time_to_call__c="+noodlecrm__best_time_to_call__c);
		sb.append(",noodlecrm__total_texts__c="+String.valueOf(noodlecrm__total_texts__c));
		sb.append(",noodlecrm__utm_source__c="+noodlecrm__utm_source__c);
		sb.append(",noodlecrm__first_call_date_time__c="+String.valueOf(noodlecrm__first_call_date_time__c));
		sb.append(",noodlecrm__lead_external_id__c="+noodlecrm__lead_external_id__c);
		sb.append(",noodlecrm__webinar_signup_date_time__c="+String.valueOf(noodlecrm__webinar_signup_date_time__c));
		sb.append(",lastvieweddate="+String.valueOf(lastvieweddate));
		sb.append(",isconverted="+String.valueOf(isconverted));
		sb.append(",convertedcontactid="+convertedcontactid);
		sb.append(",noodlecrm__responsiveness__c="+noodlecrm__responsiveness__c);
		sb.append(",noodlecrm__utm_content__c="+noodlecrm__utm_content__c);
		sb.append(",city="+city);
		sb.append(",name="+name);
		sb.append(",noodlecrm__related_student__c="+noodlecrm__related_student__c);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",noodlecrm__last_call_date_time__c="+String.valueOf(noodlecrm__last_call_date_time__c));
		sb.append(",noodlecrm__missed_attempt_date_time__c="+String.valueOf(noodlecrm__missed_attempt_date_time__c));
		sb.append(",mobilephone="+mobilephone);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__expected_date_to_meet_requirement__c="+String.valueOf(noodlecrm__expected_date_to_meet_requirement__c));
		sb.append(",noodlecrm__missed_attempt_counter__c="+String.valueOf(noodlecrm__missed_attempt_counter__c));
		sb.append(",noodlecrm__program__c="+noodlecrm__program__c);
		sb.append(",phone="+phone);
		sb.append(",masterrecordid="+masterrecordid);
		sb.append(",ownerid="+ownerid);
		sb.append(",emailbounceddate="+String.valueOf(emailbounceddate));
		sb.append(",noodlecrm__utm_medium__c="+noodlecrm__utm_medium__c);
		sb.append(",noodlecrm__manager_comments__c="+noodlecrm__manager_comments__c);
		sb.append(",noodlecrm__last_call_date__c="+String.valueOf(noodlecrm__last_call_date__c));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",noodlecrm__primary__c="+noodlecrm__primary__c);
		sb.append(",noodlecrm__follow_up_date__c="+String.valueOf(noodlecrm__follow_up_date__c));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__attended_webinar__c="+String.valueOf(noodlecrm__attended_webinar__c));
		sb.append(",noodlecrm__supplemental__c="+noodlecrm__supplemental__c);
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",state="+state);
		sb.append(",noodlecrm__meaningful_conversation_date_time__c="+String.valueOf(noodlecrm__meaningful_conversation_date_time__c));
		sb.append(",noodlecrm__applying_to_a_competitor__c="+noodlecrm__applying_to_a_competitor__c);
		sb.append(",noodlecrm__lead_stated_professional_status__c="+noodlecrm__lead_stated_professional_status__c);
		sb.append(",noodlecrm__ea_stated_professional_status__c="+noodlecrm__ea_stated_professional_status__c);
		sb.append(",status="+status);
		sb.append(",noodlecrm__ea_indicated_start_term__c="+noodlecrm__ea_indicated_start_term__c);
		sb.append(",noodlecrm__employer_benefits__c="+noodlecrm__employer_benefits__c);
		sb.append(",noodlecrm__external_id_unique__c="+noodlecrm__external_id_unique__c);
		sb.append(",noodlecrm__utm_campaign__c="+noodlecrm__utm_campaign__c);
		sb.append(",lastactivitydate="+String.valueOf(lastactivitydate));
		sb.append(",noodlecrm__will_not_apply_reason_other__c="+noodlecrm__will_not_apply_reason_other__c);
		sb.append(",noodlecrm__last_activity_type__c="+noodlecrm__last_activity_type__c);
		sb.append(",noodlecrm__student_loans__c="+noodlecrm__student_loans__c);
		sb.append(",individualid="+individualid);
		sb.append(",noodlecrm__numberoflocations__c="+String.valueOf(noodlecrm__numberoflocations__c));
		sb.append(",noodlecrm__time_zone__c="+noodlecrm__time_zone__c);
		sb.append(",noodlecrm__do_not_call__c="+noodlecrm__do_not_call__c);
		sb.append(",noodlecrm__university_scholarship_date__c="+String.valueOf(noodlecrm__university_scholarship_date__c));
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",convertedaccountid="+convertedaccountid);
		sb.append(",country="+country);
		sb.append(",noodlecrm__lead_stated_licensure__c="+noodlecrm__lead_stated_licensure__c);
		sb.append(",noodlecrm__ea_stated_licensure__c="+noodlecrm__ea_stated_licensure__c);
		sb.append(",leadsource="+leadsource);
		sb.append(",noodlecrm__utm_term__c="+noodlecrm__utm_term__c);
		sb.append(",geocodeaccuracy="+geocodeaccuracy);
		sb.append(",noodlecrm__google_analytics_id__c="+noodlecrm__google_analytics_id__c);
		sb.append(",postalcode="+postalcode);
		sb.append(",salutation="+salutation);
		sb.append(",title="+title);
		sb.append(",noodlecrm__ip_address__c="+noodlecrm__ip_address__c);
		sb.append(",noodlecrm__total_calls__c="+String.valueOf(noodlecrm__total_calls__c));
		sb.append(",noodlecrm__siccode__c="+noodlecrm__siccode__c);
		sb.append(",noodlecrm__test_status_gre__c="+noodlecrm__test_status_gre__c);
		sb.append(",noodlecrm__attended_zoom__c="+String.valueOf(noodlecrm__attended_zoom__c));
		sb.append(",noodlecrm__fafsa__c="+noodlecrm__fafsa__c);
		sb.append(",noodlecrm__ea_stated_taken_course_req__c="+noodlecrm__ea_stated_taken_course_req__c);
		sb.append(",noodlecrm__level_of_education__c="+noodlecrm__level_of_education__c);
		sb.append(",noodlecrm__currentgenerators__c="+noodlecrm__currentgenerators__c);
		sb.append(",noodlecrm__lead_stated_taken_course_req__c="+noodlecrm__lead_stated_taken_course_req__c);
		sb.append(",noodlecrm__productinterest__c="+noodlecrm__productinterest__c);
		sb.append(",noodlecrm__follow_up_reason__c="+noodlecrm__follow_up_reason__c);
		sb.append(",noodlecrm__will_not_apply_date__c="+String.valueOf(noodlecrm__will_not_apply_date__c));
		sb.append(",noodlecrm__fa_comments__c="+noodlecrm__fa_comments__c);
		sb.append(",jigsawcontactid="+jigsawcontactid);
		sb.append(",createdbyid="+createdbyid);
		sb.append(",website="+website);
		sb.append(",firstname="+firstname);
		sb.append(",noodlecrm__contact_type__c="+noodlecrm__contact_type__c);
		sb.append(",noodlecrm__conversion_date__c="+String.valueOf(noodlecrm__conversion_date__c));
		sb.append(",noodlecrm__re_open__c="+String.valueOf(noodlecrm__re_open__c));
		sb.append(",noodlecrm__applying_to_a_competitor_type__c="+noodlecrm__applying_to_a_competitor_type__c);
		sb.append(",convertedopportunityid="+convertedopportunityid);
		sb.append(",email="+email);
		sb.append(",description="+description);
		sb.append(",company="+company);
		sb.append(",rating="+rating);
		sb.append(",photourl="+photourl);
		sb.append(",lastreferenceddate="+String.valueOf(lastreferenceddate));
		sb.append(",noodlecrm__temperature__c="+noodlecrm__temperature__c);
		sb.append(",noodlecrm__competitor_university_2__c="+noodlecrm__competitor_university_2__c);
		sb.append(",industry="+industry);
		sb.append(",noodlecrm__competitor_university_1__c="+noodlecrm__competitor_university_1__c);
		sb.append(",noodlecrm__bad_lead_date_time__c="+String.valueOf(noodlecrm__bad_lead_date_time__c));
		sb.append(",noodlecrm__signed_up_for_webinar__c="+String.valueOf(noodlecrm__signed_up_for_webinar__c));
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__preferred_phone__c="+noodlecrm__preferred_phone__c);
		sb.append(",noodlecrm__program3__c="+noodlecrm__program3__c);
		sb.append(",noodlecrm__program2__r__noodlecrm__external_id__c="+noodlecrm__program2__r__noodlecrm__external_id__c);
		sb.append(",noodlecrm__program3__r__noodlecrm__external_id__c="+noodlecrm__program3__r__noodlecrm__external_id__c);
		sb.append(",noodlecrm__lead_indicated_start_term__c="+noodlecrm__lead_indicated_start_term__c);
		sb.append(",noodlecrm__preferred_email__c="+noodlecrm__preferred_email__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out8Struct implements routines.system.IPersistableRow<out8Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String noodlecrm__university_scholarship_details__c;

				public String getNoodlecrm__university_scholarship_details__c () {
					return this.noodlecrm__university_scholarship_details__c;
				}
				
			    public java.util.Date converteddate;

				public java.util.Date getConverteddate () {
					return this.converteddate;
				}
				
			    public String noodlecrm__subscriber_id__c;

				public String getNoodlecrm__subscriber_id__c () {
					return this.noodlecrm__subscriber_id__c;
				}
				
			    public String jigsaw;

				public String getJigsaw () {
					return this.jigsaw;
				}
				
			    public String noodlecrm__lead_ranking__c;

				public String getNoodlecrm__lead_ranking__c () {
					return this.noodlecrm__lead_ranking__c;
				}
				
			    public String noodlecrm__years_experience__c;

				public String getNoodlecrm__years_experience__c () {
					return this.noodlecrm__years_experience__c;
				}
				
			    public String lastname;

				public String getLastname () {
					return this.lastname;
				}
				
			    public Double noodlecrm__total_emails__c;

				public Double getNoodlecrm__total_emails__c () {
					return this.noodlecrm__total_emails__c;
				}
				
			    public String street;

				public String getStreet () {
					return this.street;
				}
				
			    public String noodlecrm__scholarships__c;

				public String getNoodlecrm__scholarships__c () {
					return this.noodlecrm__scholarships__c;
				}
				
			    public String noodlecrm__ea_stated_gpa__c;

				public String getNoodlecrm__ea_stated_gpa__c () {
					return this.noodlecrm__ea_stated_gpa__c;
				}
				
			    public Boolean isunreadbyowner;

				public Boolean getIsunreadbyowner () {
					return this.isunreadbyowner;
				}
				
			    public String noodlecrm__url__c;

				public String getNoodlecrm__url__c () {
					return this.noodlecrm__url__c;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__lead_stated_gpa__c;

				public String getNoodlecrm__lead_stated_gpa__c () {
					return this.noodlecrm__lead_stated_gpa__c;
				}
				
			    public java.util.Date noodlecrm__last_attended_zoom__c;

				public java.util.Date getNoodlecrm__last_attended_zoom__c () {
					return this.noodlecrm__last_attended_zoom__c;
				}
				
			    public String emailbouncedreason;

				public String getEmailbouncedreason () {
					return this.emailbouncedreason;
				}
				
			    public String noodlecrm__partnerships__c;

				public String getNoodlecrm__partnerships__c () {
					return this.noodlecrm__partnerships__c;
				}
				
			    public Integer numberofemployees;

				public Integer getNumberofemployees () {
					return this.numberofemployees;
				}
				
			    public String noodlecrm__bad_lead_reason__c;

				public String getNoodlecrm__bad_lead_reason__c () {
					return this.noodlecrm__bad_lead_reason__c;
				}
				
			    public String noodlecrm__out_of_pocket__c;

				public String getNoodlecrm__out_of_pocket__c () {
					return this.noodlecrm__out_of_pocket__c;
				}
				
			    public String noodlecrm__competitor_details__c;

				public String getNoodlecrm__competitor_details__c () {
					return this.noodlecrm__competitor_details__c;
				}
				
			    public java.util.Date noodlecrm__last_attended_webinar_date_time__c;

				public java.util.Date getNoodlecrm__last_attended_webinar_date_time__c () {
					return this.noodlecrm__last_attended_webinar_date_time__c;
				}
				
			    public String noodlecrm__program2__c;

				public String getNoodlecrm__program2__c () {
					return this.noodlecrm__program2__c;
				}
				
			    public String noodlecrm__noodle_crm_id__c;

				public String getNoodlecrm__noodle_crm_id__c () {
					return this.noodlecrm__noodle_crm_id__c;
				}
				
			    public String noodlecrm__university__c;

				public String getNoodlecrm__university__c () {
					return this.noodlecrm__university__c;
				}
				
			    public String noodlecrm__military__c;

				public String getNoodlecrm__military__c () {
					return this.noodlecrm__military__c;
				}
				
			    public String noodlecrm__universitycrmid__c;

				public String getNoodlecrm__universitycrmid__c () {
					return this.noodlecrm__universitycrmid__c;
				}
				
			    public String noodlecrm__meets_program_criteria__c;

				public String getNoodlecrm__meets_program_criteria__c () {
					return this.noodlecrm__meets_program_criteria__c;
				}
				
			    public String noodlecrm__best_time_to_call__c;

				public String getNoodlecrm__best_time_to_call__c () {
					return this.noodlecrm__best_time_to_call__c;
				}
				
			    public Double noodlecrm__total_texts__c;

				public Double getNoodlecrm__total_texts__c () {
					return this.noodlecrm__total_texts__c;
				}
				
			    public String noodlecrm__utm_source__c;

				public String getNoodlecrm__utm_source__c () {
					return this.noodlecrm__utm_source__c;
				}
				
			    public java.util.Date noodlecrm__first_call_date_time__c;

				public java.util.Date getNoodlecrm__first_call_date_time__c () {
					return this.noodlecrm__first_call_date_time__c;
				}
				
			    public String noodlecrm__lead_external_id__c;

				public String getNoodlecrm__lead_external_id__c () {
					return this.noodlecrm__lead_external_id__c;
				}
				
			    public java.util.Date noodlecrm__webinar_signup_date_time__c;

				public java.util.Date getNoodlecrm__webinar_signup_date_time__c () {
					return this.noodlecrm__webinar_signup_date_time__c;
				}
				
			    public java.util.Date lastvieweddate;

				public java.util.Date getLastvieweddate () {
					return this.lastvieweddate;
				}
				
			    public Boolean isconverted;

				public Boolean getIsconverted () {
					return this.isconverted;
				}
				
			    public String convertedcontactid;

				public String getConvertedcontactid () {
					return this.convertedcontactid;
				}
				
			    public String noodlecrm__responsiveness__c;

				public String getNoodlecrm__responsiveness__c () {
					return this.noodlecrm__responsiveness__c;
				}
				
			    public String noodlecrm__utm_content__c;

				public String getNoodlecrm__utm_content__c () {
					return this.noodlecrm__utm_content__c;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String noodlecrm__related_student__c;

				public String getNoodlecrm__related_student__c () {
					return this.noodlecrm__related_student__c;
				}
				
			    public Double latitude;

				public Double getLatitude () {
					return this.latitude;
				}
				
			    public java.util.Date noodlecrm__last_call_date_time__c;

				public java.util.Date getNoodlecrm__last_call_date_time__c () {
					return this.noodlecrm__last_call_date_time__c;
				}
				
			    public java.util.Date noodlecrm__missed_attempt_date_time__c;

				public java.util.Date getNoodlecrm__missed_attempt_date_time__c () {
					return this.noodlecrm__missed_attempt_date_time__c;
				}
				
			    public String mobilephone;

				public String getMobilephone () {
					return this.mobilephone;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public java.util.Date noodlecrm__expected_date_to_meet_requirement__c;

				public java.util.Date getNoodlecrm__expected_date_to_meet_requirement__c () {
					return this.noodlecrm__expected_date_to_meet_requirement__c;
				}
				
			    public Double noodlecrm__missed_attempt_counter__c;

				public Double getNoodlecrm__missed_attempt_counter__c () {
					return this.noodlecrm__missed_attempt_counter__c;
				}
				
			    public String noodlecrm__program__c;

				public String getNoodlecrm__program__c () {
					return this.noodlecrm__program__c;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				
			    public String masterrecordid;

				public String getMasterrecordid () {
					return this.masterrecordid;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public java.util.Date emailbounceddate;

				public java.util.Date getEmailbounceddate () {
					return this.emailbounceddate;
				}
				
			    public String noodlecrm__utm_medium__c;

				public String getNoodlecrm__utm_medium__c () {
					return this.noodlecrm__utm_medium__c;
				}
				
			    public String noodlecrm__manager_comments__c;

				public String getNoodlecrm__manager_comments__c () {
					return this.noodlecrm__manager_comments__c;
				}
				
			    public java.util.Date noodlecrm__last_call_date__c;

				public java.util.Date getNoodlecrm__last_call_date__c () {
					return this.noodlecrm__last_call_date__c;
				}
				
			    public Double longitude;

				public Double getLongitude () {
					return this.longitude;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public String noodlecrm__primary__c;

				public String getNoodlecrm__primary__c () {
					return this.noodlecrm__primary__c;
				}
				
			    public java.util.Date noodlecrm__follow_up_date__c;

				public java.util.Date getNoodlecrm__follow_up_date__c () {
					return this.noodlecrm__follow_up_date__c;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public Boolean noodlecrm__attended_webinar__c;

				public Boolean getNoodlecrm__attended_webinar__c () {
					return this.noodlecrm__attended_webinar__c;
				}
				
			    public String noodlecrm__supplemental__c;

				public String getNoodlecrm__supplemental__c () {
					return this.noodlecrm__supplemental__c;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date noodlecrm__meaningful_conversation_date_time__c;

				public java.util.Date getNoodlecrm__meaningful_conversation_date_time__c () {
					return this.noodlecrm__meaningful_conversation_date_time__c;
				}
				
			    public String noodlecrm__applying_to_a_competitor__c;

				public String getNoodlecrm__applying_to_a_competitor__c () {
					return this.noodlecrm__applying_to_a_competitor__c;
				}
				
			    public String noodlecrm__lead_stated_professional_status__c;

				public String getNoodlecrm__lead_stated_professional_status__c () {
					return this.noodlecrm__lead_stated_professional_status__c;
				}
				
			    public String noodlecrm__ea_stated_professional_status__c;

				public String getNoodlecrm__ea_stated_professional_status__c () {
					return this.noodlecrm__ea_stated_professional_status__c;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String noodlecrm__ea_indicated_start_term__c;

				public String getNoodlecrm__ea_indicated_start_term__c () {
					return this.noodlecrm__ea_indicated_start_term__c;
				}
				
			    public String noodlecrm__employer_benefits__c;

				public String getNoodlecrm__employer_benefits__c () {
					return this.noodlecrm__employer_benefits__c;
				}
				
			    public String noodlecrm__external_id_unique__c;

				public String getNoodlecrm__external_id_unique__c () {
					return this.noodlecrm__external_id_unique__c;
				}
				
			    public String noodlecrm__utm_campaign__c;

				public String getNoodlecrm__utm_campaign__c () {
					return this.noodlecrm__utm_campaign__c;
				}
				
			    public java.util.Date lastactivitydate;

				public java.util.Date getLastactivitydate () {
					return this.lastactivitydate;
				}
				
			    public String noodlecrm__will_not_apply_reason_other__c;

				public String getNoodlecrm__will_not_apply_reason_other__c () {
					return this.noodlecrm__will_not_apply_reason_other__c;
				}
				
			    public String noodlecrm__last_activity_type__c;

				public String getNoodlecrm__last_activity_type__c () {
					return this.noodlecrm__last_activity_type__c;
				}
				
			    public String noodlecrm__student_loans__c;

				public String getNoodlecrm__student_loans__c () {
					return this.noodlecrm__student_loans__c;
				}
				
			    public String individualid;

				public String getIndividualid () {
					return this.individualid;
				}
				
			    public Double noodlecrm__numberoflocations__c;

				public Double getNoodlecrm__numberoflocations__c () {
					return this.noodlecrm__numberoflocations__c;
				}
				
			    public String noodlecrm__time_zone__c;

				public String getNoodlecrm__time_zone__c () {
					return this.noodlecrm__time_zone__c;
				}
				
			    public String noodlecrm__do_not_call__c;

				public String getNoodlecrm__do_not_call__c () {
					return this.noodlecrm__do_not_call__c;
				}
				
			    public java.util.Date noodlecrm__university_scholarship_date__c;

				public java.util.Date getNoodlecrm__university_scholarship_date__c () {
					return this.noodlecrm__university_scholarship_date__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String convertedaccountid;

				public String getConvertedaccountid () {
					return this.convertedaccountid;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public String noodlecrm__lead_stated_licensure__c;

				public String getNoodlecrm__lead_stated_licensure__c () {
					return this.noodlecrm__lead_stated_licensure__c;
				}
				
			    public String noodlecrm__ea_stated_licensure__c;

				public String getNoodlecrm__ea_stated_licensure__c () {
					return this.noodlecrm__ea_stated_licensure__c;
				}
				
			    public String leadsource;

				public String getLeadsource () {
					return this.leadsource;
				}
				
			    public String noodlecrm__utm_term__c;

				public String getNoodlecrm__utm_term__c () {
					return this.noodlecrm__utm_term__c;
				}
				
			    public String geocodeaccuracy;

				public String getGeocodeaccuracy () {
					return this.geocodeaccuracy;
				}
				
			    public String noodlecrm__google_analytics_id__c;

				public String getNoodlecrm__google_analytics_id__c () {
					return this.noodlecrm__google_analytics_id__c;
				}
				
			    public String postalcode;

				public String getPostalcode () {
					return this.postalcode;
				}
				
			    public String salutation;

				public String getSalutation () {
					return this.salutation;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String noodlecrm__ip_address__c;

				public String getNoodlecrm__ip_address__c () {
					return this.noodlecrm__ip_address__c;
				}
				
			    public Double noodlecrm__total_calls__c;

				public Double getNoodlecrm__total_calls__c () {
					return this.noodlecrm__total_calls__c;
				}
				
			    public String noodlecrm__siccode__c;

				public String getNoodlecrm__siccode__c () {
					return this.noodlecrm__siccode__c;
				}
				
			    public String noodlecrm__test_status_gre__c;

				public String getNoodlecrm__test_status_gre__c () {
					return this.noodlecrm__test_status_gre__c;
				}
				
			    public Boolean noodlecrm__attended_zoom__c;

				public Boolean getNoodlecrm__attended_zoom__c () {
					return this.noodlecrm__attended_zoom__c;
				}
				
			    public String noodlecrm__fafsa__c;

				public String getNoodlecrm__fafsa__c () {
					return this.noodlecrm__fafsa__c;
				}
				
			    public String noodlecrm__ea_stated_taken_course_req__c;

				public String getNoodlecrm__ea_stated_taken_course_req__c () {
					return this.noodlecrm__ea_stated_taken_course_req__c;
				}
				
			    public String noodlecrm__level_of_education__c;

				public String getNoodlecrm__level_of_education__c () {
					return this.noodlecrm__level_of_education__c;
				}
				
			    public String noodlecrm__currentgenerators__c;

				public String getNoodlecrm__currentgenerators__c () {
					return this.noodlecrm__currentgenerators__c;
				}
				
			    public String noodlecrm__lead_stated_taken_course_req__c;

				public String getNoodlecrm__lead_stated_taken_course_req__c () {
					return this.noodlecrm__lead_stated_taken_course_req__c;
				}
				
			    public String noodlecrm__productinterest__c;

				public String getNoodlecrm__productinterest__c () {
					return this.noodlecrm__productinterest__c;
				}
				
			    public String noodlecrm__follow_up_reason__c;

				public String getNoodlecrm__follow_up_reason__c () {
					return this.noodlecrm__follow_up_reason__c;
				}
				
			    public java.util.Date noodlecrm__will_not_apply_date__c;

				public java.util.Date getNoodlecrm__will_not_apply_date__c () {
					return this.noodlecrm__will_not_apply_date__c;
				}
				
			    public String noodlecrm__fa_comments__c;

				public String getNoodlecrm__fa_comments__c () {
					return this.noodlecrm__fa_comments__c;
				}
				
			    public String jigsawcontactid;

				public String getJigsawcontactid () {
					return this.jigsawcontactid;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String website;

				public String getWebsite () {
					return this.website;
				}
				
			    public String firstname;

				public String getFirstname () {
					return this.firstname;
				}
				
			    public String noodlecrm__contact_type__c;

				public String getNoodlecrm__contact_type__c () {
					return this.noodlecrm__contact_type__c;
				}
				
			    public java.util.Date noodlecrm__conversion_date__c;

				public java.util.Date getNoodlecrm__conversion_date__c () {
					return this.noodlecrm__conversion_date__c;
				}
				
			    public Boolean noodlecrm__re_open__c;

				public Boolean getNoodlecrm__re_open__c () {
					return this.noodlecrm__re_open__c;
				}
				
			    public String noodlecrm__applying_to_a_competitor_type__c;

				public String getNoodlecrm__applying_to_a_competitor_type__c () {
					return this.noodlecrm__applying_to_a_competitor_type__c;
				}
				
			    public String convertedopportunityid;

				public String getConvertedopportunityid () {
					return this.convertedopportunityid;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String company;

				public String getCompany () {
					return this.company;
				}
				
			    public String rating;

				public String getRating () {
					return this.rating;
				}
				
			    public String photourl;

				public String getPhotourl () {
					return this.photourl;
				}
				
			    public java.util.Date lastreferenceddate;

				public java.util.Date getLastreferenceddate () {
					return this.lastreferenceddate;
				}
				
			    public String noodlecrm__temperature__c;

				public String getNoodlecrm__temperature__c () {
					return this.noodlecrm__temperature__c;
				}
				
			    public String noodlecrm__competitor_university_2__c;

				public String getNoodlecrm__competitor_university_2__c () {
					return this.noodlecrm__competitor_university_2__c;
				}
				
			    public String industry;

				public String getIndustry () {
					return this.industry;
				}
				
			    public String noodlecrm__competitor_university_1__c;

				public String getNoodlecrm__competitor_university_1__c () {
					return this.noodlecrm__competitor_university_1__c;
				}
				
			    public java.util.Date noodlecrm__bad_lead_date_time__c;

				public java.util.Date getNoodlecrm__bad_lead_date_time__c () {
					return this.noodlecrm__bad_lead_date_time__c;
				}
				
			    public Boolean noodlecrm__signed_up_for_webinar__c;

				public Boolean getNoodlecrm__signed_up_for_webinar__c () {
					return this.noodlecrm__signed_up_for_webinar__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__preferred_phone__c;

				public String getNoodlecrm__preferred_phone__c () {
					return this.noodlecrm__preferred_phone__c;
				}
				
			    public String noodlecrm__program3__c;

				public String getNoodlecrm__program3__c () {
					return this.noodlecrm__program3__c;
				}
				
			    public String noodlecrm__program2__r__noodlecrm__external_id__c;

				public String getNoodlecrm__program2__r__noodlecrm__external_id__c () {
					return this.noodlecrm__program2__r__noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__program3__r__noodlecrm__external_id__c;

				public String getNoodlecrm__program3__r__noodlecrm__external_id__c () {
					return this.noodlecrm__program3__r__noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__lead_indicated_start_term__c;

				public String getNoodlecrm__lead_indicated_start_term__c () {
					return this.noodlecrm__lead_indicated_start_term__c;
				}
				
			    public String noodlecrm__preferred_email__c;

				public String getNoodlecrm__preferred_email__c () {
					return this.noodlecrm__preferred_email__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.noodlecrm__university_scholarship_details__c = readString(dis);
					
					this.converteddate = readDate(dis);
					
					this.noodlecrm__subscriber_id__c = readString(dis);
					
					this.jigsaw = readString(dis);
					
					this.noodlecrm__lead_ranking__c = readString(dis);
					
					this.noodlecrm__years_experience__c = readString(dis);
					
					this.lastname = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_emails__c = null;
           				} else {
           			    	this.noodlecrm__total_emails__c = dis.readDouble();
           				}
					
					this.street = readString(dis);
					
					this.noodlecrm__scholarships__c = readString(dis);
					
					this.noodlecrm__ea_stated_gpa__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isunreadbyowner = null;
           				} else {
           			    	this.isunreadbyowner = dis.readBoolean();
           				}
					
					this.noodlecrm__url__c = readString(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__lead_stated_gpa__c = readString(dis);
					
					this.noodlecrm__last_attended_zoom__c = readDate(dis);
					
					this.emailbouncedreason = readString(dis);
					
					this.noodlecrm__partnerships__c = readString(dis);
					
						this.numberofemployees = readInteger(dis);
					
					this.noodlecrm__bad_lead_reason__c = readString(dis);
					
					this.noodlecrm__out_of_pocket__c = readString(dis);
					
					this.noodlecrm__competitor_details__c = readString(dis);
					
					this.noodlecrm__last_attended_webinar_date_time__c = readDate(dis);
					
					this.noodlecrm__program2__c = readString(dis);
					
					this.noodlecrm__noodle_crm_id__c = readString(dis);
					
					this.noodlecrm__university__c = readString(dis);
					
					this.noodlecrm__military__c = readString(dis);
					
					this.noodlecrm__universitycrmid__c = readString(dis);
					
					this.noodlecrm__meets_program_criteria__c = readString(dis);
					
					this.noodlecrm__best_time_to_call__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_texts__c = null;
           				} else {
           			    	this.noodlecrm__total_texts__c = dis.readDouble();
           				}
					
					this.noodlecrm__utm_source__c = readString(dis);
					
					this.noodlecrm__first_call_date_time__c = readDate(dis);
					
					this.noodlecrm__lead_external_id__c = readString(dis);
					
					this.noodlecrm__webinar_signup_date_time__c = readDate(dis);
					
					this.lastvieweddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isconverted = null;
           				} else {
           			    	this.isconverted = dis.readBoolean();
           				}
					
					this.convertedcontactid = readString(dis);
					
					this.noodlecrm__responsiveness__c = readString(dis);
					
					this.noodlecrm__utm_content__c = readString(dis);
					
					this.city = readString(dis);
					
					this.name = readString(dis);
					
					this.noodlecrm__related_student__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.latitude = null;
           				} else {
           			    	this.latitude = dis.readDouble();
           				}
					
					this.noodlecrm__last_call_date_time__c = readDate(dis);
					
					this.noodlecrm__missed_attempt_date_time__c = readDate(dis);
					
					this.mobilephone = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__expected_date_to_meet_requirement__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__missed_attempt_counter__c = null;
           				} else {
           			    	this.noodlecrm__missed_attempt_counter__c = dis.readDouble();
           				}
					
					this.noodlecrm__program__c = readString(dis);
					
					this.phone = readString(dis);
					
					this.masterrecordid = readString(dis);
					
					this.ownerid = readString(dis);
					
					this.emailbounceddate = readDate(dis);
					
					this.noodlecrm__utm_medium__c = readString(dis);
					
					this.noodlecrm__manager_comments__c = readString(dis);
					
					this.noodlecrm__last_call_date__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.longitude = null;
           				} else {
           			    	this.longitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.noodlecrm__primary__c = readString(dis);
					
					this.noodlecrm__follow_up_date__c = readDate(dis);
					
					this.systemmodstamp = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__attended_webinar__c = null;
           				} else {
           			    	this.noodlecrm__attended_webinar__c = dis.readBoolean();
           				}
					
					this.noodlecrm__supplemental__c = readString(dis);
					
					this.lastmodifiedbyid = readString(dis);
					
					this.state = readString(dis);
					
					this.noodlecrm__meaningful_conversation_date_time__c = readDate(dis);
					
					this.noodlecrm__applying_to_a_competitor__c = readString(dis);
					
					this.noodlecrm__lead_stated_professional_status__c = readString(dis);
					
					this.noodlecrm__ea_stated_professional_status__c = readString(dis);
					
					this.status = readString(dis);
					
					this.noodlecrm__ea_indicated_start_term__c = readString(dis);
					
					this.noodlecrm__employer_benefits__c = readString(dis);
					
					this.noodlecrm__external_id_unique__c = readString(dis);
					
					this.noodlecrm__utm_campaign__c = readString(dis);
					
					this.lastactivitydate = readDate(dis);
					
					this.noodlecrm__will_not_apply_reason_other__c = readString(dis);
					
					this.noodlecrm__last_activity_type__c = readString(dis);
					
					this.noodlecrm__student_loans__c = readString(dis);
					
					this.individualid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__numberoflocations__c = null;
           				} else {
           			    	this.noodlecrm__numberoflocations__c = dis.readDouble();
           				}
					
					this.noodlecrm__time_zone__c = readString(dis);
					
					this.noodlecrm__do_not_call__c = readString(dis);
					
					this.noodlecrm__university_scholarship_date__c = readDate(dis);
					
					this.createddate = readDate(dis);
					
					this.convertedaccountid = readString(dis);
					
					this.country = readString(dis);
					
					this.noodlecrm__lead_stated_licensure__c = readString(dis);
					
					this.noodlecrm__ea_stated_licensure__c = readString(dis);
					
					this.leadsource = readString(dis);
					
					this.noodlecrm__utm_term__c = readString(dis);
					
					this.geocodeaccuracy = readString(dis);
					
					this.noodlecrm__google_analytics_id__c = readString(dis);
					
					this.postalcode = readString(dis);
					
					this.salutation = readString(dis);
					
					this.title = readString(dis);
					
					this.noodlecrm__ip_address__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_calls__c = null;
           				} else {
           			    	this.noodlecrm__total_calls__c = dis.readDouble();
           				}
					
					this.noodlecrm__siccode__c = readString(dis);
					
					this.noodlecrm__test_status_gre__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__attended_zoom__c = null;
           				} else {
           			    	this.noodlecrm__attended_zoom__c = dis.readBoolean();
           				}
					
					this.noodlecrm__fafsa__c = readString(dis);
					
					this.noodlecrm__ea_stated_taken_course_req__c = readString(dis);
					
					this.noodlecrm__level_of_education__c = readString(dis);
					
					this.noodlecrm__currentgenerators__c = readString(dis);
					
					this.noodlecrm__lead_stated_taken_course_req__c = readString(dis);
					
					this.noodlecrm__productinterest__c = readString(dis);
					
					this.noodlecrm__follow_up_reason__c = readString(dis);
					
					this.noodlecrm__will_not_apply_date__c = readDate(dis);
					
					this.noodlecrm__fa_comments__c = readString(dis);
					
					this.jigsawcontactid = readString(dis);
					
					this.createdbyid = readString(dis);
					
					this.website = readString(dis);
					
					this.firstname = readString(dis);
					
					this.noodlecrm__contact_type__c = readString(dis);
					
					this.noodlecrm__conversion_date__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__re_open__c = null;
           				} else {
           			    	this.noodlecrm__re_open__c = dis.readBoolean();
           				}
					
					this.noodlecrm__applying_to_a_competitor_type__c = readString(dis);
					
					this.convertedopportunityid = readString(dis);
					
					this.email = readString(dis);
					
					this.description = readString(dis);
					
					this.company = readString(dis);
					
					this.rating = readString(dis);
					
					this.photourl = readString(dis);
					
					this.lastreferenceddate = readDate(dis);
					
					this.noodlecrm__temperature__c = readString(dis);
					
					this.noodlecrm__competitor_university_2__c = readString(dis);
					
					this.industry = readString(dis);
					
					this.noodlecrm__competitor_university_1__c = readString(dis);
					
					this.noodlecrm__bad_lead_date_time__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__signed_up_for_webinar__c = null;
           				} else {
           			    	this.noodlecrm__signed_up_for_webinar__c = dis.readBoolean();
           				}
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__preferred_phone__c = readString(dis);
					
					this.noodlecrm__program3__c = readString(dis);
					
					this.noodlecrm__program2__r__noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__program3__r__noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__lead_indicated_start_term__c = readString(dis);
					
					this.noodlecrm__preferred_email__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.noodlecrm__university_scholarship_details__c,dos);
					
					// java.util.Date
				
						writeDate(this.converteddate,dos);
					
					// String
				
						writeString(this.noodlecrm__subscriber_id__c,dos);
					
					// String
				
						writeString(this.jigsaw,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_ranking__c,dos);
					
					// String
				
						writeString(this.noodlecrm__years_experience__c,dos);
					
					// String
				
						writeString(this.lastname,dos);
					
					// Double
				
						if(this.noodlecrm__total_emails__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_emails__c);
		            	}
					
					// String
				
						writeString(this.street,dos);
					
					// String
				
						writeString(this.noodlecrm__scholarships__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_stated_gpa__c,dos);
					
					// Boolean
				
						if(this.isunreadbyowner == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isunreadbyowner);
		            	}
					
					// String
				
						writeString(this.noodlecrm__url__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_gpa__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_attended_zoom__c,dos);
					
					// String
				
						writeString(this.emailbouncedreason,dos);
					
					// String
				
						writeString(this.noodlecrm__partnerships__c,dos);
					
					// Integer
				
						writeInteger(this.numberofemployees,dos);
					
					// String
				
						writeString(this.noodlecrm__bad_lead_reason__c,dos);
					
					// String
				
						writeString(this.noodlecrm__out_of_pocket__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_details__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_attended_webinar_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program2__c,dos);
					
					// String
				
						writeString(this.noodlecrm__noodle_crm_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university__c,dos);
					
					// String
				
						writeString(this.noodlecrm__military__c,dos);
					
					// String
				
						writeString(this.noodlecrm__universitycrmid__c,dos);
					
					// String
				
						writeString(this.noodlecrm__meets_program_criteria__c,dos);
					
					// String
				
						writeString(this.noodlecrm__best_time_to_call__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_texts__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_texts__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__utm_source__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__first_call_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_external_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__webinar_signup_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastvieweddate,dos);
					
					// Boolean
				
						if(this.isconverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isconverted);
		            	}
					
					// String
				
						writeString(this.convertedcontactid,dos);
					
					// String
				
						writeString(this.noodlecrm__responsiveness__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_content__c,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.noodlecrm__related_student__c,dos);
					
					// Double
				
						if(this.latitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.latitude);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_call_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__missed_attempt_date_time__c,dos);
					
					// String
				
						writeString(this.mobilephone,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__expected_date_to_meet_requirement__c,dos);
					
					// Double
				
						if(this.noodlecrm__missed_attempt_counter__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__missed_attempt_counter__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__program__c,dos);
					
					// String
				
						writeString(this.phone,dos);
					
					// String
				
						writeString(this.masterrecordid,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// java.util.Date
				
						writeDate(this.emailbounceddate,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_medium__c,dos);
					
					// String
				
						writeString(this.noodlecrm__manager_comments__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_call_date__c,dos);
					
					// Double
				
						if(this.longitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.longitude);
		            	}
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// String
				
						writeString(this.noodlecrm__primary__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__follow_up_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// Boolean
				
						if(this.noodlecrm__attended_webinar__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__attended_webinar__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__supplemental__c,dos);
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__meaningful_conversation_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__applying_to_a_competitor__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_professional_status__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_stated_professional_status__c,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_indicated_start_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__employer_benefits__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id_unique__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_campaign__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastactivitydate,dos);
					
					// String
				
						writeString(this.noodlecrm__will_not_apply_reason_other__c,dos);
					
					// String
				
						writeString(this.noodlecrm__last_activity_type__c,dos);
					
					// String
				
						writeString(this.noodlecrm__student_loans__c,dos);
					
					// String
				
						writeString(this.individualid,dos);
					
					// Double
				
						if(this.noodlecrm__numberoflocations__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__numberoflocations__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__time_zone__c,dos);
					
					// String
				
						writeString(this.noodlecrm__do_not_call__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__university_scholarship_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.convertedaccountid,dos);
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_licensure__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_stated_licensure__c,dos);
					
					// String
				
						writeString(this.leadsource,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_term__c,dos);
					
					// String
				
						writeString(this.geocodeaccuracy,dos);
					
					// String
				
						writeString(this.noodlecrm__google_analytics_id__c,dos);
					
					// String
				
						writeString(this.postalcode,dos);
					
					// String
				
						writeString(this.salutation,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.noodlecrm__ip_address__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_calls__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_calls__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__siccode__c,dos);
					
					// String
				
						writeString(this.noodlecrm__test_status_gre__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__attended_zoom__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__attended_zoom__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__fafsa__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_stated_taken_course_req__c,dos);
					
					// String
				
						writeString(this.noodlecrm__level_of_education__c,dos);
					
					// String
				
						writeString(this.noodlecrm__currentgenerators__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_taken_course_req__c,dos);
					
					// String
				
						writeString(this.noodlecrm__productinterest__c,dos);
					
					// String
				
						writeString(this.noodlecrm__follow_up_reason__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__will_not_apply_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__fa_comments__c,dos);
					
					// String
				
						writeString(this.jigsawcontactid,dos);
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.website,dos);
					
					// String
				
						writeString(this.firstname,dos);
					
					// String
				
						writeString(this.noodlecrm__contact_type__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__conversion_date__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__re_open__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__re_open__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__applying_to_a_competitor_type__c,dos);
					
					// String
				
						writeString(this.convertedopportunityid,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.company,dos);
					
					// String
				
						writeString(this.rating,dos);
					
					// String
				
						writeString(this.photourl,dos);
					
					// java.util.Date
				
						writeDate(this.lastreferenceddate,dos);
					
					// String
				
						writeString(this.noodlecrm__temperature__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_university_2__c,dos);
					
					// String
				
						writeString(this.industry,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_university_1__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__bad_lead_date_time__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__signed_up_for_webinar__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__signed_up_for_webinar__c);
		            	}
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__preferred_phone__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program3__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program2__r__noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program3__r__noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_indicated_start_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__preferred_email__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("noodlecrm__university_scholarship_details__c="+noodlecrm__university_scholarship_details__c);
		sb.append(",converteddate="+String.valueOf(converteddate));
		sb.append(",noodlecrm__subscriber_id__c="+noodlecrm__subscriber_id__c);
		sb.append(",jigsaw="+jigsaw);
		sb.append(",noodlecrm__lead_ranking__c="+noodlecrm__lead_ranking__c);
		sb.append(",noodlecrm__years_experience__c="+noodlecrm__years_experience__c);
		sb.append(",lastname="+lastname);
		sb.append(",noodlecrm__total_emails__c="+String.valueOf(noodlecrm__total_emails__c));
		sb.append(",street="+street);
		sb.append(",noodlecrm__scholarships__c="+noodlecrm__scholarships__c);
		sb.append(",noodlecrm__ea_stated_gpa__c="+noodlecrm__ea_stated_gpa__c);
		sb.append(",isunreadbyowner="+String.valueOf(isunreadbyowner));
		sb.append(",noodlecrm__url__c="+noodlecrm__url__c);
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",noodlecrm__lead_stated_gpa__c="+noodlecrm__lead_stated_gpa__c);
		sb.append(",noodlecrm__last_attended_zoom__c="+String.valueOf(noodlecrm__last_attended_zoom__c));
		sb.append(",emailbouncedreason="+emailbouncedreason);
		sb.append(",noodlecrm__partnerships__c="+noodlecrm__partnerships__c);
		sb.append(",numberofemployees="+String.valueOf(numberofemployees));
		sb.append(",noodlecrm__bad_lead_reason__c="+noodlecrm__bad_lead_reason__c);
		sb.append(",noodlecrm__out_of_pocket__c="+noodlecrm__out_of_pocket__c);
		sb.append(",noodlecrm__competitor_details__c="+noodlecrm__competitor_details__c);
		sb.append(",noodlecrm__last_attended_webinar_date_time__c="+String.valueOf(noodlecrm__last_attended_webinar_date_time__c));
		sb.append(",noodlecrm__program2__c="+noodlecrm__program2__c);
		sb.append(",noodlecrm__noodle_crm_id__c="+noodlecrm__noodle_crm_id__c);
		sb.append(",noodlecrm__university__c="+noodlecrm__university__c);
		sb.append(",noodlecrm__military__c="+noodlecrm__military__c);
		sb.append(",noodlecrm__universitycrmid__c="+noodlecrm__universitycrmid__c);
		sb.append(",noodlecrm__meets_program_criteria__c="+noodlecrm__meets_program_criteria__c);
		sb.append(",noodlecrm__best_time_to_call__c="+noodlecrm__best_time_to_call__c);
		sb.append(",noodlecrm__total_texts__c="+String.valueOf(noodlecrm__total_texts__c));
		sb.append(",noodlecrm__utm_source__c="+noodlecrm__utm_source__c);
		sb.append(",noodlecrm__first_call_date_time__c="+String.valueOf(noodlecrm__first_call_date_time__c));
		sb.append(",noodlecrm__lead_external_id__c="+noodlecrm__lead_external_id__c);
		sb.append(",noodlecrm__webinar_signup_date_time__c="+String.valueOf(noodlecrm__webinar_signup_date_time__c));
		sb.append(",lastvieweddate="+String.valueOf(lastvieweddate));
		sb.append(",isconverted="+String.valueOf(isconverted));
		sb.append(",convertedcontactid="+convertedcontactid);
		sb.append(",noodlecrm__responsiveness__c="+noodlecrm__responsiveness__c);
		sb.append(",noodlecrm__utm_content__c="+noodlecrm__utm_content__c);
		sb.append(",city="+city);
		sb.append(",name="+name);
		sb.append(",noodlecrm__related_student__c="+noodlecrm__related_student__c);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",noodlecrm__last_call_date_time__c="+String.valueOf(noodlecrm__last_call_date_time__c));
		sb.append(",noodlecrm__missed_attempt_date_time__c="+String.valueOf(noodlecrm__missed_attempt_date_time__c));
		sb.append(",mobilephone="+mobilephone);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__expected_date_to_meet_requirement__c="+String.valueOf(noodlecrm__expected_date_to_meet_requirement__c));
		sb.append(",noodlecrm__missed_attempt_counter__c="+String.valueOf(noodlecrm__missed_attempt_counter__c));
		sb.append(",noodlecrm__program__c="+noodlecrm__program__c);
		sb.append(",phone="+phone);
		sb.append(",masterrecordid="+masterrecordid);
		sb.append(",ownerid="+ownerid);
		sb.append(",emailbounceddate="+String.valueOf(emailbounceddate));
		sb.append(",noodlecrm__utm_medium__c="+noodlecrm__utm_medium__c);
		sb.append(",noodlecrm__manager_comments__c="+noodlecrm__manager_comments__c);
		sb.append(",noodlecrm__last_call_date__c="+String.valueOf(noodlecrm__last_call_date__c));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",noodlecrm__primary__c="+noodlecrm__primary__c);
		sb.append(",noodlecrm__follow_up_date__c="+String.valueOf(noodlecrm__follow_up_date__c));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__attended_webinar__c="+String.valueOf(noodlecrm__attended_webinar__c));
		sb.append(",noodlecrm__supplemental__c="+noodlecrm__supplemental__c);
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",state="+state);
		sb.append(",noodlecrm__meaningful_conversation_date_time__c="+String.valueOf(noodlecrm__meaningful_conversation_date_time__c));
		sb.append(",noodlecrm__applying_to_a_competitor__c="+noodlecrm__applying_to_a_competitor__c);
		sb.append(",noodlecrm__lead_stated_professional_status__c="+noodlecrm__lead_stated_professional_status__c);
		sb.append(",noodlecrm__ea_stated_professional_status__c="+noodlecrm__ea_stated_professional_status__c);
		sb.append(",status="+status);
		sb.append(",noodlecrm__ea_indicated_start_term__c="+noodlecrm__ea_indicated_start_term__c);
		sb.append(",noodlecrm__employer_benefits__c="+noodlecrm__employer_benefits__c);
		sb.append(",noodlecrm__external_id_unique__c="+noodlecrm__external_id_unique__c);
		sb.append(",noodlecrm__utm_campaign__c="+noodlecrm__utm_campaign__c);
		sb.append(",lastactivitydate="+String.valueOf(lastactivitydate));
		sb.append(",noodlecrm__will_not_apply_reason_other__c="+noodlecrm__will_not_apply_reason_other__c);
		sb.append(",noodlecrm__last_activity_type__c="+noodlecrm__last_activity_type__c);
		sb.append(",noodlecrm__student_loans__c="+noodlecrm__student_loans__c);
		sb.append(",individualid="+individualid);
		sb.append(",noodlecrm__numberoflocations__c="+String.valueOf(noodlecrm__numberoflocations__c));
		sb.append(",noodlecrm__time_zone__c="+noodlecrm__time_zone__c);
		sb.append(",noodlecrm__do_not_call__c="+noodlecrm__do_not_call__c);
		sb.append(",noodlecrm__university_scholarship_date__c="+String.valueOf(noodlecrm__university_scholarship_date__c));
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",convertedaccountid="+convertedaccountid);
		sb.append(",country="+country);
		sb.append(",noodlecrm__lead_stated_licensure__c="+noodlecrm__lead_stated_licensure__c);
		sb.append(",noodlecrm__ea_stated_licensure__c="+noodlecrm__ea_stated_licensure__c);
		sb.append(",leadsource="+leadsource);
		sb.append(",noodlecrm__utm_term__c="+noodlecrm__utm_term__c);
		sb.append(",geocodeaccuracy="+geocodeaccuracy);
		sb.append(",noodlecrm__google_analytics_id__c="+noodlecrm__google_analytics_id__c);
		sb.append(",postalcode="+postalcode);
		sb.append(",salutation="+salutation);
		sb.append(",title="+title);
		sb.append(",noodlecrm__ip_address__c="+noodlecrm__ip_address__c);
		sb.append(",noodlecrm__total_calls__c="+String.valueOf(noodlecrm__total_calls__c));
		sb.append(",noodlecrm__siccode__c="+noodlecrm__siccode__c);
		sb.append(",noodlecrm__test_status_gre__c="+noodlecrm__test_status_gre__c);
		sb.append(",noodlecrm__attended_zoom__c="+String.valueOf(noodlecrm__attended_zoom__c));
		sb.append(",noodlecrm__fafsa__c="+noodlecrm__fafsa__c);
		sb.append(",noodlecrm__ea_stated_taken_course_req__c="+noodlecrm__ea_stated_taken_course_req__c);
		sb.append(",noodlecrm__level_of_education__c="+noodlecrm__level_of_education__c);
		sb.append(",noodlecrm__currentgenerators__c="+noodlecrm__currentgenerators__c);
		sb.append(",noodlecrm__lead_stated_taken_course_req__c="+noodlecrm__lead_stated_taken_course_req__c);
		sb.append(",noodlecrm__productinterest__c="+noodlecrm__productinterest__c);
		sb.append(",noodlecrm__follow_up_reason__c="+noodlecrm__follow_up_reason__c);
		sb.append(",noodlecrm__will_not_apply_date__c="+String.valueOf(noodlecrm__will_not_apply_date__c));
		sb.append(",noodlecrm__fa_comments__c="+noodlecrm__fa_comments__c);
		sb.append(",jigsawcontactid="+jigsawcontactid);
		sb.append(",createdbyid="+createdbyid);
		sb.append(",website="+website);
		sb.append(",firstname="+firstname);
		sb.append(",noodlecrm__contact_type__c="+noodlecrm__contact_type__c);
		sb.append(",noodlecrm__conversion_date__c="+String.valueOf(noodlecrm__conversion_date__c));
		sb.append(",noodlecrm__re_open__c="+String.valueOf(noodlecrm__re_open__c));
		sb.append(",noodlecrm__applying_to_a_competitor_type__c="+noodlecrm__applying_to_a_competitor_type__c);
		sb.append(",convertedopportunityid="+convertedopportunityid);
		sb.append(",email="+email);
		sb.append(",description="+description);
		sb.append(",company="+company);
		sb.append(",rating="+rating);
		sb.append(",photourl="+photourl);
		sb.append(",lastreferenceddate="+String.valueOf(lastreferenceddate));
		sb.append(",noodlecrm__temperature__c="+noodlecrm__temperature__c);
		sb.append(",noodlecrm__competitor_university_2__c="+noodlecrm__competitor_university_2__c);
		sb.append(",industry="+industry);
		sb.append(",noodlecrm__competitor_university_1__c="+noodlecrm__competitor_university_1__c);
		sb.append(",noodlecrm__bad_lead_date_time__c="+String.valueOf(noodlecrm__bad_lead_date_time__c));
		sb.append(",noodlecrm__signed_up_for_webinar__c="+String.valueOf(noodlecrm__signed_up_for_webinar__c));
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__preferred_phone__c="+noodlecrm__preferred_phone__c);
		sb.append(",noodlecrm__program3__c="+noodlecrm__program3__c);
		sb.append(",noodlecrm__program2__r__noodlecrm__external_id__c="+noodlecrm__program2__r__noodlecrm__external_id__c);
		sb.append(",noodlecrm__program3__r__noodlecrm__external_id__c="+noodlecrm__program3__r__noodlecrm__external_id__c);
		sb.append(",noodlecrm__lead_indicated_start_term__c="+noodlecrm__lead_indicated_start_term__c);
		sb.append(",noodlecrm__preferred_email__c="+noodlecrm__preferred_email__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String noodlecrm__university_scholarship_details__c;

				public String getNoodlecrm__university_scholarship_details__c () {
					return this.noodlecrm__university_scholarship_details__c;
				}
				
			    public java.util.Date converteddate;

				public java.util.Date getConverteddate () {
					return this.converteddate;
				}
				
			    public String noodlecrm__subscriber_id__c;

				public String getNoodlecrm__subscriber_id__c () {
					return this.noodlecrm__subscriber_id__c;
				}
				
			    public String jigsaw;

				public String getJigsaw () {
					return this.jigsaw;
				}
				
			    public String noodlecrm__lead_ranking__c;

				public String getNoodlecrm__lead_ranking__c () {
					return this.noodlecrm__lead_ranking__c;
				}
				
			    public String noodlecrm__years_experience__c;

				public String getNoodlecrm__years_experience__c () {
					return this.noodlecrm__years_experience__c;
				}
				
			    public String lastname;

				public String getLastname () {
					return this.lastname;
				}
				
			    public Double noodlecrm__total_emails__c;

				public Double getNoodlecrm__total_emails__c () {
					return this.noodlecrm__total_emails__c;
				}
				
			    public String street;

				public String getStreet () {
					return this.street;
				}
				
			    public String noodlecrm__scholarships__c;

				public String getNoodlecrm__scholarships__c () {
					return this.noodlecrm__scholarships__c;
				}
				
			    public String noodlecrm__ea_stated_gpa__c;

				public String getNoodlecrm__ea_stated_gpa__c () {
					return this.noodlecrm__ea_stated_gpa__c;
				}
				
			    public Boolean isunreadbyowner;

				public Boolean getIsunreadbyowner () {
					return this.isunreadbyowner;
				}
				
			    public String noodlecrm__url__c;

				public String getNoodlecrm__url__c () {
					return this.noodlecrm__url__c;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__lead_stated_gpa__c;

				public String getNoodlecrm__lead_stated_gpa__c () {
					return this.noodlecrm__lead_stated_gpa__c;
				}
				
			    public java.util.Date noodlecrm__last_attended_zoom__c;

				public java.util.Date getNoodlecrm__last_attended_zoom__c () {
					return this.noodlecrm__last_attended_zoom__c;
				}
				
			    public String emailbouncedreason;

				public String getEmailbouncedreason () {
					return this.emailbouncedreason;
				}
				
			    public String noodlecrm__partnerships__c;

				public String getNoodlecrm__partnerships__c () {
					return this.noodlecrm__partnerships__c;
				}
				
			    public Integer numberofemployees;

				public Integer getNumberofemployees () {
					return this.numberofemployees;
				}
				
			    public String noodlecrm__bad_lead_reason__c;

				public String getNoodlecrm__bad_lead_reason__c () {
					return this.noodlecrm__bad_lead_reason__c;
				}
				
			    public String noodlecrm__out_of_pocket__c;

				public String getNoodlecrm__out_of_pocket__c () {
					return this.noodlecrm__out_of_pocket__c;
				}
				
			    public String noodlecrm__competitor_details__c;

				public String getNoodlecrm__competitor_details__c () {
					return this.noodlecrm__competitor_details__c;
				}
				
			    public java.util.Date noodlecrm__last_attended_webinar_date_time__c;

				public java.util.Date getNoodlecrm__last_attended_webinar_date_time__c () {
					return this.noodlecrm__last_attended_webinar_date_time__c;
				}
				
			    public String noodlecrm__program2__c;

				public String getNoodlecrm__program2__c () {
					return this.noodlecrm__program2__c;
				}
				
			    public String noodlecrm__noodle_crm_id__c;

				public String getNoodlecrm__noodle_crm_id__c () {
					return this.noodlecrm__noodle_crm_id__c;
				}
				
			    public String noodlecrm__university__c;

				public String getNoodlecrm__university__c () {
					return this.noodlecrm__university__c;
				}
				
			    public String noodlecrm__military__c;

				public String getNoodlecrm__military__c () {
					return this.noodlecrm__military__c;
				}
				
			    public String noodlecrm__universitycrmid__c;

				public String getNoodlecrm__universitycrmid__c () {
					return this.noodlecrm__universitycrmid__c;
				}
				
			    public String noodlecrm__meets_program_criteria__c;

				public String getNoodlecrm__meets_program_criteria__c () {
					return this.noodlecrm__meets_program_criteria__c;
				}
				
			    public String noodlecrm__best_time_to_call__c;

				public String getNoodlecrm__best_time_to_call__c () {
					return this.noodlecrm__best_time_to_call__c;
				}
				
			    public Double noodlecrm__total_texts__c;

				public Double getNoodlecrm__total_texts__c () {
					return this.noodlecrm__total_texts__c;
				}
				
			    public String noodlecrm__utm_source__c;

				public String getNoodlecrm__utm_source__c () {
					return this.noodlecrm__utm_source__c;
				}
				
			    public java.util.Date noodlecrm__first_call_date_time__c;

				public java.util.Date getNoodlecrm__first_call_date_time__c () {
					return this.noodlecrm__first_call_date_time__c;
				}
				
			    public String noodlecrm__lead_external_id__c;

				public String getNoodlecrm__lead_external_id__c () {
					return this.noodlecrm__lead_external_id__c;
				}
				
			    public java.util.Date noodlecrm__webinar_signup_date_time__c;

				public java.util.Date getNoodlecrm__webinar_signup_date_time__c () {
					return this.noodlecrm__webinar_signup_date_time__c;
				}
				
			    public java.util.Date lastvieweddate;

				public java.util.Date getLastvieweddate () {
					return this.lastvieweddate;
				}
				
			    public Boolean isconverted;

				public Boolean getIsconverted () {
					return this.isconverted;
				}
				
			    public String convertedcontactid;

				public String getConvertedcontactid () {
					return this.convertedcontactid;
				}
				
			    public String noodlecrm__responsiveness__c;

				public String getNoodlecrm__responsiveness__c () {
					return this.noodlecrm__responsiveness__c;
				}
				
			    public String noodlecrm__utm_content__c;

				public String getNoodlecrm__utm_content__c () {
					return this.noodlecrm__utm_content__c;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String noodlecrm__related_student__c;

				public String getNoodlecrm__related_student__c () {
					return this.noodlecrm__related_student__c;
				}
				
			    public Double latitude;

				public Double getLatitude () {
					return this.latitude;
				}
				
			    public java.util.Date noodlecrm__last_call_date_time__c;

				public java.util.Date getNoodlecrm__last_call_date_time__c () {
					return this.noodlecrm__last_call_date_time__c;
				}
				
			    public java.util.Date noodlecrm__missed_attempt_date_time__c;

				public java.util.Date getNoodlecrm__missed_attempt_date_time__c () {
					return this.noodlecrm__missed_attempt_date_time__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public java.util.Date noodlecrm__expected_date_to_meet_requirement__c;

				public java.util.Date getNoodlecrm__expected_date_to_meet_requirement__c () {
					return this.noodlecrm__expected_date_to_meet_requirement__c;
				}
				
			    public Double noodlecrm__missed_attempt_counter__c;

				public Double getNoodlecrm__missed_attempt_counter__c () {
					return this.noodlecrm__missed_attempt_counter__c;
				}
				
			    public String noodlecrm__program__c;

				public String getNoodlecrm__program__c () {
					return this.noodlecrm__program__c;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				
			    public String masterrecordid;

				public String getMasterrecordid () {
					return this.masterrecordid;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public java.util.Date emailbounceddate;

				public java.util.Date getEmailbounceddate () {
					return this.emailbounceddate;
				}
				
			    public String noodlecrm__utm_medium__c;

				public String getNoodlecrm__utm_medium__c () {
					return this.noodlecrm__utm_medium__c;
				}
				
			    public String noodlecrm__manager_comments__c;

				public String getNoodlecrm__manager_comments__c () {
					return this.noodlecrm__manager_comments__c;
				}
				
			    public java.util.Date noodlecrm__last_call_date__c;

				public java.util.Date getNoodlecrm__last_call_date__c () {
					return this.noodlecrm__last_call_date__c;
				}
				
			    public Double longitude;

				public Double getLongitude () {
					return this.longitude;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public String noodlecrm__primary__c;

				public String getNoodlecrm__primary__c () {
					return this.noodlecrm__primary__c;
				}
				
			    public java.util.Date noodlecrm__follow_up_date__c;

				public java.util.Date getNoodlecrm__follow_up_date__c () {
					return this.noodlecrm__follow_up_date__c;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public Boolean noodlecrm__attended_webinar__c;

				public Boolean getNoodlecrm__attended_webinar__c () {
					return this.noodlecrm__attended_webinar__c;
				}
				
			    public String noodlecrm__supplemental__c;

				public String getNoodlecrm__supplemental__c () {
					return this.noodlecrm__supplemental__c;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public java.util.Date noodlecrm__meaningful_conversation_date_time__c;

				public java.util.Date getNoodlecrm__meaningful_conversation_date_time__c () {
					return this.noodlecrm__meaningful_conversation_date_time__c;
				}
				
			    public String noodlecrm__applying_to_a_competitor__c;

				public String getNoodlecrm__applying_to_a_competitor__c () {
					return this.noodlecrm__applying_to_a_competitor__c;
				}
				
			    public String noodlecrm__lead_stated_professional_status__c;

				public String getNoodlecrm__lead_stated_professional_status__c () {
					return this.noodlecrm__lead_stated_professional_status__c;
				}
				
			    public String noodlecrm__ea_stated_professional_status__c;

				public String getNoodlecrm__ea_stated_professional_status__c () {
					return this.noodlecrm__ea_stated_professional_status__c;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String noodlecrm__ea_indicated_start_term__c;

				public String getNoodlecrm__ea_indicated_start_term__c () {
					return this.noodlecrm__ea_indicated_start_term__c;
				}
				
			    public String noodlecrm__employer_benefits__c;

				public String getNoodlecrm__employer_benefits__c () {
					return this.noodlecrm__employer_benefits__c;
				}
				
			    public String noodlecrm__external_id_unique__c;

				public String getNoodlecrm__external_id_unique__c () {
					return this.noodlecrm__external_id_unique__c;
				}
				
			    public String noodlecrm__utm_campaign__c;

				public String getNoodlecrm__utm_campaign__c () {
					return this.noodlecrm__utm_campaign__c;
				}
				
			    public java.util.Date lastactivitydate;

				public java.util.Date getLastactivitydate () {
					return this.lastactivitydate;
				}
				
			    public String noodlecrm__will_not_apply_reason_other__c;

				public String getNoodlecrm__will_not_apply_reason_other__c () {
					return this.noodlecrm__will_not_apply_reason_other__c;
				}
				
			    public String noodlecrm__last_activity_type__c;

				public String getNoodlecrm__last_activity_type__c () {
					return this.noodlecrm__last_activity_type__c;
				}
				
			    public String noodlecrm__student_loans__c;

				public String getNoodlecrm__student_loans__c () {
					return this.noodlecrm__student_loans__c;
				}
				
			    public String individualid;

				public String getIndividualid () {
					return this.individualid;
				}
				
			    public Double noodlecrm__numberoflocations__c;

				public Double getNoodlecrm__numberoflocations__c () {
					return this.noodlecrm__numberoflocations__c;
				}
				
			    public String noodlecrm__time_zone__c;

				public String getNoodlecrm__time_zone__c () {
					return this.noodlecrm__time_zone__c;
				}
				
			    public String noodlecrm__do_not_call__c;

				public String getNoodlecrm__do_not_call__c () {
					return this.noodlecrm__do_not_call__c;
				}
				
			    public java.util.Date noodlecrm__university_scholarship_date__c;

				public java.util.Date getNoodlecrm__university_scholarship_date__c () {
					return this.noodlecrm__university_scholarship_date__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String convertedaccountid;

				public String getConvertedaccountid () {
					return this.convertedaccountid;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public String noodlecrm__lead_stated_licensure__c;

				public String getNoodlecrm__lead_stated_licensure__c () {
					return this.noodlecrm__lead_stated_licensure__c;
				}
				
			    public String noodlecrm__ea_stated_licensure__c;

				public String getNoodlecrm__ea_stated_licensure__c () {
					return this.noodlecrm__ea_stated_licensure__c;
				}
				
			    public String leadsource;

				public String getLeadsource () {
					return this.leadsource;
				}
				
			    public String noodlecrm__utm_term__c;

				public String getNoodlecrm__utm_term__c () {
					return this.noodlecrm__utm_term__c;
				}
				
			    public String geocodeaccuracy;

				public String getGeocodeaccuracy () {
					return this.geocodeaccuracy;
				}
				
			    public String noodlecrm__google_analytics_id__c;

				public String getNoodlecrm__google_analytics_id__c () {
					return this.noodlecrm__google_analytics_id__c;
				}
				
			    public String postalcode;

				public String getPostalcode () {
					return this.postalcode;
				}
				
			    public String salutation;

				public String getSalutation () {
					return this.salutation;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String noodlecrm__ip_address__c;

				public String getNoodlecrm__ip_address__c () {
					return this.noodlecrm__ip_address__c;
				}
				
			    public Double noodlecrm__total_calls__c;

				public Double getNoodlecrm__total_calls__c () {
					return this.noodlecrm__total_calls__c;
				}
				
			    public String noodlecrm__siccode__c;

				public String getNoodlecrm__siccode__c () {
					return this.noodlecrm__siccode__c;
				}
				
			    public String noodlecrm__test_status_gre__c;

				public String getNoodlecrm__test_status_gre__c () {
					return this.noodlecrm__test_status_gre__c;
				}
				
			    public Boolean noodlecrm__attended_zoom__c;

				public Boolean getNoodlecrm__attended_zoom__c () {
					return this.noodlecrm__attended_zoom__c;
				}
				
			    public String noodlecrm__fafsa__c;

				public String getNoodlecrm__fafsa__c () {
					return this.noodlecrm__fafsa__c;
				}
				
			    public String noodlecrm__ea_stated_taken_course_req__c;

				public String getNoodlecrm__ea_stated_taken_course_req__c () {
					return this.noodlecrm__ea_stated_taken_course_req__c;
				}
				
			    public String noodlecrm__level_of_education__c;

				public String getNoodlecrm__level_of_education__c () {
					return this.noodlecrm__level_of_education__c;
				}
				
			    public String noodlecrm__currentgenerators__c;

				public String getNoodlecrm__currentgenerators__c () {
					return this.noodlecrm__currentgenerators__c;
				}
				
			    public String noodlecrm__lead_stated_taken_course_req__c;

				public String getNoodlecrm__lead_stated_taken_course_req__c () {
					return this.noodlecrm__lead_stated_taken_course_req__c;
				}
				
			    public String noodlecrm__productinterest__c;

				public String getNoodlecrm__productinterest__c () {
					return this.noodlecrm__productinterest__c;
				}
				
			    public String noodlecrm__follow_up_reason__c;

				public String getNoodlecrm__follow_up_reason__c () {
					return this.noodlecrm__follow_up_reason__c;
				}
				
			    public java.util.Date noodlecrm__will_not_apply_date__c;

				public java.util.Date getNoodlecrm__will_not_apply_date__c () {
					return this.noodlecrm__will_not_apply_date__c;
				}
				
			    public String noodlecrm__fa_comments__c;

				public String getNoodlecrm__fa_comments__c () {
					return this.noodlecrm__fa_comments__c;
				}
				
			    public String jigsawcontactid;

				public String getJigsawcontactid () {
					return this.jigsawcontactid;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String website;

				public String getWebsite () {
					return this.website;
				}
				
			    public String firstname;

				public String getFirstname () {
					return this.firstname;
				}
				
			    public String noodlecrm__contact_type__c;

				public String getNoodlecrm__contact_type__c () {
					return this.noodlecrm__contact_type__c;
				}
				
			    public java.util.Date noodlecrm__conversion_date__c;

				public java.util.Date getNoodlecrm__conversion_date__c () {
					return this.noodlecrm__conversion_date__c;
				}
				
			    public Boolean noodlecrm__re_open__c;

				public Boolean getNoodlecrm__re_open__c () {
					return this.noodlecrm__re_open__c;
				}
				
			    public String noodlecrm__applying_to_a_competitor_type__c;

				public String getNoodlecrm__applying_to_a_competitor_type__c () {
					return this.noodlecrm__applying_to_a_competitor_type__c;
				}
				
			    public String convertedopportunityid;

				public String getConvertedopportunityid () {
					return this.convertedopportunityid;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String company;

				public String getCompany () {
					return this.company;
				}
				
			    public String rating;

				public String getRating () {
					return this.rating;
				}
				
			    public String photourl;

				public String getPhotourl () {
					return this.photourl;
				}
				
			    public java.util.Date lastreferenceddate;

				public java.util.Date getLastreferenceddate () {
					return this.lastreferenceddate;
				}
				
			    public String noodlecrm__temperature__c;

				public String getNoodlecrm__temperature__c () {
					return this.noodlecrm__temperature__c;
				}
				
			    public String noodlecrm__competitor_university_2__c;

				public String getNoodlecrm__competitor_university_2__c () {
					return this.noodlecrm__competitor_university_2__c;
				}
				
			    public String industry;

				public String getIndustry () {
					return this.industry;
				}
				
			    public String noodlecrm__competitor_university_1__c;

				public String getNoodlecrm__competitor_university_1__c () {
					return this.noodlecrm__competitor_university_1__c;
				}
				
			    public java.util.Date noodlecrm__bad_lead_date_time__c;

				public java.util.Date getNoodlecrm__bad_lead_date_time__c () {
					return this.noodlecrm__bad_lead_date_time__c;
				}
				
			    public Boolean noodlecrm__signed_up_for_webinar__c;

				public Boolean getNoodlecrm__signed_up_for_webinar__c () {
					return this.noodlecrm__signed_up_for_webinar__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__preferred_phone__c;

				public String getNoodlecrm__preferred_phone__c () {
					return this.noodlecrm__preferred_phone__c;
				}
				
			    public String noodlecrm__program3__c;

				public String getNoodlecrm__program3__c () {
					return this.noodlecrm__program3__c;
				}
				
			    public String noodlecrm__program2__r__noodlecrm__external_id__c;

				public String getNoodlecrm__program2__r__noodlecrm__external_id__c () {
					return this.noodlecrm__program2__r__noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__program3__r__noodlecrm__external_id__c;

				public String getNoodlecrm__program3__r__noodlecrm__external_id__c () {
					return this.noodlecrm__program3__r__noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__lead_indicated_start_term__c;

				public String getNoodlecrm__lead_indicated_start_term__c () {
					return this.noodlecrm__lead_indicated_start_term__c;
				}
				
			    public String noodlecrm__preferred_email__c;

				public String getNoodlecrm__preferred_email__c () {
					return this.noodlecrm__preferred_email__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.noodlecrm__university_scholarship_details__c = readString(dis);
					
					this.converteddate = readDate(dis);
					
					this.noodlecrm__subscriber_id__c = readString(dis);
					
					this.jigsaw = readString(dis);
					
					this.noodlecrm__lead_ranking__c = readString(dis);
					
					this.noodlecrm__years_experience__c = readString(dis);
					
					this.lastname = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_emails__c = null;
           				} else {
           			    	this.noodlecrm__total_emails__c = dis.readDouble();
           				}
					
					this.street = readString(dis);
					
					this.noodlecrm__scholarships__c = readString(dis);
					
					this.noodlecrm__ea_stated_gpa__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isunreadbyowner = null;
           				} else {
           			    	this.isunreadbyowner = dis.readBoolean();
           				}
					
					this.noodlecrm__url__c = readString(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__lead_stated_gpa__c = readString(dis);
					
					this.noodlecrm__last_attended_zoom__c = readDate(dis);
					
					this.emailbouncedreason = readString(dis);
					
					this.noodlecrm__partnerships__c = readString(dis);
					
						this.numberofemployees = readInteger(dis);
					
					this.noodlecrm__bad_lead_reason__c = readString(dis);
					
					this.noodlecrm__out_of_pocket__c = readString(dis);
					
					this.noodlecrm__competitor_details__c = readString(dis);
					
					this.noodlecrm__last_attended_webinar_date_time__c = readDate(dis);
					
					this.noodlecrm__program2__c = readString(dis);
					
					this.noodlecrm__noodle_crm_id__c = readString(dis);
					
					this.noodlecrm__university__c = readString(dis);
					
					this.noodlecrm__military__c = readString(dis);
					
					this.noodlecrm__universitycrmid__c = readString(dis);
					
					this.noodlecrm__meets_program_criteria__c = readString(dis);
					
					this.noodlecrm__best_time_to_call__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_texts__c = null;
           				} else {
           			    	this.noodlecrm__total_texts__c = dis.readDouble();
           				}
					
					this.noodlecrm__utm_source__c = readString(dis);
					
					this.noodlecrm__first_call_date_time__c = readDate(dis);
					
					this.noodlecrm__lead_external_id__c = readString(dis);
					
					this.noodlecrm__webinar_signup_date_time__c = readDate(dis);
					
					this.lastvieweddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isconverted = null;
           				} else {
           			    	this.isconverted = dis.readBoolean();
           				}
					
					this.convertedcontactid = readString(dis);
					
					this.noodlecrm__responsiveness__c = readString(dis);
					
					this.noodlecrm__utm_content__c = readString(dis);
					
					this.city = readString(dis);
					
					this.name = readString(dis);
					
					this.noodlecrm__related_student__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.latitude = null;
           				} else {
           			    	this.latitude = dis.readDouble();
           				}
					
					this.noodlecrm__last_call_date_time__c = readDate(dis);
					
					this.noodlecrm__missed_attempt_date_time__c = readDate(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__expected_date_to_meet_requirement__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__missed_attempt_counter__c = null;
           				} else {
           			    	this.noodlecrm__missed_attempt_counter__c = dis.readDouble();
           				}
					
					this.noodlecrm__program__c = readString(dis);
					
					this.phone = readString(dis);
					
					this.masterrecordid = readString(dis);
					
					this.ownerid = readString(dis);
					
					this.emailbounceddate = readDate(dis);
					
					this.noodlecrm__utm_medium__c = readString(dis);
					
					this.noodlecrm__manager_comments__c = readString(dis);
					
					this.noodlecrm__last_call_date__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.longitude = null;
           				} else {
           			    	this.longitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.noodlecrm__primary__c = readString(dis);
					
					this.noodlecrm__follow_up_date__c = readDate(dis);
					
					this.systemmodstamp = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__attended_webinar__c = null;
           				} else {
           			    	this.noodlecrm__attended_webinar__c = dis.readBoolean();
           				}
					
					this.noodlecrm__supplemental__c = readString(dis);
					
					this.lastmodifiedbyid = readString(dis);
					
					this.state = readString(dis);
					
					this.noodlecrm__meaningful_conversation_date_time__c = readDate(dis);
					
					this.noodlecrm__applying_to_a_competitor__c = readString(dis);
					
					this.noodlecrm__lead_stated_professional_status__c = readString(dis);
					
					this.noodlecrm__ea_stated_professional_status__c = readString(dis);
					
					this.status = readString(dis);
					
					this.noodlecrm__ea_indicated_start_term__c = readString(dis);
					
					this.noodlecrm__employer_benefits__c = readString(dis);
					
					this.noodlecrm__external_id_unique__c = readString(dis);
					
					this.noodlecrm__utm_campaign__c = readString(dis);
					
					this.lastactivitydate = readDate(dis);
					
					this.noodlecrm__will_not_apply_reason_other__c = readString(dis);
					
					this.noodlecrm__last_activity_type__c = readString(dis);
					
					this.noodlecrm__student_loans__c = readString(dis);
					
					this.individualid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__numberoflocations__c = null;
           				} else {
           			    	this.noodlecrm__numberoflocations__c = dis.readDouble();
           				}
					
					this.noodlecrm__time_zone__c = readString(dis);
					
					this.noodlecrm__do_not_call__c = readString(dis);
					
					this.noodlecrm__university_scholarship_date__c = readDate(dis);
					
					this.createddate = readDate(dis);
					
					this.convertedaccountid = readString(dis);
					
					this.country = readString(dis);
					
					this.noodlecrm__lead_stated_licensure__c = readString(dis);
					
					this.noodlecrm__ea_stated_licensure__c = readString(dis);
					
					this.leadsource = readString(dis);
					
					this.noodlecrm__utm_term__c = readString(dis);
					
					this.geocodeaccuracy = readString(dis);
					
					this.noodlecrm__google_analytics_id__c = readString(dis);
					
					this.postalcode = readString(dis);
					
					this.salutation = readString(dis);
					
					this.title = readString(dis);
					
					this.noodlecrm__ip_address__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_calls__c = null;
           				} else {
           			    	this.noodlecrm__total_calls__c = dis.readDouble();
           				}
					
					this.noodlecrm__siccode__c = readString(dis);
					
					this.noodlecrm__test_status_gre__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__attended_zoom__c = null;
           				} else {
           			    	this.noodlecrm__attended_zoom__c = dis.readBoolean();
           				}
					
					this.noodlecrm__fafsa__c = readString(dis);
					
					this.noodlecrm__ea_stated_taken_course_req__c = readString(dis);
					
					this.noodlecrm__level_of_education__c = readString(dis);
					
					this.noodlecrm__currentgenerators__c = readString(dis);
					
					this.noodlecrm__lead_stated_taken_course_req__c = readString(dis);
					
					this.noodlecrm__productinterest__c = readString(dis);
					
					this.noodlecrm__follow_up_reason__c = readString(dis);
					
					this.noodlecrm__will_not_apply_date__c = readDate(dis);
					
					this.noodlecrm__fa_comments__c = readString(dis);
					
					this.jigsawcontactid = readString(dis);
					
					this.createdbyid = readString(dis);
					
					this.website = readString(dis);
					
					this.firstname = readString(dis);
					
					this.noodlecrm__contact_type__c = readString(dis);
					
					this.noodlecrm__conversion_date__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__re_open__c = null;
           				} else {
           			    	this.noodlecrm__re_open__c = dis.readBoolean();
           				}
					
					this.noodlecrm__applying_to_a_competitor_type__c = readString(dis);
					
					this.convertedopportunityid = readString(dis);
					
					this.email = readString(dis);
					
					this.description = readString(dis);
					
					this.company = readString(dis);
					
					this.rating = readString(dis);
					
					this.photourl = readString(dis);
					
					this.lastreferenceddate = readDate(dis);
					
					this.noodlecrm__temperature__c = readString(dis);
					
					this.noodlecrm__competitor_university_2__c = readString(dis);
					
					this.industry = readString(dis);
					
					this.noodlecrm__competitor_university_1__c = readString(dis);
					
					this.noodlecrm__bad_lead_date_time__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__signed_up_for_webinar__c = null;
           				} else {
           			    	this.noodlecrm__signed_up_for_webinar__c = dis.readBoolean();
           				}
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__preferred_phone__c = readString(dis);
					
					this.noodlecrm__program3__c = readString(dis);
					
					this.noodlecrm__program2__r__noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__program3__r__noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__lead_indicated_start_term__c = readString(dis);
					
					this.noodlecrm__preferred_email__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.noodlecrm__university_scholarship_details__c,dos);
					
					// java.util.Date
				
						writeDate(this.converteddate,dos);
					
					// String
				
						writeString(this.noodlecrm__subscriber_id__c,dos);
					
					// String
				
						writeString(this.jigsaw,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_ranking__c,dos);
					
					// String
				
						writeString(this.noodlecrm__years_experience__c,dos);
					
					// String
				
						writeString(this.lastname,dos);
					
					// Double
				
						if(this.noodlecrm__total_emails__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_emails__c);
		            	}
					
					// String
				
						writeString(this.street,dos);
					
					// String
				
						writeString(this.noodlecrm__scholarships__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_stated_gpa__c,dos);
					
					// Boolean
				
						if(this.isunreadbyowner == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isunreadbyowner);
		            	}
					
					// String
				
						writeString(this.noodlecrm__url__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_gpa__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_attended_zoom__c,dos);
					
					// String
				
						writeString(this.emailbouncedreason,dos);
					
					// String
				
						writeString(this.noodlecrm__partnerships__c,dos);
					
					// Integer
				
						writeInteger(this.numberofemployees,dos);
					
					// String
				
						writeString(this.noodlecrm__bad_lead_reason__c,dos);
					
					// String
				
						writeString(this.noodlecrm__out_of_pocket__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_details__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_attended_webinar_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program2__c,dos);
					
					// String
				
						writeString(this.noodlecrm__noodle_crm_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university__c,dos);
					
					// String
				
						writeString(this.noodlecrm__military__c,dos);
					
					// String
				
						writeString(this.noodlecrm__universitycrmid__c,dos);
					
					// String
				
						writeString(this.noodlecrm__meets_program_criteria__c,dos);
					
					// String
				
						writeString(this.noodlecrm__best_time_to_call__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_texts__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_texts__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__utm_source__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__first_call_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_external_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__webinar_signup_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastvieweddate,dos);
					
					// Boolean
				
						if(this.isconverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isconverted);
		            	}
					
					// String
				
						writeString(this.convertedcontactid,dos);
					
					// String
				
						writeString(this.noodlecrm__responsiveness__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_content__c,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.noodlecrm__related_student__c,dos);
					
					// Double
				
						if(this.latitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.latitude);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_call_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__missed_attempt_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__expected_date_to_meet_requirement__c,dos);
					
					// Double
				
						if(this.noodlecrm__missed_attempt_counter__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__missed_attempt_counter__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__program__c,dos);
					
					// String
				
						writeString(this.phone,dos);
					
					// String
				
						writeString(this.masterrecordid,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// java.util.Date
				
						writeDate(this.emailbounceddate,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_medium__c,dos);
					
					// String
				
						writeString(this.noodlecrm__manager_comments__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_call_date__c,dos);
					
					// Double
				
						if(this.longitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.longitude);
		            	}
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// String
				
						writeString(this.noodlecrm__primary__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__follow_up_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// Boolean
				
						if(this.noodlecrm__attended_webinar__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__attended_webinar__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__supplemental__c,dos);
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__meaningful_conversation_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__applying_to_a_competitor__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_professional_status__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_stated_professional_status__c,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_indicated_start_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__employer_benefits__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id_unique__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_campaign__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastactivitydate,dos);
					
					// String
				
						writeString(this.noodlecrm__will_not_apply_reason_other__c,dos);
					
					// String
				
						writeString(this.noodlecrm__last_activity_type__c,dos);
					
					// String
				
						writeString(this.noodlecrm__student_loans__c,dos);
					
					// String
				
						writeString(this.individualid,dos);
					
					// Double
				
						if(this.noodlecrm__numberoflocations__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__numberoflocations__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__time_zone__c,dos);
					
					// String
				
						writeString(this.noodlecrm__do_not_call__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__university_scholarship_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.convertedaccountid,dos);
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_licensure__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_stated_licensure__c,dos);
					
					// String
				
						writeString(this.leadsource,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_term__c,dos);
					
					// String
				
						writeString(this.geocodeaccuracy,dos);
					
					// String
				
						writeString(this.noodlecrm__google_analytics_id__c,dos);
					
					// String
				
						writeString(this.postalcode,dos);
					
					// String
				
						writeString(this.salutation,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.noodlecrm__ip_address__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_calls__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_calls__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__siccode__c,dos);
					
					// String
				
						writeString(this.noodlecrm__test_status_gre__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__attended_zoom__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__attended_zoom__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__fafsa__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_stated_taken_course_req__c,dos);
					
					// String
				
						writeString(this.noodlecrm__level_of_education__c,dos);
					
					// String
				
						writeString(this.noodlecrm__currentgenerators__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_taken_course_req__c,dos);
					
					// String
				
						writeString(this.noodlecrm__productinterest__c,dos);
					
					// String
				
						writeString(this.noodlecrm__follow_up_reason__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__will_not_apply_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__fa_comments__c,dos);
					
					// String
				
						writeString(this.jigsawcontactid,dos);
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.website,dos);
					
					// String
				
						writeString(this.firstname,dos);
					
					// String
				
						writeString(this.noodlecrm__contact_type__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__conversion_date__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__re_open__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__re_open__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__applying_to_a_competitor_type__c,dos);
					
					// String
				
						writeString(this.convertedopportunityid,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.company,dos);
					
					// String
				
						writeString(this.rating,dos);
					
					// String
				
						writeString(this.photourl,dos);
					
					// java.util.Date
				
						writeDate(this.lastreferenceddate,dos);
					
					// String
				
						writeString(this.noodlecrm__temperature__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_university_2__c,dos);
					
					// String
				
						writeString(this.industry,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_university_1__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__bad_lead_date_time__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__signed_up_for_webinar__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__signed_up_for_webinar__c);
		            	}
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__preferred_phone__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program3__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program2__r__noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program3__r__noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_indicated_start_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__preferred_email__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("noodlecrm__university_scholarship_details__c="+noodlecrm__university_scholarship_details__c);
		sb.append(",converteddate="+String.valueOf(converteddate));
		sb.append(",noodlecrm__subscriber_id__c="+noodlecrm__subscriber_id__c);
		sb.append(",jigsaw="+jigsaw);
		sb.append(",noodlecrm__lead_ranking__c="+noodlecrm__lead_ranking__c);
		sb.append(",noodlecrm__years_experience__c="+noodlecrm__years_experience__c);
		sb.append(",lastname="+lastname);
		sb.append(",noodlecrm__total_emails__c="+String.valueOf(noodlecrm__total_emails__c));
		sb.append(",street="+street);
		sb.append(",noodlecrm__scholarships__c="+noodlecrm__scholarships__c);
		sb.append(",noodlecrm__ea_stated_gpa__c="+noodlecrm__ea_stated_gpa__c);
		sb.append(",isunreadbyowner="+String.valueOf(isunreadbyowner));
		sb.append(",noodlecrm__url__c="+noodlecrm__url__c);
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",noodlecrm__lead_stated_gpa__c="+noodlecrm__lead_stated_gpa__c);
		sb.append(",noodlecrm__last_attended_zoom__c="+String.valueOf(noodlecrm__last_attended_zoom__c));
		sb.append(",emailbouncedreason="+emailbouncedreason);
		sb.append(",noodlecrm__partnerships__c="+noodlecrm__partnerships__c);
		sb.append(",numberofemployees="+String.valueOf(numberofemployees));
		sb.append(",noodlecrm__bad_lead_reason__c="+noodlecrm__bad_lead_reason__c);
		sb.append(",noodlecrm__out_of_pocket__c="+noodlecrm__out_of_pocket__c);
		sb.append(",noodlecrm__competitor_details__c="+noodlecrm__competitor_details__c);
		sb.append(",noodlecrm__last_attended_webinar_date_time__c="+String.valueOf(noodlecrm__last_attended_webinar_date_time__c));
		sb.append(",noodlecrm__program2__c="+noodlecrm__program2__c);
		sb.append(",noodlecrm__noodle_crm_id__c="+noodlecrm__noodle_crm_id__c);
		sb.append(",noodlecrm__university__c="+noodlecrm__university__c);
		sb.append(",noodlecrm__military__c="+noodlecrm__military__c);
		sb.append(",noodlecrm__universitycrmid__c="+noodlecrm__universitycrmid__c);
		sb.append(",noodlecrm__meets_program_criteria__c="+noodlecrm__meets_program_criteria__c);
		sb.append(",noodlecrm__best_time_to_call__c="+noodlecrm__best_time_to_call__c);
		sb.append(",noodlecrm__total_texts__c="+String.valueOf(noodlecrm__total_texts__c));
		sb.append(",noodlecrm__utm_source__c="+noodlecrm__utm_source__c);
		sb.append(",noodlecrm__first_call_date_time__c="+String.valueOf(noodlecrm__first_call_date_time__c));
		sb.append(",noodlecrm__lead_external_id__c="+noodlecrm__lead_external_id__c);
		sb.append(",noodlecrm__webinar_signup_date_time__c="+String.valueOf(noodlecrm__webinar_signup_date_time__c));
		sb.append(",lastvieweddate="+String.valueOf(lastvieweddate));
		sb.append(",isconverted="+String.valueOf(isconverted));
		sb.append(",convertedcontactid="+convertedcontactid);
		sb.append(",noodlecrm__responsiveness__c="+noodlecrm__responsiveness__c);
		sb.append(",noodlecrm__utm_content__c="+noodlecrm__utm_content__c);
		sb.append(",city="+city);
		sb.append(",name="+name);
		sb.append(",noodlecrm__related_student__c="+noodlecrm__related_student__c);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",noodlecrm__last_call_date_time__c="+String.valueOf(noodlecrm__last_call_date_time__c));
		sb.append(",noodlecrm__missed_attempt_date_time__c="+String.valueOf(noodlecrm__missed_attempt_date_time__c));
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__expected_date_to_meet_requirement__c="+String.valueOf(noodlecrm__expected_date_to_meet_requirement__c));
		sb.append(",noodlecrm__missed_attempt_counter__c="+String.valueOf(noodlecrm__missed_attempt_counter__c));
		sb.append(",noodlecrm__program__c="+noodlecrm__program__c);
		sb.append(",phone="+phone);
		sb.append(",masterrecordid="+masterrecordid);
		sb.append(",ownerid="+ownerid);
		sb.append(",emailbounceddate="+String.valueOf(emailbounceddate));
		sb.append(",noodlecrm__utm_medium__c="+noodlecrm__utm_medium__c);
		sb.append(",noodlecrm__manager_comments__c="+noodlecrm__manager_comments__c);
		sb.append(",noodlecrm__last_call_date__c="+String.valueOf(noodlecrm__last_call_date__c));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",noodlecrm__primary__c="+noodlecrm__primary__c);
		sb.append(",noodlecrm__follow_up_date__c="+String.valueOf(noodlecrm__follow_up_date__c));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__attended_webinar__c="+String.valueOf(noodlecrm__attended_webinar__c));
		sb.append(",noodlecrm__supplemental__c="+noodlecrm__supplemental__c);
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",state="+state);
		sb.append(",noodlecrm__meaningful_conversation_date_time__c="+String.valueOf(noodlecrm__meaningful_conversation_date_time__c));
		sb.append(",noodlecrm__applying_to_a_competitor__c="+noodlecrm__applying_to_a_competitor__c);
		sb.append(",noodlecrm__lead_stated_professional_status__c="+noodlecrm__lead_stated_professional_status__c);
		sb.append(",noodlecrm__ea_stated_professional_status__c="+noodlecrm__ea_stated_professional_status__c);
		sb.append(",status="+status);
		sb.append(",noodlecrm__ea_indicated_start_term__c="+noodlecrm__ea_indicated_start_term__c);
		sb.append(",noodlecrm__employer_benefits__c="+noodlecrm__employer_benefits__c);
		sb.append(",noodlecrm__external_id_unique__c="+noodlecrm__external_id_unique__c);
		sb.append(",noodlecrm__utm_campaign__c="+noodlecrm__utm_campaign__c);
		sb.append(",lastactivitydate="+String.valueOf(lastactivitydate));
		sb.append(",noodlecrm__will_not_apply_reason_other__c="+noodlecrm__will_not_apply_reason_other__c);
		sb.append(",noodlecrm__last_activity_type__c="+noodlecrm__last_activity_type__c);
		sb.append(",noodlecrm__student_loans__c="+noodlecrm__student_loans__c);
		sb.append(",individualid="+individualid);
		sb.append(",noodlecrm__numberoflocations__c="+String.valueOf(noodlecrm__numberoflocations__c));
		sb.append(",noodlecrm__time_zone__c="+noodlecrm__time_zone__c);
		sb.append(",noodlecrm__do_not_call__c="+noodlecrm__do_not_call__c);
		sb.append(",noodlecrm__university_scholarship_date__c="+String.valueOf(noodlecrm__university_scholarship_date__c));
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",convertedaccountid="+convertedaccountid);
		sb.append(",country="+country);
		sb.append(",noodlecrm__lead_stated_licensure__c="+noodlecrm__lead_stated_licensure__c);
		sb.append(",noodlecrm__ea_stated_licensure__c="+noodlecrm__ea_stated_licensure__c);
		sb.append(",leadsource="+leadsource);
		sb.append(",noodlecrm__utm_term__c="+noodlecrm__utm_term__c);
		sb.append(",geocodeaccuracy="+geocodeaccuracy);
		sb.append(",noodlecrm__google_analytics_id__c="+noodlecrm__google_analytics_id__c);
		sb.append(",postalcode="+postalcode);
		sb.append(",salutation="+salutation);
		sb.append(",title="+title);
		sb.append(",noodlecrm__ip_address__c="+noodlecrm__ip_address__c);
		sb.append(",noodlecrm__total_calls__c="+String.valueOf(noodlecrm__total_calls__c));
		sb.append(",noodlecrm__siccode__c="+noodlecrm__siccode__c);
		sb.append(",noodlecrm__test_status_gre__c="+noodlecrm__test_status_gre__c);
		sb.append(",noodlecrm__attended_zoom__c="+String.valueOf(noodlecrm__attended_zoom__c));
		sb.append(",noodlecrm__fafsa__c="+noodlecrm__fafsa__c);
		sb.append(",noodlecrm__ea_stated_taken_course_req__c="+noodlecrm__ea_stated_taken_course_req__c);
		sb.append(",noodlecrm__level_of_education__c="+noodlecrm__level_of_education__c);
		sb.append(",noodlecrm__currentgenerators__c="+noodlecrm__currentgenerators__c);
		sb.append(",noodlecrm__lead_stated_taken_course_req__c="+noodlecrm__lead_stated_taken_course_req__c);
		sb.append(",noodlecrm__productinterest__c="+noodlecrm__productinterest__c);
		sb.append(",noodlecrm__follow_up_reason__c="+noodlecrm__follow_up_reason__c);
		sb.append(",noodlecrm__will_not_apply_date__c="+String.valueOf(noodlecrm__will_not_apply_date__c));
		sb.append(",noodlecrm__fa_comments__c="+noodlecrm__fa_comments__c);
		sb.append(",jigsawcontactid="+jigsawcontactid);
		sb.append(",createdbyid="+createdbyid);
		sb.append(",website="+website);
		sb.append(",firstname="+firstname);
		sb.append(",noodlecrm__contact_type__c="+noodlecrm__contact_type__c);
		sb.append(",noodlecrm__conversion_date__c="+String.valueOf(noodlecrm__conversion_date__c));
		sb.append(",noodlecrm__re_open__c="+String.valueOf(noodlecrm__re_open__c));
		sb.append(",noodlecrm__applying_to_a_competitor_type__c="+noodlecrm__applying_to_a_competitor_type__c);
		sb.append(",convertedopportunityid="+convertedopportunityid);
		sb.append(",email="+email);
		sb.append(",description="+description);
		sb.append(",company="+company);
		sb.append(",rating="+rating);
		sb.append(",photourl="+photourl);
		sb.append(",lastreferenceddate="+String.valueOf(lastreferenceddate));
		sb.append(",noodlecrm__temperature__c="+noodlecrm__temperature__c);
		sb.append(",noodlecrm__competitor_university_2__c="+noodlecrm__competitor_university_2__c);
		sb.append(",industry="+industry);
		sb.append(",noodlecrm__competitor_university_1__c="+noodlecrm__competitor_university_1__c);
		sb.append(",noodlecrm__bad_lead_date_time__c="+String.valueOf(noodlecrm__bad_lead_date_time__c));
		sb.append(",noodlecrm__signed_up_for_webinar__c="+String.valueOf(noodlecrm__signed_up_for_webinar__c));
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__preferred_phone__c="+noodlecrm__preferred_phone__c);
		sb.append(",noodlecrm__program3__c="+noodlecrm__program3__c);
		sb.append(",noodlecrm__program2__r__noodlecrm__external_id__c="+noodlecrm__program2__r__noodlecrm__external_id__c);
		sb.append(",noodlecrm__program3__r__noodlecrm__external_id__c="+noodlecrm__program3__r__noodlecrm__external_id__c);
		sb.append(",noodlecrm__lead_indicated_start_term__c="+noodlecrm__lead_indicated_start_term__c);
		sb.append(",noodlecrm__preferred_email__c="+noodlecrm__preferred_email__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
out7Struct out7 = new out7Struct();
out8Struct out8 = new out8Struct();





	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out7");
					}
				
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
                class FileOutputDelimitedUtil_tFileOutputDelimited_4{
                                    public void putHeaderValue_0(String[] headColutFileOutputDelimited_4)throws java.lang.Exception{
                                        headColutFileOutputDelimited_4[0]="noodlecrm__university_scholarship_details__c";
                                        headColutFileOutputDelimited_4[1]="converteddate";
                                        headColutFileOutputDelimited_4[2]="noodlecrm__subscriber_id__c";
                                        headColutFileOutputDelimited_4[3]="jigsaw";
                                        headColutFileOutputDelimited_4[4]="noodlecrm__lead_ranking__c";
                                        headColutFileOutputDelimited_4[5]="noodlecrm__years_experience__c";
                                        headColutFileOutputDelimited_4[6]="lastname";
                                        headColutFileOutputDelimited_4[7]="noodlecrm__total_emails__c";
                                        headColutFileOutputDelimited_4[8]="street";
                                        headColutFileOutputDelimited_4[9]="noodlecrm__scholarships__c";
                                        headColutFileOutputDelimited_4[10]="noodlecrm__ea_stated_gpa__c";
                                        headColutFileOutputDelimited_4[11]="isunreadbyowner";
                                        headColutFileOutputDelimited_4[12]="noodlecrm__url__c";
                                        headColutFileOutputDelimited_4[13]="noodlecrm__external_id__c";
                                        headColutFileOutputDelimited_4[14]="noodlecrm__lead_stated_gpa__c";
                                        headColutFileOutputDelimited_4[15]="noodlecrm__last_attended_zoom__c";
                                        headColutFileOutputDelimited_4[16]="emailbouncedreason";
                                        headColutFileOutputDelimited_4[17]="noodlecrm__partnerships__c";
                                        headColutFileOutputDelimited_4[18]="numberofemployees";
                                        headColutFileOutputDelimited_4[19]="noodlecrm__bad_lead_reason__c";
                                        headColutFileOutputDelimited_4[20]="noodlecrm__out_of_pocket__c";
                                        headColutFileOutputDelimited_4[21]="noodlecrm__competitor_details__c";
                                        headColutFileOutputDelimited_4[22]="noodlecrm__last_attended_webinar_date_time__c";
                                        headColutFileOutputDelimited_4[23]="noodlecrm__program2__c";
                                        headColutFileOutputDelimited_4[24]="noodlecrm__noodle_crm_id__c";
                                        headColutFileOutputDelimited_4[25]="noodlecrm__university__c";
                                        headColutFileOutputDelimited_4[26]="noodlecrm__military__c";
                                        headColutFileOutputDelimited_4[27]="noodlecrm__universitycrmid__c";
                                        headColutFileOutputDelimited_4[28]="noodlecrm__meets_program_criteria__c";
                                        headColutFileOutputDelimited_4[29]="noodlecrm__best_time_to_call__c";
                                        headColutFileOutputDelimited_4[30]="noodlecrm__total_texts__c";
                                        headColutFileOutputDelimited_4[31]="noodlecrm__utm_source__c";
                                        headColutFileOutputDelimited_4[32]="noodlecrm__first_call_date_time__c";
                                        headColutFileOutputDelimited_4[33]="noodlecrm__lead_external_id__c";
                                        headColutFileOutputDelimited_4[34]="noodlecrm__webinar_signup_date_time__c";
                                        headColutFileOutputDelimited_4[35]="lastvieweddate";
                                        headColutFileOutputDelimited_4[36]="isconverted";
                                        headColutFileOutputDelimited_4[37]="convertedcontactid";
                                        headColutFileOutputDelimited_4[38]="noodlecrm__responsiveness__c";
                                        headColutFileOutputDelimited_4[39]="noodlecrm__utm_content__c";
                                        headColutFileOutputDelimited_4[40]="city";
                                        headColutFileOutputDelimited_4[41]="name";
                                        headColutFileOutputDelimited_4[42]="noodlecrm__related_student__c";
                                        headColutFileOutputDelimited_4[43]="latitude";
                                        headColutFileOutputDelimited_4[44]="noodlecrm__last_call_date_time__c";
                                        headColutFileOutputDelimited_4[45]="noodlecrm__missed_attempt_date_time__c";
                                        headColutFileOutputDelimited_4[46]="mobilephone";
                                        headColutFileOutputDelimited_4[47]="lastmodifieddate";
                                        headColutFileOutputDelimited_4[48]="noodlecrm__expected_date_to_meet_requirement__c";
                                        headColutFileOutputDelimited_4[49]="noodlecrm__missed_attempt_counter__c";
                                        headColutFileOutputDelimited_4[50]="noodlecrm__program__c";
                                        headColutFileOutputDelimited_4[51]="phone";
                                        headColutFileOutputDelimited_4[52]="masterrecordid";
                                        headColutFileOutputDelimited_4[53]="ownerid";
                                        headColutFileOutputDelimited_4[54]="emailbounceddate";
                                        headColutFileOutputDelimited_4[55]="noodlecrm__utm_medium__c";
                                        headColutFileOutputDelimited_4[56]="noodlecrm__manager_comments__c";
                                        headColutFileOutputDelimited_4[57]="noodlecrm__last_call_date__c";
                                        headColutFileOutputDelimited_4[58]="longitude";
                                        headColutFileOutputDelimited_4[59]="isdeleted";
                                        headColutFileOutputDelimited_4[60]="noodlecrm__primary__c";
                                        headColutFileOutputDelimited_4[61]="noodlecrm__follow_up_date__c";
                                        headColutFileOutputDelimited_4[62]="systemmodstamp";
                                        headColutFileOutputDelimited_4[63]="noodlecrm__attended_webinar__c";
                                        headColutFileOutputDelimited_4[64]="noodlecrm__supplemental__c";
                                        headColutFileOutputDelimited_4[65]="lastmodifiedbyid";
                                        headColutFileOutputDelimited_4[66]="state";
                                        headColutFileOutputDelimited_4[67]="noodlecrm__meaningful_conversation_date_time__c";
                                        headColutFileOutputDelimited_4[68]="noodlecrm__applying_to_a_competitor__c";
                                        headColutFileOutputDelimited_4[69]="noodlecrm__lead_stated_professional_status__c";
                                        headColutFileOutputDelimited_4[70]="noodlecrm__ea_stated_professional_status__c";
                                        headColutFileOutputDelimited_4[71]="status";
                                        headColutFileOutputDelimited_4[72]="noodlecrm__ea_indicated_start_term__c";
                                        headColutFileOutputDelimited_4[73]="noodlecrm__employer_benefits__c";
                                        headColutFileOutputDelimited_4[74]="noodlecrm__external_id_unique__c";
                                        headColutFileOutputDelimited_4[75]="noodlecrm__utm_campaign__c";
                                        headColutFileOutputDelimited_4[76]="lastactivitydate";
                                        headColutFileOutputDelimited_4[77]="noodlecrm__will_not_apply_reason_other__c";
                                        headColutFileOutputDelimited_4[78]="noodlecrm__last_activity_type__c";
                                        headColutFileOutputDelimited_4[79]="noodlecrm__student_loans__c";
                                        headColutFileOutputDelimited_4[80]="individualid";
                                        headColutFileOutputDelimited_4[81]="noodlecrm__numberoflocations__c";
                                        headColutFileOutputDelimited_4[82]="noodlecrm__time_zone__c";
                                        headColutFileOutputDelimited_4[83]="noodlecrm__do_not_call__c";
                                        headColutFileOutputDelimited_4[84]="noodlecrm__university_scholarship_date__c";
                                        headColutFileOutputDelimited_4[85]="createddate";
                                        headColutFileOutputDelimited_4[86]="convertedaccountid";
                                        headColutFileOutputDelimited_4[87]="country";
                                        headColutFileOutputDelimited_4[88]="noodlecrm__lead_stated_licensure__c";
                                        headColutFileOutputDelimited_4[89]="noodlecrm__ea_stated_licensure__c";
                                    }
                                    public void putHeaderValue_1(String[] headColutFileOutputDelimited_4)throws java.lang.Exception{
                                        headColutFileOutputDelimited_4[90]="leadsource";
                                        headColutFileOutputDelimited_4[91]="noodlecrm__utm_term__c";
                                        headColutFileOutputDelimited_4[92]="geocodeaccuracy";
                                        headColutFileOutputDelimited_4[93]="noodlecrm__google_analytics_id__c";
                                        headColutFileOutputDelimited_4[94]="postalcode";
                                        headColutFileOutputDelimited_4[95]="salutation";
                                        headColutFileOutputDelimited_4[96]="title";
                                        headColutFileOutputDelimited_4[97]="noodlecrm__ip_address__c";
                                        headColutFileOutputDelimited_4[98]="noodlecrm__total_calls__c";
                                        headColutFileOutputDelimited_4[99]="noodlecrm__siccode__c";
                                        headColutFileOutputDelimited_4[100]="noodlecrm__test_status_gre__c";
                                        headColutFileOutputDelimited_4[101]="noodlecrm__attended_zoom__c";
                                        headColutFileOutputDelimited_4[102]="noodlecrm__fafsa__c";
                                        headColutFileOutputDelimited_4[103]="noodlecrm__ea_stated_taken_course_req__c";
                                        headColutFileOutputDelimited_4[104]="noodlecrm__level_of_education__c";
                                        headColutFileOutputDelimited_4[105]="noodlecrm__currentgenerators__c";
                                        headColutFileOutputDelimited_4[106]="noodlecrm__lead_stated_taken_course_req__c";
                                        headColutFileOutputDelimited_4[107]="noodlecrm__productinterest__c";
                                        headColutFileOutputDelimited_4[108]="noodlecrm__follow_up_reason__c";
                                        headColutFileOutputDelimited_4[109]="noodlecrm__will_not_apply_date__c";
                                        headColutFileOutputDelimited_4[110]="noodlecrm__fa_comments__c";
                                        headColutFileOutputDelimited_4[111]="jigsawcontactid";
                                        headColutFileOutputDelimited_4[112]="createdbyid";
                                        headColutFileOutputDelimited_4[113]="website";
                                        headColutFileOutputDelimited_4[114]="firstname";
                                        headColutFileOutputDelimited_4[115]="noodlecrm__contact_type__c";
                                        headColutFileOutputDelimited_4[116]="noodlecrm__conversion_date__c";
                                        headColutFileOutputDelimited_4[117]="noodlecrm__re_open__c";
                                        headColutFileOutputDelimited_4[118]="noodlecrm__applying_to_a_competitor_type__c";
                                        headColutFileOutputDelimited_4[119]="convertedopportunityid";
                                        headColutFileOutputDelimited_4[120]="email";
                                        headColutFileOutputDelimited_4[121]="description";
                                        headColutFileOutputDelimited_4[122]="company";
                                        headColutFileOutputDelimited_4[123]="rating";
                                        headColutFileOutputDelimited_4[124]="photourl";
                                        headColutFileOutputDelimited_4[125]="lastreferenceddate";
                                        headColutFileOutputDelimited_4[126]="noodlecrm__temperature__c";
                                        headColutFileOutputDelimited_4[127]="noodlecrm__competitor_university_2__c";
                                        headColutFileOutputDelimited_4[128]="industry";
                                        headColutFileOutputDelimited_4[129]="noodlecrm__competitor_university_1__c";
                                        headColutFileOutputDelimited_4[130]="noodlecrm__bad_lead_date_time__c";
                                        headColutFileOutputDelimited_4[131]="noodlecrm__signed_up_for_webinar__c";
                                        headColutFileOutputDelimited_4[132]="sfid";
                                        headColutFileOutputDelimited_4[133]="id";
                                        headColutFileOutputDelimited_4[134]="noodlecrm__preferred_phone__c";
                                        headColutFileOutputDelimited_4[135]="noodlecrm__program3__c";
                                        headColutFileOutputDelimited_4[136]="noodlecrm__program2__r__noodlecrm__external_id__c";
                                        headColutFileOutputDelimited_4[137]="noodlecrm__program3__r__noodlecrm__external_id__c";
                                        headColutFileOutputDelimited_4[138]="noodlecrm__lead_indicated_start_term__c";
                                        headColutFileOutputDelimited_4[139]="noodlecrm__preferred_email__c";
                                }
                                public void putValue_0(final out7Struct out7,String[] rowtFileOutputDelimited_4){
                                    rowtFileOutputDelimited_4[0]=out7.noodlecrm__university_scholarship_details__c == null ? null : 
                                    out7.noodlecrm__university_scholarship_details__c;
                                    rowtFileOutputDelimited_4[1]=out7.converteddate == null ? null : 
                                    FormatterUtils.format_Date(out7.converteddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[2]=out7.noodlecrm__subscriber_id__c == null ? null : 
                                    out7.noodlecrm__subscriber_id__c;
                                    rowtFileOutputDelimited_4[3]=out7.jigsaw == null ? null : 
                                    out7.jigsaw;
                                    rowtFileOutputDelimited_4[4]=out7.noodlecrm__lead_ranking__c == null ? null : 
                                    out7.noodlecrm__lead_ranking__c;
                                    rowtFileOutputDelimited_4[5]=out7.noodlecrm__years_experience__c == null ? null : 
                                    out7.noodlecrm__years_experience__c;
                                    rowtFileOutputDelimited_4[6]=out7.lastname == null ? null : 
                                    out7.lastname;
                                    rowtFileOutputDelimited_4[7]=out7.noodlecrm__total_emails__c == null ? null : 
                                    String.valueOf(out7.noodlecrm__total_emails__c);
                                    rowtFileOutputDelimited_4[8]=out7.street == null ? null : 
                                    out7.street;
                                    rowtFileOutputDelimited_4[9]=out7.noodlecrm__scholarships__c == null ? null : 
                                    out7.noodlecrm__scholarships__c;
                                    rowtFileOutputDelimited_4[10]=out7.noodlecrm__ea_stated_gpa__c == null ? null : 
                                    out7.noodlecrm__ea_stated_gpa__c;
                                    rowtFileOutputDelimited_4[11]=out7.isunreadbyowner == null ? null : 
                                    String.valueOf(out7.isunreadbyowner);
                                    rowtFileOutputDelimited_4[12]=out7.noodlecrm__url__c == null ? null : 
                                    out7.noodlecrm__url__c;
                                    rowtFileOutputDelimited_4[13]=out7.noodlecrm__external_id__c == null ? null : 
                                    out7.noodlecrm__external_id__c;
                                    rowtFileOutputDelimited_4[14]=out7.noodlecrm__lead_stated_gpa__c == null ? null : 
                                    out7.noodlecrm__lead_stated_gpa__c;
                                    rowtFileOutputDelimited_4[15]=out7.noodlecrm__last_attended_zoom__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__last_attended_zoom__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[16]=out7.emailbouncedreason == null ? null : 
                                    out7.emailbouncedreason;
                                    rowtFileOutputDelimited_4[17]=out7.noodlecrm__partnerships__c == null ? null : 
                                    out7.noodlecrm__partnerships__c;
                                    rowtFileOutputDelimited_4[18]=out7.numberofemployees == null ? null : 
                                    String.valueOf(out7.numberofemployees);
                                    rowtFileOutputDelimited_4[19]=out7.noodlecrm__bad_lead_reason__c == null ? null : 
                                    out7.noodlecrm__bad_lead_reason__c;
                                    rowtFileOutputDelimited_4[20]=out7.noodlecrm__out_of_pocket__c == null ? null : 
                                    out7.noodlecrm__out_of_pocket__c;
                                    rowtFileOutputDelimited_4[21]=out7.noodlecrm__competitor_details__c == null ? null : 
                                    out7.noodlecrm__competitor_details__c;
                                    rowtFileOutputDelimited_4[22]=out7.noodlecrm__last_attended_webinar_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__last_attended_webinar_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[23]=out7.noodlecrm__program2__c == null ? null : 
                                    out7.noodlecrm__program2__c;
                                    rowtFileOutputDelimited_4[24]=out7.noodlecrm__noodle_crm_id__c == null ? null : 
                                    out7.noodlecrm__noodle_crm_id__c;
                                    rowtFileOutputDelimited_4[25]=out7.noodlecrm__university__c == null ? null : 
                                    out7.noodlecrm__university__c;
                                    rowtFileOutputDelimited_4[26]=out7.noodlecrm__military__c == null ? null : 
                                    out7.noodlecrm__military__c;
                                    rowtFileOutputDelimited_4[27]=out7.noodlecrm__universitycrmid__c == null ? null : 
                                    out7.noodlecrm__universitycrmid__c;
                                    rowtFileOutputDelimited_4[28]=out7.noodlecrm__meets_program_criteria__c == null ? null : 
                                    out7.noodlecrm__meets_program_criteria__c;
                                    rowtFileOutputDelimited_4[29]=out7.noodlecrm__best_time_to_call__c == null ? null : 
                                    out7.noodlecrm__best_time_to_call__c;
                                    rowtFileOutputDelimited_4[30]=out7.noodlecrm__total_texts__c == null ? null : 
                                    String.valueOf(out7.noodlecrm__total_texts__c);
                                    rowtFileOutputDelimited_4[31]=out7.noodlecrm__utm_source__c == null ? null : 
                                    out7.noodlecrm__utm_source__c;
                                    rowtFileOutputDelimited_4[32]=out7.noodlecrm__first_call_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__first_call_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[33]=out7.noodlecrm__lead_external_id__c == null ? null : 
                                    out7.noodlecrm__lead_external_id__c;
                                    rowtFileOutputDelimited_4[34]=out7.noodlecrm__webinar_signup_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__webinar_signup_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[35]=out7.lastvieweddate == null ? null : 
                                    FormatterUtils.format_Date(out7.lastvieweddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[36]=out7.isconverted == null ? null : 
                                    String.valueOf(out7.isconverted);
                                    rowtFileOutputDelimited_4[37]=out7.convertedcontactid == null ? null : 
                                    out7.convertedcontactid;
                                    rowtFileOutputDelimited_4[38]=out7.noodlecrm__responsiveness__c == null ? null : 
                                    out7.noodlecrm__responsiveness__c;
                                    rowtFileOutputDelimited_4[39]=out7.noodlecrm__utm_content__c == null ? null : 
                                    out7.noodlecrm__utm_content__c;
                                    rowtFileOutputDelimited_4[40]=out7.city == null ? null : 
                                    out7.city;
                                    rowtFileOutputDelimited_4[41]=out7.name == null ? null : 
                                    out7.name;
                                    rowtFileOutputDelimited_4[42]=out7.noodlecrm__related_student__c == null ? null : 
                                    out7.noodlecrm__related_student__c;
                                    rowtFileOutputDelimited_4[43]=out7.latitude == null ? null : 
                                    String.valueOf(out7.latitude);
                                    rowtFileOutputDelimited_4[44]=out7.noodlecrm__last_call_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__last_call_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[45]=out7.noodlecrm__missed_attempt_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__missed_attempt_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[46]=out7.mobilephone == null ? null : 
                                    out7.mobilephone;
                                    rowtFileOutputDelimited_4[47]=out7.lastmodifieddate == null ? null : 
                                    FormatterUtils.format_Date(out7.lastmodifieddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[48]=out7.noodlecrm__expected_date_to_meet_requirement__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__expected_date_to_meet_requirement__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[49]=out7.noodlecrm__missed_attempt_counter__c == null ? null : 
                                    String.valueOf(out7.noodlecrm__missed_attempt_counter__c);
                                    rowtFileOutputDelimited_4[50]=out7.noodlecrm__program__c == null ? null : 
                                    out7.noodlecrm__program__c;
                                    rowtFileOutputDelimited_4[51]=out7.phone == null ? null : 
                                    out7.phone;
                                    rowtFileOutputDelimited_4[52]=out7.masterrecordid == null ? null : 
                                    out7.masterrecordid;
                                    rowtFileOutputDelimited_4[53]=out7.ownerid == null ? null : 
                                    out7.ownerid;
                                    rowtFileOutputDelimited_4[54]=out7.emailbounceddate == null ? null : 
                                    FormatterUtils.format_Date(out7.emailbounceddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[55]=out7.noodlecrm__utm_medium__c == null ? null : 
                                    out7.noodlecrm__utm_medium__c;
                                    rowtFileOutputDelimited_4[56]=out7.noodlecrm__manager_comments__c == null ? null : 
                                    out7.noodlecrm__manager_comments__c;
                                    rowtFileOutputDelimited_4[57]=out7.noodlecrm__last_call_date__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__last_call_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[58]=out7.longitude == null ? null : 
                                    String.valueOf(out7.longitude);
                                    rowtFileOutputDelimited_4[59]=out7.isdeleted == null ? null : 
                                    String.valueOf(out7.isdeleted);
                                    rowtFileOutputDelimited_4[60]=out7.noodlecrm__primary__c == null ? null : 
                                    out7.noodlecrm__primary__c;
                                    rowtFileOutputDelimited_4[61]=out7.noodlecrm__follow_up_date__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__follow_up_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[62]=out7.systemmodstamp == null ? null : 
                                    FormatterUtils.format_Date(out7.systemmodstamp, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[63]=out7.noodlecrm__attended_webinar__c == null ? null : 
                                    String.valueOf(out7.noodlecrm__attended_webinar__c);
                                    rowtFileOutputDelimited_4[64]=out7.noodlecrm__supplemental__c == null ? null : 
                                    out7.noodlecrm__supplemental__c;
                                    rowtFileOutputDelimited_4[65]=out7.lastmodifiedbyid == null ? null : 
                                    out7.lastmodifiedbyid;
                                    rowtFileOutputDelimited_4[66]=out7.state == null ? null : 
                                    out7.state;
                                    rowtFileOutputDelimited_4[67]=out7.noodlecrm__meaningful_conversation_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__meaningful_conversation_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[68]=out7.noodlecrm__applying_to_a_competitor__c == null ? null : 
                                    out7.noodlecrm__applying_to_a_competitor__c;
                                    rowtFileOutputDelimited_4[69]=out7.noodlecrm__lead_stated_professional_status__c == null ? null : 
                                    out7.noodlecrm__lead_stated_professional_status__c;
                                    rowtFileOutputDelimited_4[70]=out7.noodlecrm__ea_stated_professional_status__c == null ? null : 
                                    out7.noodlecrm__ea_stated_professional_status__c;
                                    rowtFileOutputDelimited_4[71]=out7.status == null ? null : 
                                    out7.status;
                                    rowtFileOutputDelimited_4[72]=out7.noodlecrm__ea_indicated_start_term__c == null ? null : 
                                    out7.noodlecrm__ea_indicated_start_term__c;
                                    rowtFileOutputDelimited_4[73]=out7.noodlecrm__employer_benefits__c == null ? null : 
                                    out7.noodlecrm__employer_benefits__c;
                                    rowtFileOutputDelimited_4[74]=out7.noodlecrm__external_id_unique__c == null ? null : 
                                    out7.noodlecrm__external_id_unique__c;
                                    rowtFileOutputDelimited_4[75]=out7.noodlecrm__utm_campaign__c == null ? null : 
                                    out7.noodlecrm__utm_campaign__c;
                                    rowtFileOutputDelimited_4[76]=out7.lastactivitydate == null ? null : 
                                    FormatterUtils.format_Date(out7.lastactivitydate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[77]=out7.noodlecrm__will_not_apply_reason_other__c == null ? null : 
                                    out7.noodlecrm__will_not_apply_reason_other__c;
                                    rowtFileOutputDelimited_4[78]=out7.noodlecrm__last_activity_type__c == null ? null : 
                                    out7.noodlecrm__last_activity_type__c;
                                    rowtFileOutputDelimited_4[79]=out7.noodlecrm__student_loans__c == null ? null : 
                                    out7.noodlecrm__student_loans__c;
                                    rowtFileOutputDelimited_4[80]=out7.individualid == null ? null : 
                                    out7.individualid;
                                    rowtFileOutputDelimited_4[81]=out7.noodlecrm__numberoflocations__c == null ? null : 
                                    String.valueOf(out7.noodlecrm__numberoflocations__c);
                                    rowtFileOutputDelimited_4[82]=out7.noodlecrm__time_zone__c == null ? null : 
                                    out7.noodlecrm__time_zone__c;
                                    rowtFileOutputDelimited_4[83]=out7.noodlecrm__do_not_call__c == null ? null : 
                                    out7.noodlecrm__do_not_call__c;
                                    rowtFileOutputDelimited_4[84]=out7.noodlecrm__university_scholarship_date__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__university_scholarship_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[85]=out7.createddate == null ? null : 
                                    FormatterUtils.format_Date(out7.createddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[86]=out7.convertedaccountid == null ? null : 
                                    out7.convertedaccountid;
                                    rowtFileOutputDelimited_4[87]=out7.country == null ? null : 
                                    out7.country;
                                    rowtFileOutputDelimited_4[88]=out7.noodlecrm__lead_stated_licensure__c == null ? null : 
                                    out7.noodlecrm__lead_stated_licensure__c;
                                    rowtFileOutputDelimited_4[89]=out7.noodlecrm__ea_stated_licensure__c == null ? null : 
                                    out7.noodlecrm__ea_stated_licensure__c;
                                }
                                public void putValue_1(final out7Struct out7,String[] rowtFileOutputDelimited_4){
                                    rowtFileOutputDelimited_4[90]=out7.leadsource == null ? null : 
                                    out7.leadsource;
                                    rowtFileOutputDelimited_4[91]=out7.noodlecrm__utm_term__c == null ? null : 
                                    out7.noodlecrm__utm_term__c;
                                    rowtFileOutputDelimited_4[92]=out7.geocodeaccuracy == null ? null : 
                                    out7.geocodeaccuracy;
                                    rowtFileOutputDelimited_4[93]=out7.noodlecrm__google_analytics_id__c == null ? null : 
                                    out7.noodlecrm__google_analytics_id__c;
                                    rowtFileOutputDelimited_4[94]=out7.postalcode == null ? null : 
                                    out7.postalcode;
                                    rowtFileOutputDelimited_4[95]=out7.salutation == null ? null : 
                                    out7.salutation;
                                    rowtFileOutputDelimited_4[96]=out7.title == null ? null : 
                                    out7.title;
                                    rowtFileOutputDelimited_4[97]=out7.noodlecrm__ip_address__c == null ? null : 
                                    out7.noodlecrm__ip_address__c;
                                    rowtFileOutputDelimited_4[98]=out7.noodlecrm__total_calls__c == null ? null : 
                                    String.valueOf(out7.noodlecrm__total_calls__c);
                                    rowtFileOutputDelimited_4[99]=out7.noodlecrm__siccode__c == null ? null : 
                                    out7.noodlecrm__siccode__c;
                                    rowtFileOutputDelimited_4[100]=out7.noodlecrm__test_status_gre__c == null ? null : 
                                    out7.noodlecrm__test_status_gre__c;
                                    rowtFileOutputDelimited_4[101]=out7.noodlecrm__attended_zoom__c == null ? null : 
                                    String.valueOf(out7.noodlecrm__attended_zoom__c);
                                    rowtFileOutputDelimited_4[102]=out7.noodlecrm__fafsa__c == null ? null : 
                                    out7.noodlecrm__fafsa__c;
                                    rowtFileOutputDelimited_4[103]=out7.noodlecrm__ea_stated_taken_course_req__c == null ? null : 
                                    out7.noodlecrm__ea_stated_taken_course_req__c;
                                    rowtFileOutputDelimited_4[104]=out7.noodlecrm__level_of_education__c == null ? null : 
                                    out7.noodlecrm__level_of_education__c;
                                    rowtFileOutputDelimited_4[105]=out7.noodlecrm__currentgenerators__c == null ? null : 
                                    out7.noodlecrm__currentgenerators__c;
                                    rowtFileOutputDelimited_4[106]=out7.noodlecrm__lead_stated_taken_course_req__c == null ? null : 
                                    out7.noodlecrm__lead_stated_taken_course_req__c;
                                    rowtFileOutputDelimited_4[107]=out7.noodlecrm__productinterest__c == null ? null : 
                                    out7.noodlecrm__productinterest__c;
                                    rowtFileOutputDelimited_4[108]=out7.noodlecrm__follow_up_reason__c == null ? null : 
                                    out7.noodlecrm__follow_up_reason__c;
                                    rowtFileOutputDelimited_4[109]=out7.noodlecrm__will_not_apply_date__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__will_not_apply_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[110]=out7.noodlecrm__fa_comments__c == null ? null : 
                                    out7.noodlecrm__fa_comments__c;
                                    rowtFileOutputDelimited_4[111]=out7.jigsawcontactid == null ? null : 
                                    out7.jigsawcontactid;
                                    rowtFileOutputDelimited_4[112]=out7.createdbyid == null ? null : 
                                    out7.createdbyid;
                                    rowtFileOutputDelimited_4[113]=out7.website == null ? null : 
                                    out7.website;
                                    rowtFileOutputDelimited_4[114]=out7.firstname == null ? null : 
                                    out7.firstname;
                                    rowtFileOutputDelimited_4[115]=out7.noodlecrm__contact_type__c == null ? null : 
                                    out7.noodlecrm__contact_type__c;
                                    rowtFileOutputDelimited_4[116]=out7.noodlecrm__conversion_date__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__conversion_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[117]=out7.noodlecrm__re_open__c == null ? null : 
                                    String.valueOf(out7.noodlecrm__re_open__c);
                                    rowtFileOutputDelimited_4[118]=out7.noodlecrm__applying_to_a_competitor_type__c == null ? null : 
                                    out7.noodlecrm__applying_to_a_competitor_type__c;
                                    rowtFileOutputDelimited_4[119]=out7.convertedopportunityid == null ? null : 
                                    out7.convertedopportunityid;
                                    rowtFileOutputDelimited_4[120]=out7.email == null ? null : 
                                    out7.email;
                                    rowtFileOutputDelimited_4[121]=out7.description == null ? null : 
                                    out7.description;
                                    rowtFileOutputDelimited_4[122]=out7.company == null ? null : 
                                    out7.company;
                                    rowtFileOutputDelimited_4[123]=out7.rating == null ? null : 
                                    out7.rating;
                                    rowtFileOutputDelimited_4[124]=out7.photourl == null ? null : 
                                    out7.photourl;
                                    rowtFileOutputDelimited_4[125]=out7.lastreferenceddate == null ? null : 
                                    FormatterUtils.format_Date(out7.lastreferenceddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[126]=out7.noodlecrm__temperature__c == null ? null : 
                                    out7.noodlecrm__temperature__c;
                                    rowtFileOutputDelimited_4[127]=out7.noodlecrm__competitor_university_2__c == null ? null : 
                                    out7.noodlecrm__competitor_university_2__c;
                                    rowtFileOutputDelimited_4[128]=out7.industry == null ? null : 
                                    out7.industry;
                                    rowtFileOutputDelimited_4[129]=out7.noodlecrm__competitor_university_1__c == null ? null : 
                                    out7.noodlecrm__competitor_university_1__c;
                                    rowtFileOutputDelimited_4[130]=out7.noodlecrm__bad_lead_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out7.noodlecrm__bad_lead_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_4[131]=out7.noodlecrm__signed_up_for_webinar__c == null ? null : 
                                    String.valueOf(out7.noodlecrm__signed_up_for_webinar__c);
                                    rowtFileOutputDelimited_4[132]=out7.sfid == null ? null : 
                                    out7.sfid;
                                    rowtFileOutputDelimited_4[133]=
                                    String.valueOf(out7.id);
                                    rowtFileOutputDelimited_4[134]=out7.noodlecrm__preferred_phone__c == null ? null : 
                                    out7.noodlecrm__preferred_phone__c;
                                    rowtFileOutputDelimited_4[135]=out7.noodlecrm__program3__c == null ? null : 
                                    out7.noodlecrm__program3__c;
                                    rowtFileOutputDelimited_4[136]=out7.noodlecrm__program2__r__noodlecrm__external_id__c == null ? null : 
                                    out7.noodlecrm__program2__r__noodlecrm__external_id__c;
                                    rowtFileOutputDelimited_4[137]=out7.noodlecrm__program3__r__noodlecrm__external_id__c == null ? null : 
                                    out7.noodlecrm__program3__r__noodlecrm__external_id__c;
                                    rowtFileOutputDelimited_4[138]=out7.noodlecrm__lead_indicated_start_term__c == null ? null : 
                                    out7.noodlecrm__lead_indicated_start_term__c;
                                    rowtFileOutputDelimited_4[139]=out7.noodlecrm__preferred_email__c == null ? null : 
                                    out7.noodlecrm__preferred_email__c;
                            }
                }
                FileOutputDelimitedUtil_tFileOutputDelimited_4 fileOutputDelimitedUtil_tFileOutputDelimited_4=new FileOutputDelimitedUtil_tFileOutputDelimited_4();
    fileName_tFileOutputDelimited_4 = (new java.io.File(context.staging_S3_dir + "lead.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
                String[] headColutFileOutputDelimited_4=new String[140];
            class CSVBasicSet_tFileOutputDelimited_4{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_4[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_4 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_4[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_4[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_4 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_4[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_4[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_4 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_4[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 =0;
            int currentRow_tFileOutputDelimited_4 = 0;


            CSVBasicSet_tFileOutputDelimited_4 csvSettings_tFileOutputDelimited_4 = new CSVBasicSet_tFileOutputDelimited_4();
            csvSettings_tFileOutputDelimited_4.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_4.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_4.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
                            if(fileToDelete_tFileOutputDelimited_4.exists()) {
                                fileToDelete_tFileOutputDelimited_4.delete();
                            }
                            CsvWritertFileOutputDelimited_4 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_4.setSeparator(csvSettings_tFileOutputDelimited_4.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_4.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_4.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_4.setLineEnd(""+csvSettings_tFileOutputDelimited_4.getRowDelim());
                    }
                        if(filetFileOutputDelimited_4.length()==0){
                                        fileOutputDelimitedUtil_tFileOutputDelimited_4.putHeaderValue_0(headColutFileOutputDelimited_4);
                                        fileOutputDelimitedUtil_tFileOutputDelimited_4.putHeaderValue_1(headColutFileOutputDelimited_4);
                            CsvWritertFileOutputDelimited_4.writeNext(headColutFileOutputDelimited_4);
                            CsvWritertFileOutputDelimited_4.flush();
                        }
                CsvWritertFileOutputDelimited_4.setEscapeChar(csvSettings_tFileOutputDelimited_4.getEscapeChar());
                CsvWritertFileOutputDelimited_4.setQuoteChar(csvSettings_tFileOutputDelimited_4.getTextEnclosure());
                CsvWritertFileOutputDelimited_4.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_4", CsvWritertFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */




	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out8");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("lead");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("lead");
}

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_4 = 100000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
            try (java.sql.Statement stmtClear_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                stmtClear_tDBOutput_4.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_4 + "\"");
            }
	    String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4 + "\" (\"noodlecrm__university_scholarship_details__c\",\"converteddate\",\"noodlecrm__subscriber_id__c\",\"jigsaw\",\"noodlecrm__lead_ranking__c\",\"noodlecrm__years_experience__c\",\"lastname\",\"noodlecrm__total_emails__c\",\"street\",\"noodlecrm__scholarships__c\",\"noodlecrm__ea_stated_gpa__c\",\"isunreadbyowner\",\"noodlecrm__url__c\",\"noodlecrm__external_id__c\",\"noodlecrm__lead_stated_gpa__c\",\"noodlecrm__last_attended_zoom__c\",\"emailbouncedreason\",\"noodlecrm__partnerships__c\",\"numberofemployees\",\"noodlecrm__bad_lead_reason__c\",\"noodlecrm__out_of_pocket__c\",\"noodlecrm__competitor_details__c\",\"noodlecrm__last_attended_webinar_date_time__c\",\"noodlecrm__program2__c\",\"noodlecrm__noodle_crm_id__c\",\"noodlecrm__university__c\",\"noodlecrm__military__c\",\"noodlecrm__universitycrmid__c\",\"noodlecrm__meets_program_criteria__c\",\"noodlecrm__best_time_to_call__c\",\"noodlecrm__total_texts__c\",\"noodlecrm__utm_source__c\",\"noodlecrm__first_call_date_time__c\",\"noodlecrm__lead_external_id__c\",\"noodlecrm__webinar_signup_date_time__c\",\"lastvieweddate\",\"isconverted\",\"convertedcontactid\",\"noodlecrm__responsiveness__c\",\"noodlecrm__utm_content__c\",\"city\",\"name\",\"noodlecrm__related_student__c\",\"latitude\",\"noodlecrm__last_call_date_time__c\",\"noodlecrm__missed_attempt_date_time__c\",\"mobilephone\",\"lastmodifieddate\",\"noodlecrm__expected_date_to_meet_requirement__c\",\"noodlecrm__missed_attempt_counter__c\",\"noodlecrm__program__c\",\"phone\",\"masterrecordid\",\"ownerid\",\"emailbounceddate\",\"noodlecrm__utm_medium__c\",\"noodlecrm__manager_comments__c\",\"noodlecrm__last_call_date__c\",\"longitude\",\"isdeleted\",\"noodlecrm__primary__c\",\"noodlecrm__follow_up_date__c\",\"systemmodstamp\",\"noodlecrm__attended_webinar__c\",\"noodlecrm__supplemental__c\",\"lastmodifiedbyid\",\"state\",\"noodlecrm__meaningful_conversation_date_time__c\",\"noodlecrm__applying_to_a_competitor__c\",\"noodlecrm__lead_stated_professional_status__c\",\"noodlecrm__ea_stated_professional_status__c\",\"status\",\"noodlecrm__ea_indicated_start_term__c\",\"noodlecrm__employer_benefits__c\",\"noodlecrm__external_id_unique__c\",\"noodlecrm__utm_campaign__c\",\"lastactivitydate\",\"noodlecrm__will_not_apply_reason_other__c\",\"noodlecrm__last_activity_type__c\",\"noodlecrm__student_loans__c\",\"individualid\",\"noodlecrm__numberoflocations__c\",\"noodlecrm__time_zone__c\",\"noodlecrm__do_not_call__c\",\"noodlecrm__university_scholarship_date__c\",\"createddate\",\"convertedaccountid\",\"country\",\"noodlecrm__lead_stated_licensure__c\",\"noodlecrm__ea_stated_licensure__c\",\"leadsource\",\"noodlecrm__utm_term__c\",\"geocodeaccuracy\",\"noodlecrm__google_analytics_id__c\",\"postalcode\",\"salutation\",\"title\",\"noodlecrm__ip_address__c\",\"noodlecrm__total_calls__c\",\"noodlecrm__siccode__c\",\"noodlecrm__test_status_gre__c\",\"noodlecrm__attended_zoom__c\",\"noodlecrm__fafsa__c\",\"noodlecrm__ea_stated_taken_course_req__c\",\"noodlecrm__level_of_education__c\",\"noodlecrm__currentgenerators__c\",\"noodlecrm__lead_stated_taken_course_req__c\",\"noodlecrm__productinterest__c\",\"noodlecrm__follow_up_reason__c\",\"noodlecrm__will_not_apply_date__c\",\"noodlecrm__fa_comments__c\",\"jigsawcontactid\",\"createdbyid\",\"website\",\"firstname\",\"noodlecrm__contact_type__c\",\"noodlecrm__conversion_date__c\",\"noodlecrm__re_open__c\",\"noodlecrm__applying_to_a_competitor_type__c\",\"convertedopportunityid\",\"email\",\"description\",\"company\",\"rating\",\"photourl\",\"lastreferenceddate\",\"noodlecrm__temperature__c\",\"noodlecrm__competitor_university_2__c\",\"industry\",\"noodlecrm__competitor_university_1__c\",\"noodlecrm__bad_lead_date_time__c\",\"noodlecrm__signed_up_for_webinar__c\",\"sfid\",\"id\",\"noodlecrm__preferred_phone__c\",\"noodlecrm__program3__c\",\"noodlecrm__program2__r__noodlecrm__external_id__c\",\"noodlecrm__program3__r__noodlecrm__external_id__c\",\"noodlecrm__lead_indicated_start_term__c\",\"noodlecrm__preferred_email__c\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out7Struct out7_tmp = new out7Struct();
out8Struct out8_tmp = new out8Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT noodlecrm__university_scholarship_details__c\n       , converteddate\n       , noodlecrm__subscriber_id__c\n    "
+"   , jigsaw\n       , noodlecrm__lead_ranking__c\n       , noodlecrm__years_experience__c\n       , lastname\n       , n"
+"oodlecrm__total_emails__c\n       , street\n       , noodlecrm__scholarships__c\n       , noodlecrm__ea_stated_gpa__c\n "
+"      , isunreadbyowner\n       , noodlecrm__url__c\n       , noodlecrm__external_id__c\n       , noodlecrm__lead_stated"
+"_gpa__c\n       , noodlecrm__last_attended_zoom__c\n       , emailbouncedreason\n       , noodlecrm__partnerships__c\n  "
+"     , numberofemployees\n       , noodlecrm__bad_lead_reason__c\n       , noodlecrm__out_of_pocket__c\n       , noodlec"
+"rm__competitor_details__c\n       , noodlecrm__last_attended_webinar_date_time__c\n       , noodlecrm__program2__c\n    "
+"   , noodlecrm__noodle_crm_id__c\n       , noodlecrm__university__c\n       , noodlecrm__military__c\n       , noodlecrm"
+"__universitycrmid__c\n       , noodlecrm__meets_program_criteria__c\n       , noodlecrm__best_time_to_call__c\n       , "
+"noodlecrm__total_texts__c\n       , noodlecrm__utm_source__c\n       , noodlecrm__first_call_date_time__c\n       , nood"
+"lecrm__lead_external_id__c\n       , noodlecrm__webinar_signup_date_time__c\n       , lastvieweddate\n       , isconvert"
+"ed\n       , convertedcontactid\n       , noodlecrm__responsiveness__c\n       , noodlecrm__utm_content__c\n       , cit"
+"y\n       , name\n       , noodlecrm__related_student__c\n       , latitude\n       , noodlecrm__last_call_date_time__c"
+"\n       , noodlecrm__missed_attempt_date_time__c\n     \n       , lastmodifieddate\n       , noodlecrm__expected_date_to"
+"_meet_requirement__c\n       , noodlecrm__missed_attempt_counter__c\n       , noodlecrm__program__c\n       , phone\n   "
+"    , masterrecordid\n       , ownerid\n       , emailbounceddate\n       , noodlecrm__utm_medium__c\n       , noodlecrm"
+"__manager_comments__c\n       , noodlecrm__last_call_date__c\n       , longitude\n       , isdeleted\n       , noodlecrm"
+"__primary__c\n       , noodlecrm__follow_up_date__c\n       , systemmodstamp\n       , noodlecrm__attended_webinar__c\n "
+"      , noodlecrm__supplemental__c\n       , lastmodifiedbyid\n       , state\n       , noodlecrm__meaningful_conversati"
+"on_date_time__c\n       , noodlecrm__applying_to_a_competitor__c\n       , noodlecrm__lead_stated_professional_status__c"
+"\n       , noodlecrm__ea_stated_professional_status__c\n       , status\n       , noodlecrm__ea_indicated_start_term__c"
+"\n       , noodlecrm__employer_benefits__c\n       , noodlecrm__external_id_unique__c\n       , noodlecrm__utm_campaign__"
+"c\n       , lastactivitydate\n       , noodlecrm__will_not_apply_reason_other__c\n       , noodlecrm__last_activity_type"
+"__c\n       , noodlecrm__student_loans__c\n       , individualid\n       , noodlecrm__numberoflocations__c\n       , noo"
+"dlecrm__time_zone__c\n       , noodlecrm__do_not_call__c\n       , noodlecrm__university_scholarship_date__c\n       , c"
+"reateddate\n       , convertedaccountid\n       , country\n       , noodlecrm__lead_stated_licensure__c\n       , noodle"
+"crm__ea_stated_licensure__c\n       , leadsource\n       , noodlecrm__utm_term__c\n       , geocodeaccuracy\n       , no"
+"odlecrm__google_analytics_id__c\n       , postalcode\n       , salutation\n       , title\n       , noodlecrm__ip_addres"
+"s__c\n       , noodlecrm__total_calls__c\n       , noodlecrm__siccode__c\n       , noodlecrm__test_status_gre__c\n      "
+" , noodlecrm__attended_zoom__c\n       , noodlecrm__fafsa__c\n       , noodlecrm__ea_stated_taken_course_req__c\n       "
+", noodlecrm__level_of_education__c\n       , noodlecrm__currentgenerators__c\n       , noodlecrm__lead_stated_taken_cour"
+"se_req__c\n       , noodlecrm__productinterest__c\n       , noodlecrm__follow_up_reason__c\n       , noodlecrm__will_not"
+"_apply_date__c\n       , noodlecrm__fa_comments__c\n       , jigsawcontactid\n       , createdbyid\n       , website\n  "
+"     , firstname\n       , noodlecrm__contact_type__c\n       , noodlecrm__conversion_date__c\n       , noodlecrm__re_op"
+"en__c\n       , noodlecrm__applying_to_a_competitor_type__c\n       , convertedopportunityid\n       , email\n       , d"
+"escription\n       , company\n       , rating\n       , photourl\n       , lastreferenceddate\n       , noodlecrm__tempe"
+"rature__c\n       , noodlecrm__competitor_university_2__c\n       , industry\n       , noodlecrm__competitor_university_"
+"1__c\n       , noodlecrm__bad_lead_date_time__c\n       , noodlecrm__signed_up_for_webinar__c\n       , sfid\n       , i"
+"d\n       , noodlecrm__preferred_phone__c\n       , noodlecrm__program3__c\n       , noodlecrm__program2__r__noodlecrm__"
+"external_id__c\n       , noodlecrm__program3__r__noodlecrm__external_id__c\n       , noodlecrm__lead_indicated_start_ter"
+"m__c\n       , noodlecrm__preferred_email__c\n\n     \n FROM "+context.university_code+".lead ";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row4.noodlecrm__university_scholarship_details__c = null;
							} else {
	                         		
        	row4.noodlecrm__university_scholarship_details__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row4.converteddate = null;
							} else {
										
			row4.converteddate = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 2);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row4.noodlecrm__subscriber_id__c = null;
							} else {
	                         		
        	row4.noodlecrm__subscriber_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row4.jigsaw = null;
							} else {
	                         		
        	row4.jigsaw = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row4.noodlecrm__lead_ranking__c = null;
							} else {
	                         		
        	row4.noodlecrm__lead_ranking__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row4.noodlecrm__years_experience__c = null;
							} else {
	                         		
        	row4.noodlecrm__years_experience__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row4.lastname = null;
							} else {
	                         		
        	row4.lastname = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row4.noodlecrm__total_emails__c = null;
							} else {
	                         		
            row4.noodlecrm__total_emails__c = rs_tDBInput_4.getDouble(8);
            if(rs_tDBInput_4.wasNull()){
                    row4.noodlecrm__total_emails__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								row4.street = null;
							} else {
	                         		
        	row4.street = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								row4.noodlecrm__scholarships__c = null;
							} else {
	                         		
        	row4.noodlecrm__scholarships__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								row4.noodlecrm__ea_stated_gpa__c = null;
							} else {
	                         		
        	row4.noodlecrm__ea_stated_gpa__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 11, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								row4.isunreadbyowner = null;
							} else {
	                         		
            row4.isunreadbyowner = rs_tDBInput_4.getBoolean(12);
            if(rs_tDBInput_4.wasNull()){
                    row4.isunreadbyowner = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								row4.noodlecrm__url__c = null;
							} else {
	                         		
        	row4.noodlecrm__url__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 13, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								row4.noodlecrm__external_id__c = null;
							} else {
	                         		
        	row4.noodlecrm__external_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 14, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 15) {
								row4.noodlecrm__lead_stated_gpa__c = null;
							} else {
	                         		
        	row4.noodlecrm__lead_stated_gpa__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 15, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 16) {
								row4.noodlecrm__last_attended_zoom__c = null;
							} else {
										
			row4.noodlecrm__last_attended_zoom__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 16);
		                    }
							if(colQtyInRs_tDBInput_4 < 17) {
								row4.emailbouncedreason = null;
							} else {
	                         		
        	row4.emailbouncedreason = routines.system.JDBCUtil.getString(rs_tDBInput_4, 17, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 18) {
								row4.noodlecrm__partnerships__c = null;
							} else {
	                         		
        	row4.noodlecrm__partnerships__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 18, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 19) {
								row4.numberofemployees = null;
							} else {
		                          
            row4.numberofemployees = rs_tDBInput_4.getInt(19);
            if(rs_tDBInput_4.wasNull()){
                    row4.numberofemployees = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 20) {
								row4.noodlecrm__bad_lead_reason__c = null;
							} else {
	                         		
        	row4.noodlecrm__bad_lead_reason__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 20, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 21) {
								row4.noodlecrm__out_of_pocket__c = null;
							} else {
	                         		
        	row4.noodlecrm__out_of_pocket__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 21, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 22) {
								row4.noodlecrm__competitor_details__c = null;
							} else {
	                         		
        	row4.noodlecrm__competitor_details__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 22, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 23) {
								row4.noodlecrm__last_attended_webinar_date_time__c = null;
							} else {
										
			row4.noodlecrm__last_attended_webinar_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 23);
		                    }
							if(colQtyInRs_tDBInput_4 < 24) {
								row4.noodlecrm__program2__c = null;
							} else {
	                         		
        	row4.noodlecrm__program2__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 24, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 25) {
								row4.noodlecrm__noodle_crm_id__c = null;
							} else {
	                         		
        	row4.noodlecrm__noodle_crm_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 25, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 26) {
								row4.noodlecrm__university__c = null;
							} else {
	                         		
        	row4.noodlecrm__university__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 26, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 27) {
								row4.noodlecrm__military__c = null;
							} else {
	                         		
        	row4.noodlecrm__military__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 27, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 28) {
								row4.noodlecrm__universitycrmid__c = null;
							} else {
	                         		
        	row4.noodlecrm__universitycrmid__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 28, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 29) {
								row4.noodlecrm__meets_program_criteria__c = null;
							} else {
	                         		
        	row4.noodlecrm__meets_program_criteria__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 29, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 30) {
								row4.noodlecrm__best_time_to_call__c = null;
							} else {
	                         		
        	row4.noodlecrm__best_time_to_call__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 30, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 31) {
								row4.noodlecrm__total_texts__c = null;
							} else {
	                         		
            row4.noodlecrm__total_texts__c = rs_tDBInput_4.getDouble(31);
            if(rs_tDBInput_4.wasNull()){
                    row4.noodlecrm__total_texts__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 32) {
								row4.noodlecrm__utm_source__c = null;
							} else {
	                         		
        	row4.noodlecrm__utm_source__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 32, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 33) {
								row4.noodlecrm__first_call_date_time__c = null;
							} else {
										
			row4.noodlecrm__first_call_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 33);
		                    }
							if(colQtyInRs_tDBInput_4 < 34) {
								row4.noodlecrm__lead_external_id__c = null;
							} else {
	                         		
        	row4.noodlecrm__lead_external_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 34, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 35) {
								row4.noodlecrm__webinar_signup_date_time__c = null;
							} else {
										
			row4.noodlecrm__webinar_signup_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 35);
		                    }
							if(colQtyInRs_tDBInput_4 < 36) {
								row4.lastvieweddate = null;
							} else {
										
			row4.lastvieweddate = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 36);
		                    }
							if(colQtyInRs_tDBInput_4 < 37) {
								row4.isconverted = null;
							} else {
	                         		
            row4.isconverted = rs_tDBInput_4.getBoolean(37);
            if(rs_tDBInput_4.wasNull()){
                    row4.isconverted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 38) {
								row4.convertedcontactid = null;
							} else {
	                         		
        	row4.convertedcontactid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 38, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 39) {
								row4.noodlecrm__responsiveness__c = null;
							} else {
	                         		
        	row4.noodlecrm__responsiveness__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 39, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 40) {
								row4.noodlecrm__utm_content__c = null;
							} else {
	                         		
        	row4.noodlecrm__utm_content__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 40, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 41) {
								row4.city = null;
							} else {
	                         		
        	row4.city = routines.system.JDBCUtil.getString(rs_tDBInput_4, 41, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 42) {
								row4.name = null;
							} else {
	                         		
        	row4.name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 42, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 43) {
								row4.noodlecrm__related_student__c = null;
							} else {
	                         		
        	row4.noodlecrm__related_student__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 43, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 44) {
								row4.latitude = null;
							} else {
	                         		
            row4.latitude = rs_tDBInput_4.getDouble(44);
            if(rs_tDBInput_4.wasNull()){
                    row4.latitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 45) {
								row4.noodlecrm__last_call_date_time__c = null;
							} else {
										
			row4.noodlecrm__last_call_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 45);
		                    }
							if(colQtyInRs_tDBInput_4 < 46) {
								row4.noodlecrm__missed_attempt_date_time__c = null;
							} else {
										
			row4.noodlecrm__missed_attempt_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 46);
		                    }
							if(colQtyInRs_tDBInput_4 < 47) {
								row4.lastmodifieddate = null;
							} else {
										
			row4.lastmodifieddate = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 47);
		                    }
							if(colQtyInRs_tDBInput_4 < 48) {
								row4.noodlecrm__expected_date_to_meet_requirement__c = null;
							} else {
										
			row4.noodlecrm__expected_date_to_meet_requirement__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 48);
		                    }
							if(colQtyInRs_tDBInput_4 < 49) {
								row4.noodlecrm__missed_attempt_counter__c = null;
							} else {
	                         		
            row4.noodlecrm__missed_attempt_counter__c = rs_tDBInput_4.getDouble(49);
            if(rs_tDBInput_4.wasNull()){
                    row4.noodlecrm__missed_attempt_counter__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 50) {
								row4.noodlecrm__program__c = null;
							} else {
	                         		
        	row4.noodlecrm__program__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 50, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 51) {
								row4.phone = null;
							} else {
	                         		
        	row4.phone = routines.system.JDBCUtil.getString(rs_tDBInput_4, 51, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 52) {
								row4.masterrecordid = null;
							} else {
	                         		
        	row4.masterrecordid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 52, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 53) {
								row4.ownerid = null;
							} else {
	                         		
        	row4.ownerid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 53, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 54) {
								row4.emailbounceddate = null;
							} else {
										
			row4.emailbounceddate = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 54);
		                    }
							if(colQtyInRs_tDBInput_4 < 55) {
								row4.noodlecrm__utm_medium__c = null;
							} else {
	                         		
        	row4.noodlecrm__utm_medium__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 55, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 56) {
								row4.noodlecrm__manager_comments__c = null;
							} else {
	                         		
        	row4.noodlecrm__manager_comments__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 56, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 57) {
								row4.noodlecrm__last_call_date__c = null;
							} else {
										
			row4.noodlecrm__last_call_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 57);
		                    }
							if(colQtyInRs_tDBInput_4 < 58) {
								row4.longitude = null;
							} else {
	                         		
            row4.longitude = rs_tDBInput_4.getDouble(58);
            if(rs_tDBInput_4.wasNull()){
                    row4.longitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 59) {
								row4.isdeleted = null;
							} else {
	                         		
            row4.isdeleted = rs_tDBInput_4.getBoolean(59);
            if(rs_tDBInput_4.wasNull()){
                    row4.isdeleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 60) {
								row4.noodlecrm__primary__c = null;
							} else {
	                         		
        	row4.noodlecrm__primary__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 60, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 61) {
								row4.noodlecrm__follow_up_date__c = null;
							} else {
										
			row4.noodlecrm__follow_up_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 61);
		                    }
							if(colQtyInRs_tDBInput_4 < 62) {
								row4.systemmodstamp = null;
							} else {
										
			row4.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 62);
		                    }
							if(colQtyInRs_tDBInput_4 < 63) {
								row4.noodlecrm__attended_webinar__c = null;
							} else {
	                         		
            row4.noodlecrm__attended_webinar__c = rs_tDBInput_4.getBoolean(63);
            if(rs_tDBInput_4.wasNull()){
                    row4.noodlecrm__attended_webinar__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 64) {
								row4.noodlecrm__supplemental__c = null;
							} else {
	                         		
        	row4.noodlecrm__supplemental__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 64, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 65) {
								row4.lastmodifiedbyid = null;
							} else {
	                         		
        	row4.lastmodifiedbyid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 65, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 66) {
								row4.state = null;
							} else {
	                         		
        	row4.state = routines.system.JDBCUtil.getString(rs_tDBInput_4, 66, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 67) {
								row4.noodlecrm__meaningful_conversation_date_time__c = null;
							} else {
										
			row4.noodlecrm__meaningful_conversation_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 67);
		                    }
							if(colQtyInRs_tDBInput_4 < 68) {
								row4.noodlecrm__applying_to_a_competitor__c = null;
							} else {
	                         		
        	row4.noodlecrm__applying_to_a_competitor__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 68, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 69) {
								row4.noodlecrm__lead_stated_professional_status__c = null;
							} else {
	                         		
        	row4.noodlecrm__lead_stated_professional_status__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 69, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 70) {
								row4.noodlecrm__ea_stated_professional_status__c = null;
							} else {
	                         		
        	row4.noodlecrm__ea_stated_professional_status__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 70, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 71) {
								row4.status = null;
							} else {
	                         		
        	row4.status = routines.system.JDBCUtil.getString(rs_tDBInput_4, 71, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 72) {
								row4.noodlecrm__ea_indicated_start_term__c = null;
							} else {
	                         		
        	row4.noodlecrm__ea_indicated_start_term__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 72, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 73) {
								row4.noodlecrm__employer_benefits__c = null;
							} else {
	                         		
        	row4.noodlecrm__employer_benefits__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 73, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 74) {
								row4.noodlecrm__external_id_unique__c = null;
							} else {
	                         		
        	row4.noodlecrm__external_id_unique__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 74, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 75) {
								row4.noodlecrm__utm_campaign__c = null;
							} else {
	                         		
        	row4.noodlecrm__utm_campaign__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 75, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 76) {
								row4.lastactivitydate = null;
							} else {
										
			row4.lastactivitydate = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 76);
		                    }
							if(colQtyInRs_tDBInput_4 < 77) {
								row4.noodlecrm__will_not_apply_reason_other__c = null;
							} else {
	                         		
        	row4.noodlecrm__will_not_apply_reason_other__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 77, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 78) {
								row4.noodlecrm__last_activity_type__c = null;
							} else {
	                         		
        	row4.noodlecrm__last_activity_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 78, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 79) {
								row4.noodlecrm__student_loans__c = null;
							} else {
	                         		
        	row4.noodlecrm__student_loans__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 79, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 80) {
								row4.individualid = null;
							} else {
	                         		
        	row4.individualid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 80, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 81) {
								row4.noodlecrm__numberoflocations__c = null;
							} else {
	                         		
            row4.noodlecrm__numberoflocations__c = rs_tDBInput_4.getDouble(81);
            if(rs_tDBInput_4.wasNull()){
                    row4.noodlecrm__numberoflocations__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 82) {
								row4.noodlecrm__time_zone__c = null;
							} else {
	                         		
        	row4.noodlecrm__time_zone__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 82, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 83) {
								row4.noodlecrm__do_not_call__c = null;
							} else {
	                         		
        	row4.noodlecrm__do_not_call__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 83, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 84) {
								row4.noodlecrm__university_scholarship_date__c = null;
							} else {
										
			row4.noodlecrm__university_scholarship_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 84);
		                    }
							if(colQtyInRs_tDBInput_4 < 85) {
								row4.createddate = null;
							} else {
										
			row4.createddate = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 85);
		                    }
							if(colQtyInRs_tDBInput_4 < 86) {
								row4.convertedaccountid = null;
							} else {
	                         		
        	row4.convertedaccountid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 86, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 87) {
								row4.country = null;
							} else {
	                         		
        	row4.country = routines.system.JDBCUtil.getString(rs_tDBInput_4, 87, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 88) {
								row4.noodlecrm__lead_stated_licensure__c = null;
							} else {
	                         		
        	row4.noodlecrm__lead_stated_licensure__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 88, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 89) {
								row4.noodlecrm__ea_stated_licensure__c = null;
							} else {
	                         		
        	row4.noodlecrm__ea_stated_licensure__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 89, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 90) {
								row4.leadsource = null;
							} else {
	                         		
        	row4.leadsource = routines.system.JDBCUtil.getString(rs_tDBInput_4, 90, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 91) {
								row4.noodlecrm__utm_term__c = null;
							} else {
	                         		
        	row4.noodlecrm__utm_term__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 91, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 92) {
								row4.geocodeaccuracy = null;
							} else {
	                         		
        	row4.geocodeaccuracy = routines.system.JDBCUtil.getString(rs_tDBInput_4, 92, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 93) {
								row4.noodlecrm__google_analytics_id__c = null;
							} else {
	                         		
        	row4.noodlecrm__google_analytics_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 93, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 94) {
								row4.postalcode = null;
							} else {
	                         		
        	row4.postalcode = routines.system.JDBCUtil.getString(rs_tDBInput_4, 94, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 95) {
								row4.salutation = null;
							} else {
	                         		
        	row4.salutation = routines.system.JDBCUtil.getString(rs_tDBInput_4, 95, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 96) {
								row4.title = null;
							} else {
	                         		
        	row4.title = routines.system.JDBCUtil.getString(rs_tDBInput_4, 96, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 97) {
								row4.noodlecrm__ip_address__c = null;
							} else {
	                         		
        	row4.noodlecrm__ip_address__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 97, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 98) {
								row4.noodlecrm__total_calls__c = null;
							} else {
	                         		
            row4.noodlecrm__total_calls__c = rs_tDBInput_4.getDouble(98);
            if(rs_tDBInput_4.wasNull()){
                    row4.noodlecrm__total_calls__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 99) {
								row4.noodlecrm__siccode__c = null;
							} else {
	                         		
        	row4.noodlecrm__siccode__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 99, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 100) {
								row4.noodlecrm__test_status_gre__c = null;
							} else {
	                         		
        	row4.noodlecrm__test_status_gre__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 100, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 101) {
								row4.noodlecrm__attended_zoom__c = null;
							} else {
	                         		
            row4.noodlecrm__attended_zoom__c = rs_tDBInput_4.getBoolean(101);
            if(rs_tDBInput_4.wasNull()){
                    row4.noodlecrm__attended_zoom__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 102) {
								row4.noodlecrm__fafsa__c = null;
							} else {
	                         		
        	row4.noodlecrm__fafsa__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 102, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 103) {
								row4.noodlecrm__ea_stated_taken_course_req__c = null;
							} else {
	                         		
        	row4.noodlecrm__ea_stated_taken_course_req__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 103, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 104) {
								row4.noodlecrm__level_of_education__c = null;
							} else {
	                         		
        	row4.noodlecrm__level_of_education__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 104, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 105) {
								row4.noodlecrm__currentgenerators__c = null;
							} else {
	                         		
        	row4.noodlecrm__currentgenerators__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 105, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 106) {
								row4.noodlecrm__lead_stated_taken_course_req__c = null;
							} else {
	                         		
        	row4.noodlecrm__lead_stated_taken_course_req__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 106, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 107) {
								row4.noodlecrm__productinterest__c = null;
							} else {
	                         		
        	row4.noodlecrm__productinterest__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 107, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 108) {
								row4.noodlecrm__follow_up_reason__c = null;
							} else {
	                         		
        	row4.noodlecrm__follow_up_reason__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 108, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 109) {
								row4.noodlecrm__will_not_apply_date__c = null;
							} else {
										
			row4.noodlecrm__will_not_apply_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 109);
		                    }
							if(colQtyInRs_tDBInput_4 < 110) {
								row4.noodlecrm__fa_comments__c = null;
							} else {
	                         		
        	row4.noodlecrm__fa_comments__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 110, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 111) {
								row4.jigsawcontactid = null;
							} else {
	                         		
        	row4.jigsawcontactid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 111, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 112) {
								row4.createdbyid = null;
							} else {
	                         		
        	row4.createdbyid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 112, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 113) {
								row4.website = null;
							} else {
	                         		
        	row4.website = routines.system.JDBCUtil.getString(rs_tDBInput_4, 113, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 114) {
								row4.firstname = null;
							} else {
	                         		
        	row4.firstname = routines.system.JDBCUtil.getString(rs_tDBInput_4, 114, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 115) {
								row4.noodlecrm__contact_type__c = null;
							} else {
	                         		
        	row4.noodlecrm__contact_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 115, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 116) {
								row4.noodlecrm__conversion_date__c = null;
							} else {
										
			row4.noodlecrm__conversion_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 116);
		                    }
							if(colQtyInRs_tDBInput_4 < 117) {
								row4.noodlecrm__re_open__c = null;
							} else {
	                         		
            row4.noodlecrm__re_open__c = rs_tDBInput_4.getBoolean(117);
            if(rs_tDBInput_4.wasNull()){
                    row4.noodlecrm__re_open__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 118) {
								row4.noodlecrm__applying_to_a_competitor_type__c = null;
							} else {
	                         		
        	row4.noodlecrm__applying_to_a_competitor_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 118, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 119) {
								row4.convertedopportunityid = null;
							} else {
	                         		
        	row4.convertedopportunityid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 119, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 120) {
								row4.email = null;
							} else {
	                         		
        	row4.email = routines.system.JDBCUtil.getString(rs_tDBInput_4, 120, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 121) {
								row4.description = null;
							} else {
	                         		
        	row4.description = routines.system.JDBCUtil.getString(rs_tDBInput_4, 121, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 122) {
								row4.company = null;
							} else {
	                         		
        	row4.company = routines.system.JDBCUtil.getString(rs_tDBInput_4, 122, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 123) {
								row4.rating = null;
							} else {
	                         		
        	row4.rating = routines.system.JDBCUtil.getString(rs_tDBInput_4, 123, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 124) {
								row4.photourl = null;
							} else {
	                         		
        	row4.photourl = routines.system.JDBCUtil.getString(rs_tDBInput_4, 124, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 125) {
								row4.lastreferenceddate = null;
							} else {
										
			row4.lastreferenceddate = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 125);
		                    }
							if(colQtyInRs_tDBInput_4 < 126) {
								row4.noodlecrm__temperature__c = null;
							} else {
	                         		
        	row4.noodlecrm__temperature__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 126, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 127) {
								row4.noodlecrm__competitor_university_2__c = null;
							} else {
	                         		
        	row4.noodlecrm__competitor_university_2__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 127, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 128) {
								row4.industry = null;
							} else {
	                         		
        	row4.industry = routines.system.JDBCUtil.getString(rs_tDBInput_4, 128, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 129) {
								row4.noodlecrm__competitor_university_1__c = null;
							} else {
	                         		
        	row4.noodlecrm__competitor_university_1__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 129, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 130) {
								row4.noodlecrm__bad_lead_date_time__c = null;
							} else {
										
			row4.noodlecrm__bad_lead_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 130);
		                    }
							if(colQtyInRs_tDBInput_4 < 131) {
								row4.noodlecrm__signed_up_for_webinar__c = null;
							} else {
	                         		
            row4.noodlecrm__signed_up_for_webinar__c = rs_tDBInput_4.getBoolean(131);
            if(rs_tDBInput_4.wasNull()){
                    row4.noodlecrm__signed_up_for_webinar__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 132) {
								row4.sfid = null;
							} else {
	                         		
        	row4.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 132, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 133) {
								row4.id = 0;
							} else {
		                          
            row4.id = rs_tDBInput_4.getInt(133);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 134) {
								row4.noodlecrm__preferred_phone__c = null;
							} else {
	                         		
        	row4.noodlecrm__preferred_phone__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 134, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 135) {
								row4.noodlecrm__program3__c = null;
							} else {
	                         		
        	row4.noodlecrm__program3__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 135, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 136) {
								row4.noodlecrm__program2__r__noodlecrm__external_id__c = null;
							} else {
	                         		
        	row4.noodlecrm__program2__r__noodlecrm__external_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 136, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 137) {
								row4.noodlecrm__program3__r__noodlecrm__external_id__c = null;
							} else {
	                         		
        	row4.noodlecrm__program3__r__noodlecrm__external_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 137, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 138) {
								row4.noodlecrm__lead_indicated_start_term__c = null;
							} else {
	                         		
        	row4.noodlecrm__lead_indicated_start_term__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 138, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 139) {
								row4.noodlecrm__preferred_email__c = null;
							} else {
	                         		
        	row4.noodlecrm__preferred_email__c = routines.system.JDBCUtil.getString(rs_tDBInput_4, 139, true);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out7 = null;
out8 = null;


// # Output table : 'out7'
out7_tmp.noodlecrm__university_scholarship_details__c = row4.noodlecrm__university_scholarship_details__c ;
out7_tmp.converteddate = row4.converteddate ;
out7_tmp.noodlecrm__subscriber_id__c = row4.noodlecrm__subscriber_id__c ;
out7_tmp.jigsaw = row4.jigsaw ;
out7_tmp.noodlecrm__lead_ranking__c = row4.noodlecrm__lead_ranking__c ;
out7_tmp.noodlecrm__years_experience__c = row4.noodlecrm__years_experience__c ;
out7_tmp.lastname = row4.lastname ;
out7_tmp.noodlecrm__total_emails__c = row4.noodlecrm__total_emails__c ;
out7_tmp.street = row4.street ;
out7_tmp.noodlecrm__scholarships__c = row4.noodlecrm__scholarships__c ;
out7_tmp.noodlecrm__ea_stated_gpa__c = row4.noodlecrm__ea_stated_gpa__c ;
out7_tmp.isunreadbyowner = row4.isunreadbyowner ;
out7_tmp.noodlecrm__url__c = row4.noodlecrm__url__c ;
out7_tmp.noodlecrm__external_id__c = row4.noodlecrm__external_id__c ;
out7_tmp.noodlecrm__lead_stated_gpa__c = row4.noodlecrm__lead_stated_gpa__c ;
out7_tmp.noodlecrm__last_attended_zoom__c = row4.noodlecrm__last_attended_zoom__c ;
out7_tmp.emailbouncedreason = row4.emailbouncedreason ;
out7_tmp.noodlecrm__partnerships__c = row4.noodlecrm__partnerships__c ;
out7_tmp.numberofemployees = row4.numberofemployees ;
out7_tmp.noodlecrm__bad_lead_reason__c = row4.noodlecrm__bad_lead_reason__c ;
out7_tmp.noodlecrm__out_of_pocket__c = row4.noodlecrm__out_of_pocket__c ;
out7_tmp.noodlecrm__competitor_details__c = row4.noodlecrm__competitor_details__c ;
out7_tmp.noodlecrm__last_attended_webinar_date_time__c = row4.noodlecrm__last_attended_webinar_date_time__c ;
out7_tmp.noodlecrm__program2__c = row4.noodlecrm__program2__c ;
out7_tmp.noodlecrm__noodle_crm_id__c = row4.noodlecrm__noodle_crm_id__c ;
out7_tmp.noodlecrm__university__c = row4.noodlecrm__university__c ;
out7_tmp.noodlecrm__military__c = row4.noodlecrm__military__c ;
out7_tmp.noodlecrm__universitycrmid__c = row4.noodlecrm__universitycrmid__c ;
out7_tmp.noodlecrm__meets_program_criteria__c = row4.noodlecrm__meets_program_criteria__c ;
out7_tmp.noodlecrm__best_time_to_call__c = row4.noodlecrm__best_time_to_call__c ;
out7_tmp.noodlecrm__total_texts__c = row4.noodlecrm__total_texts__c ;
out7_tmp.noodlecrm__utm_source__c = row4.noodlecrm__utm_source__c ;
out7_tmp.noodlecrm__first_call_date_time__c = row4.noodlecrm__first_call_date_time__c ;
out7_tmp.noodlecrm__lead_external_id__c = row4.noodlecrm__lead_external_id__c ;
out7_tmp.noodlecrm__webinar_signup_date_time__c = row4.noodlecrm__webinar_signup_date_time__c ;
out7_tmp.lastvieweddate = row4.lastvieweddate ;
out7_tmp.isconverted = row4.isconverted ;
out7_tmp.convertedcontactid = row4.convertedcontactid ;
out7_tmp.noodlecrm__responsiveness__c = row4.noodlecrm__responsiveness__c ;
out7_tmp.noodlecrm__utm_content__c = row4.noodlecrm__utm_content__c ;
out7_tmp.city = row4.city ;
out7_tmp.name = row4.name ;
out7_tmp.noodlecrm__related_student__c = row4.noodlecrm__related_student__c ;
out7_tmp.latitude = row4.latitude ;
out7_tmp.noodlecrm__last_call_date_time__c = row4.noodlecrm__last_call_date_time__c ;
out7_tmp.noodlecrm__missed_attempt_date_time__c = row4.noodlecrm__missed_attempt_date_time__c ;
out7_tmp.mobilephone = null;
out7_tmp.lastmodifieddate = row4.lastmodifieddate ;
out7_tmp.noodlecrm__expected_date_to_meet_requirement__c = row4.noodlecrm__expected_date_to_meet_requirement__c ;
out7_tmp.noodlecrm__missed_attempt_counter__c = row4.noodlecrm__missed_attempt_counter__c ;
out7_tmp.noodlecrm__program__c = row4.noodlecrm__program__c ;
out7_tmp.phone = row4.phone ;
out7_tmp.masterrecordid = row4.masterrecordid ;
out7_tmp.ownerid = row4.ownerid ;
out7_tmp.emailbounceddate = row4.emailbounceddate ;
out7_tmp.noodlecrm__utm_medium__c = row4.noodlecrm__utm_medium__c ;
out7_tmp.noodlecrm__manager_comments__c = row4.noodlecrm__manager_comments__c ;
out7_tmp.noodlecrm__last_call_date__c = row4.noodlecrm__last_call_date__c ;
out7_tmp.longitude = row4.longitude ;
out7_tmp.isdeleted = row4.isdeleted ;
out7_tmp.noodlecrm__primary__c = row4.noodlecrm__primary__c ;
out7_tmp.noodlecrm__follow_up_date__c = row4.noodlecrm__follow_up_date__c ;
out7_tmp.systemmodstamp = row4.systemmodstamp ;
out7_tmp.noodlecrm__attended_webinar__c = row4.noodlecrm__attended_webinar__c ;
out7_tmp.noodlecrm__supplemental__c = row4.noodlecrm__supplemental__c ;
out7_tmp.lastmodifiedbyid = row4.lastmodifiedbyid ;
out7_tmp.state = row4.state ;
out7_tmp.noodlecrm__meaningful_conversation_date_time__c = row4.noodlecrm__meaningful_conversation_date_time__c ;
out7_tmp.noodlecrm__applying_to_a_competitor__c = row4.noodlecrm__applying_to_a_competitor__c ;
out7_tmp.noodlecrm__lead_stated_professional_status__c = row4.noodlecrm__lead_stated_professional_status__c ;
out7_tmp.noodlecrm__ea_stated_professional_status__c = row4.noodlecrm__ea_stated_professional_status__c ;
out7_tmp.status = row4.status ;
out7_tmp.noodlecrm__ea_indicated_start_term__c = row4.noodlecrm__ea_indicated_start_term__c ;
out7_tmp.noodlecrm__employer_benefits__c = row4.noodlecrm__employer_benefits__c ;
out7_tmp.noodlecrm__external_id_unique__c = row4.noodlecrm__external_id_unique__c ;
out7_tmp.noodlecrm__utm_campaign__c = row4.noodlecrm__utm_campaign__c ;
out7_tmp.lastactivitydate = row4.lastactivitydate ;
out7_tmp.noodlecrm__will_not_apply_reason_other__c = row4.noodlecrm__will_not_apply_reason_other__c ;
out7_tmp.noodlecrm__last_activity_type__c = row4.noodlecrm__last_activity_type__c ;
out7_tmp.noodlecrm__student_loans__c = row4.noodlecrm__student_loans__c ;
out7_tmp.individualid = row4.individualid ;
out7_tmp.noodlecrm__numberoflocations__c = row4.noodlecrm__numberoflocations__c ;
out7_tmp.noodlecrm__time_zone__c = row4.noodlecrm__time_zone__c ;
out7_tmp.noodlecrm__do_not_call__c = row4.noodlecrm__do_not_call__c ;
out7_tmp.noodlecrm__university_scholarship_date__c = row4.noodlecrm__university_scholarship_date__c ;
out7_tmp.createddate = row4.createddate ;
out7_tmp.convertedaccountid = row4.convertedaccountid ;
out7_tmp.country = row4.country ;
out7_tmp.noodlecrm__lead_stated_licensure__c = row4.noodlecrm__lead_stated_licensure__c ;
out7_tmp.noodlecrm__ea_stated_licensure__c = row4.noodlecrm__ea_stated_licensure__c ;
out7_tmp.leadsource = row4.leadsource ;
out7_tmp.noodlecrm__utm_term__c = row4.noodlecrm__utm_term__c ;
out7_tmp.geocodeaccuracy = row4.geocodeaccuracy ;
out7_tmp.noodlecrm__google_analytics_id__c = row4.noodlecrm__google_analytics_id__c ;
out7_tmp.postalcode = row4.postalcode ;
out7_tmp.salutation = row4.salutation ;
out7_tmp.title = row4.title ;
out7_tmp.noodlecrm__ip_address__c = row4.noodlecrm__ip_address__c ;
out7_tmp.noodlecrm__total_calls__c = row4.noodlecrm__total_calls__c ;
out7_tmp.noodlecrm__siccode__c = row4.noodlecrm__siccode__c ;
out7_tmp.noodlecrm__test_status_gre__c = row4.noodlecrm__test_status_gre__c ;
out7_tmp.noodlecrm__attended_zoom__c = row4.noodlecrm__attended_zoom__c ;
out7_tmp.noodlecrm__fafsa__c = row4.noodlecrm__fafsa__c ;
out7_tmp.noodlecrm__ea_stated_taken_course_req__c = row4.noodlecrm__ea_stated_taken_course_req__c ;
out7_tmp.noodlecrm__level_of_education__c = row4.noodlecrm__level_of_education__c ;
out7_tmp.noodlecrm__currentgenerators__c = row4.noodlecrm__currentgenerators__c ;
out7_tmp.noodlecrm__lead_stated_taken_course_req__c = row4.noodlecrm__lead_stated_taken_course_req__c ;
out7_tmp.noodlecrm__productinterest__c = row4.noodlecrm__productinterest__c ;
out7_tmp.noodlecrm__follow_up_reason__c = row4.noodlecrm__follow_up_reason__c ;
out7_tmp.noodlecrm__will_not_apply_date__c = row4.noodlecrm__will_not_apply_date__c ;
out7_tmp.noodlecrm__fa_comments__c = row4.noodlecrm__fa_comments__c ;
out7_tmp.jigsawcontactid = row4.jigsawcontactid ;
out7_tmp.createdbyid = row4.createdbyid ;
out7_tmp.website = row4.website ;
out7_tmp.firstname = row4.firstname ;
out7_tmp.noodlecrm__contact_type__c = row4.noodlecrm__contact_type__c ;
out7_tmp.noodlecrm__conversion_date__c = row4.noodlecrm__conversion_date__c ;
out7_tmp.noodlecrm__re_open__c = row4.noodlecrm__re_open__c ;
out7_tmp.noodlecrm__applying_to_a_competitor_type__c = row4.noodlecrm__applying_to_a_competitor_type__c ;
out7_tmp.convertedopportunityid = row4.convertedopportunityid ;
out7_tmp.email = row4.email ;
out7_tmp.description = row4.description ;
out7_tmp.company = row4.company ;
out7_tmp.rating = row4.rating ;
out7_tmp.photourl = row4.photourl ;
out7_tmp.lastreferenceddate = row4.lastreferenceddate ;
out7_tmp.noodlecrm__temperature__c = row4.noodlecrm__temperature__c ;
out7_tmp.noodlecrm__competitor_university_2__c = row4.noodlecrm__competitor_university_2__c ;
out7_tmp.industry = row4.industry ;
out7_tmp.noodlecrm__competitor_university_1__c = row4.noodlecrm__competitor_university_1__c ;
out7_tmp.noodlecrm__bad_lead_date_time__c = row4.noodlecrm__bad_lead_date_time__c ;
out7_tmp.noodlecrm__signed_up_for_webinar__c = row4.noodlecrm__signed_up_for_webinar__c ;
out7_tmp.sfid = row4.sfid ;
out7_tmp.id = row4.id ;
out7_tmp.noodlecrm__preferred_phone__c = row4.noodlecrm__preferred_phone__c ;
out7_tmp.noodlecrm__program3__c = row4.noodlecrm__program3__c ;
out7_tmp.noodlecrm__program2__r__noodlecrm__external_id__c = row4.noodlecrm__program2__r__noodlecrm__external_id__c ;
out7_tmp.noodlecrm__program3__r__noodlecrm__external_id__c = row4.noodlecrm__program3__r__noodlecrm__external_id__c ;
out7_tmp.noodlecrm__lead_indicated_start_term__c = row4.noodlecrm__lead_indicated_start_term__c ;
out7_tmp.noodlecrm__preferred_email__c = row4.noodlecrm__preferred_email__c ;
out7 = out7_tmp;

// # Output table : 'out8'
out8_tmp.noodlecrm__university_scholarship_details__c = row4.noodlecrm__university_scholarship_details__c ;
out8_tmp.converteddate = row4.converteddate ;
out8_tmp.noodlecrm__subscriber_id__c = row4.noodlecrm__subscriber_id__c ;
out8_tmp.jigsaw = row4.jigsaw ;
out8_tmp.noodlecrm__lead_ranking__c = row4.noodlecrm__lead_ranking__c ;
out8_tmp.noodlecrm__years_experience__c = row4.noodlecrm__years_experience__c ;
out8_tmp.lastname = row4.lastname ;
out8_tmp.noodlecrm__total_emails__c = row4.noodlecrm__total_emails__c ;
out8_tmp.street = row4.street ;
out8_tmp.noodlecrm__scholarships__c = row4.noodlecrm__scholarships__c ;
out8_tmp.noodlecrm__ea_stated_gpa__c = row4.noodlecrm__ea_stated_gpa__c ;
out8_tmp.isunreadbyowner = row4.isunreadbyowner ;
out8_tmp.noodlecrm__url__c = row4.noodlecrm__url__c ;
out8_tmp.noodlecrm__external_id__c = row4.noodlecrm__external_id__c ;
out8_tmp.noodlecrm__lead_stated_gpa__c = row4.noodlecrm__lead_stated_gpa__c ;
out8_tmp.noodlecrm__last_attended_zoom__c = row4.noodlecrm__last_attended_zoom__c ;
out8_tmp.emailbouncedreason = row4.emailbouncedreason ;
out8_tmp.noodlecrm__partnerships__c = row4.noodlecrm__partnerships__c ;
out8_tmp.numberofemployees = row4.numberofemployees ;
out8_tmp.noodlecrm__bad_lead_reason__c = row4.noodlecrm__bad_lead_reason__c ;
out8_tmp.noodlecrm__out_of_pocket__c = row4.noodlecrm__out_of_pocket__c ;
out8_tmp.noodlecrm__competitor_details__c = row4.noodlecrm__competitor_details__c ;
out8_tmp.noodlecrm__last_attended_webinar_date_time__c = row4.noodlecrm__last_attended_webinar_date_time__c ;
out8_tmp.noodlecrm__program2__c = row4.noodlecrm__program2__c ;
out8_tmp.noodlecrm__noodle_crm_id__c = row4.noodlecrm__noodle_crm_id__c ;
out8_tmp.noodlecrm__university__c = row4.noodlecrm__university__c ;
out8_tmp.noodlecrm__military__c = row4.noodlecrm__military__c ;
out8_tmp.noodlecrm__universitycrmid__c = row4.noodlecrm__universitycrmid__c ;
out8_tmp.noodlecrm__meets_program_criteria__c = row4.noodlecrm__meets_program_criteria__c ;
out8_tmp.noodlecrm__best_time_to_call__c = row4.noodlecrm__best_time_to_call__c ;
out8_tmp.noodlecrm__total_texts__c = row4.noodlecrm__total_texts__c ;
out8_tmp.noodlecrm__utm_source__c = row4.noodlecrm__utm_source__c ;
out8_tmp.noodlecrm__first_call_date_time__c = row4.noodlecrm__first_call_date_time__c ;
out8_tmp.noodlecrm__lead_external_id__c = row4.noodlecrm__lead_external_id__c ;
out8_tmp.noodlecrm__webinar_signup_date_time__c = row4.noodlecrm__webinar_signup_date_time__c ;
out8_tmp.lastvieweddate = row4.lastvieweddate ;
out8_tmp.isconverted = row4.isconverted ;
out8_tmp.convertedcontactid = row4.convertedcontactid ;
out8_tmp.noodlecrm__responsiveness__c = row4.noodlecrm__responsiveness__c ;
out8_tmp.noodlecrm__utm_content__c = row4.noodlecrm__utm_content__c ;
out8_tmp.city = row4.city ;
out8_tmp.name = row4.name ;
out8_tmp.noodlecrm__related_student__c = row4.noodlecrm__related_student__c ;
out8_tmp.latitude = row4.latitude ;
out8_tmp.noodlecrm__last_call_date_time__c = row4.noodlecrm__last_call_date_time__c ;
out8_tmp.noodlecrm__missed_attempt_date_time__c = row4.noodlecrm__missed_attempt_date_time__c ;
out8_tmp.mobilephone = null;
out8_tmp.lastmodifieddate = row4.lastmodifieddate ;
out8_tmp.noodlecrm__expected_date_to_meet_requirement__c = row4.noodlecrm__expected_date_to_meet_requirement__c ;
out8_tmp.noodlecrm__missed_attempt_counter__c = row4.noodlecrm__missed_attempt_counter__c ;
out8_tmp.noodlecrm__program__c = row4.noodlecrm__program__c ;
out8_tmp.phone = row4.phone ;
out8_tmp.masterrecordid = row4.masterrecordid ;
out8_tmp.ownerid = row4.ownerid ;
out8_tmp.emailbounceddate = row4.emailbounceddate ;
out8_tmp.noodlecrm__utm_medium__c = row4.noodlecrm__utm_medium__c ;
out8_tmp.noodlecrm__manager_comments__c = row4.noodlecrm__manager_comments__c ;
out8_tmp.noodlecrm__last_call_date__c = row4.noodlecrm__last_call_date__c ;
out8_tmp.longitude = row4.longitude ;
out8_tmp.isdeleted = row4.isdeleted ;
out8_tmp.noodlecrm__primary__c = row4.noodlecrm__primary__c ;
out8_tmp.noodlecrm__follow_up_date__c = row4.noodlecrm__follow_up_date__c ;
out8_tmp.systemmodstamp = row4.systemmodstamp ;
out8_tmp.noodlecrm__attended_webinar__c = row4.noodlecrm__attended_webinar__c ;
out8_tmp.noodlecrm__supplemental__c = row4.noodlecrm__supplemental__c ;
out8_tmp.lastmodifiedbyid = row4.lastmodifiedbyid ;
out8_tmp.state = row4.state ;
out8_tmp.noodlecrm__meaningful_conversation_date_time__c = row4.noodlecrm__meaningful_conversation_date_time__c ;
out8_tmp.noodlecrm__applying_to_a_competitor__c = row4.noodlecrm__applying_to_a_competitor__c ;
out8_tmp.noodlecrm__lead_stated_professional_status__c = row4.noodlecrm__lead_stated_professional_status__c ;
out8_tmp.noodlecrm__ea_stated_professional_status__c = row4.noodlecrm__ea_stated_professional_status__c ;
out8_tmp.status = row4.status ;
out8_tmp.noodlecrm__ea_indicated_start_term__c = row4.noodlecrm__ea_indicated_start_term__c ;
out8_tmp.noodlecrm__employer_benefits__c = row4.noodlecrm__employer_benefits__c ;
out8_tmp.noodlecrm__external_id_unique__c = row4.noodlecrm__external_id_unique__c ;
out8_tmp.noodlecrm__utm_campaign__c = row4.noodlecrm__utm_campaign__c ;
out8_tmp.lastactivitydate = row4.lastactivitydate ;
out8_tmp.noodlecrm__will_not_apply_reason_other__c = row4.noodlecrm__will_not_apply_reason_other__c ;
out8_tmp.noodlecrm__last_activity_type__c = row4.noodlecrm__last_activity_type__c ;
out8_tmp.noodlecrm__student_loans__c = row4.noodlecrm__student_loans__c ;
out8_tmp.individualid = row4.individualid ;
out8_tmp.noodlecrm__numberoflocations__c = row4.noodlecrm__numberoflocations__c ;
out8_tmp.noodlecrm__time_zone__c = row4.noodlecrm__time_zone__c ;
out8_tmp.noodlecrm__do_not_call__c = row4.noodlecrm__do_not_call__c ;
out8_tmp.noodlecrm__university_scholarship_date__c = row4.noodlecrm__university_scholarship_date__c ;
out8_tmp.createddate = row4.createddate ;
out8_tmp.convertedaccountid = row4.convertedaccountid ;
out8_tmp.country = row4.country ;
out8_tmp.noodlecrm__lead_stated_licensure__c = row4.noodlecrm__lead_stated_licensure__c ;
out8_tmp.noodlecrm__ea_stated_licensure__c = row4.noodlecrm__ea_stated_licensure__c ;
out8_tmp.leadsource = row4.leadsource ;
out8_tmp.noodlecrm__utm_term__c = row4.noodlecrm__utm_term__c ;
out8_tmp.geocodeaccuracy = row4.geocodeaccuracy ;
out8_tmp.noodlecrm__google_analytics_id__c = row4.noodlecrm__google_analytics_id__c ;
out8_tmp.postalcode = row4.postalcode ;
out8_tmp.salutation = row4.salutation ;
out8_tmp.title = row4.title ;
out8_tmp.noodlecrm__ip_address__c = row4.noodlecrm__ip_address__c ;
out8_tmp.noodlecrm__total_calls__c = row4.noodlecrm__total_calls__c ;
out8_tmp.noodlecrm__siccode__c = row4.noodlecrm__siccode__c ;
out8_tmp.noodlecrm__test_status_gre__c = row4.noodlecrm__test_status_gre__c ;
out8_tmp.noodlecrm__attended_zoom__c = row4.noodlecrm__attended_zoom__c ;
out8_tmp.noodlecrm__fafsa__c = row4.noodlecrm__fafsa__c ;
out8_tmp.noodlecrm__ea_stated_taken_course_req__c = row4.noodlecrm__ea_stated_taken_course_req__c ;
out8_tmp.noodlecrm__level_of_education__c = row4.noodlecrm__level_of_education__c ;
out8_tmp.noodlecrm__currentgenerators__c = row4.noodlecrm__currentgenerators__c ;
out8_tmp.noodlecrm__lead_stated_taken_course_req__c = row4.noodlecrm__lead_stated_taken_course_req__c ;
out8_tmp.noodlecrm__productinterest__c = row4.noodlecrm__productinterest__c ;
out8_tmp.noodlecrm__follow_up_reason__c = row4.noodlecrm__follow_up_reason__c ;
out8_tmp.noodlecrm__will_not_apply_date__c = row4.noodlecrm__will_not_apply_date__c ;
out8_tmp.noodlecrm__fa_comments__c = row4.noodlecrm__fa_comments__c ;
out8_tmp.jigsawcontactid = row4.jigsawcontactid ;
out8_tmp.createdbyid = row4.createdbyid ;
out8_tmp.website = row4.website ;
out8_tmp.firstname = row4.firstname ;
out8_tmp.noodlecrm__contact_type__c = row4.noodlecrm__contact_type__c ;
out8_tmp.noodlecrm__conversion_date__c = row4.noodlecrm__conversion_date__c ;
out8_tmp.noodlecrm__re_open__c = row4.noodlecrm__re_open__c ;
out8_tmp.noodlecrm__applying_to_a_competitor_type__c = row4.noodlecrm__applying_to_a_competitor_type__c ;
out8_tmp.convertedopportunityid = row4.convertedopportunityid ;
out8_tmp.email = row4.email ;
out8_tmp.description = row4.description ;
out8_tmp.company = row4.company ;
out8_tmp.rating = row4.rating ;
out8_tmp.photourl = row4.photourl ;
out8_tmp.lastreferenceddate = row4.lastreferenceddate ;
out8_tmp.noodlecrm__temperature__c = row4.noodlecrm__temperature__c ;
out8_tmp.noodlecrm__competitor_university_2__c = row4.noodlecrm__competitor_university_2__c ;
out8_tmp.industry = row4.industry ;
out8_tmp.noodlecrm__competitor_university_1__c = row4.noodlecrm__competitor_university_1__c ;
out8_tmp.noodlecrm__bad_lead_date_time__c = row4.noodlecrm__bad_lead_date_time__c ;
out8_tmp.noodlecrm__signed_up_for_webinar__c = row4.noodlecrm__signed_up_for_webinar__c ;
out8_tmp.sfid = row4.sfid ;
out8_tmp.id = row4.id ;
out8_tmp.noodlecrm__preferred_phone__c = row4.noodlecrm__preferred_phone__c ;
out8_tmp.noodlecrm__program3__c = row4.noodlecrm__program3__c ;
out8_tmp.noodlecrm__program2__r__noodlecrm__external_id__c = row4.noodlecrm__program2__r__noodlecrm__external_id__c ;
out8_tmp.noodlecrm__program3__r__noodlecrm__external_id__c = row4.noodlecrm__program3__r__noodlecrm__external_id__c ;
out8_tmp.noodlecrm__lead_indicated_start_term__c = row4.noodlecrm__lead_indicated_start_term__c ;
out8_tmp.noodlecrm__preferred_email__c = row4.noodlecrm__preferred_email__c ;
out8 = out8_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out7"
if(out7 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out7");
					}
					


                        String[] rowtFileOutputDelimited_4=new String[140];
                                fileOutputDelimitedUtil_tFileOutputDelimited_4.putValue_0(out7,rowtFileOutputDelimited_4);
                                fileOutputDelimitedUtil_tFileOutputDelimited_4.putValue_1(out7,rowtFileOutputDelimited_4);
                nb_line_tFileOutputDelimited_4++;
                resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);
                                       CsvWritertFileOutputDelimited_4.writeNext(rowtFileOutputDelimited_4);




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "out7"




// Start of branch "out8"
if(out8 != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out8");
					}
					



        whetherReject_tDBOutput_4 = false;
                    if(out8.noodlecrm__university_scholarship_details__c == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, out8.noodlecrm__university_scholarship_details__c);
}

                    if(out8.converteddate != null) {
pstmt_tDBOutput_4.setTimestamp(2, new java.sql.Timestamp(out8.converteddate.getTime()));
} else {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__subscriber_id__c == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(3, out8.noodlecrm__subscriber_id__c);
}

                    if(out8.jigsaw == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, out8.jigsaw);
}

                    if(out8.noodlecrm__lead_ranking__c == null) {
pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5, out8.noodlecrm__lead_ranking__c);
}

                    if(out8.noodlecrm__years_experience__c == null) {
pstmt_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(6, out8.noodlecrm__years_experience__c);
}

                    if(out8.lastname == null) {
pstmt_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(7, out8.lastname);
}

                    if(out8.noodlecrm__total_emails__c == null) {
pstmt_tDBOutput_4.setNull(8, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_4.setDouble(8, out8.noodlecrm__total_emails__c);
}

                    if(out8.street == null) {
pstmt_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(9, out8.street);
}

                    if(out8.noodlecrm__scholarships__c == null) {
pstmt_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(10, out8.noodlecrm__scholarships__c);
}

                    if(out8.noodlecrm__ea_stated_gpa__c == null) {
pstmt_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(11, out8.noodlecrm__ea_stated_gpa__c);
}

                    if(out8.isunreadbyowner == null) {
pstmt_tDBOutput_4.setNull(12, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_4.setBoolean(12, out8.isunreadbyowner);
}

                    if(out8.noodlecrm__url__c == null) {
pstmt_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(13, out8.noodlecrm__url__c);
}

                    if(out8.noodlecrm__external_id__c == null) {
pstmt_tDBOutput_4.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(14, out8.noodlecrm__external_id__c);
}

                    if(out8.noodlecrm__lead_stated_gpa__c == null) {
pstmt_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(15, out8.noodlecrm__lead_stated_gpa__c);
}

                    if(out8.noodlecrm__last_attended_zoom__c != null) {
pstmt_tDBOutput_4.setTimestamp(16, new java.sql.Timestamp(out8.noodlecrm__last_attended_zoom__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(out8.emailbouncedreason == null) {
pstmt_tDBOutput_4.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(17, out8.emailbouncedreason);
}

                    if(out8.noodlecrm__partnerships__c == null) {
pstmt_tDBOutput_4.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(18, out8.noodlecrm__partnerships__c);
}

                    if(out8.numberofemployees == null) {
pstmt_tDBOutput_4.setNull(19, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(19, out8.numberofemployees);
}

                    if(out8.noodlecrm__bad_lead_reason__c == null) {
pstmt_tDBOutput_4.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(20, out8.noodlecrm__bad_lead_reason__c);
}

                    if(out8.noodlecrm__out_of_pocket__c == null) {
pstmt_tDBOutput_4.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(21, out8.noodlecrm__out_of_pocket__c);
}

                    if(out8.noodlecrm__competitor_details__c == null) {
pstmt_tDBOutput_4.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(22, out8.noodlecrm__competitor_details__c);
}

                    if(out8.noodlecrm__last_attended_webinar_date_time__c != null) {
pstmt_tDBOutput_4.setTimestamp(23, new java.sql.Timestamp(out8.noodlecrm__last_attended_webinar_date_time__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(23, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__program2__c == null) {
pstmt_tDBOutput_4.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(24, out8.noodlecrm__program2__c);
}

                    if(out8.noodlecrm__noodle_crm_id__c == null) {
pstmt_tDBOutput_4.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(25, out8.noodlecrm__noodle_crm_id__c);
}

                    if(out8.noodlecrm__university__c == null) {
pstmt_tDBOutput_4.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(26, out8.noodlecrm__university__c);
}

                    if(out8.noodlecrm__military__c == null) {
pstmt_tDBOutput_4.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(27, out8.noodlecrm__military__c);
}

                    if(out8.noodlecrm__universitycrmid__c == null) {
pstmt_tDBOutput_4.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(28, out8.noodlecrm__universitycrmid__c);
}

                    if(out8.noodlecrm__meets_program_criteria__c == null) {
pstmt_tDBOutput_4.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(29, out8.noodlecrm__meets_program_criteria__c);
}

                    if(out8.noodlecrm__best_time_to_call__c == null) {
pstmt_tDBOutput_4.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(30, out8.noodlecrm__best_time_to_call__c);
}

                    if(out8.noodlecrm__total_texts__c == null) {
pstmt_tDBOutput_4.setNull(31, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_4.setDouble(31, out8.noodlecrm__total_texts__c);
}

                    if(out8.noodlecrm__utm_source__c == null) {
pstmt_tDBOutput_4.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(32, out8.noodlecrm__utm_source__c);
}

                    if(out8.noodlecrm__first_call_date_time__c != null) {
pstmt_tDBOutput_4.setTimestamp(33, new java.sql.Timestamp(out8.noodlecrm__first_call_date_time__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(33, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__lead_external_id__c == null) {
pstmt_tDBOutput_4.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(34, out8.noodlecrm__lead_external_id__c);
}

                    if(out8.noodlecrm__webinar_signup_date_time__c != null) {
pstmt_tDBOutput_4.setTimestamp(35, new java.sql.Timestamp(out8.noodlecrm__webinar_signup_date_time__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(35, java.sql.Types.TIMESTAMP);
}

                    if(out8.lastvieweddate != null) {
pstmt_tDBOutput_4.setTimestamp(36, new java.sql.Timestamp(out8.lastvieweddate.getTime()));
} else {
pstmt_tDBOutput_4.setNull(36, java.sql.Types.TIMESTAMP);
}

                    if(out8.isconverted == null) {
pstmt_tDBOutput_4.setNull(37, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_4.setBoolean(37, out8.isconverted);
}

                    if(out8.convertedcontactid == null) {
pstmt_tDBOutput_4.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(38, out8.convertedcontactid);
}

                    if(out8.noodlecrm__responsiveness__c == null) {
pstmt_tDBOutput_4.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(39, out8.noodlecrm__responsiveness__c);
}

                    if(out8.noodlecrm__utm_content__c == null) {
pstmt_tDBOutput_4.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(40, out8.noodlecrm__utm_content__c);
}

                    if(out8.city == null) {
pstmt_tDBOutput_4.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(41, out8.city);
}

                    if(out8.name == null) {
pstmt_tDBOutput_4.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(42, out8.name);
}

                    if(out8.noodlecrm__related_student__c == null) {
pstmt_tDBOutput_4.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(43, out8.noodlecrm__related_student__c);
}

                    if(out8.latitude == null) {
pstmt_tDBOutput_4.setNull(44, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_4.setDouble(44, out8.latitude);
}

                    if(out8.noodlecrm__last_call_date_time__c != null) {
pstmt_tDBOutput_4.setTimestamp(45, new java.sql.Timestamp(out8.noodlecrm__last_call_date_time__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(45, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__missed_attempt_date_time__c != null) {
pstmt_tDBOutput_4.setTimestamp(46, new java.sql.Timestamp(out8.noodlecrm__missed_attempt_date_time__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(46, java.sql.Types.TIMESTAMP);
}

                    if(out8.mobilephone == null) {
pstmt_tDBOutput_4.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(47, out8.mobilephone);
}

                    if(out8.lastmodifieddate != null) {
pstmt_tDBOutput_4.setTimestamp(48, new java.sql.Timestamp(out8.lastmodifieddate.getTime()));
} else {
pstmt_tDBOutput_4.setNull(48, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__expected_date_to_meet_requirement__c != null) {
pstmt_tDBOutput_4.setTimestamp(49, new java.sql.Timestamp(out8.noodlecrm__expected_date_to_meet_requirement__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(49, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__missed_attempt_counter__c == null) {
pstmt_tDBOutput_4.setNull(50, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_4.setDouble(50, out8.noodlecrm__missed_attempt_counter__c);
}

                    if(out8.noodlecrm__program__c == null) {
pstmt_tDBOutput_4.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(51, out8.noodlecrm__program__c);
}

                    if(out8.phone == null) {
pstmt_tDBOutput_4.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(52, out8.phone);
}

                    if(out8.masterrecordid == null) {
pstmt_tDBOutput_4.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(53, out8.masterrecordid);
}

                    if(out8.ownerid == null) {
pstmt_tDBOutput_4.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(54, out8.ownerid);
}

                    if(out8.emailbounceddate != null) {
pstmt_tDBOutput_4.setTimestamp(55, new java.sql.Timestamp(out8.emailbounceddate.getTime()));
} else {
pstmt_tDBOutput_4.setNull(55, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__utm_medium__c == null) {
pstmt_tDBOutput_4.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(56, out8.noodlecrm__utm_medium__c);
}

                    if(out8.noodlecrm__manager_comments__c == null) {
pstmt_tDBOutput_4.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(57, out8.noodlecrm__manager_comments__c);
}

                    if(out8.noodlecrm__last_call_date__c != null) {
pstmt_tDBOutput_4.setTimestamp(58, new java.sql.Timestamp(out8.noodlecrm__last_call_date__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(58, java.sql.Types.TIMESTAMP);
}

                    if(out8.longitude == null) {
pstmt_tDBOutput_4.setNull(59, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_4.setDouble(59, out8.longitude);
}

                    if(out8.isdeleted == null) {
pstmt_tDBOutput_4.setNull(60, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_4.setBoolean(60, out8.isdeleted);
}

                    if(out8.noodlecrm__primary__c == null) {
pstmt_tDBOutput_4.setNull(61, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(61, out8.noodlecrm__primary__c);
}

                    if(out8.noodlecrm__follow_up_date__c != null) {
pstmt_tDBOutput_4.setTimestamp(62, new java.sql.Timestamp(out8.noodlecrm__follow_up_date__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(62, java.sql.Types.TIMESTAMP);
}

                    if(out8.systemmodstamp != null) {
pstmt_tDBOutput_4.setTimestamp(63, new java.sql.Timestamp(out8.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_4.setNull(63, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__attended_webinar__c == null) {
pstmt_tDBOutput_4.setNull(64, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_4.setBoolean(64, out8.noodlecrm__attended_webinar__c);
}

                    if(out8.noodlecrm__supplemental__c == null) {
pstmt_tDBOutput_4.setNull(65, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(65, out8.noodlecrm__supplemental__c);
}

                    if(out8.lastmodifiedbyid == null) {
pstmt_tDBOutput_4.setNull(66, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(66, out8.lastmodifiedbyid);
}

                    if(out8.state == null) {
pstmt_tDBOutput_4.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(67, out8.state);
}

                    if(out8.noodlecrm__meaningful_conversation_date_time__c != null) {
pstmt_tDBOutput_4.setTimestamp(68, new java.sql.Timestamp(out8.noodlecrm__meaningful_conversation_date_time__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(68, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__applying_to_a_competitor__c == null) {
pstmt_tDBOutput_4.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(69, out8.noodlecrm__applying_to_a_competitor__c);
}

                    if(out8.noodlecrm__lead_stated_professional_status__c == null) {
pstmt_tDBOutput_4.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(70, out8.noodlecrm__lead_stated_professional_status__c);
}

                    if(out8.noodlecrm__ea_stated_professional_status__c == null) {
pstmt_tDBOutput_4.setNull(71, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(71, out8.noodlecrm__ea_stated_professional_status__c);
}

                    if(out8.status == null) {
pstmt_tDBOutput_4.setNull(72, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(72, out8.status);
}

                    if(out8.noodlecrm__ea_indicated_start_term__c == null) {
pstmt_tDBOutput_4.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(73, out8.noodlecrm__ea_indicated_start_term__c);
}

                    if(out8.noodlecrm__employer_benefits__c == null) {
pstmt_tDBOutput_4.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(74, out8.noodlecrm__employer_benefits__c);
}

                    if(out8.noodlecrm__external_id_unique__c == null) {
pstmt_tDBOutput_4.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(75, out8.noodlecrm__external_id_unique__c);
}

                    if(out8.noodlecrm__utm_campaign__c == null) {
pstmt_tDBOutput_4.setNull(76, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(76, out8.noodlecrm__utm_campaign__c);
}

                    if(out8.lastactivitydate != null) {
pstmt_tDBOutput_4.setTimestamp(77, new java.sql.Timestamp(out8.lastactivitydate.getTime()));
} else {
pstmt_tDBOutput_4.setNull(77, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__will_not_apply_reason_other__c == null) {
pstmt_tDBOutput_4.setNull(78, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(78, out8.noodlecrm__will_not_apply_reason_other__c);
}

                    if(out8.noodlecrm__last_activity_type__c == null) {
pstmt_tDBOutput_4.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(79, out8.noodlecrm__last_activity_type__c);
}

                    if(out8.noodlecrm__student_loans__c == null) {
pstmt_tDBOutput_4.setNull(80, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(80, out8.noodlecrm__student_loans__c);
}

                    if(out8.individualid == null) {
pstmt_tDBOutput_4.setNull(81, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(81, out8.individualid);
}

                    if(out8.noodlecrm__numberoflocations__c == null) {
pstmt_tDBOutput_4.setNull(82, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_4.setDouble(82, out8.noodlecrm__numberoflocations__c);
}

                    if(out8.noodlecrm__time_zone__c == null) {
pstmt_tDBOutput_4.setNull(83, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(83, out8.noodlecrm__time_zone__c);
}

                    if(out8.noodlecrm__do_not_call__c == null) {
pstmt_tDBOutput_4.setNull(84, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(84, out8.noodlecrm__do_not_call__c);
}

                    if(out8.noodlecrm__university_scholarship_date__c != null) {
pstmt_tDBOutput_4.setTimestamp(85, new java.sql.Timestamp(out8.noodlecrm__university_scholarship_date__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(85, java.sql.Types.TIMESTAMP);
}

                    if(out8.createddate != null) {
pstmt_tDBOutput_4.setTimestamp(86, new java.sql.Timestamp(out8.createddate.getTime()));
} else {
pstmt_tDBOutput_4.setNull(86, java.sql.Types.TIMESTAMP);
}

                    if(out8.convertedaccountid == null) {
pstmt_tDBOutput_4.setNull(87, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(87, out8.convertedaccountid);
}

                    if(out8.country == null) {
pstmt_tDBOutput_4.setNull(88, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(88, out8.country);
}

                    if(out8.noodlecrm__lead_stated_licensure__c == null) {
pstmt_tDBOutput_4.setNull(89, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(89, out8.noodlecrm__lead_stated_licensure__c);
}

                    if(out8.noodlecrm__ea_stated_licensure__c == null) {
pstmt_tDBOutput_4.setNull(90, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(90, out8.noodlecrm__ea_stated_licensure__c);
}

                    if(out8.leadsource == null) {
pstmt_tDBOutput_4.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(91, out8.leadsource);
}

                    if(out8.noodlecrm__utm_term__c == null) {
pstmt_tDBOutput_4.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(92, out8.noodlecrm__utm_term__c);
}

                    if(out8.geocodeaccuracy == null) {
pstmt_tDBOutput_4.setNull(93, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(93, out8.geocodeaccuracy);
}

                    if(out8.noodlecrm__google_analytics_id__c == null) {
pstmt_tDBOutput_4.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(94, out8.noodlecrm__google_analytics_id__c);
}

                    if(out8.postalcode == null) {
pstmt_tDBOutput_4.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(95, out8.postalcode);
}

                    if(out8.salutation == null) {
pstmt_tDBOutput_4.setNull(96, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(96, out8.salutation);
}

                    if(out8.title == null) {
pstmt_tDBOutput_4.setNull(97, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(97, out8.title);
}

                    if(out8.noodlecrm__ip_address__c == null) {
pstmt_tDBOutput_4.setNull(98, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(98, out8.noodlecrm__ip_address__c);
}

                    if(out8.noodlecrm__total_calls__c == null) {
pstmt_tDBOutput_4.setNull(99, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_4.setDouble(99, out8.noodlecrm__total_calls__c);
}

                    if(out8.noodlecrm__siccode__c == null) {
pstmt_tDBOutput_4.setNull(100, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(100, out8.noodlecrm__siccode__c);
}

                    if(out8.noodlecrm__test_status_gre__c == null) {
pstmt_tDBOutput_4.setNull(101, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(101, out8.noodlecrm__test_status_gre__c);
}

                    if(out8.noodlecrm__attended_zoom__c == null) {
pstmt_tDBOutput_4.setNull(102, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_4.setBoolean(102, out8.noodlecrm__attended_zoom__c);
}

                    if(out8.noodlecrm__fafsa__c == null) {
pstmt_tDBOutput_4.setNull(103, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(103, out8.noodlecrm__fafsa__c);
}

                    if(out8.noodlecrm__ea_stated_taken_course_req__c == null) {
pstmt_tDBOutput_4.setNull(104, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(104, out8.noodlecrm__ea_stated_taken_course_req__c);
}

                    if(out8.noodlecrm__level_of_education__c == null) {
pstmt_tDBOutput_4.setNull(105, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(105, out8.noodlecrm__level_of_education__c);
}

                    if(out8.noodlecrm__currentgenerators__c == null) {
pstmt_tDBOutput_4.setNull(106, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(106, out8.noodlecrm__currentgenerators__c);
}

                    if(out8.noodlecrm__lead_stated_taken_course_req__c == null) {
pstmt_tDBOutput_4.setNull(107, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(107, out8.noodlecrm__lead_stated_taken_course_req__c);
}

                    if(out8.noodlecrm__productinterest__c == null) {
pstmt_tDBOutput_4.setNull(108, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(108, out8.noodlecrm__productinterest__c);
}

                    if(out8.noodlecrm__follow_up_reason__c == null) {
pstmt_tDBOutput_4.setNull(109, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(109, out8.noodlecrm__follow_up_reason__c);
}

                    if(out8.noodlecrm__will_not_apply_date__c != null) {
pstmt_tDBOutput_4.setTimestamp(110, new java.sql.Timestamp(out8.noodlecrm__will_not_apply_date__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(110, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__fa_comments__c == null) {
pstmt_tDBOutput_4.setNull(111, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(111, out8.noodlecrm__fa_comments__c);
}

                    if(out8.jigsawcontactid == null) {
pstmt_tDBOutput_4.setNull(112, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(112, out8.jigsawcontactid);
}

                    if(out8.createdbyid == null) {
pstmt_tDBOutput_4.setNull(113, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(113, out8.createdbyid);
}

                    if(out8.website == null) {
pstmt_tDBOutput_4.setNull(114, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(114, out8.website);
}

                    if(out8.firstname == null) {
pstmt_tDBOutput_4.setNull(115, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(115, out8.firstname);
}

                    if(out8.noodlecrm__contact_type__c == null) {
pstmt_tDBOutput_4.setNull(116, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(116, out8.noodlecrm__contact_type__c);
}

                    if(out8.noodlecrm__conversion_date__c != null) {
pstmt_tDBOutput_4.setTimestamp(117, new java.sql.Timestamp(out8.noodlecrm__conversion_date__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(117, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__re_open__c == null) {
pstmt_tDBOutput_4.setNull(118, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_4.setBoolean(118, out8.noodlecrm__re_open__c);
}

                    if(out8.noodlecrm__applying_to_a_competitor_type__c == null) {
pstmt_tDBOutput_4.setNull(119, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(119, out8.noodlecrm__applying_to_a_competitor_type__c);
}

                    if(out8.convertedopportunityid == null) {
pstmt_tDBOutput_4.setNull(120, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(120, out8.convertedopportunityid);
}

                    if(out8.email == null) {
pstmt_tDBOutput_4.setNull(121, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(121, out8.email);
}

                    if(out8.description == null) {
pstmt_tDBOutput_4.setNull(122, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(122, out8.description);
}

                    if(out8.company == null) {
pstmt_tDBOutput_4.setNull(123, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(123, out8.company);
}

                    if(out8.rating == null) {
pstmt_tDBOutput_4.setNull(124, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(124, out8.rating);
}

                    if(out8.photourl == null) {
pstmt_tDBOutput_4.setNull(125, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(125, out8.photourl);
}

                    if(out8.lastreferenceddate != null) {
pstmt_tDBOutput_4.setTimestamp(126, new java.sql.Timestamp(out8.lastreferenceddate.getTime()));
} else {
pstmt_tDBOutput_4.setNull(126, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__temperature__c == null) {
pstmt_tDBOutput_4.setNull(127, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(127, out8.noodlecrm__temperature__c);
}

                    if(out8.noodlecrm__competitor_university_2__c == null) {
pstmt_tDBOutput_4.setNull(128, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(128, out8.noodlecrm__competitor_university_2__c);
}

                    if(out8.industry == null) {
pstmt_tDBOutput_4.setNull(129, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(129, out8.industry);
}

                    if(out8.noodlecrm__competitor_university_1__c == null) {
pstmt_tDBOutput_4.setNull(130, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(130, out8.noodlecrm__competitor_university_1__c);
}

                    if(out8.noodlecrm__bad_lead_date_time__c != null) {
pstmt_tDBOutput_4.setTimestamp(131, new java.sql.Timestamp(out8.noodlecrm__bad_lead_date_time__c.getTime()));
} else {
pstmt_tDBOutput_4.setNull(131, java.sql.Types.TIMESTAMP);
}

                    if(out8.noodlecrm__signed_up_for_webinar__c == null) {
pstmt_tDBOutput_4.setNull(132, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_4.setBoolean(132, out8.noodlecrm__signed_up_for_webinar__c);
}

                    if(out8.sfid == null) {
pstmt_tDBOutput_4.setNull(133, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(133, out8.sfid);
}

                    pstmt_tDBOutput_4.setInt(134, out8.id);

                    if(out8.noodlecrm__preferred_phone__c == null) {
pstmt_tDBOutput_4.setNull(135, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(135, out8.noodlecrm__preferred_phone__c);
}

                    if(out8.noodlecrm__program3__c == null) {
pstmt_tDBOutput_4.setNull(136, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(136, out8.noodlecrm__program3__c);
}

                    if(out8.noodlecrm__program2__r__noodlecrm__external_id__c == null) {
pstmt_tDBOutput_4.setNull(137, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(137, out8.noodlecrm__program2__r__noodlecrm__external_id__c);
}

                    if(out8.noodlecrm__program3__r__noodlecrm__external_id__c == null) {
pstmt_tDBOutput_4.setNull(138, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(138, out8.noodlecrm__program3__r__noodlecrm__external_id__c);
}

                    if(out8.noodlecrm__lead_indicated_start_term__c == null) {
pstmt_tDBOutput_4.setNull(139, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(139, out8.noodlecrm__lead_indicated_start_term__c);
}

                    if(out8.noodlecrm__preferred_email__c == null) {
pstmt_tDBOutput_4.setNull(140, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(140, out8.noodlecrm__preferred_email__c);
}

			
    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
            if(!whetherReject_tDBOutput_4) {
            }
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    	int countSum_tDBOutput_4 = 0;
						for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
						
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    	System.err.println(errormessage_tDBOutput_4);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "out8"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_4!=null) {
				    	CsvWritertFileOutputDelimited_4.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out7");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk63", 0, "ok");
				}
				tFileArchive_4Process(globalMap);



/**
 * [tFileOutputDelimited_4 end ] stop
 */




	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    	int countSum_tDBOutput_4 = 0;
			for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
				countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
			}
			
	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	
	    	System.err.println(errormessage_tDBOutput_4);
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out8");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk64", 0, "ok");
				}
				tJava_22Process(globalMap);



/**
 * [tDBOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_4");
					
						if(CsvWritertFileOutputDelimited_4!=null) {
					    	CsvWritertFileOutputDelimited_4.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */




	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_4", false);
		start_Hash.put("tFileArchive_4", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_4";

	
		int tos_count_tFileArchive_4 = 0;
		

 



/**
 * [tFileArchive_4 begin ] stop
 */
	
	/**
	 * [tFileArchive_4 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_4";

	

	

		String sourceFile_tFileArchive_4 = context.staging_S3_dir + "lead.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_4), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_4 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_4 = context.staging_S3_dir + "lead.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_4 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_4, zipFile_tFileArchive_4);
    zip_tFileArchive_4.setOverwriteExistTargetZip(true);
	zip_tFileArchive_4.setMakeTargetDir(true);
	zip_tFileArchive_4.setCompressLevel(9);
	zip_tFileArchive_4.setArchiveFormat("gzip");
	zip_tFileArchive_4.setAllFiles(true);
	
	
		zip_tFileArchive_4.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_4_ARCHIVE_FILEPATH",zipFile_tFileArchive_4);
   
   globalMap.put("tFileArchive_4_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_4).getName());

   zip_tFileArchive_4.doZip();


 


	tos_count_tFileArchive_4++;

/**
 * [tFileArchive_4 main ] stop
 */
	
	/**
	 * [tFileArchive_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_4";

	

 



/**
 * [tFileArchive_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_4";

	

 



/**
 * [tFileArchive_4 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_4 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_4";

	

 

ok_Hash.put("tFileArchive_4", true);
end_Hash.put("tFileArchive_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk65", 0, "ok");
				}
				tS3Put_4Process(globalMap);



/**
 * [tFileArchive_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_4 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_4";

	

 



/**
 * [tFileArchive_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_4_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_4", false);
		start_Hash.put("tS3Put_4", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_4";

	
		int tos_count_tS3Put_4 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_4 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_4 = context.nd_s3_data_lake_path_sfdc +"/lead/latest/university_id="+context.university_code+"/lead.csv.gz";
	
	int partSizeInBytes_tS3Put_4 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_4 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_4 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_4 = context.staging_S3_dir + "lead.csv.gz";
	
	boolean useStream_tS3Put_4 = false;
	java.io.InputStream uploadStream_tS3Put_4 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_4 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_4 instanceof String){
		    useStream_tS3Put_4 = false;
		}else if(fileOrStream_tS3Put_4 instanceof java.io.InputStream){
		    useStream_tS3Put_4 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_4 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_4) {
				java.io.File inputFile_tS3Put_4 = new java.io.File((String)fileOrStream_tS3Put_4);
				
				long multipart_upload_threshold_tS3Put_4 = 5 * 1024 * 1024;
				
    		tm_tS3Put_4 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_4)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_4)
    			.withS3Client(conn_tS3Put_4)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_4 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_4, inputFile_tS3Put_4).withMetadata(objectMetadata_tS3Put_4);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_4 = tm_tS3Put_4.upload(putRequest_tS3Put_4);
  		
  			upload_tS3Put_4.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_4 = ((java.io.InputStream)fileOrStream_tS3Put_4);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_4 = new S3StreamUtil();
    		byte[] buffer_tS3Put_4 = new byte[partSizeInBytes_tS3Put_4];
    		sourceStream_tS3Put_4.read(buffer_tS3Put_4);
    		long curPartSize_tS3Put_4 = streamUtil_tS3Put_4.getLength(buffer_tS3Put_4);
    		boolean multiUpload_tS3Put_4 = curPartSize_tS3Put_4 == partSizeInBytes_tS3Put_4;
    		
    		if(!multiUpload_tS3Put_4) {
    				objectMetadata_tS3Put_4.setContentLength(curPartSize_tS3Put_4);
    				uploadStream_tS3Put_4 = new java.io.ByteArrayInputStream(buffer_tS3Put_4,0,Long.valueOf(curPartSize_tS3Put_4).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_4 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_4, uploadStream_tS3Put_4, objectMetadata_tS3Put_4);
			
    				
    				

    				
    				conn_tS3Put_4.putObject(putRequest_tS3Put_4);
    		} else {
    				uploadStream_tS3Put_4 = new java.io.ByteArrayInputStream(buffer_tS3Put_4);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_4 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_4 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_4, objectMetadata_tS3Put_4);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_4 = conn_tS3Put_4.initiateMultipartUpload(putRequest_tS3Put_4);
      			String uploadId_tS3Put_4 = initResponse_tS3Put_4.getUploadId();
      			int partNumber_tS3Put_4 = 1;
      			boolean streamHasNext_tS3Put_4 = true;
      			byte[] probeAvailability_tS3Put_4 = new byte[1];
				try {
					while (streamHasNext_tS3Put_4) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_4 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_4)
						.withUploadId(uploadId_tS3Put_4)
                    	.withPartNumber(partNumber_tS3Put_4)
						.withPartSize(curPartSize_tS3Put_4);
            		    uploadRequest_tS3Put_4.setInputStream(uploadStream_tS3Put_4);
            		    streamHasNext_tS3Put_4 = sourceStream_tS3Put_4.read(probeAvailability_tS3Put_4) != -1;
            		    if(!streamHasNext_tS3Put_4){
                    	    uploadRequest_tS3Put_4.setLastPart(true);
                    	}

                		partTags_tS3Put_4.add(conn_tS3Put_4.uploadPart(uploadRequest_tS3Put_4).getPartETag());
                  	    partNumber_tS3Put_4++;

          		     	if(uploadStream_tS3Put_4!=null){
      		         			uploadStream_tS3Put_4.close();
          		     	}
          		     	buffer_tS3Put_4 = new byte[partSizeInBytes_tS3Put_4];
          		     	sourceStream_tS3Put_4.read(buffer_tS3Put_4,1,partSizeInBytes_tS3Put_4-1);
          		     	buffer_tS3Put_4[0] = probeAvailability_tS3Put_4[0];
          		     	probeAvailability_tS3Put_4 = new byte[1];
          		     	curPartSize_tS3Put_4 = streamUtil_tS3Put_4.getLength(buffer_tS3Put_4);
          		     	uploadStream_tS3Put_4 = new java.io.ByteArrayInputStream(buffer_tS3Put_4);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_4 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_4,
                        uploadId_tS3Put_4, partTags_tS3Put_4);
            		conn_tS3Put_4.completeMultipartUpload(compRequest_tS3Put_4);
            } catch (java.lang.Exception uploadException_tS3Put_4) {
  							conn_tS3Put_4.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_4, uploadId_tS3Put_4));
    						throw uploadException_tS3Put_4;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_4){
		
			throw(e_tS3Put_4);
		
	}finally{
		if(useStream_tS3Put_4 && uploadStream_tS3Put_4!=null){
    	uploadStream_tS3Put_4.close();
    }
    
    if(tm_tS3Put_4 != null){
        tm_tS3Put_4.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_4 begin ] stop
 */
	
	/**
	 * [tS3Put_4 main ] start
	 */

	

	
	
	currentComponent="tS3Put_4";

	

 


	tos_count_tS3Put_4++;

/**
 * [tS3Put_4 main ] stop
 */
	
	/**
	 * [tS3Put_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_4";

	

 



/**
 * [tS3Put_4 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_4";

	

 



/**
 * [tS3Put_4 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_4 end ] start
	 */

	

	
	
	currentComponent="tS3Put_4";

	

 

ok_Hash.put("tS3Put_4", true);
end_Hash.put("tS3Put_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk66", 0, "ok");
				}
				tJava_21Process(globalMap);



/**
 * [tS3Put_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_4 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_4";

	

 



/**
 * [tS3Put_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_21", false);
		start_Hash.put("tJava_21", System.currentTimeMillis());
		
	
	currentComponent="tJava_21";

	
		int tos_count_tJava_21 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_21 begin ] stop
 */
	
	/**
	 * [tJava_21 main ] start
	 */

	

	
	
	currentComponent="tJava_21";

	

 


	tos_count_tJava_21++;

/**
 * [tJava_21 main ] stop
 */
	
	/**
	 * [tJava_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_21";

	

 



/**
 * [tJava_21 process_data_begin ] stop
 */
	
	/**
	 * [tJava_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_21";

	

 



/**
 * [tJava_21 process_data_end ] stop
 */
	
	/**
	 * [tJava_21 end ] start
	 */

	

	
	
	currentComponent="tJava_21";

	

 

ok_Hash.put("tJava_21", true);
end_Hash.put("tJava_21", System.currentTimeMillis());




/**
 * [tJava_21 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_21 finally ] start
	 */

	

	
	
	currentComponent="tJava_21";

	

 



/**
 * [tJava_21 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_21_SUBPROCESS_STATE", 1);
	}
	

public void tJava_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_22", false);
		start_Hash.put("tJava_22", System.currentTimeMillis());
		
	
	currentComponent="tJava_22";

	
		int tos_count_tJava_22 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_4_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");
 



/**
 * [tJava_22 begin ] stop
 */
	
	/**
	 * [tJava_22 main ] start
	 */

	

	
	
	currentComponent="tJava_22";

	

 


	tos_count_tJava_22++;

/**
 * [tJava_22 main ] stop
 */
	
	/**
	 * [tJava_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_22";

	

 



/**
 * [tJava_22 process_data_begin ] stop
 */
	
	/**
	 * [tJava_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_22";

	

 



/**
 * [tJava_22 process_data_end ] stop
 */
	
	/**
	 * [tJava_22 end ] start
	 */

	

	
	
	currentComponent="tJava_22";

	

 

ok_Hash.put("tJava_22", true);
end_Hash.put("tJava_22", System.currentTimeMillis());




/**
 * [tJava_22 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_22 finally ] start
	 */

	

	
	
	currentComponent="tJava_22";

	

 



/**
 * [tJava_22 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_22_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_5", false);
		start_Hash.put("tS3Copy_5", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_5";

	
		int tos_count_tS3Copy_5 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_5 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_5 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_5 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_5 = null;
		
		
		final String from_bucket_tS3Copy_5 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_5 = context.nd_s3_data_lake_path_sfdc+"/opportunity/latest/university_id="+context.university_code+"/opportunity.csv.gz";
		final String to_bucket_tS3Copy_5 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_5 = context.nd_s3_data_lake_path_sfdc+"/opportunity/archive/university_id="+context.university_code+"/opportunity_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_5 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_5, from_key_tS3Copy_5);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_5 = conn_tS3Copy_5.getObjectMetadata(metadataRequest_tS3Copy_5);
    long objectSize_tS3Copy_5 = metadataResult_tS3Copy_5.getContentLength();
    
    boolean multiUpload_tS3Copy_5 = objectSize_tS3Copy_5 > maxBytes4SingleCopyCall_tS3Copy_5;
    
    if(!multiUpload_tS3Copy_5) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_5 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_5, from_key_tS3Copy_5, to_bucket_tS3Copy_5, to_key_tS3Copy_5);
    		if(objectMetadata_tS3Copy_5 != null) {
    				putRequest_tS3Copy_5.setNewObjectMetadata(objectMetadata_tS3Copy_5);
    		}
    		
    		

    		
    		conn_tS3Copy_5.copyObject(putRequest_tS3Copy_5);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_5 = metadataResult_tS3Copy_5.getUserMetadata();
						if((userMetadata_tS3Copy_5!=null) && userMetadata_tS3Copy_5.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_5 = null;
    				if(objectMetadata_tS3Copy_5 != null) {
    						putRequest_tS3Copy_5 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_5, to_key_tS3Copy_5, objectMetadata_tS3Copy_5);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_5 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_5, to_key_tS3Copy_5, metadataResult_tS3Copy_5);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_5 = conn_tS3Copy_5.initiateMultipartUpload(putRequest_tS3Copy_5);
            
            long bytePosition_tS3Copy_5 = 0;
            int partNum_tS3Copy_5 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_5 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_5 < objectSize_tS3Copy_5) {
                long lastByte_tS3Copy_5 = java.lang.Math.min(bytePosition_tS3Copy_5 + partSizeInBytes_tS3Copy_5 - 1, objectSize_tS3Copy_5 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_5 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_5)
                        .withSourceKey(from_key_tS3Copy_5)
                        .withDestinationBucketName(to_bucket_tS3Copy_5)
                        .withDestinationKey(to_key_tS3Copy_5)
                        .withUploadId(initResult_tS3Copy_5.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_5)
                        .withLastByte(lastByte_tS3Copy_5)
                        .withPartNumber(partNum_tS3Copy_5++);
                partTags_tS3Copy_5.add(conn_tS3Copy_5.copyPart(copyPartRequest_tS3Copy_5).getPartETag());
                bytePosition_tS3Copy_5 += partSizeInBytes_tS3Copy_5;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_5 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_5,
                                                                        to_key_tS3Copy_5, 
                                                                        initResult_tS3Copy_5.getUploadId(),
                                                                        partTags_tS3Copy_5);
            conn_tS3Copy_5.completeMultipartUpload(completeRequest_tS3Copy_5);
    		} catch (java.lang.Exception uploadException_tS3Copy_5) {
    				conn_tS3Copy_5.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_5, to_key_tS3Copy_5, initResult_tS3Copy_5.getUploadId()));
    				throw uploadException_tS3Copy_5;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_5){
		
			System.err.println(e_tS3Copy_5.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_5 begin ] stop
 */
	
	/**
	 * [tS3Copy_5 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_5";

	

 


	tos_count_tS3Copy_5++;

/**
 * [tS3Copy_5 main ] stop
 */
	
	/**
	 * [tS3Copy_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_5";

	

 



/**
 * [tS3Copy_5 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_5";

	

 



/**
 * [tS3Copy_5 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_5 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_5";

	

 

ok_Hash.put("tS3Copy_5", true);
end_Hash.put("tS3Copy_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk56", 0, "ok");
				}
				tJava_17Process(globalMap);



/**
 * [tS3Copy_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Copy_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tS3Copy_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_5 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_5";

	

 



/**
 * [tS3Copy_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_5_SUBPROCESS_STATE", 1);
	}
	

public void tJava_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_17", false);
		start_Hash.put("tJava_17", System.currentTimeMillis());
		
	
	currentComponent="tJava_17";

	
		int tos_count_tJava_17 = 0;
		


System.out.println("Step 0: Running For Opportunity Object");
System.out.println("Step 1: Copied Previous Run File To Archive");
 



/**
 * [tJava_17 begin ] stop
 */
	
	/**
	 * [tJava_17 main ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 


	tos_count_tJava_17++;

/**
 * [tJava_17 main ] stop
 */
	
	/**
	 * [tJava_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 



/**
 * [tJava_17 process_data_begin ] stop
 */
	
	/**
	 * [tJava_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 



/**
 * [tJava_17 process_data_end ] stop
 */
	
	/**
	 * [tJava_17 end ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 

ok_Hash.put("tJava_17", true);
end_Hash.put("tJava_17", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk57", 0, "ok");
				}
				tS3Delete_5Process(globalMap);



/**
 * [tJava_17 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_17 finally ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 



/**
 * [tJava_17 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_17_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_5", false);
		start_Hash.put("tS3Delete_5", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_5";

	
		int tos_count_tS3Delete_5 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_5 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_5 = context.nd_s3_data_lake_path_sfdc +"/opportunity/latest/university_id="+context.university_code+"/opportunity.csv.gz";
		if(key_tS3Delete_5!=null && key_tS3Delete_5.trim().length()>0){
			
			conn_tS3Delete_5.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_5);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_5){
		
			System.err.println(e_tS3Delete_5.getMessage());
		
	}
	
 



/**
 * [tS3Delete_5 begin ] stop
 */
	
	/**
	 * [tS3Delete_5 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_5";

	

 


	tos_count_tS3Delete_5++;

/**
 * [tS3Delete_5 main ] stop
 */
	
	/**
	 * [tS3Delete_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_5";

	

 



/**
 * [tS3Delete_5 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_5";

	

 



/**
 * [tS3Delete_5 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_5 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_5";

	

 

ok_Hash.put("tS3Delete_5", true);
end_Hash.put("tS3Delete_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk58", 0, "ok");
				}
				tJava_18Process(globalMap);



/**
 * [tS3Delete_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_5 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_5";

	

 



/**
 * [tS3Delete_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_5_SUBPROCESS_STATE", 1);
	}
	

public void tJava_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_18", false);
		start_Hash.put("tJava_18", System.currentTimeMillis());
		
	
	currentComponent="tJava_18";

	
		int tos_count_tJava_18 = 0;
		


System.out.println("Step 2: Deleted Previous Run File From Latest Folder");
System.out.println("Step 3: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_18 begin ] stop
 */
	
	/**
	 * [tJava_18 main ] start
	 */

	

	
	
	currentComponent="tJava_18";

	

 


	tos_count_tJava_18++;

/**
 * [tJava_18 main ] stop
 */
	
	/**
	 * [tJava_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_18";

	

 



/**
 * [tJava_18 process_data_begin ] stop
 */
	
	/**
	 * [tJava_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_18";

	

 



/**
 * [tJava_18 process_data_end ] stop
 */
	
	/**
	 * [tJava_18 end ] start
	 */

	

	
	
	currentComponent="tJava_18";

	

 

ok_Hash.put("tJava_18", true);
end_Hash.put("tJava_18", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk53", 0, "ok");
				}
				tDBInput_5Process(globalMap);



/**
 * [tJava_18 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_18 finally ] start
	 */

	

	
	
	currentComponent="tJava_18";

	

 



/**
 * [tJava_18 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_18_SUBPROCESS_STATE", 1);
	}
	


public static class out9Struct implements routines.system.IPersistableRow<out9Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String noodlecrm__university_scholarship_details__c;

				public String getNoodlecrm__university_scholarship_details__c () {
					return this.noodlecrm__university_scholarship_details__c;
				}
				
			    public Boolean hasopportunitylineitem;

				public Boolean getHasopportunitylineitem () {
					return this.hasopportunitylineitem;
				}
				
			    public java.util.Date noodlecrm__final_start_date__c;

				public java.util.Date getNoodlecrm__final_start_date__c () {
					return this.noodlecrm__final_start_date__c;
				}
				
			    public String noodlecrm__years_experience__c;

				public String getNoodlecrm__years_experience__c () {
					return this.noodlecrm__years_experience__c;
				}
				
			    public String noodlecrm__delivery_status_idata__c;

				public String getNoodlecrm__delivery_status_idata__c () {
					return this.noodlecrm__delivery_status_idata__c;
				}
				
			    public java.util.Date noodlecrm__decision_date__c;

				public java.util.Date getNoodlecrm__decision_date__c () {
					return this.noodlecrm__decision_date__c;
				}
				
			    public Boolean noodlecrm__application_drafted__c;

				public Boolean getNoodlecrm__application_drafted__c () {
					return this.noodlecrm__application_drafted__c;
				}
				
			    public Double noodlecrm__total_attempts_pre_mc__c;

				public Double getNoodlecrm__total_attempts_pre_mc__c () {
					return this.noodlecrm__total_attempts_pre_mc__c;
				}
				
			    public Double noodlecrm__total_emails__c;

				public Double getNoodlecrm__total_emails__c () {
					return this.noodlecrm__total_emails__c;
				}
				
			    public String noodlecrm__scholarships__c;

				public String getNoodlecrm__scholarships__c () {
					return this.noodlecrm__scholarships__c;
				}
				
			    public String noodlecrm__url__c;

				public String getNoodlecrm__url__c () {
					return this.noodlecrm__url__c;
				}
				
			    public java.util.Date noodlecrm__current_start_date__c;

				public java.util.Date getNoodlecrm__current_start_date__c () {
					return this.noodlecrm__current_start_date__c;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__will_not_complete_reason__c;

				public String getNoodlecrm__will_not_complete_reason__c () {
					return this.noodlecrm__will_not_complete_reason__c;
				}
				
			    public String noodlecrm__defer_reason__c;

				public String getNoodlecrm__defer_reason__c () {
					return this.noodlecrm__defer_reason__c;
				}
				
			    public String noodlecrm__lead_stated_gpa__c;

				public String getNoodlecrm__lead_stated_gpa__c () {
					return this.noodlecrm__lead_stated_gpa__c;
				}
				
			    public String noodlecrm__degree_verification__c;

				public String getNoodlecrm__degree_verification__c () {
					return this.noodlecrm__degree_verification__c;
				}
				
			    public java.util.Date noodlecrm__app_item_received_date_time__c;

				public java.util.Date getNoodlecrm__app_item_received_date_time__c () {
					return this.noodlecrm__app_item_received_date_time__c;
				}
				
			    public String noodlecrm__phone__c;

				public String getNoodlecrm__phone__c () {
					return this.noodlecrm__phone__c;
				}
				
			    public String noodlecrm__decline_reason_details__c;

				public String getNoodlecrm__decline_reason_details__c () {
					return this.noodlecrm__decline_reason_details__c;
				}
				
			    public String noodlecrm__will_not_apply_reason__c;

				public String getNoodlecrm__will_not_apply_reason__c () {
					return this.noodlecrm__will_not_apply_reason__c;
				}
				
			    public String forecastcategoryname;

				public String getForecastcategoryname () {
					return this.forecastcategoryname;
				}
				
			    public String noodlecrm__optional_statement__c;

				public String getNoodlecrm__optional_statement__c () {
					return this.noodlecrm__optional_statement__c;
				}
				
			    public String noodlecrm__maincompetitors__c;

				public String getNoodlecrm__maincompetitors__c () {
					return this.noodlecrm__maincompetitors__c;
				}
				
			    public String noodlecrm__partnerships__c;

				public String getNoodlecrm__partnerships__c () {
					return this.noodlecrm__partnerships__c;
				}
				
			    public String noodlecrm__bad_lead_reason__c;

				public String getNoodlecrm__bad_lead_reason__c () {
					return this.noodlecrm__bad_lead_reason__c;
				}
				
			    public java.util.Date noodlecrm__application_last_login__c;

				public java.util.Date getNoodlecrm__application_last_login__c () {
					return this.noodlecrm__application_last_login__c;
				}
				
			    public String noodlecrm__out_of_pocket__c;

				public String getNoodlecrm__out_of_pocket__c () {
					return this.noodlecrm__out_of_pocket__c;
				}
				
			    public String noodlecrm__enrollment_status__c;

				public String getNoodlecrm__enrollment_status__c () {
					return this.noodlecrm__enrollment_status__c;
				}
				
			    public String noodlecrm__competitor_details__c;

				public String getNoodlecrm__competitor_details__c () {
					return this.noodlecrm__competitor_details__c;
				}
				
			    public java.util.Date noodlecrm__last_attended_zoom_date_time__c;

				public java.util.Date getNoodlecrm__last_attended_zoom_date_time__c () {
					return this.noodlecrm__last_attended_zoom_date_time__c;
				}
				
			    public java.util.Date noodlecrm__last_attended_webinar_date_time__c;

				public java.util.Date getNoodlecrm__last_attended_webinar_date_time__c () {
					return this.noodlecrm__last_attended_webinar_date_time__c;
				}
				
			    public String noodlecrm__program2__c;

				public String getNoodlecrm__program2__c () {
					return this.noodlecrm__program2__c;
				}
				
			    public java.util.Date noodlecrm__enrollment_status_date_time__c;

				public java.util.Date getNoodlecrm__enrollment_status_date_time__c () {
					return this.noodlecrm__enrollment_status_date_time__c;
				}
				
			    public String noodlecrm__noodle_crm_id__c;

				public String getNoodlecrm__noodle_crm_id__c () {
					return this.noodlecrm__noodle_crm_id__c;
				}
				
			    public java.util.Date closedate;

				public java.util.Date getClosedate () {
					return this.closedate;
				}
				
			    public java.util.Date noodlecrm__application_indicated_start_date__c;

				public java.util.Date getNoodlecrm__application_indicated_start_date__c () {
					return this.noodlecrm__application_indicated_start_date__c;
				}
				
			    public String noodlecrm__university__c;

				public String getNoodlecrm__university__c () {
					return this.noodlecrm__university__c;
				}
				
			    public String noodlecrm__military__c;

				public String getNoodlecrm__military__c () {
					return this.noodlecrm__military__c;
				}
				
			    public String noodlecrm__decline_reason__c;

				public String getNoodlecrm__decline_reason__c () {
					return this.noodlecrm__decline_reason__c;
				}
				
			    public String noodlecrm__universitycrmid__c;

				public String getNoodlecrm__universitycrmid__c () {
					return this.noodlecrm__universitycrmid__c;
				}
				
			    public String noodlecrm__resume__c;

				public String getNoodlecrm__resume__c () {
					return this.noodlecrm__resume__c;
				}
				
			    public String noodlecrm__meets_program_criteria__c;

				public String getNoodlecrm__meets_program_criteria__c () {
					return this.noodlecrm__meets_program_criteria__c;
				}
				
			    public String noodlecrm__best_time_to_call__c;

				public String getNoodlecrm__best_time_to_call__c () {
					return this.noodlecrm__best_time_to_call__c;
				}
				
			    public Double noodlecrm__total_texts__c;

				public Double getNoodlecrm__total_texts__c () {
					return this.noodlecrm__total_texts__c;
				}
				
			    public String noodlecrm__application_program_global__c;

				public String getNoodlecrm__application_program_global__c () {
					return this.noodlecrm__application_program_global__c;
				}
				
			    public String accountid;

				public String getAccountid () {
					return this.accountid;
				}
				
			    public String noodlecrm__external_id_populated__c;

				public String getNoodlecrm__external_id_populated__c () {
					return this.noodlecrm__external_id_populated__c;
				}
				
			    public String noodlecrm__utm_source__c;

				public String getNoodlecrm__utm_source__c () {
					return this.noodlecrm__utm_source__c;
				}
				
			    public Double noodlecrm__total_inquiries__c;

				public Double getNoodlecrm__total_inquiries__c () {
					return this.noodlecrm__total_inquiries__c;
				}
				
			    public java.util.Date noodlecrm__first_call_date_time__c;

				public java.util.Date getNoodlecrm__first_call_date_time__c () {
					return this.noodlecrm__first_call_date_time__c;
				}
				
			    public String noodlecrm__lead_external_id__c;

				public String getNoodlecrm__lead_external_id__c () {
					return this.noodlecrm__lead_external_id__c;
				}
				
			    public java.util.Date noodlecrm__webinar_signup_date_time__c;

				public java.util.Date getNoodlecrm__webinar_signup_date_time__c () {
					return this.noodlecrm__webinar_signup_date_time__c;
				}
				
			    public java.util.Date lastvieweddate;

				public java.util.Date getLastvieweddate () {
					return this.lastvieweddate;
				}
				
			    public String noodlecrm__city__c;

				public String getNoodlecrm__city__c () {
					return this.noodlecrm__city__c;
				}
				
			    public String noodlecrm__application_decision__c;

				public String getNoodlecrm__application_decision__c () {
					return this.noodlecrm__application_decision__c;
				}
				
			    public String noodlecrm__university_email__c;

				public String getNoodlecrm__university_email__c () {
					return this.noodlecrm__university_email__c;
				}
				
			    public String noodlecrm__responsiveness__c;

				public String getNoodlecrm__responsiveness__c () {
					return this.noodlecrm__responsiveness__c;
				}
				
			    public String noodlecrm__official_cohort__c;

				public String getNoodlecrm__official_cohort__c () {
					return this.noodlecrm__official_cohort__c;
				}
				
			    public String stagename;

				public String getStagename () {
					return this.stagename;
				}
				
			    public java.util.Date noodlecrm__ea_projected_submit_date__c;

				public java.util.Date getNoodlecrm__ea_projected_submit_date__c () {
					return this.noodlecrm__ea_projected_submit_date__c;
				}
				
			    public java.util.Date noodlecrm__deal_stage__c;

				public java.util.Date getNoodlecrm__deal_stage__c () {
					return this.noodlecrm__deal_stage__c;
				}
				
			    public String noodlecrm__first_touch_source__c;

				public String getNoodlecrm__first_touch_source__c () {
					return this.noodlecrm__first_touch_source__c;
				}
				
			    public String noodlecrm__international_language_test__c;

				public String getNoodlecrm__international_language_test__c () {
					return this.noodlecrm__international_language_test__c;
				}
				
			    public String noodlecrm__utm_content__c;

				public String getNoodlecrm__utm_content__c () {
					return this.noodlecrm__utm_content__c;
				}
				
			    public java.util.Date noodlecrm__app_start_date__c;

				public java.util.Date getNoodlecrm__app_start_date__c () {
					return this.noodlecrm__app_start_date__c;
				}
				
			    public String campaignid;

				public String getCampaignid () {
					return this.campaignid;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Boolean hasoverduetask;

				public Boolean getHasoverduetask () {
					return this.hasoverduetask;
				}
				
			    public String noodlecrm__opportunity_owner__c;

				public String getNoodlecrm__opportunity_owner__c () {
					return this.noodlecrm__opportunity_owner__c;
				}
				
			    public java.util.Date noodlecrm__missed_attempt_date_time__c;

				public java.util.Date getNoodlecrm__missed_attempt_date_time__c () {
					return this.noodlecrm__missed_attempt_date_time__c;
				}
				
			    public Boolean iswon;

				public Boolean getIswon () {
					return this.iswon;
				}
				
			    public java.util.Date noodlecrm__application_submit_date__c;

				public java.util.Date getNoodlecrm__application_submit_date__c () {
					return this.noodlecrm__application_submit_date__c;
				}
				
			    public String noodlecrm__associated_contact__c;

				public String getNoodlecrm__associated_contact__c () {
					return this.noodlecrm__associated_contact__c;
				}
				
			    public java.util.Date noodlecrm__expected_date_to_meet_requirement__c;

				public java.util.Date getNoodlecrm__expected_date_to_meet_requirement__c () {
					return this.noodlecrm__expected_date_to_meet_requirement__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public java.util.Date noodlecrm__last_activitydate_time__c;

				public java.util.Date getNoodlecrm__last_activitydate_time__c () {
					return this.noodlecrm__last_activitydate_time__c;
				}
				
			    public String noodlecrm__missed_attempt_counter__c;

				public String getNoodlecrm__missed_attempt_counter__c () {
					return this.noodlecrm__missed_attempt_counter__c;
				}
				
			    public String noodlecrm__program__c;

				public String getNoodlecrm__program__c () {
					return this.noodlecrm__program__c;
				}
				
			    public String noodlecrm__licensure__c;

				public String getNoodlecrm__licensure__c () {
					return this.noodlecrm__licensure__c;
				}
				
			    public Integer fiscalquarter;

				public Integer getFiscalquarter () {
					return this.fiscalquarter;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public String noodlecrm__utm_medium__c;

				public String getNoodlecrm__utm_medium__c () {
					return this.noodlecrm__utm_medium__c;
				}
				
			    public java.util.Date noodlecrm__last_call_date__c;

				public java.util.Date getNoodlecrm__last_call_date__c () {
					return this.noodlecrm__last_call_date__c;
				}
				
			    public String noodlecrm__opportunity_external_id__c;

				public String getNoodlecrm__opportunity_external_id__c () {
					return this.noodlecrm__opportunity_external_id__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public java.util.Date noodlecrm__follow_up_date__c;

				public java.util.Date getNoodlecrm__follow_up_date__c () {
					return this.noodlecrm__follow_up_date__c;
				}
				
			    public Boolean noodlecrm__attended_webinar__c;

				public Boolean getNoodlecrm__attended_webinar__c () {
					return this.noodlecrm__attended_webinar__c;
				}
				
			    public String noodlecrm__professional_experience__c;

				public String getNoodlecrm__professional_experience__c () {
					return this.noodlecrm__professional_experience__c;
				}
				
			    public String noodlecrm__lor_2__c;

				public String getNoodlecrm__lor_2__c () {
					return this.noodlecrm__lor_2__c;
				}
				
			    public String noodlecrm__supplemental__c;

				public String getNoodlecrm__supplemental__c () {
					return this.noodlecrm__supplemental__c;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String noodlecrm__mta_interaction_record__c;

				public String getNoodlecrm__mta_interaction_record__c () {
					return this.noodlecrm__mta_interaction_record__c;
				}
				
			    public java.util.Date noodlecrm__meaningful_conversation_date_time__c;

				public java.util.Date getNoodlecrm__meaningful_conversation_date_time__c () {
					return this.noodlecrm__meaningful_conversation_date_time__c;
				}
				
			    public String noodlecrm__applying_to_a_competitor__c;

				public String getNoodlecrm__applying_to_a_competitor__c () {
					return this.noodlecrm__applying_to_a_competitor__c;
				}
				
			    public String noodlecrm__lead_stated_professional_status__c;

				public String getNoodlecrm__lead_stated_professional_status__c () {
					return this.noodlecrm__lead_stated_professional_status__c;
				}
				
			    public String noodlecrm__street__c;

				public String getNoodlecrm__street__c () {
					return this.noodlecrm__street__c;
				}
				
			    public String noodlecrm__lor_1__c;

				public String getNoodlecrm__lor_1__c () {
					return this.noodlecrm__lor_1__c;
				}
				
			    public String noodlecrm__scholarship_applied__c;

				public String getNoodlecrm__scholarship_applied__c () {
					return this.noodlecrm__scholarship_applied__c;
				}
				
			    public String noodlecrm__ea_indicated_start_term__c;

				public String getNoodlecrm__ea_indicated_start_term__c () {
					return this.noodlecrm__ea_indicated_start_term__c;
				}
				
			    public String noodlecrm__state_region__c;

				public String getNoodlecrm__state_region__c () {
					return this.noodlecrm__state_region__c;
				}
				
			    public java.util.Date noodlecrm__registered__c;

				public java.util.Date getNoodlecrm__registered__c () {
					return this.noodlecrm__registered__c;
				}
				
			    public String noodlecrm__employer_benefits__c;

				public String getNoodlecrm__employer_benefits__c () {
					return this.noodlecrm__employer_benefits__c;
				}
				
			    public String noodlecrm__utm_campaign__c;

				public String getNoodlecrm__utm_campaign__c () {
					return this.noodlecrm__utm_campaign__c;
				}
				
			    public java.util.Date lastactivitydate;

				public java.util.Date getLastactivitydate () {
					return this.lastactivitydate;
				}
				
			    public String noodlecrm__will_not_apply_reason_other__c;

				public String getNoodlecrm__will_not_apply_reason_other__c () {
					return this.noodlecrm__will_not_apply_reason_other__c;
				}
				
			    public java.util.Date noodlecrm__app_deposit_date_time__c;

				public java.util.Date getNoodlecrm__app_deposit_date_time__c () {
					return this.noodlecrm__app_deposit_date_time__c;
				}
				
			    public String noodlecrm__application_status__c;

				public String getNoodlecrm__application_status__c () {
					return this.noodlecrm__application_status__c;
				}
				
			    public String noodlecrm__defer_reason_detail__c;

				public String getNoodlecrm__defer_reason_detail__c () {
					return this.noodlecrm__defer_reason_detail__c;
				}
				
			    public Boolean hasopenactivity;

				public Boolean getHasopenactivity () {
					return this.hasopenactivity;
				}
				
			    public String noodlecrm__last_activity_type__c;

				public String getNoodlecrm__last_activity_type__c () {
					return this.noodlecrm__last_activity_type__c;
				}
				
			    public String noodlecrm__student_loans__c;

				public String getNoodlecrm__student_loans__c () {
					return this.noodlecrm__student_loans__c;
				}
				
			    public String noodlecrm__deliveryinstallationstatus__c;

				public String getNoodlecrm__deliveryinstallationstatus__c () {
					return this.noodlecrm__deliveryinstallationstatus__c;
				}
				
			    public String noodlecrm__trackingnumber__c;

				public String getNoodlecrm__trackingnumber__c () {
					return this.noodlecrm__trackingnumber__c;
				}
				
			    public String noodlecrm__time_zone__c;

				public String getNoodlecrm__time_zone__c () {
					return this.noodlecrm__time_zone__c;
				}
				
			    public Boolean noodlecrm__do_not_call__c;

				public Boolean getNoodlecrm__do_not_call__c () {
					return this.noodlecrm__do_not_call__c;
				}
				
			    public Double probability;

				public Double getProbability () {
					return this.probability;
				}
				
			    public String noodlecrm__tran_3__c;

				public String getNoodlecrm__tran_3__c () {
					return this.noodlecrm__tran_3__c;
				}
				
			    public java.util.Date noodlecrm__delivery_timestamp_idata__c;

				public java.util.Date getNoodlecrm__delivery_timestamp_idata__c () {
					return this.noodlecrm__delivery_timestamp_idata__c;
				}
				
			    public String noodlecrm__last_contacting_state__c;

				public String getNoodlecrm__last_contacting_state__c () {
					return this.noodlecrm__last_contacting_state__c;
				}
				
			    public String noodlecrm__test_requirements__c;

				public String getNoodlecrm__test_requirements__c () {
					return this.noodlecrm__test_requirements__c;
				}
				
			    public String noodlecrm__decision_type__c;

				public String getNoodlecrm__decision_type__c () {
					return this.noodlecrm__decision_type__c;
				}
				
			    public String noodlecrm__admit_cohort__c;

				public String getNoodlecrm__admit_cohort__c () {
					return this.noodlecrm__admit_cohort__c;
				}
				
			    public String noodlecrm__tran_2__c;

				public String getNoodlecrm__tran_2__c () {
					return this.noodlecrm__tran_2__c;
				}
				
			    public String noodlecrm__email__c;

				public String getNoodlecrm__email__c () {
					return this.noodlecrm__email__c;
				}
				
			    public java.util.Date noodlecrm__university_scholarship_date__c;

				public java.util.Date getNoodlecrm__university_scholarship_date__c () {
					return this.noodlecrm__university_scholarship_date__c;
				}
				
			    public java.util.Date noodlecrm__revised_start_date__c;

				public java.util.Date getNoodlecrm__revised_start_date__c () {
					return this.noodlecrm__revised_start_date__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String noodlecrm__submit_cohort__c;

				public String getNoodlecrm__submit_cohort__c () {
					return this.noodlecrm__submit_cohort__c;
				}
				
			    public Boolean isclosed;

				public Boolean getIsclosed () {
					return this.isclosed;
				}
				
			    public String noodlecrm__condition_type__c;

				public String getNoodlecrm__condition_type__c () {
					return this.noodlecrm__condition_type__c;
				}
				
			    public Boolean noodlecrm__opportunity_status__c;

				public Boolean getNoodlecrm__opportunity_status__c () {
					return this.noodlecrm__opportunity_status__c;
				}
				
			    public String noodlecrm__class_schedule_type__c;

				public String getNoodlecrm__class_schedule_type__c () {
					return this.noodlecrm__class_schedule_type__c;
				}
				
			    public String noodlecrm__lead_stated_licensure__c;

				public String getNoodlecrm__lead_stated_licensure__c () {
					return this.noodlecrm__lead_stated_licensure__c;
				}
				
			    public String noodlecrm__student__c;

				public String getNoodlecrm__student__c () {
					return this.noodlecrm__student__c;
				}
				
			    public String noodlecrm__university_application_id__c;

				public String getNoodlecrm__university_application_id__c () {
					return this.noodlecrm__university_application_id__c;
				}
				
			    public String leadsource;

				public String getLeadsource () {
					return this.leadsource;
				}
				
			    public java.util.Date noodlecrm__updated__c;

				public java.util.Date getNoodlecrm__updated__c () {
					return this.noodlecrm__updated__c;
				}
				
			    public String noodlecrm__utm_term__c;

				public String getNoodlecrm__utm_term__c () {
					return this.noodlecrm__utm_term__c;
				}
				
			    public String noodlecrm__tran_1__c;

				public String getNoodlecrm__tran_1__c () {
					return this.noodlecrm__tran_1__c;
				}
				
			    public String noodlecrm__google_analytics_id__c;

				public String getNoodlecrm__google_analytics_id__c () {
					return this.noodlecrm__google_analytics_id__c;
				}
				
			    public Double amount;

				public Double getAmount () {
					return this.amount;
				}
				
			    public String noodlecrm__crm_id__c;

				public String getNoodlecrm__crm_id__c () {
					return this.noodlecrm__crm_id__c;
				}
				
			    public String noodlecrm__lead_stated_taken_course__c;

				public String getNoodlecrm__lead_stated_taken_course__c () {
					return this.noodlecrm__lead_stated_taken_course__c;
				}
				
			    public String noodlecrm__ip_address__c;

				public String getNoodlecrm__ip_address__c () {
					return this.noodlecrm__ip_address__c;
				}
				
			    public Double noodlecrm__total_calls__c;

				public Double getNoodlecrm__total_calls__c () {
					return this.noodlecrm__total_calls__c;
				}
				
			    public String noodlecrm__university_id_number__c;

				public String getNoodlecrm__university_id_number__c () {
					return this.noodlecrm__university_id_number__c;
				}
				
			    public String noodlecrm__decision__c;

				public String getNoodlecrm__decision__c () {
					return this.noodlecrm__decision__c;
				}
				
			    public String noodlecrm__test_status_gre__c;

				public String getNoodlecrm__test_status_gre__c () {
					return this.noodlecrm__test_status_gre__c;
				}
				
			    public String forecastcategory;

				public String getForecastcategory () {
					return this.forecastcategory;
				}
				
			    public Boolean noodlecrm__attended_zoom__c;

				public Boolean getNoodlecrm__attended_zoom__c () {
					return this.noodlecrm__attended_zoom__c;
				}
				
			    public String noodlecrm__fafsa__c;

				public String getNoodlecrm__fafsa__c () {
					return this.noodlecrm__fafsa__c;
				}
				
			    public String noodlecrm__level_of_education__c;

				public String getNoodlecrm__level_of_education__c () {
					return this.noodlecrm__level_of_education__c;
				}
				
			    public java.util.Date noodlecrm__ea_projected_deposit_date__c;

				public java.util.Date getNoodlecrm__ea_projected_deposit_date__c () {
					return this.noodlecrm__ea_projected_deposit_date__c;
				}
				
			    public String noodlecrm__currentgenerators__c;

				public String getNoodlecrm__currentgenerators__c () {
					return this.noodlecrm__currentgenerators__c;
				}
				
			    public java.util.Date noodlecrm__defer_date__c;

				public java.util.Date getNoodlecrm__defer_date__c () {
					return this.noodlecrm__defer_date__c;
				}
				
			    public String noodlecrm__lead_stated_taken_course_req__c;

				public String getNoodlecrm__lead_stated_taken_course_req__c () {
					return this.noodlecrm__lead_stated_taken_course_req__c;
				}
				
			    public String noodlecrm__follow_up_reason__c;

				public String getNoodlecrm__follow_up_reason__c () {
					return this.noodlecrm__follow_up_reason__c;
				}
				
			    public java.util.Date noodlecrm__will_not_apply_date__c;

				public java.util.Date getNoodlecrm__will_not_apply_date__c () {
					return this.noodlecrm__will_not_apply_date__c;
				}
				
			    public java.util.Date noodlecrm__trying_attempt_date__c;

				public java.util.Date getNoodlecrm__trying_attempt_date__c () {
					return this.noodlecrm__trying_attempt_date__c;
				}
				
			    public String noodlecrm__gpa__c;

				public String getNoodlecrm__gpa__c () {
					return this.noodlecrm__gpa__c;
				}
				
			    public String noodlecrm__fa_comments__c;

				public String getNoodlecrm__fa_comments__c () {
					return this.noodlecrm__fa_comments__c;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String noodlecrm__first_name__c;

				public String getNoodlecrm__first_name__c () {
					return this.noodlecrm__first_name__c;
				}
				
			    public String pricebook2id;

				public String getPricebook2id () {
					return this.pricebook2id;
				}
				
			    public String contactid;

				public String getContactid () {
					return this.contactid;
				}
				
			    public String noodlecrm__contact_type__c;

				public String getNoodlecrm__contact_type__c () {
					return this.noodlecrm__contact_type__c;
				}
				
			    public java.util.Date noodlecrm__conversion_date__c;

				public java.util.Date getNoodlecrm__conversion_date__c () {
					return this.noodlecrm__conversion_date__c;
				}
				
			    public String noodlecrm__ordernumber__c;

				public String getNoodlecrm__ordernumber__c () {
					return this.noodlecrm__ordernumber__c;
				}
				
			    public Integer fiscalyear;

				public Integer getFiscalyear () {
					return this.fiscalyear;
				}
				
			    public java.util.Date noodlecrm__defer_start_date__c;

				public java.util.Date getNoodlecrm__defer_start_date__c () {
					return this.noodlecrm__defer_start_date__c;
				}
				
			    public String noodlecrm__postalcode__c;

				public String getNoodlecrm__postalcode__c () {
					return this.noodlecrm__postalcode__c;
				}
				
			    public Boolean noodlecrm__re_open__c;

				public Boolean getNoodlecrm__re_open__c () {
					return this.noodlecrm__re_open__c;
				}
				
			    public String noodlecrm__applying_to_a_competitor_type__c;

				public String getNoodlecrm__applying_to_a_competitor_type__c () {
					return this.noodlecrm__applying_to_a_competitor_type__c;
				}
				
			    public java.util.Date noodlecrm__app_complete_date__c;

				public java.util.Date getNoodlecrm__app_complete_date__c () {
					return this.noodlecrm__app_complete_date__c;
				}
				
			    public String noodlecrm__country__c;

				public String getNoodlecrm__country__c () {
					return this.noodlecrm__country__c;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String noodlecrm__application_program__c;

				public String getNoodlecrm__application_program__c () {
					return this.noodlecrm__application_program__c;
				}
				
			    public java.util.Date noodlecrm__decline_date__c;

				public java.util.Date getNoodlecrm__decline_date__c () {
					return this.noodlecrm__decline_date__c;
				}
				
			    public java.util.Date lastreferenceddate;

				public java.util.Date getLastreferenceddate () {
					return this.lastreferenceddate;
				}
				
			    public String noodlecrm__temperature__c;

				public String getNoodlecrm__temperature__c () {
					return this.noodlecrm__temperature__c;
				}
				
			    public String noodlecrm__competitor_university_2__c;

				public String getNoodlecrm__competitor_university_2__c () {
					return this.noodlecrm__competitor_university_2__c;
				}
				
			    public String noodlecrm__course_requirements__c;

				public String getNoodlecrm__course_requirements__c () {
					return this.noodlecrm__course_requirements__c;
				}
				
			    public String fiscal;

				public String getFiscal () {
					return this.fiscal;
				}
				
			    public String noodlecrm__last_name__c;

				public String getNoodlecrm__last_name__c () {
					return this.noodlecrm__last_name__c;
				}
				
			    public String noodlecrm__sop__c;

				public String getNoodlecrm__sop__c () {
					return this.noodlecrm__sop__c;
				}
				
			    public String noodlecrm__competitor_university_1__c;

				public String getNoodlecrm__competitor_university_1__c () {
					return this.noodlecrm__competitor_university_1__c;
				}
				
			    public java.util.Date noodlecrm__bad_lead_date_time__c;

				public java.util.Date getNoodlecrm__bad_lead_date_time__c () {
					return this.noodlecrm__bad_lead_date_time__c;
				}
				
			    public String nextstep;

				public String getNextstep () {
					return this.nextstep;
				}
				
			    public Boolean noodlecrm__signed_up_for_webinar__c;

				public Boolean getNoodlecrm__signed_up_for_webinar__c () {
					return this.noodlecrm__signed_up_for_webinar__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__preferred_phone__c;

				public String getNoodlecrm__preferred_phone__c () {
					return this.noodlecrm__preferred_phone__c;
				}
				
			    public String noodlecrm__program3__c;

				public String getNoodlecrm__program3__c () {
					return this.noodlecrm__program3__c;
				}
				
			    public Double noodlecrm__missed_attempt_counter2__c;

				public Double getNoodlecrm__missed_attempt_counter2__c () {
					return this.noodlecrm__missed_attempt_counter2__c;
				}
				
			    public String noodlecrm__university_app_crmid__c;

				public String getNoodlecrm__university_app_crmid__c () {
					return this.noodlecrm__university_app_crmid__c;
				}
				
			    public java.util.Date noodlecrm__last_call_date_time__c;

				public java.util.Date getNoodlecrm__last_call_date_time__c () {
					return this.noodlecrm__last_call_date_time__c;
				}
				
			    public String noodlecrm__program2__r__noodlecrm__external_id__c;

				public String getNoodlecrm__program2__r__noodlecrm__external_id__c () {
					return this.noodlecrm__program2__r__noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__program3__r__noodlecrm__external_id__c;

				public String getNoodlecrm__program3__r__noodlecrm__external_id__c () {
					return this.noodlecrm__program3__r__noodlecrm__external_id__c;
				}
				
			    public java.util.Date noodlecrm__app_start_date_time__c;

				public java.util.Date getNoodlecrm__app_start_date_time__c () {
					return this.noodlecrm__app_start_date_time__c;
				}
				
			    public Double noodlecrm__historical_call_count__c;

				public Double getNoodlecrm__historical_call_count__c () {
					return this.noodlecrm__historical_call_count__c;
				}
				
			    public String noodlecrm__revised_start_cohort__c;

				public String getNoodlecrm__revised_start_cohort__c () {
					return this.noodlecrm__revised_start_cohort__c;
				}
				
			    public java.util.Date noodlecrm__app_enrolled_date_time__c;

				public java.util.Date getNoodlecrm__app_enrolled_date_time__c () {
					return this.noodlecrm__app_enrolled_date_time__c;
				}
				
			    public String noodlecrm__external_id_unique__c;

				public String getNoodlecrm__external_id_unique__c () {
					return this.noodlecrm__external_id_unique__c;
				}
				
			    public String noodlecrm__preferred_email__c;

				public String getNoodlecrm__preferred_email__c () {
					return this.noodlecrm__preferred_email__c;
				}
				
			    public String noodlecrm__student_contact__c;

				public String getNoodlecrm__student_contact__c () {
					return this.noodlecrm__student_contact__c;
				}
				
			    public java.util.Date noodlecrm__decision_date_time__c;

				public java.util.Date getNoodlecrm__decision_date_time__c () {
					return this.noodlecrm__decision_date_time__c;
				}
				
			    public String noodlecrm__final_start_cohort__c;

				public String getNoodlecrm__final_start_cohort__c () {
					return this.noodlecrm__final_start_cohort__c;
				}
				
			    public java.util.Date noodlecrm__app_complete_date_time__c;

				public java.util.Date getNoodlecrm__app_complete_date_time__c () {
					return this.noodlecrm__app_complete_date_time__c;
				}
				
			    public java.util.Date noodlecrm__app_submit_date_time__c;

				public java.util.Date getNoodlecrm__app_submit_date_time__c () {
					return this.noodlecrm__app_submit_date_time__c;
				}
				
			    public String noodlecrm__application_indicated_start_cohort__c;

				public String getNoodlecrm__application_indicated_start_cohort__c () {
					return this.noodlecrm__application_indicated_start_cohort__c;
				}
				
			    public String noodlecrm__engagement_status__c;

				public String getNoodlecrm__engagement_status__c () {
					return this.noodlecrm__engagement_status__c;
				}
				
			    public Boolean noodlecrm__is_test_record__c;

				public Boolean getNoodlecrm__is_test_record__c () {
					return this.noodlecrm__is_test_record__c;
				}
				
			    public String noodlecrm__first_inquiry_action__c;

				public String getNoodlecrm__first_inquiry_action__c () {
					return this.noodlecrm__first_inquiry_action__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.noodlecrm__university_scholarship_details__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hasopportunitylineitem = null;
           				} else {
           			    	this.hasopportunitylineitem = dis.readBoolean();
           				}
					
					this.noodlecrm__final_start_date__c = readDate(dis);
					
					this.noodlecrm__years_experience__c = readString(dis);
					
					this.noodlecrm__delivery_status_idata__c = readString(dis);
					
					this.noodlecrm__decision_date__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__application_drafted__c = null;
           				} else {
           			    	this.noodlecrm__application_drafted__c = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_attempts_pre_mc__c = null;
           				} else {
           			    	this.noodlecrm__total_attempts_pre_mc__c = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_emails__c = null;
           				} else {
           			    	this.noodlecrm__total_emails__c = dis.readDouble();
           				}
					
					this.noodlecrm__scholarships__c = readString(dis);
					
					this.noodlecrm__url__c = readString(dis);
					
					this.noodlecrm__current_start_date__c = readDate(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__will_not_complete_reason__c = readString(dis);
					
					this.noodlecrm__defer_reason__c = readString(dis);
					
					this.noodlecrm__lead_stated_gpa__c = readString(dis);
					
					this.noodlecrm__degree_verification__c = readString(dis);
					
					this.noodlecrm__app_item_received_date_time__c = readDate(dis);
					
					this.noodlecrm__phone__c = readString(dis);
					
					this.noodlecrm__decline_reason_details__c = readString(dis);
					
					this.noodlecrm__will_not_apply_reason__c = readString(dis);
					
					this.forecastcategoryname = readString(dis);
					
					this.noodlecrm__optional_statement__c = readString(dis);
					
					this.noodlecrm__maincompetitors__c = readString(dis);
					
					this.noodlecrm__partnerships__c = readString(dis);
					
					this.noodlecrm__bad_lead_reason__c = readString(dis);
					
					this.noodlecrm__application_last_login__c = readDate(dis);
					
					this.noodlecrm__out_of_pocket__c = readString(dis);
					
					this.noodlecrm__enrollment_status__c = readString(dis);
					
					this.noodlecrm__competitor_details__c = readString(dis);
					
					this.noodlecrm__last_attended_zoom_date_time__c = readDate(dis);
					
					this.noodlecrm__last_attended_webinar_date_time__c = readDate(dis);
					
					this.noodlecrm__program2__c = readString(dis);
					
					this.noodlecrm__enrollment_status_date_time__c = readDate(dis);
					
					this.noodlecrm__noodle_crm_id__c = readString(dis);
					
					this.closedate = readDate(dis);
					
					this.noodlecrm__application_indicated_start_date__c = readDate(dis);
					
					this.noodlecrm__university__c = readString(dis);
					
					this.noodlecrm__military__c = readString(dis);
					
					this.noodlecrm__decline_reason__c = readString(dis);
					
					this.noodlecrm__universitycrmid__c = readString(dis);
					
					this.noodlecrm__resume__c = readString(dis);
					
					this.noodlecrm__meets_program_criteria__c = readString(dis);
					
					this.noodlecrm__best_time_to_call__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_texts__c = null;
           				} else {
           			    	this.noodlecrm__total_texts__c = dis.readDouble();
           				}
					
					this.noodlecrm__application_program_global__c = readString(dis);
					
					this.accountid = readString(dis);
					
					this.noodlecrm__external_id_populated__c = readString(dis);
					
					this.noodlecrm__utm_source__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_inquiries__c = null;
           				} else {
           			    	this.noodlecrm__total_inquiries__c = dis.readDouble();
           				}
					
					this.noodlecrm__first_call_date_time__c = readDate(dis);
					
					this.noodlecrm__lead_external_id__c = readString(dis);
					
					this.noodlecrm__webinar_signup_date_time__c = readDate(dis);
					
					this.lastvieweddate = readDate(dis);
					
					this.noodlecrm__city__c = readString(dis);
					
					this.noodlecrm__application_decision__c = readString(dis);
					
					this.noodlecrm__university_email__c = readString(dis);
					
					this.noodlecrm__responsiveness__c = readString(dis);
					
					this.noodlecrm__official_cohort__c = readString(dis);
					
					this.stagename = readString(dis);
					
					this.noodlecrm__ea_projected_submit_date__c = readDate(dis);
					
					this.noodlecrm__deal_stage__c = readDate(dis);
					
					this.noodlecrm__first_touch_source__c = readString(dis);
					
					this.noodlecrm__international_language_test__c = readString(dis);
					
					this.noodlecrm__utm_content__c = readString(dis);
					
					this.noodlecrm__app_start_date__c = readDate(dis);
					
					this.campaignid = readString(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hasoverduetask = null;
           				} else {
           			    	this.hasoverduetask = dis.readBoolean();
           				}
					
					this.noodlecrm__opportunity_owner__c = readString(dis);
					
					this.noodlecrm__missed_attempt_date_time__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iswon = null;
           				} else {
           			    	this.iswon = dis.readBoolean();
           				}
					
					this.noodlecrm__application_submit_date__c = readDate(dis);
					
					this.noodlecrm__associated_contact__c = readString(dis);
					
					this.noodlecrm__expected_date_to_meet_requirement__c = readDate(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__last_activitydate_time__c = readDate(dis);
					
					this.noodlecrm__missed_attempt_counter__c = readString(dis);
					
					this.noodlecrm__program__c = readString(dis);
					
					this.noodlecrm__licensure__c = readString(dis);
					
						this.fiscalquarter = readInteger(dis);
					
					this.ownerid = readString(dis);
					
					this.noodlecrm__utm_medium__c = readString(dis);
					
					this.noodlecrm__last_call_date__c = readDate(dis);
					
					this.noodlecrm__opportunity_external_id__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.noodlecrm__follow_up_date__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__attended_webinar__c = null;
           				} else {
           			    	this.noodlecrm__attended_webinar__c = dis.readBoolean();
           				}
					
					this.noodlecrm__professional_experience__c = readString(dis);
					
					this.noodlecrm__lor_2__c = readString(dis);
					
					this.noodlecrm__supplemental__c = readString(dis);
					
					this.lastmodifiedbyid = readString(dis);
					
					this.noodlecrm__mta_interaction_record__c = readString(dis);
					
					this.noodlecrm__meaningful_conversation_date_time__c = readDate(dis);
					
					this.noodlecrm__applying_to_a_competitor__c = readString(dis);
					
					this.noodlecrm__lead_stated_professional_status__c = readString(dis);
					
					this.noodlecrm__street__c = readString(dis);
					
					this.noodlecrm__lor_1__c = readString(dis);
					
					this.noodlecrm__scholarship_applied__c = readString(dis);
					
					this.noodlecrm__ea_indicated_start_term__c = readString(dis);
					
					this.noodlecrm__state_region__c = readString(dis);
					
					this.noodlecrm__registered__c = readDate(dis);
					
					this.noodlecrm__employer_benefits__c = readString(dis);
					
					this.noodlecrm__utm_campaign__c = readString(dis);
					
					this.lastactivitydate = readDate(dis);
					
					this.noodlecrm__will_not_apply_reason_other__c = readString(dis);
					
					this.noodlecrm__app_deposit_date_time__c = readDate(dis);
					
					this.noodlecrm__application_status__c = readString(dis);
					
					this.noodlecrm__defer_reason_detail__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hasopenactivity = null;
           				} else {
           			    	this.hasopenactivity = dis.readBoolean();
           				}
					
					this.noodlecrm__last_activity_type__c = readString(dis);
					
					this.noodlecrm__student_loans__c = readString(dis);
					
					this.noodlecrm__deliveryinstallationstatus__c = readString(dis);
					
					this.noodlecrm__trackingnumber__c = readString(dis);
					
					this.noodlecrm__time_zone__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__do_not_call__c = null;
           				} else {
           			    	this.noodlecrm__do_not_call__c = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.probability = null;
           				} else {
           			    	this.probability = dis.readDouble();
           				}
					
					this.noodlecrm__tran_3__c = readString(dis);
					
					this.noodlecrm__delivery_timestamp_idata__c = readDate(dis);
					
					this.noodlecrm__last_contacting_state__c = readString(dis);
					
					this.noodlecrm__test_requirements__c = readString(dis);
					
					this.noodlecrm__decision_type__c = readString(dis);
					
					this.noodlecrm__admit_cohort__c = readString(dis);
					
					this.noodlecrm__tran_2__c = readString(dis);
					
					this.noodlecrm__email__c = readString(dis);
					
					this.noodlecrm__university_scholarship_date__c = readDate(dis);
					
					this.noodlecrm__revised_start_date__c = readDate(dis);
					
					this.createddate = readDate(dis);
					
					this.noodlecrm__submit_cohort__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isclosed = null;
           				} else {
           			    	this.isclosed = dis.readBoolean();
           				}
					
					this.noodlecrm__condition_type__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__opportunity_status__c = null;
           				} else {
           			    	this.noodlecrm__opportunity_status__c = dis.readBoolean();
           				}
					
					this.noodlecrm__class_schedule_type__c = readString(dis);
					
					this.noodlecrm__lead_stated_licensure__c = readString(dis);
					
					this.noodlecrm__student__c = readString(dis);
					
					this.noodlecrm__university_application_id__c = readString(dis);
					
					this.leadsource = readString(dis);
					
					this.noodlecrm__updated__c = readDate(dis);
					
					this.noodlecrm__utm_term__c = readString(dis);
					
					this.noodlecrm__tran_1__c = readString(dis);
					
					this.noodlecrm__google_analytics_id__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readDouble();
           				}
					
					this.noodlecrm__crm_id__c = readString(dis);
					
					this.noodlecrm__lead_stated_taken_course__c = readString(dis);
					
					this.noodlecrm__ip_address__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_calls__c = null;
           				} else {
           			    	this.noodlecrm__total_calls__c = dis.readDouble();
           				}
					
					this.noodlecrm__university_id_number__c = readString(dis);
					
					this.noodlecrm__decision__c = readString(dis);
					
					this.noodlecrm__test_status_gre__c = readString(dis);
					
					this.forecastcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__attended_zoom__c = null;
           				} else {
           			    	this.noodlecrm__attended_zoom__c = dis.readBoolean();
           				}
					
					this.noodlecrm__fafsa__c = readString(dis);
					
					this.noodlecrm__level_of_education__c = readString(dis);
					
					this.noodlecrm__ea_projected_deposit_date__c = readDate(dis);
					
					this.noodlecrm__currentgenerators__c = readString(dis);
					
					this.noodlecrm__defer_date__c = readDate(dis);
					
					this.noodlecrm__lead_stated_taken_course_req__c = readString(dis);
					
					this.noodlecrm__follow_up_reason__c = readString(dis);
					
					this.noodlecrm__will_not_apply_date__c = readDate(dis);
					
					this.noodlecrm__trying_attempt_date__c = readDate(dis);
					
					this.noodlecrm__gpa__c = readString(dis);
					
					this.noodlecrm__fa_comments__c = readString(dis);
					
					this.createdbyid = readString(dis);
					
					this.type = readString(dis);
					
					this.noodlecrm__first_name__c = readString(dis);
					
					this.pricebook2id = readString(dis);
					
					this.contactid = readString(dis);
					
					this.noodlecrm__contact_type__c = readString(dis);
					
					this.noodlecrm__conversion_date__c = readDate(dis);
					
					this.noodlecrm__ordernumber__c = readString(dis);
					
						this.fiscalyear = readInteger(dis);
					
					this.noodlecrm__defer_start_date__c = readDate(dis);
					
					this.noodlecrm__postalcode__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__re_open__c = null;
           				} else {
           			    	this.noodlecrm__re_open__c = dis.readBoolean();
           				}
					
					this.noodlecrm__applying_to_a_competitor_type__c = readString(dis);
					
					this.noodlecrm__app_complete_date__c = readDate(dis);
					
					this.noodlecrm__country__c = readString(dis);
					
					this.description = readString(dis);
					
					this.noodlecrm__application_program__c = readString(dis);
					
					this.noodlecrm__decline_date__c = readDate(dis);
					
					this.lastreferenceddate = readDate(dis);
					
					this.noodlecrm__temperature__c = readString(dis);
					
					this.noodlecrm__competitor_university_2__c = readString(dis);
					
					this.noodlecrm__course_requirements__c = readString(dis);
					
					this.fiscal = readString(dis);
					
					this.noodlecrm__last_name__c = readString(dis);
					
					this.noodlecrm__sop__c = readString(dis);
					
					this.noodlecrm__competitor_university_1__c = readString(dis);
					
					this.noodlecrm__bad_lead_date_time__c = readDate(dis);
					
					this.nextstep = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__signed_up_for_webinar__c = null;
           				} else {
           			    	this.noodlecrm__signed_up_for_webinar__c = dis.readBoolean();
           				}
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__preferred_phone__c = readString(dis);
					
					this.noodlecrm__program3__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__missed_attempt_counter2__c = null;
           				} else {
           			    	this.noodlecrm__missed_attempt_counter2__c = dis.readDouble();
           				}
					
					this.noodlecrm__university_app_crmid__c = readString(dis);
					
					this.noodlecrm__last_call_date_time__c = readDate(dis);
					
					this.noodlecrm__program2__r__noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__program3__r__noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__app_start_date_time__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__historical_call_count__c = null;
           				} else {
           			    	this.noodlecrm__historical_call_count__c = dis.readDouble();
           				}
					
					this.noodlecrm__revised_start_cohort__c = readString(dis);
					
					this.noodlecrm__app_enrolled_date_time__c = readDate(dis);
					
					this.noodlecrm__external_id_unique__c = readString(dis);
					
					this.noodlecrm__preferred_email__c = readString(dis);
					
					this.noodlecrm__student_contact__c = readString(dis);
					
					this.noodlecrm__decision_date_time__c = readDate(dis);
					
					this.noodlecrm__final_start_cohort__c = readString(dis);
					
					this.noodlecrm__app_complete_date_time__c = readDate(dis);
					
					this.noodlecrm__app_submit_date_time__c = readDate(dis);
					
					this.noodlecrm__application_indicated_start_cohort__c = readString(dis);
					
					this.noodlecrm__engagement_status__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__is_test_record__c = null;
           				} else {
           			    	this.noodlecrm__is_test_record__c = dis.readBoolean();
           				}
					
					this.noodlecrm__first_inquiry_action__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.noodlecrm__university_scholarship_details__c,dos);
					
					// Boolean
				
						if(this.hasopportunitylineitem == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.hasopportunitylineitem);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__final_start_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__years_experience__c,dos);
					
					// String
				
						writeString(this.noodlecrm__delivery_status_idata__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__decision_date__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__application_drafted__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__application_drafted__c);
		            	}
					
					// Double
				
						if(this.noodlecrm__total_attempts_pre_mc__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_attempts_pre_mc__c);
		            	}
					
					// Double
				
						if(this.noodlecrm__total_emails__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_emails__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__scholarships__c,dos);
					
					// String
				
						writeString(this.noodlecrm__url__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__current_start_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__will_not_complete_reason__c,dos);
					
					// String
				
						writeString(this.noodlecrm__defer_reason__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_gpa__c,dos);
					
					// String
				
						writeString(this.noodlecrm__degree_verification__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_item_received_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__phone__c,dos);
					
					// String
				
						writeString(this.noodlecrm__decline_reason_details__c,dos);
					
					// String
				
						writeString(this.noodlecrm__will_not_apply_reason__c,dos);
					
					// String
				
						writeString(this.forecastcategoryname,dos);
					
					// String
				
						writeString(this.noodlecrm__optional_statement__c,dos);
					
					// String
				
						writeString(this.noodlecrm__maincompetitors__c,dos);
					
					// String
				
						writeString(this.noodlecrm__partnerships__c,dos);
					
					// String
				
						writeString(this.noodlecrm__bad_lead_reason__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__application_last_login__c,dos);
					
					// String
				
						writeString(this.noodlecrm__out_of_pocket__c,dos);
					
					// String
				
						writeString(this.noodlecrm__enrollment_status__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_details__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_attended_zoom_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_attended_webinar_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program2__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__enrollment_status_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__noodle_crm_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.closedate,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__application_indicated_start_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university__c,dos);
					
					// String
				
						writeString(this.noodlecrm__military__c,dos);
					
					// String
				
						writeString(this.noodlecrm__decline_reason__c,dos);
					
					// String
				
						writeString(this.noodlecrm__universitycrmid__c,dos);
					
					// String
				
						writeString(this.noodlecrm__resume__c,dos);
					
					// String
				
						writeString(this.noodlecrm__meets_program_criteria__c,dos);
					
					// String
				
						writeString(this.noodlecrm__best_time_to_call__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_texts__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_texts__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__application_program_global__c,dos);
					
					// String
				
						writeString(this.accountid,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id_populated__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_source__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_inquiries__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_inquiries__c);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__first_call_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_external_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__webinar_signup_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastvieweddate,dos);
					
					// String
				
						writeString(this.noodlecrm__city__c,dos);
					
					// String
				
						writeString(this.noodlecrm__application_decision__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university_email__c,dos);
					
					// String
				
						writeString(this.noodlecrm__responsiveness__c,dos);
					
					// String
				
						writeString(this.noodlecrm__official_cohort__c,dos);
					
					// String
				
						writeString(this.stagename,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__ea_projected_submit_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__deal_stage__c,dos);
					
					// String
				
						writeString(this.noodlecrm__first_touch_source__c,dos);
					
					// String
				
						writeString(this.noodlecrm__international_language_test__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_content__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_start_date__c,dos);
					
					// String
				
						writeString(this.campaignid,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Boolean
				
						if(this.hasoverduetask == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.hasoverduetask);
		            	}
					
					// String
				
						writeString(this.noodlecrm__opportunity_owner__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__missed_attempt_date_time__c,dos);
					
					// Boolean
				
						if(this.iswon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iswon);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__application_submit_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__associated_contact__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__expected_date_to_meet_requirement__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_activitydate_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__missed_attempt_counter__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program__c,dos);
					
					// String
				
						writeString(this.noodlecrm__licensure__c,dos);
					
					// Integer
				
						writeInteger(this.fiscalquarter,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_medium__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_call_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__opportunity_external_id__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__follow_up_date__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__attended_webinar__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__attended_webinar__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__professional_experience__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lor_2__c,dos);
					
					// String
				
						writeString(this.noodlecrm__supplemental__c,dos);
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.noodlecrm__mta_interaction_record__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__meaningful_conversation_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__applying_to_a_competitor__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_professional_status__c,dos);
					
					// String
				
						writeString(this.noodlecrm__street__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lor_1__c,dos);
					
					// String
				
						writeString(this.noodlecrm__scholarship_applied__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_indicated_start_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__state_region__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__registered__c,dos);
					
					// String
				
						writeString(this.noodlecrm__employer_benefits__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_campaign__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastactivitydate,dos);
					
					// String
				
						writeString(this.noodlecrm__will_not_apply_reason_other__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_deposit_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__application_status__c,dos);
					
					// String
				
						writeString(this.noodlecrm__defer_reason_detail__c,dos);
					
					// Boolean
				
						if(this.hasopenactivity == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.hasopenactivity);
		            	}
					
					// String
				
						writeString(this.noodlecrm__last_activity_type__c,dos);
					
					// String
				
						writeString(this.noodlecrm__student_loans__c,dos);
					
					// String
				
						writeString(this.noodlecrm__deliveryinstallationstatus__c,dos);
					
					// String
				
						writeString(this.noodlecrm__trackingnumber__c,dos);
					
					// String
				
						writeString(this.noodlecrm__time_zone__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__do_not_call__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__do_not_call__c);
		            	}
					
					// Double
				
						if(this.probability == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.probability);
		            	}
					
					// String
				
						writeString(this.noodlecrm__tran_3__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__delivery_timestamp_idata__c,dos);
					
					// String
				
						writeString(this.noodlecrm__last_contacting_state__c,dos);
					
					// String
				
						writeString(this.noodlecrm__test_requirements__c,dos);
					
					// String
				
						writeString(this.noodlecrm__decision_type__c,dos);
					
					// String
				
						writeString(this.noodlecrm__admit_cohort__c,dos);
					
					// String
				
						writeString(this.noodlecrm__tran_2__c,dos);
					
					// String
				
						writeString(this.noodlecrm__email__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__university_scholarship_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__revised_start_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.noodlecrm__submit_cohort__c,dos);
					
					// Boolean
				
						if(this.isclosed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isclosed);
		            	}
					
					// String
				
						writeString(this.noodlecrm__condition_type__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__opportunity_status__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__opportunity_status__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__class_schedule_type__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_licensure__c,dos);
					
					// String
				
						writeString(this.noodlecrm__student__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university_application_id__c,dos);
					
					// String
				
						writeString(this.leadsource,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__updated__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__tran_1__c,dos);
					
					// String
				
						writeString(this.noodlecrm__google_analytics_id__c,dos);
					
					// Double
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.amount);
		            	}
					
					// String
				
						writeString(this.noodlecrm__crm_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_taken_course__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ip_address__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_calls__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_calls__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__university_id_number__c,dos);
					
					// String
				
						writeString(this.noodlecrm__decision__c,dos);
					
					// String
				
						writeString(this.noodlecrm__test_status_gre__c,dos);
					
					// String
				
						writeString(this.forecastcategory,dos);
					
					// Boolean
				
						if(this.noodlecrm__attended_zoom__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__attended_zoom__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__fafsa__c,dos);
					
					// String
				
						writeString(this.noodlecrm__level_of_education__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__ea_projected_deposit_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__currentgenerators__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__defer_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_taken_course_req__c,dos);
					
					// String
				
						writeString(this.noodlecrm__follow_up_reason__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__will_not_apply_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__trying_attempt_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__gpa__c,dos);
					
					// String
				
						writeString(this.noodlecrm__fa_comments__c,dos);
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.noodlecrm__first_name__c,dos);
					
					// String
				
						writeString(this.pricebook2id,dos);
					
					// String
				
						writeString(this.contactid,dos);
					
					// String
				
						writeString(this.noodlecrm__contact_type__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__conversion_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ordernumber__c,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__defer_start_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__postalcode__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__re_open__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__re_open__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__applying_to_a_competitor_type__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_complete_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__country__c,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.noodlecrm__application_program__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__decline_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastreferenceddate,dos);
					
					// String
				
						writeString(this.noodlecrm__temperature__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_university_2__c,dos);
					
					// String
				
						writeString(this.noodlecrm__course_requirements__c,dos);
					
					// String
				
						writeString(this.fiscal,dos);
					
					// String
				
						writeString(this.noodlecrm__last_name__c,dos);
					
					// String
				
						writeString(this.noodlecrm__sop__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_university_1__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__bad_lead_date_time__c,dos);
					
					// String
				
						writeString(this.nextstep,dos);
					
					// Boolean
				
						if(this.noodlecrm__signed_up_for_webinar__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__signed_up_for_webinar__c);
		            	}
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__preferred_phone__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program3__c,dos);
					
					// Double
				
						if(this.noodlecrm__missed_attempt_counter2__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__missed_attempt_counter2__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__university_app_crmid__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_call_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program2__r__noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program3__r__noodlecrm__external_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_start_date_time__c,dos);
					
					// Double
				
						if(this.noodlecrm__historical_call_count__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__historical_call_count__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__revised_start_cohort__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_enrolled_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id_unique__c,dos);
					
					// String
				
						writeString(this.noodlecrm__preferred_email__c,dos);
					
					// String
				
						writeString(this.noodlecrm__student_contact__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__decision_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__final_start_cohort__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_complete_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_submit_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__application_indicated_start_cohort__c,dos);
					
					// String
				
						writeString(this.noodlecrm__engagement_status__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__is_test_record__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__is_test_record__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__first_inquiry_action__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("noodlecrm__university_scholarship_details__c="+noodlecrm__university_scholarship_details__c);
		sb.append(",hasopportunitylineitem="+String.valueOf(hasopportunitylineitem));
		sb.append(",noodlecrm__final_start_date__c="+String.valueOf(noodlecrm__final_start_date__c));
		sb.append(",noodlecrm__years_experience__c="+noodlecrm__years_experience__c);
		sb.append(",noodlecrm__delivery_status_idata__c="+noodlecrm__delivery_status_idata__c);
		sb.append(",noodlecrm__decision_date__c="+String.valueOf(noodlecrm__decision_date__c));
		sb.append(",noodlecrm__application_drafted__c="+String.valueOf(noodlecrm__application_drafted__c));
		sb.append(",noodlecrm__total_attempts_pre_mc__c="+String.valueOf(noodlecrm__total_attempts_pre_mc__c));
		sb.append(",noodlecrm__total_emails__c="+String.valueOf(noodlecrm__total_emails__c));
		sb.append(",noodlecrm__scholarships__c="+noodlecrm__scholarships__c);
		sb.append(",noodlecrm__url__c="+noodlecrm__url__c);
		sb.append(",noodlecrm__current_start_date__c="+String.valueOf(noodlecrm__current_start_date__c));
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",noodlecrm__will_not_complete_reason__c="+noodlecrm__will_not_complete_reason__c);
		sb.append(",noodlecrm__defer_reason__c="+noodlecrm__defer_reason__c);
		sb.append(",noodlecrm__lead_stated_gpa__c="+noodlecrm__lead_stated_gpa__c);
		sb.append(",noodlecrm__degree_verification__c="+noodlecrm__degree_verification__c);
		sb.append(",noodlecrm__app_item_received_date_time__c="+String.valueOf(noodlecrm__app_item_received_date_time__c));
		sb.append(",noodlecrm__phone__c="+noodlecrm__phone__c);
		sb.append(",noodlecrm__decline_reason_details__c="+noodlecrm__decline_reason_details__c);
		sb.append(",noodlecrm__will_not_apply_reason__c="+noodlecrm__will_not_apply_reason__c);
		sb.append(",forecastcategoryname="+forecastcategoryname);
		sb.append(",noodlecrm__optional_statement__c="+noodlecrm__optional_statement__c);
		sb.append(",noodlecrm__maincompetitors__c="+noodlecrm__maincompetitors__c);
		sb.append(",noodlecrm__partnerships__c="+noodlecrm__partnerships__c);
		sb.append(",noodlecrm__bad_lead_reason__c="+noodlecrm__bad_lead_reason__c);
		sb.append(",noodlecrm__application_last_login__c="+String.valueOf(noodlecrm__application_last_login__c));
		sb.append(",noodlecrm__out_of_pocket__c="+noodlecrm__out_of_pocket__c);
		sb.append(",noodlecrm__enrollment_status__c="+noodlecrm__enrollment_status__c);
		sb.append(",noodlecrm__competitor_details__c="+noodlecrm__competitor_details__c);
		sb.append(",noodlecrm__last_attended_zoom_date_time__c="+String.valueOf(noodlecrm__last_attended_zoom_date_time__c));
		sb.append(",noodlecrm__last_attended_webinar_date_time__c="+String.valueOf(noodlecrm__last_attended_webinar_date_time__c));
		sb.append(",noodlecrm__program2__c="+noodlecrm__program2__c);
		sb.append(",noodlecrm__enrollment_status_date_time__c="+String.valueOf(noodlecrm__enrollment_status_date_time__c));
		sb.append(",noodlecrm__noodle_crm_id__c="+noodlecrm__noodle_crm_id__c);
		sb.append(",closedate="+String.valueOf(closedate));
		sb.append(",noodlecrm__application_indicated_start_date__c="+String.valueOf(noodlecrm__application_indicated_start_date__c));
		sb.append(",noodlecrm__university__c="+noodlecrm__university__c);
		sb.append(",noodlecrm__military__c="+noodlecrm__military__c);
		sb.append(",noodlecrm__decline_reason__c="+noodlecrm__decline_reason__c);
		sb.append(",noodlecrm__universitycrmid__c="+noodlecrm__universitycrmid__c);
		sb.append(",noodlecrm__resume__c="+noodlecrm__resume__c);
		sb.append(",noodlecrm__meets_program_criteria__c="+noodlecrm__meets_program_criteria__c);
		sb.append(",noodlecrm__best_time_to_call__c="+noodlecrm__best_time_to_call__c);
		sb.append(",noodlecrm__total_texts__c="+String.valueOf(noodlecrm__total_texts__c));
		sb.append(",noodlecrm__application_program_global__c="+noodlecrm__application_program_global__c);
		sb.append(",accountid="+accountid);
		sb.append(",noodlecrm__external_id_populated__c="+noodlecrm__external_id_populated__c);
		sb.append(",noodlecrm__utm_source__c="+noodlecrm__utm_source__c);
		sb.append(",noodlecrm__total_inquiries__c="+String.valueOf(noodlecrm__total_inquiries__c));
		sb.append(",noodlecrm__first_call_date_time__c="+String.valueOf(noodlecrm__first_call_date_time__c));
		sb.append(",noodlecrm__lead_external_id__c="+noodlecrm__lead_external_id__c);
		sb.append(",noodlecrm__webinar_signup_date_time__c="+String.valueOf(noodlecrm__webinar_signup_date_time__c));
		sb.append(",lastvieweddate="+String.valueOf(lastvieweddate));
		sb.append(",noodlecrm__city__c="+noodlecrm__city__c);
		sb.append(",noodlecrm__application_decision__c="+noodlecrm__application_decision__c);
		sb.append(",noodlecrm__university_email__c="+noodlecrm__university_email__c);
		sb.append(",noodlecrm__responsiveness__c="+noodlecrm__responsiveness__c);
		sb.append(",noodlecrm__official_cohort__c="+noodlecrm__official_cohort__c);
		sb.append(",stagename="+stagename);
		sb.append(",noodlecrm__ea_projected_submit_date__c="+String.valueOf(noodlecrm__ea_projected_submit_date__c));
		sb.append(",noodlecrm__deal_stage__c="+String.valueOf(noodlecrm__deal_stage__c));
		sb.append(",noodlecrm__first_touch_source__c="+noodlecrm__first_touch_source__c);
		sb.append(",noodlecrm__international_language_test__c="+noodlecrm__international_language_test__c);
		sb.append(",noodlecrm__utm_content__c="+noodlecrm__utm_content__c);
		sb.append(",noodlecrm__app_start_date__c="+String.valueOf(noodlecrm__app_start_date__c));
		sb.append(",campaignid="+campaignid);
		sb.append(",name="+name);
		sb.append(",hasoverduetask="+String.valueOf(hasoverduetask));
		sb.append(",noodlecrm__opportunity_owner__c="+noodlecrm__opportunity_owner__c);
		sb.append(",noodlecrm__missed_attempt_date_time__c="+String.valueOf(noodlecrm__missed_attempt_date_time__c));
		sb.append(",iswon="+String.valueOf(iswon));
		sb.append(",noodlecrm__application_submit_date__c="+String.valueOf(noodlecrm__application_submit_date__c));
		sb.append(",noodlecrm__associated_contact__c="+noodlecrm__associated_contact__c);
		sb.append(",noodlecrm__expected_date_to_meet_requirement__c="+String.valueOf(noodlecrm__expected_date_to_meet_requirement__c));
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__last_activitydate_time__c="+String.valueOf(noodlecrm__last_activitydate_time__c));
		sb.append(",noodlecrm__missed_attempt_counter__c="+noodlecrm__missed_attempt_counter__c);
		sb.append(",noodlecrm__program__c="+noodlecrm__program__c);
		sb.append(",noodlecrm__licensure__c="+noodlecrm__licensure__c);
		sb.append(",fiscalquarter="+String.valueOf(fiscalquarter));
		sb.append(",ownerid="+ownerid);
		sb.append(",noodlecrm__utm_medium__c="+noodlecrm__utm_medium__c);
		sb.append(",noodlecrm__last_call_date__c="+String.valueOf(noodlecrm__last_call_date__c));
		sb.append(",noodlecrm__opportunity_external_id__c="+noodlecrm__opportunity_external_id__c);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__follow_up_date__c="+String.valueOf(noodlecrm__follow_up_date__c));
		sb.append(",noodlecrm__attended_webinar__c="+String.valueOf(noodlecrm__attended_webinar__c));
		sb.append(",noodlecrm__professional_experience__c="+noodlecrm__professional_experience__c);
		sb.append(",noodlecrm__lor_2__c="+noodlecrm__lor_2__c);
		sb.append(",noodlecrm__supplemental__c="+noodlecrm__supplemental__c);
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",noodlecrm__mta_interaction_record__c="+noodlecrm__mta_interaction_record__c);
		sb.append(",noodlecrm__meaningful_conversation_date_time__c="+String.valueOf(noodlecrm__meaningful_conversation_date_time__c));
		sb.append(",noodlecrm__applying_to_a_competitor__c="+noodlecrm__applying_to_a_competitor__c);
		sb.append(",noodlecrm__lead_stated_professional_status__c="+noodlecrm__lead_stated_professional_status__c);
		sb.append(",noodlecrm__street__c="+noodlecrm__street__c);
		sb.append(",noodlecrm__lor_1__c="+noodlecrm__lor_1__c);
		sb.append(",noodlecrm__scholarship_applied__c="+noodlecrm__scholarship_applied__c);
		sb.append(",noodlecrm__ea_indicated_start_term__c="+noodlecrm__ea_indicated_start_term__c);
		sb.append(",noodlecrm__state_region__c="+noodlecrm__state_region__c);
		sb.append(",noodlecrm__registered__c="+String.valueOf(noodlecrm__registered__c));
		sb.append(",noodlecrm__employer_benefits__c="+noodlecrm__employer_benefits__c);
		sb.append(",noodlecrm__utm_campaign__c="+noodlecrm__utm_campaign__c);
		sb.append(",lastactivitydate="+String.valueOf(lastactivitydate));
		sb.append(",noodlecrm__will_not_apply_reason_other__c="+noodlecrm__will_not_apply_reason_other__c);
		sb.append(",noodlecrm__app_deposit_date_time__c="+String.valueOf(noodlecrm__app_deposit_date_time__c));
		sb.append(",noodlecrm__application_status__c="+noodlecrm__application_status__c);
		sb.append(",noodlecrm__defer_reason_detail__c="+noodlecrm__defer_reason_detail__c);
		sb.append(",hasopenactivity="+String.valueOf(hasopenactivity));
		sb.append(",noodlecrm__last_activity_type__c="+noodlecrm__last_activity_type__c);
		sb.append(",noodlecrm__student_loans__c="+noodlecrm__student_loans__c);
		sb.append(",noodlecrm__deliveryinstallationstatus__c="+noodlecrm__deliveryinstallationstatus__c);
		sb.append(",noodlecrm__trackingnumber__c="+noodlecrm__trackingnumber__c);
		sb.append(",noodlecrm__time_zone__c="+noodlecrm__time_zone__c);
		sb.append(",noodlecrm__do_not_call__c="+String.valueOf(noodlecrm__do_not_call__c));
		sb.append(",probability="+String.valueOf(probability));
		sb.append(",noodlecrm__tran_3__c="+noodlecrm__tran_3__c);
		sb.append(",noodlecrm__delivery_timestamp_idata__c="+String.valueOf(noodlecrm__delivery_timestamp_idata__c));
		sb.append(",noodlecrm__last_contacting_state__c="+noodlecrm__last_contacting_state__c);
		sb.append(",noodlecrm__test_requirements__c="+noodlecrm__test_requirements__c);
		sb.append(",noodlecrm__decision_type__c="+noodlecrm__decision_type__c);
		sb.append(",noodlecrm__admit_cohort__c="+noodlecrm__admit_cohort__c);
		sb.append(",noodlecrm__tran_2__c="+noodlecrm__tran_2__c);
		sb.append(",noodlecrm__email__c="+noodlecrm__email__c);
		sb.append(",noodlecrm__university_scholarship_date__c="+String.valueOf(noodlecrm__university_scholarship_date__c));
		sb.append(",noodlecrm__revised_start_date__c="+String.valueOf(noodlecrm__revised_start_date__c));
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",noodlecrm__submit_cohort__c="+noodlecrm__submit_cohort__c);
		sb.append(",isclosed="+String.valueOf(isclosed));
		sb.append(",noodlecrm__condition_type__c="+noodlecrm__condition_type__c);
		sb.append(",noodlecrm__opportunity_status__c="+String.valueOf(noodlecrm__opportunity_status__c));
		sb.append(",noodlecrm__class_schedule_type__c="+noodlecrm__class_schedule_type__c);
		sb.append(",noodlecrm__lead_stated_licensure__c="+noodlecrm__lead_stated_licensure__c);
		sb.append(",noodlecrm__student__c="+noodlecrm__student__c);
		sb.append(",noodlecrm__university_application_id__c="+noodlecrm__university_application_id__c);
		sb.append(",leadsource="+leadsource);
		sb.append(",noodlecrm__updated__c="+String.valueOf(noodlecrm__updated__c));
		sb.append(",noodlecrm__utm_term__c="+noodlecrm__utm_term__c);
		sb.append(",noodlecrm__tran_1__c="+noodlecrm__tran_1__c);
		sb.append(",noodlecrm__google_analytics_id__c="+noodlecrm__google_analytics_id__c);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",noodlecrm__crm_id__c="+noodlecrm__crm_id__c);
		sb.append(",noodlecrm__lead_stated_taken_course__c="+noodlecrm__lead_stated_taken_course__c);
		sb.append(",noodlecrm__ip_address__c="+noodlecrm__ip_address__c);
		sb.append(",noodlecrm__total_calls__c="+String.valueOf(noodlecrm__total_calls__c));
		sb.append(",noodlecrm__university_id_number__c="+noodlecrm__university_id_number__c);
		sb.append(",noodlecrm__decision__c="+noodlecrm__decision__c);
		sb.append(",noodlecrm__test_status_gre__c="+noodlecrm__test_status_gre__c);
		sb.append(",forecastcategory="+forecastcategory);
		sb.append(",noodlecrm__attended_zoom__c="+String.valueOf(noodlecrm__attended_zoom__c));
		sb.append(",noodlecrm__fafsa__c="+noodlecrm__fafsa__c);
		sb.append(",noodlecrm__level_of_education__c="+noodlecrm__level_of_education__c);
		sb.append(",noodlecrm__ea_projected_deposit_date__c="+String.valueOf(noodlecrm__ea_projected_deposit_date__c));
		sb.append(",noodlecrm__currentgenerators__c="+noodlecrm__currentgenerators__c);
		sb.append(",noodlecrm__defer_date__c="+String.valueOf(noodlecrm__defer_date__c));
		sb.append(",noodlecrm__lead_stated_taken_course_req__c="+noodlecrm__lead_stated_taken_course_req__c);
		sb.append(",noodlecrm__follow_up_reason__c="+noodlecrm__follow_up_reason__c);
		sb.append(",noodlecrm__will_not_apply_date__c="+String.valueOf(noodlecrm__will_not_apply_date__c));
		sb.append(",noodlecrm__trying_attempt_date__c="+String.valueOf(noodlecrm__trying_attempt_date__c));
		sb.append(",noodlecrm__gpa__c="+noodlecrm__gpa__c);
		sb.append(",noodlecrm__fa_comments__c="+noodlecrm__fa_comments__c);
		sb.append(",createdbyid="+createdbyid);
		sb.append(",type="+type);
		sb.append(",noodlecrm__first_name__c="+noodlecrm__first_name__c);
		sb.append(",pricebook2id="+pricebook2id);
		sb.append(",contactid="+contactid);
		sb.append(",noodlecrm__contact_type__c="+noodlecrm__contact_type__c);
		sb.append(",noodlecrm__conversion_date__c="+String.valueOf(noodlecrm__conversion_date__c));
		sb.append(",noodlecrm__ordernumber__c="+noodlecrm__ordernumber__c);
		sb.append(",fiscalyear="+String.valueOf(fiscalyear));
		sb.append(",noodlecrm__defer_start_date__c="+String.valueOf(noodlecrm__defer_start_date__c));
		sb.append(",noodlecrm__postalcode__c="+noodlecrm__postalcode__c);
		sb.append(",noodlecrm__re_open__c="+String.valueOf(noodlecrm__re_open__c));
		sb.append(",noodlecrm__applying_to_a_competitor_type__c="+noodlecrm__applying_to_a_competitor_type__c);
		sb.append(",noodlecrm__app_complete_date__c="+String.valueOf(noodlecrm__app_complete_date__c));
		sb.append(",noodlecrm__country__c="+noodlecrm__country__c);
		sb.append(",description="+description);
		sb.append(",noodlecrm__application_program__c="+noodlecrm__application_program__c);
		sb.append(",noodlecrm__decline_date__c="+String.valueOf(noodlecrm__decline_date__c));
		sb.append(",lastreferenceddate="+String.valueOf(lastreferenceddate));
		sb.append(",noodlecrm__temperature__c="+noodlecrm__temperature__c);
		sb.append(",noodlecrm__competitor_university_2__c="+noodlecrm__competitor_university_2__c);
		sb.append(",noodlecrm__course_requirements__c="+noodlecrm__course_requirements__c);
		sb.append(",fiscal="+fiscal);
		sb.append(",noodlecrm__last_name__c="+noodlecrm__last_name__c);
		sb.append(",noodlecrm__sop__c="+noodlecrm__sop__c);
		sb.append(",noodlecrm__competitor_university_1__c="+noodlecrm__competitor_university_1__c);
		sb.append(",noodlecrm__bad_lead_date_time__c="+String.valueOf(noodlecrm__bad_lead_date_time__c));
		sb.append(",nextstep="+nextstep);
		sb.append(",noodlecrm__signed_up_for_webinar__c="+String.valueOf(noodlecrm__signed_up_for_webinar__c));
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__preferred_phone__c="+noodlecrm__preferred_phone__c);
		sb.append(",noodlecrm__program3__c="+noodlecrm__program3__c);
		sb.append(",noodlecrm__missed_attempt_counter2__c="+String.valueOf(noodlecrm__missed_attempt_counter2__c));
		sb.append(",noodlecrm__university_app_crmid__c="+noodlecrm__university_app_crmid__c);
		sb.append(",noodlecrm__last_call_date_time__c="+String.valueOf(noodlecrm__last_call_date_time__c));
		sb.append(",noodlecrm__program2__r__noodlecrm__external_id__c="+noodlecrm__program2__r__noodlecrm__external_id__c);
		sb.append(",noodlecrm__program3__r__noodlecrm__external_id__c="+noodlecrm__program3__r__noodlecrm__external_id__c);
		sb.append(",noodlecrm__app_start_date_time__c="+String.valueOf(noodlecrm__app_start_date_time__c));
		sb.append(",noodlecrm__historical_call_count__c="+String.valueOf(noodlecrm__historical_call_count__c));
		sb.append(",noodlecrm__revised_start_cohort__c="+noodlecrm__revised_start_cohort__c);
		sb.append(",noodlecrm__app_enrolled_date_time__c="+String.valueOf(noodlecrm__app_enrolled_date_time__c));
		sb.append(",noodlecrm__external_id_unique__c="+noodlecrm__external_id_unique__c);
		sb.append(",noodlecrm__preferred_email__c="+noodlecrm__preferred_email__c);
		sb.append(",noodlecrm__student_contact__c="+noodlecrm__student_contact__c);
		sb.append(",noodlecrm__decision_date_time__c="+String.valueOf(noodlecrm__decision_date_time__c));
		sb.append(",noodlecrm__final_start_cohort__c="+noodlecrm__final_start_cohort__c);
		sb.append(",noodlecrm__app_complete_date_time__c="+String.valueOf(noodlecrm__app_complete_date_time__c));
		sb.append(",noodlecrm__app_submit_date_time__c="+String.valueOf(noodlecrm__app_submit_date_time__c));
		sb.append(",noodlecrm__application_indicated_start_cohort__c="+noodlecrm__application_indicated_start_cohort__c);
		sb.append(",noodlecrm__engagement_status__c="+noodlecrm__engagement_status__c);
		sb.append(",noodlecrm__is_test_record__c="+String.valueOf(noodlecrm__is_test_record__c));
		sb.append(",noodlecrm__first_inquiry_action__c="+noodlecrm__first_inquiry_action__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out10Struct implements routines.system.IPersistableRow<out10Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String noodlecrm__university_scholarship_details__c;

				public String getNoodlecrm__university_scholarship_details__c () {
					return this.noodlecrm__university_scholarship_details__c;
				}
				
			    public Boolean hasopportunitylineitem;

				public Boolean getHasopportunitylineitem () {
					return this.hasopportunitylineitem;
				}
				
			    public java.util.Date noodlecrm__final_start_date__c;

				public java.util.Date getNoodlecrm__final_start_date__c () {
					return this.noodlecrm__final_start_date__c;
				}
				
			    public String noodlecrm__years_experience__c;

				public String getNoodlecrm__years_experience__c () {
					return this.noodlecrm__years_experience__c;
				}
				
			    public String noodlecrm__delivery_status_idata__c;

				public String getNoodlecrm__delivery_status_idata__c () {
					return this.noodlecrm__delivery_status_idata__c;
				}
				
			    public java.util.Date noodlecrm__decision_date__c;

				public java.util.Date getNoodlecrm__decision_date__c () {
					return this.noodlecrm__decision_date__c;
				}
				
			    public Boolean noodlecrm__application_drafted__c;

				public Boolean getNoodlecrm__application_drafted__c () {
					return this.noodlecrm__application_drafted__c;
				}
				
			    public Double noodlecrm__total_attempts_pre_mc__c;

				public Double getNoodlecrm__total_attempts_pre_mc__c () {
					return this.noodlecrm__total_attempts_pre_mc__c;
				}
				
			    public Double noodlecrm__total_emails__c;

				public Double getNoodlecrm__total_emails__c () {
					return this.noodlecrm__total_emails__c;
				}
				
			    public String noodlecrm__scholarships__c;

				public String getNoodlecrm__scholarships__c () {
					return this.noodlecrm__scholarships__c;
				}
				
			    public String noodlecrm__url__c;

				public String getNoodlecrm__url__c () {
					return this.noodlecrm__url__c;
				}
				
			    public java.util.Date noodlecrm__current_start_date__c;

				public java.util.Date getNoodlecrm__current_start_date__c () {
					return this.noodlecrm__current_start_date__c;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__will_not_complete_reason__c;

				public String getNoodlecrm__will_not_complete_reason__c () {
					return this.noodlecrm__will_not_complete_reason__c;
				}
				
			    public String noodlecrm__defer_reason__c;

				public String getNoodlecrm__defer_reason__c () {
					return this.noodlecrm__defer_reason__c;
				}
				
			    public String noodlecrm__lead_stated_gpa__c;

				public String getNoodlecrm__lead_stated_gpa__c () {
					return this.noodlecrm__lead_stated_gpa__c;
				}
				
			    public String noodlecrm__degree_verification__c;

				public String getNoodlecrm__degree_verification__c () {
					return this.noodlecrm__degree_verification__c;
				}
				
			    public java.util.Date noodlecrm__app_item_received_date_time__c;

				public java.util.Date getNoodlecrm__app_item_received_date_time__c () {
					return this.noodlecrm__app_item_received_date_time__c;
				}
				
			    public String noodlecrm__phone__c;

				public String getNoodlecrm__phone__c () {
					return this.noodlecrm__phone__c;
				}
				
			    public String noodlecrm__decline_reason_details__c;

				public String getNoodlecrm__decline_reason_details__c () {
					return this.noodlecrm__decline_reason_details__c;
				}
				
			    public String noodlecrm__will_not_apply_reason__c;

				public String getNoodlecrm__will_not_apply_reason__c () {
					return this.noodlecrm__will_not_apply_reason__c;
				}
				
			    public String forecastcategoryname;

				public String getForecastcategoryname () {
					return this.forecastcategoryname;
				}
				
			    public String noodlecrm__optional_statement__c;

				public String getNoodlecrm__optional_statement__c () {
					return this.noodlecrm__optional_statement__c;
				}
				
			    public String noodlecrm__maincompetitors__c;

				public String getNoodlecrm__maincompetitors__c () {
					return this.noodlecrm__maincompetitors__c;
				}
				
			    public String noodlecrm__partnerships__c;

				public String getNoodlecrm__partnerships__c () {
					return this.noodlecrm__partnerships__c;
				}
				
			    public String noodlecrm__bad_lead_reason__c;

				public String getNoodlecrm__bad_lead_reason__c () {
					return this.noodlecrm__bad_lead_reason__c;
				}
				
			    public java.util.Date noodlecrm__application_last_login__c;

				public java.util.Date getNoodlecrm__application_last_login__c () {
					return this.noodlecrm__application_last_login__c;
				}
				
			    public String noodlecrm__out_of_pocket__c;

				public String getNoodlecrm__out_of_pocket__c () {
					return this.noodlecrm__out_of_pocket__c;
				}
				
			    public String noodlecrm__enrollment_status__c;

				public String getNoodlecrm__enrollment_status__c () {
					return this.noodlecrm__enrollment_status__c;
				}
				
			    public String noodlecrm__competitor_details__c;

				public String getNoodlecrm__competitor_details__c () {
					return this.noodlecrm__competitor_details__c;
				}
				
			    public java.util.Date noodlecrm__last_attended_zoom_date_time__c;

				public java.util.Date getNoodlecrm__last_attended_zoom_date_time__c () {
					return this.noodlecrm__last_attended_zoom_date_time__c;
				}
				
			    public java.util.Date noodlecrm__last_attended_webinar_date_time__c;

				public java.util.Date getNoodlecrm__last_attended_webinar_date_time__c () {
					return this.noodlecrm__last_attended_webinar_date_time__c;
				}
				
			    public String noodlecrm__program2__c;

				public String getNoodlecrm__program2__c () {
					return this.noodlecrm__program2__c;
				}
				
			    public java.util.Date noodlecrm__enrollment_status_date_time__c;

				public java.util.Date getNoodlecrm__enrollment_status_date_time__c () {
					return this.noodlecrm__enrollment_status_date_time__c;
				}
				
			    public String noodlecrm__noodle_crm_id__c;

				public String getNoodlecrm__noodle_crm_id__c () {
					return this.noodlecrm__noodle_crm_id__c;
				}
				
			    public java.util.Date closedate;

				public java.util.Date getClosedate () {
					return this.closedate;
				}
				
			    public java.util.Date noodlecrm__application_indicated_start_date__c;

				public java.util.Date getNoodlecrm__application_indicated_start_date__c () {
					return this.noodlecrm__application_indicated_start_date__c;
				}
				
			    public String noodlecrm__university__c;

				public String getNoodlecrm__university__c () {
					return this.noodlecrm__university__c;
				}
				
			    public String noodlecrm__military__c;

				public String getNoodlecrm__military__c () {
					return this.noodlecrm__military__c;
				}
				
			    public String noodlecrm__decline_reason__c;

				public String getNoodlecrm__decline_reason__c () {
					return this.noodlecrm__decline_reason__c;
				}
				
			    public String noodlecrm__universitycrmid__c;

				public String getNoodlecrm__universitycrmid__c () {
					return this.noodlecrm__universitycrmid__c;
				}
				
			    public String noodlecrm__resume__c;

				public String getNoodlecrm__resume__c () {
					return this.noodlecrm__resume__c;
				}
				
			    public String noodlecrm__meets_program_criteria__c;

				public String getNoodlecrm__meets_program_criteria__c () {
					return this.noodlecrm__meets_program_criteria__c;
				}
				
			    public String noodlecrm__best_time_to_call__c;

				public String getNoodlecrm__best_time_to_call__c () {
					return this.noodlecrm__best_time_to_call__c;
				}
				
			    public Double noodlecrm__total_texts__c;

				public Double getNoodlecrm__total_texts__c () {
					return this.noodlecrm__total_texts__c;
				}
				
			    public String noodlecrm__application_program_global__c;

				public String getNoodlecrm__application_program_global__c () {
					return this.noodlecrm__application_program_global__c;
				}
				
			    public String accountid;

				public String getAccountid () {
					return this.accountid;
				}
				
			    public String noodlecrm__external_id_populated__c;

				public String getNoodlecrm__external_id_populated__c () {
					return this.noodlecrm__external_id_populated__c;
				}
				
			    public String noodlecrm__utm_source__c;

				public String getNoodlecrm__utm_source__c () {
					return this.noodlecrm__utm_source__c;
				}
				
			    public Double noodlecrm__total_inquiries__c;

				public Double getNoodlecrm__total_inquiries__c () {
					return this.noodlecrm__total_inquiries__c;
				}
				
			    public java.util.Date noodlecrm__first_call_date_time__c;

				public java.util.Date getNoodlecrm__first_call_date_time__c () {
					return this.noodlecrm__first_call_date_time__c;
				}
				
			    public String noodlecrm__lead_external_id__c;

				public String getNoodlecrm__lead_external_id__c () {
					return this.noodlecrm__lead_external_id__c;
				}
				
			    public java.util.Date noodlecrm__webinar_signup_date_time__c;

				public java.util.Date getNoodlecrm__webinar_signup_date_time__c () {
					return this.noodlecrm__webinar_signup_date_time__c;
				}
				
			    public java.util.Date lastvieweddate;

				public java.util.Date getLastvieweddate () {
					return this.lastvieweddate;
				}
				
			    public String noodlecrm__city__c;

				public String getNoodlecrm__city__c () {
					return this.noodlecrm__city__c;
				}
				
			    public String noodlecrm__application_decision__c;

				public String getNoodlecrm__application_decision__c () {
					return this.noodlecrm__application_decision__c;
				}
				
			    public String noodlecrm__university_email__c;

				public String getNoodlecrm__university_email__c () {
					return this.noodlecrm__university_email__c;
				}
				
			    public String noodlecrm__responsiveness__c;

				public String getNoodlecrm__responsiveness__c () {
					return this.noodlecrm__responsiveness__c;
				}
				
			    public String noodlecrm__official_cohort__c;

				public String getNoodlecrm__official_cohort__c () {
					return this.noodlecrm__official_cohort__c;
				}
				
			    public String stagename;

				public String getStagename () {
					return this.stagename;
				}
				
			    public java.util.Date noodlecrm__ea_projected_submit_date__c;

				public java.util.Date getNoodlecrm__ea_projected_submit_date__c () {
					return this.noodlecrm__ea_projected_submit_date__c;
				}
				
			    public java.util.Date noodlecrm__deal_stage__c;

				public java.util.Date getNoodlecrm__deal_stage__c () {
					return this.noodlecrm__deal_stage__c;
				}
				
			    public String noodlecrm__first_touch_source__c;

				public String getNoodlecrm__first_touch_source__c () {
					return this.noodlecrm__first_touch_source__c;
				}
				
			    public String noodlecrm__international_language_test__c;

				public String getNoodlecrm__international_language_test__c () {
					return this.noodlecrm__international_language_test__c;
				}
				
			    public String noodlecrm__utm_content__c;

				public String getNoodlecrm__utm_content__c () {
					return this.noodlecrm__utm_content__c;
				}
				
			    public java.util.Date noodlecrm__app_start_date__c;

				public java.util.Date getNoodlecrm__app_start_date__c () {
					return this.noodlecrm__app_start_date__c;
				}
				
			    public String campaignid;

				public String getCampaignid () {
					return this.campaignid;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Boolean hasoverduetask;

				public Boolean getHasoverduetask () {
					return this.hasoverduetask;
				}
				
			    public String noodlecrm__opportunity_owner__c;

				public String getNoodlecrm__opportunity_owner__c () {
					return this.noodlecrm__opportunity_owner__c;
				}
				
			    public java.util.Date noodlecrm__missed_attempt_date_time__c;

				public java.util.Date getNoodlecrm__missed_attempt_date_time__c () {
					return this.noodlecrm__missed_attempt_date_time__c;
				}
				
			    public Boolean iswon;

				public Boolean getIswon () {
					return this.iswon;
				}
				
			    public java.util.Date noodlecrm__application_submit_date__c;

				public java.util.Date getNoodlecrm__application_submit_date__c () {
					return this.noodlecrm__application_submit_date__c;
				}
				
			    public String noodlecrm__associated_contact__c;

				public String getNoodlecrm__associated_contact__c () {
					return this.noodlecrm__associated_contact__c;
				}
				
			    public java.util.Date noodlecrm__expected_date_to_meet_requirement__c;

				public java.util.Date getNoodlecrm__expected_date_to_meet_requirement__c () {
					return this.noodlecrm__expected_date_to_meet_requirement__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public java.util.Date noodlecrm__last_activitydate_time__c;

				public java.util.Date getNoodlecrm__last_activitydate_time__c () {
					return this.noodlecrm__last_activitydate_time__c;
				}
				
			    public String noodlecrm__missed_attempt_counter__c;

				public String getNoodlecrm__missed_attempt_counter__c () {
					return this.noodlecrm__missed_attempt_counter__c;
				}
				
			    public String noodlecrm__program__c;

				public String getNoodlecrm__program__c () {
					return this.noodlecrm__program__c;
				}
				
			    public String noodlecrm__licensure__c;

				public String getNoodlecrm__licensure__c () {
					return this.noodlecrm__licensure__c;
				}
				
			    public Integer fiscalquarter;

				public Integer getFiscalquarter () {
					return this.fiscalquarter;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public String noodlecrm__utm_medium__c;

				public String getNoodlecrm__utm_medium__c () {
					return this.noodlecrm__utm_medium__c;
				}
				
			    public java.util.Date noodlecrm__last_call_date__c;

				public java.util.Date getNoodlecrm__last_call_date__c () {
					return this.noodlecrm__last_call_date__c;
				}
				
			    public String noodlecrm__opportunity_external_id__c;

				public String getNoodlecrm__opportunity_external_id__c () {
					return this.noodlecrm__opportunity_external_id__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public java.util.Date noodlecrm__follow_up_date__c;

				public java.util.Date getNoodlecrm__follow_up_date__c () {
					return this.noodlecrm__follow_up_date__c;
				}
				
			    public Boolean noodlecrm__attended_webinar__c;

				public Boolean getNoodlecrm__attended_webinar__c () {
					return this.noodlecrm__attended_webinar__c;
				}
				
			    public String noodlecrm__professional_experience__c;

				public String getNoodlecrm__professional_experience__c () {
					return this.noodlecrm__professional_experience__c;
				}
				
			    public String noodlecrm__lor_2__c;

				public String getNoodlecrm__lor_2__c () {
					return this.noodlecrm__lor_2__c;
				}
				
			    public String noodlecrm__supplemental__c;

				public String getNoodlecrm__supplemental__c () {
					return this.noodlecrm__supplemental__c;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String noodlecrm__mta_interaction_record__c;

				public String getNoodlecrm__mta_interaction_record__c () {
					return this.noodlecrm__mta_interaction_record__c;
				}
				
			    public java.util.Date noodlecrm__meaningful_conversation_date_time__c;

				public java.util.Date getNoodlecrm__meaningful_conversation_date_time__c () {
					return this.noodlecrm__meaningful_conversation_date_time__c;
				}
				
			    public String noodlecrm__applying_to_a_competitor__c;

				public String getNoodlecrm__applying_to_a_competitor__c () {
					return this.noodlecrm__applying_to_a_competitor__c;
				}
				
			    public String noodlecrm__lead_stated_professional_status__c;

				public String getNoodlecrm__lead_stated_professional_status__c () {
					return this.noodlecrm__lead_stated_professional_status__c;
				}
				
			    public String noodlecrm__street__c;

				public String getNoodlecrm__street__c () {
					return this.noodlecrm__street__c;
				}
				
			    public String noodlecrm__lor_1__c;

				public String getNoodlecrm__lor_1__c () {
					return this.noodlecrm__lor_1__c;
				}
				
			    public String noodlecrm__scholarship_applied__c;

				public String getNoodlecrm__scholarship_applied__c () {
					return this.noodlecrm__scholarship_applied__c;
				}
				
			    public String noodlecrm__ea_indicated_start_term__c;

				public String getNoodlecrm__ea_indicated_start_term__c () {
					return this.noodlecrm__ea_indicated_start_term__c;
				}
				
			    public String noodlecrm__state_region__c;

				public String getNoodlecrm__state_region__c () {
					return this.noodlecrm__state_region__c;
				}
				
			    public java.util.Date noodlecrm__registered__c;

				public java.util.Date getNoodlecrm__registered__c () {
					return this.noodlecrm__registered__c;
				}
				
			    public String noodlecrm__employer_benefits__c;

				public String getNoodlecrm__employer_benefits__c () {
					return this.noodlecrm__employer_benefits__c;
				}
				
			    public String noodlecrm__utm_campaign__c;

				public String getNoodlecrm__utm_campaign__c () {
					return this.noodlecrm__utm_campaign__c;
				}
				
			    public java.util.Date lastactivitydate;

				public java.util.Date getLastactivitydate () {
					return this.lastactivitydate;
				}
				
			    public String noodlecrm__will_not_apply_reason_other__c;

				public String getNoodlecrm__will_not_apply_reason_other__c () {
					return this.noodlecrm__will_not_apply_reason_other__c;
				}
				
			    public java.util.Date noodlecrm__app_deposit_date_time__c;

				public java.util.Date getNoodlecrm__app_deposit_date_time__c () {
					return this.noodlecrm__app_deposit_date_time__c;
				}
				
			    public String noodlecrm__application_status__c;

				public String getNoodlecrm__application_status__c () {
					return this.noodlecrm__application_status__c;
				}
				
			    public String noodlecrm__defer_reason_detail__c;

				public String getNoodlecrm__defer_reason_detail__c () {
					return this.noodlecrm__defer_reason_detail__c;
				}
				
			    public Boolean hasopenactivity;

				public Boolean getHasopenactivity () {
					return this.hasopenactivity;
				}
				
			    public String noodlecrm__last_activity_type__c;

				public String getNoodlecrm__last_activity_type__c () {
					return this.noodlecrm__last_activity_type__c;
				}
				
			    public String noodlecrm__student_loans__c;

				public String getNoodlecrm__student_loans__c () {
					return this.noodlecrm__student_loans__c;
				}
				
			    public String noodlecrm__deliveryinstallationstatus__c;

				public String getNoodlecrm__deliveryinstallationstatus__c () {
					return this.noodlecrm__deliveryinstallationstatus__c;
				}
				
			    public String noodlecrm__trackingnumber__c;

				public String getNoodlecrm__trackingnumber__c () {
					return this.noodlecrm__trackingnumber__c;
				}
				
			    public String noodlecrm__time_zone__c;

				public String getNoodlecrm__time_zone__c () {
					return this.noodlecrm__time_zone__c;
				}
				
			    public Boolean noodlecrm__do_not_call__c;

				public Boolean getNoodlecrm__do_not_call__c () {
					return this.noodlecrm__do_not_call__c;
				}
				
			    public Double probability;

				public Double getProbability () {
					return this.probability;
				}
				
			    public String noodlecrm__tran_3__c;

				public String getNoodlecrm__tran_3__c () {
					return this.noodlecrm__tran_3__c;
				}
				
			    public java.util.Date noodlecrm__delivery_timestamp_idata__c;

				public java.util.Date getNoodlecrm__delivery_timestamp_idata__c () {
					return this.noodlecrm__delivery_timestamp_idata__c;
				}
				
			    public String noodlecrm__last_contacting_state__c;

				public String getNoodlecrm__last_contacting_state__c () {
					return this.noodlecrm__last_contacting_state__c;
				}
				
			    public String noodlecrm__test_requirements__c;

				public String getNoodlecrm__test_requirements__c () {
					return this.noodlecrm__test_requirements__c;
				}
				
			    public String noodlecrm__decision_type__c;

				public String getNoodlecrm__decision_type__c () {
					return this.noodlecrm__decision_type__c;
				}
				
			    public String noodlecrm__admit_cohort__c;

				public String getNoodlecrm__admit_cohort__c () {
					return this.noodlecrm__admit_cohort__c;
				}
				
			    public String noodlecrm__tran_2__c;

				public String getNoodlecrm__tran_2__c () {
					return this.noodlecrm__tran_2__c;
				}
				
			    public String noodlecrm__email__c;

				public String getNoodlecrm__email__c () {
					return this.noodlecrm__email__c;
				}
				
			    public java.util.Date noodlecrm__university_scholarship_date__c;

				public java.util.Date getNoodlecrm__university_scholarship_date__c () {
					return this.noodlecrm__university_scholarship_date__c;
				}
				
			    public java.util.Date noodlecrm__revised_start_date__c;

				public java.util.Date getNoodlecrm__revised_start_date__c () {
					return this.noodlecrm__revised_start_date__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String noodlecrm__submit_cohort__c;

				public String getNoodlecrm__submit_cohort__c () {
					return this.noodlecrm__submit_cohort__c;
				}
				
			    public Boolean isclosed;

				public Boolean getIsclosed () {
					return this.isclosed;
				}
				
			    public String noodlecrm__condition_type__c;

				public String getNoodlecrm__condition_type__c () {
					return this.noodlecrm__condition_type__c;
				}
				
			    public Boolean noodlecrm__opportunity_status__c;

				public Boolean getNoodlecrm__opportunity_status__c () {
					return this.noodlecrm__opportunity_status__c;
				}
				
			    public String noodlecrm__class_schedule_type__c;

				public String getNoodlecrm__class_schedule_type__c () {
					return this.noodlecrm__class_schedule_type__c;
				}
				
			    public String noodlecrm__lead_stated_licensure__c;

				public String getNoodlecrm__lead_stated_licensure__c () {
					return this.noodlecrm__lead_stated_licensure__c;
				}
				
			    public String noodlecrm__student__c;

				public String getNoodlecrm__student__c () {
					return this.noodlecrm__student__c;
				}
				
			    public String noodlecrm__university_application_id__c;

				public String getNoodlecrm__university_application_id__c () {
					return this.noodlecrm__university_application_id__c;
				}
				
			    public String leadsource;

				public String getLeadsource () {
					return this.leadsource;
				}
				
			    public java.util.Date noodlecrm__updated__c;

				public java.util.Date getNoodlecrm__updated__c () {
					return this.noodlecrm__updated__c;
				}
				
			    public String noodlecrm__utm_term__c;

				public String getNoodlecrm__utm_term__c () {
					return this.noodlecrm__utm_term__c;
				}
				
			    public String noodlecrm__tran_1__c;

				public String getNoodlecrm__tran_1__c () {
					return this.noodlecrm__tran_1__c;
				}
				
			    public String noodlecrm__google_analytics_id__c;

				public String getNoodlecrm__google_analytics_id__c () {
					return this.noodlecrm__google_analytics_id__c;
				}
				
			    public Double amount;

				public Double getAmount () {
					return this.amount;
				}
				
			    public String noodlecrm__crm_id__c;

				public String getNoodlecrm__crm_id__c () {
					return this.noodlecrm__crm_id__c;
				}
				
			    public String noodlecrm__lead_stated_taken_course__c;

				public String getNoodlecrm__lead_stated_taken_course__c () {
					return this.noodlecrm__lead_stated_taken_course__c;
				}
				
			    public String noodlecrm__ip_address__c;

				public String getNoodlecrm__ip_address__c () {
					return this.noodlecrm__ip_address__c;
				}
				
			    public Double noodlecrm__total_calls__c;

				public Double getNoodlecrm__total_calls__c () {
					return this.noodlecrm__total_calls__c;
				}
				
			    public String noodlecrm__university_id_number__c;

				public String getNoodlecrm__university_id_number__c () {
					return this.noodlecrm__university_id_number__c;
				}
				
			    public String noodlecrm__decision__c;

				public String getNoodlecrm__decision__c () {
					return this.noodlecrm__decision__c;
				}
				
			    public String noodlecrm__test_status_gre__c;

				public String getNoodlecrm__test_status_gre__c () {
					return this.noodlecrm__test_status_gre__c;
				}
				
			    public String forecastcategory;

				public String getForecastcategory () {
					return this.forecastcategory;
				}
				
			    public Boolean noodlecrm__attended_zoom__c;

				public Boolean getNoodlecrm__attended_zoom__c () {
					return this.noodlecrm__attended_zoom__c;
				}
				
			    public String noodlecrm__fafsa__c;

				public String getNoodlecrm__fafsa__c () {
					return this.noodlecrm__fafsa__c;
				}
				
			    public String noodlecrm__level_of_education__c;

				public String getNoodlecrm__level_of_education__c () {
					return this.noodlecrm__level_of_education__c;
				}
				
			    public java.util.Date noodlecrm__ea_projected_deposit_date__c;

				public java.util.Date getNoodlecrm__ea_projected_deposit_date__c () {
					return this.noodlecrm__ea_projected_deposit_date__c;
				}
				
			    public String noodlecrm__currentgenerators__c;

				public String getNoodlecrm__currentgenerators__c () {
					return this.noodlecrm__currentgenerators__c;
				}
				
			    public java.util.Date noodlecrm__defer_date__c;

				public java.util.Date getNoodlecrm__defer_date__c () {
					return this.noodlecrm__defer_date__c;
				}
				
			    public String noodlecrm__lead_stated_taken_course_req__c;

				public String getNoodlecrm__lead_stated_taken_course_req__c () {
					return this.noodlecrm__lead_stated_taken_course_req__c;
				}
				
			    public String noodlecrm__follow_up_reason__c;

				public String getNoodlecrm__follow_up_reason__c () {
					return this.noodlecrm__follow_up_reason__c;
				}
				
			    public java.util.Date noodlecrm__will_not_apply_date__c;

				public java.util.Date getNoodlecrm__will_not_apply_date__c () {
					return this.noodlecrm__will_not_apply_date__c;
				}
				
			    public java.util.Date noodlecrm__trying_attempt_date__c;

				public java.util.Date getNoodlecrm__trying_attempt_date__c () {
					return this.noodlecrm__trying_attempt_date__c;
				}
				
			    public String noodlecrm__gpa__c;

				public String getNoodlecrm__gpa__c () {
					return this.noodlecrm__gpa__c;
				}
				
			    public String noodlecrm__fa_comments__c;

				public String getNoodlecrm__fa_comments__c () {
					return this.noodlecrm__fa_comments__c;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String noodlecrm__first_name__c;

				public String getNoodlecrm__first_name__c () {
					return this.noodlecrm__first_name__c;
				}
				
			    public String pricebook2id;

				public String getPricebook2id () {
					return this.pricebook2id;
				}
				
			    public String contactid;

				public String getContactid () {
					return this.contactid;
				}
				
			    public String noodlecrm__contact_type__c;

				public String getNoodlecrm__contact_type__c () {
					return this.noodlecrm__contact_type__c;
				}
				
			    public java.util.Date noodlecrm__conversion_date__c;

				public java.util.Date getNoodlecrm__conversion_date__c () {
					return this.noodlecrm__conversion_date__c;
				}
				
			    public String noodlecrm__ordernumber__c;

				public String getNoodlecrm__ordernumber__c () {
					return this.noodlecrm__ordernumber__c;
				}
				
			    public Integer fiscalyear;

				public Integer getFiscalyear () {
					return this.fiscalyear;
				}
				
			    public java.util.Date noodlecrm__defer_start_date__c;

				public java.util.Date getNoodlecrm__defer_start_date__c () {
					return this.noodlecrm__defer_start_date__c;
				}
				
			    public String noodlecrm__postalcode__c;

				public String getNoodlecrm__postalcode__c () {
					return this.noodlecrm__postalcode__c;
				}
				
			    public Boolean noodlecrm__re_open__c;

				public Boolean getNoodlecrm__re_open__c () {
					return this.noodlecrm__re_open__c;
				}
				
			    public String noodlecrm__applying_to_a_competitor_type__c;

				public String getNoodlecrm__applying_to_a_competitor_type__c () {
					return this.noodlecrm__applying_to_a_competitor_type__c;
				}
				
			    public java.util.Date noodlecrm__app_complete_date__c;

				public java.util.Date getNoodlecrm__app_complete_date__c () {
					return this.noodlecrm__app_complete_date__c;
				}
				
			    public String noodlecrm__country__c;

				public String getNoodlecrm__country__c () {
					return this.noodlecrm__country__c;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String noodlecrm__application_program__c;

				public String getNoodlecrm__application_program__c () {
					return this.noodlecrm__application_program__c;
				}
				
			    public java.util.Date noodlecrm__decline_date__c;

				public java.util.Date getNoodlecrm__decline_date__c () {
					return this.noodlecrm__decline_date__c;
				}
				
			    public java.util.Date lastreferenceddate;

				public java.util.Date getLastreferenceddate () {
					return this.lastreferenceddate;
				}
				
			    public String noodlecrm__temperature__c;

				public String getNoodlecrm__temperature__c () {
					return this.noodlecrm__temperature__c;
				}
				
			    public String noodlecrm__competitor_university_2__c;

				public String getNoodlecrm__competitor_university_2__c () {
					return this.noodlecrm__competitor_university_2__c;
				}
				
			    public String noodlecrm__course_requirements__c;

				public String getNoodlecrm__course_requirements__c () {
					return this.noodlecrm__course_requirements__c;
				}
				
			    public String fiscal;

				public String getFiscal () {
					return this.fiscal;
				}
				
			    public String noodlecrm__last_name__c;

				public String getNoodlecrm__last_name__c () {
					return this.noodlecrm__last_name__c;
				}
				
			    public String noodlecrm__sop__c;

				public String getNoodlecrm__sop__c () {
					return this.noodlecrm__sop__c;
				}
				
			    public String noodlecrm__competitor_university_1__c;

				public String getNoodlecrm__competitor_university_1__c () {
					return this.noodlecrm__competitor_university_1__c;
				}
				
			    public java.util.Date noodlecrm__bad_lead_date_time__c;

				public java.util.Date getNoodlecrm__bad_lead_date_time__c () {
					return this.noodlecrm__bad_lead_date_time__c;
				}
				
			    public String nextstep;

				public String getNextstep () {
					return this.nextstep;
				}
				
			    public Boolean noodlecrm__signed_up_for_webinar__c;

				public Boolean getNoodlecrm__signed_up_for_webinar__c () {
					return this.noodlecrm__signed_up_for_webinar__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__preferred_phone__c;

				public String getNoodlecrm__preferred_phone__c () {
					return this.noodlecrm__preferred_phone__c;
				}
				
			    public String noodlecrm__program3__c;

				public String getNoodlecrm__program3__c () {
					return this.noodlecrm__program3__c;
				}
				
			    public Double noodlecrm__missed_attempt_counter2__c;

				public Double getNoodlecrm__missed_attempt_counter2__c () {
					return this.noodlecrm__missed_attempt_counter2__c;
				}
				
			    public String noodlecrm__university_app_crmid__c;

				public String getNoodlecrm__university_app_crmid__c () {
					return this.noodlecrm__university_app_crmid__c;
				}
				
			    public java.util.Date noodlecrm__last_call_date_time__c;

				public java.util.Date getNoodlecrm__last_call_date_time__c () {
					return this.noodlecrm__last_call_date_time__c;
				}
				
			    public String noodlecrm__program2__r__noodlecrm__external_id__c;

				public String getNoodlecrm__program2__r__noodlecrm__external_id__c () {
					return this.noodlecrm__program2__r__noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__program3__r__noodlecrm__external_id__c;

				public String getNoodlecrm__program3__r__noodlecrm__external_id__c () {
					return this.noodlecrm__program3__r__noodlecrm__external_id__c;
				}
				
			    public java.util.Date noodlecrm__app_start_date_time__c;

				public java.util.Date getNoodlecrm__app_start_date_time__c () {
					return this.noodlecrm__app_start_date_time__c;
				}
				
			    public Double noodlecrm__historical_call_count__c;

				public Double getNoodlecrm__historical_call_count__c () {
					return this.noodlecrm__historical_call_count__c;
				}
				
			    public String noodlecrm__revised_start_cohort__c;

				public String getNoodlecrm__revised_start_cohort__c () {
					return this.noodlecrm__revised_start_cohort__c;
				}
				
			    public java.util.Date noodlecrm__app_enrolled_date_time__c;

				public java.util.Date getNoodlecrm__app_enrolled_date_time__c () {
					return this.noodlecrm__app_enrolled_date_time__c;
				}
				
			    public String noodlecrm__external_id_unique__c;

				public String getNoodlecrm__external_id_unique__c () {
					return this.noodlecrm__external_id_unique__c;
				}
				
			    public String noodlecrm__preferred_email__c;

				public String getNoodlecrm__preferred_email__c () {
					return this.noodlecrm__preferred_email__c;
				}
				
			    public String noodlecrm__student_contact__c;

				public String getNoodlecrm__student_contact__c () {
					return this.noodlecrm__student_contact__c;
				}
				
			    public java.util.Date noodlecrm__decision_date_time__c;

				public java.util.Date getNoodlecrm__decision_date_time__c () {
					return this.noodlecrm__decision_date_time__c;
				}
				
			    public String noodlecrm__final_start_cohort__c;

				public String getNoodlecrm__final_start_cohort__c () {
					return this.noodlecrm__final_start_cohort__c;
				}
				
			    public java.util.Date noodlecrm__app_complete_date_time__c;

				public java.util.Date getNoodlecrm__app_complete_date_time__c () {
					return this.noodlecrm__app_complete_date_time__c;
				}
				
			    public java.util.Date noodlecrm__app_submit_date_time__c;

				public java.util.Date getNoodlecrm__app_submit_date_time__c () {
					return this.noodlecrm__app_submit_date_time__c;
				}
				
			    public String noodlecrm__application_indicated_start_cohort__c;

				public String getNoodlecrm__application_indicated_start_cohort__c () {
					return this.noodlecrm__application_indicated_start_cohort__c;
				}
				
			    public String noodlecrm__engagement_status__c;

				public String getNoodlecrm__engagement_status__c () {
					return this.noodlecrm__engagement_status__c;
				}
				
			    public Boolean noodlecrm__is_test_record__c;

				public Boolean getNoodlecrm__is_test_record__c () {
					return this.noodlecrm__is_test_record__c;
				}
				
			    public String noodlecrm__first_inquiry_action__c;

				public String getNoodlecrm__first_inquiry_action__c () {
					return this.noodlecrm__first_inquiry_action__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.noodlecrm__university_scholarship_details__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hasopportunitylineitem = null;
           				} else {
           			    	this.hasopportunitylineitem = dis.readBoolean();
           				}
					
					this.noodlecrm__final_start_date__c = readDate(dis);
					
					this.noodlecrm__years_experience__c = readString(dis);
					
					this.noodlecrm__delivery_status_idata__c = readString(dis);
					
					this.noodlecrm__decision_date__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__application_drafted__c = null;
           				} else {
           			    	this.noodlecrm__application_drafted__c = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_attempts_pre_mc__c = null;
           				} else {
           			    	this.noodlecrm__total_attempts_pre_mc__c = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_emails__c = null;
           				} else {
           			    	this.noodlecrm__total_emails__c = dis.readDouble();
           				}
					
					this.noodlecrm__scholarships__c = readString(dis);
					
					this.noodlecrm__url__c = readString(dis);
					
					this.noodlecrm__current_start_date__c = readDate(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__will_not_complete_reason__c = readString(dis);
					
					this.noodlecrm__defer_reason__c = readString(dis);
					
					this.noodlecrm__lead_stated_gpa__c = readString(dis);
					
					this.noodlecrm__degree_verification__c = readString(dis);
					
					this.noodlecrm__app_item_received_date_time__c = readDate(dis);
					
					this.noodlecrm__phone__c = readString(dis);
					
					this.noodlecrm__decline_reason_details__c = readString(dis);
					
					this.noodlecrm__will_not_apply_reason__c = readString(dis);
					
					this.forecastcategoryname = readString(dis);
					
					this.noodlecrm__optional_statement__c = readString(dis);
					
					this.noodlecrm__maincompetitors__c = readString(dis);
					
					this.noodlecrm__partnerships__c = readString(dis);
					
					this.noodlecrm__bad_lead_reason__c = readString(dis);
					
					this.noodlecrm__application_last_login__c = readDate(dis);
					
					this.noodlecrm__out_of_pocket__c = readString(dis);
					
					this.noodlecrm__enrollment_status__c = readString(dis);
					
					this.noodlecrm__competitor_details__c = readString(dis);
					
					this.noodlecrm__last_attended_zoom_date_time__c = readDate(dis);
					
					this.noodlecrm__last_attended_webinar_date_time__c = readDate(dis);
					
					this.noodlecrm__program2__c = readString(dis);
					
					this.noodlecrm__enrollment_status_date_time__c = readDate(dis);
					
					this.noodlecrm__noodle_crm_id__c = readString(dis);
					
					this.closedate = readDate(dis);
					
					this.noodlecrm__application_indicated_start_date__c = readDate(dis);
					
					this.noodlecrm__university__c = readString(dis);
					
					this.noodlecrm__military__c = readString(dis);
					
					this.noodlecrm__decline_reason__c = readString(dis);
					
					this.noodlecrm__universitycrmid__c = readString(dis);
					
					this.noodlecrm__resume__c = readString(dis);
					
					this.noodlecrm__meets_program_criteria__c = readString(dis);
					
					this.noodlecrm__best_time_to_call__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_texts__c = null;
           				} else {
           			    	this.noodlecrm__total_texts__c = dis.readDouble();
           				}
					
					this.noodlecrm__application_program_global__c = readString(dis);
					
					this.accountid = readString(dis);
					
					this.noodlecrm__external_id_populated__c = readString(dis);
					
					this.noodlecrm__utm_source__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_inquiries__c = null;
           				} else {
           			    	this.noodlecrm__total_inquiries__c = dis.readDouble();
           				}
					
					this.noodlecrm__first_call_date_time__c = readDate(dis);
					
					this.noodlecrm__lead_external_id__c = readString(dis);
					
					this.noodlecrm__webinar_signup_date_time__c = readDate(dis);
					
					this.lastvieweddate = readDate(dis);
					
					this.noodlecrm__city__c = readString(dis);
					
					this.noodlecrm__application_decision__c = readString(dis);
					
					this.noodlecrm__university_email__c = readString(dis);
					
					this.noodlecrm__responsiveness__c = readString(dis);
					
					this.noodlecrm__official_cohort__c = readString(dis);
					
					this.stagename = readString(dis);
					
					this.noodlecrm__ea_projected_submit_date__c = readDate(dis);
					
					this.noodlecrm__deal_stage__c = readDate(dis);
					
					this.noodlecrm__first_touch_source__c = readString(dis);
					
					this.noodlecrm__international_language_test__c = readString(dis);
					
					this.noodlecrm__utm_content__c = readString(dis);
					
					this.noodlecrm__app_start_date__c = readDate(dis);
					
					this.campaignid = readString(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hasoverduetask = null;
           				} else {
           			    	this.hasoverduetask = dis.readBoolean();
           				}
					
					this.noodlecrm__opportunity_owner__c = readString(dis);
					
					this.noodlecrm__missed_attempt_date_time__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iswon = null;
           				} else {
           			    	this.iswon = dis.readBoolean();
           				}
					
					this.noodlecrm__application_submit_date__c = readDate(dis);
					
					this.noodlecrm__associated_contact__c = readString(dis);
					
					this.noodlecrm__expected_date_to_meet_requirement__c = readDate(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__last_activitydate_time__c = readDate(dis);
					
					this.noodlecrm__missed_attempt_counter__c = readString(dis);
					
					this.noodlecrm__program__c = readString(dis);
					
					this.noodlecrm__licensure__c = readString(dis);
					
						this.fiscalquarter = readInteger(dis);
					
					this.ownerid = readString(dis);
					
					this.noodlecrm__utm_medium__c = readString(dis);
					
					this.noodlecrm__last_call_date__c = readDate(dis);
					
					this.noodlecrm__opportunity_external_id__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.noodlecrm__follow_up_date__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__attended_webinar__c = null;
           				} else {
           			    	this.noodlecrm__attended_webinar__c = dis.readBoolean();
           				}
					
					this.noodlecrm__professional_experience__c = readString(dis);
					
					this.noodlecrm__lor_2__c = readString(dis);
					
					this.noodlecrm__supplemental__c = readString(dis);
					
					this.lastmodifiedbyid = readString(dis);
					
					this.noodlecrm__mta_interaction_record__c = readString(dis);
					
					this.noodlecrm__meaningful_conversation_date_time__c = readDate(dis);
					
					this.noodlecrm__applying_to_a_competitor__c = readString(dis);
					
					this.noodlecrm__lead_stated_professional_status__c = readString(dis);
					
					this.noodlecrm__street__c = readString(dis);
					
					this.noodlecrm__lor_1__c = readString(dis);
					
					this.noodlecrm__scholarship_applied__c = readString(dis);
					
					this.noodlecrm__ea_indicated_start_term__c = readString(dis);
					
					this.noodlecrm__state_region__c = readString(dis);
					
					this.noodlecrm__registered__c = readDate(dis);
					
					this.noodlecrm__employer_benefits__c = readString(dis);
					
					this.noodlecrm__utm_campaign__c = readString(dis);
					
					this.lastactivitydate = readDate(dis);
					
					this.noodlecrm__will_not_apply_reason_other__c = readString(dis);
					
					this.noodlecrm__app_deposit_date_time__c = readDate(dis);
					
					this.noodlecrm__application_status__c = readString(dis);
					
					this.noodlecrm__defer_reason_detail__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hasopenactivity = null;
           				} else {
           			    	this.hasopenactivity = dis.readBoolean();
           				}
					
					this.noodlecrm__last_activity_type__c = readString(dis);
					
					this.noodlecrm__student_loans__c = readString(dis);
					
					this.noodlecrm__deliveryinstallationstatus__c = readString(dis);
					
					this.noodlecrm__trackingnumber__c = readString(dis);
					
					this.noodlecrm__time_zone__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__do_not_call__c = null;
           				} else {
           			    	this.noodlecrm__do_not_call__c = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.probability = null;
           				} else {
           			    	this.probability = dis.readDouble();
           				}
					
					this.noodlecrm__tran_3__c = readString(dis);
					
					this.noodlecrm__delivery_timestamp_idata__c = readDate(dis);
					
					this.noodlecrm__last_contacting_state__c = readString(dis);
					
					this.noodlecrm__test_requirements__c = readString(dis);
					
					this.noodlecrm__decision_type__c = readString(dis);
					
					this.noodlecrm__admit_cohort__c = readString(dis);
					
					this.noodlecrm__tran_2__c = readString(dis);
					
					this.noodlecrm__email__c = readString(dis);
					
					this.noodlecrm__university_scholarship_date__c = readDate(dis);
					
					this.noodlecrm__revised_start_date__c = readDate(dis);
					
					this.createddate = readDate(dis);
					
					this.noodlecrm__submit_cohort__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isclosed = null;
           				} else {
           			    	this.isclosed = dis.readBoolean();
           				}
					
					this.noodlecrm__condition_type__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__opportunity_status__c = null;
           				} else {
           			    	this.noodlecrm__opportunity_status__c = dis.readBoolean();
           				}
					
					this.noodlecrm__class_schedule_type__c = readString(dis);
					
					this.noodlecrm__lead_stated_licensure__c = readString(dis);
					
					this.noodlecrm__student__c = readString(dis);
					
					this.noodlecrm__university_application_id__c = readString(dis);
					
					this.leadsource = readString(dis);
					
					this.noodlecrm__updated__c = readDate(dis);
					
					this.noodlecrm__utm_term__c = readString(dis);
					
					this.noodlecrm__tran_1__c = readString(dis);
					
					this.noodlecrm__google_analytics_id__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readDouble();
           				}
					
					this.noodlecrm__crm_id__c = readString(dis);
					
					this.noodlecrm__lead_stated_taken_course__c = readString(dis);
					
					this.noodlecrm__ip_address__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_calls__c = null;
           				} else {
           			    	this.noodlecrm__total_calls__c = dis.readDouble();
           				}
					
					this.noodlecrm__university_id_number__c = readString(dis);
					
					this.noodlecrm__decision__c = readString(dis);
					
					this.noodlecrm__test_status_gre__c = readString(dis);
					
					this.forecastcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__attended_zoom__c = null;
           				} else {
           			    	this.noodlecrm__attended_zoom__c = dis.readBoolean();
           				}
					
					this.noodlecrm__fafsa__c = readString(dis);
					
					this.noodlecrm__level_of_education__c = readString(dis);
					
					this.noodlecrm__ea_projected_deposit_date__c = readDate(dis);
					
					this.noodlecrm__currentgenerators__c = readString(dis);
					
					this.noodlecrm__defer_date__c = readDate(dis);
					
					this.noodlecrm__lead_stated_taken_course_req__c = readString(dis);
					
					this.noodlecrm__follow_up_reason__c = readString(dis);
					
					this.noodlecrm__will_not_apply_date__c = readDate(dis);
					
					this.noodlecrm__trying_attempt_date__c = readDate(dis);
					
					this.noodlecrm__gpa__c = readString(dis);
					
					this.noodlecrm__fa_comments__c = readString(dis);
					
					this.createdbyid = readString(dis);
					
					this.type = readString(dis);
					
					this.noodlecrm__first_name__c = readString(dis);
					
					this.pricebook2id = readString(dis);
					
					this.contactid = readString(dis);
					
					this.noodlecrm__contact_type__c = readString(dis);
					
					this.noodlecrm__conversion_date__c = readDate(dis);
					
					this.noodlecrm__ordernumber__c = readString(dis);
					
						this.fiscalyear = readInteger(dis);
					
					this.noodlecrm__defer_start_date__c = readDate(dis);
					
					this.noodlecrm__postalcode__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__re_open__c = null;
           				} else {
           			    	this.noodlecrm__re_open__c = dis.readBoolean();
           				}
					
					this.noodlecrm__applying_to_a_competitor_type__c = readString(dis);
					
					this.noodlecrm__app_complete_date__c = readDate(dis);
					
					this.noodlecrm__country__c = readString(dis);
					
					this.description = readString(dis);
					
					this.noodlecrm__application_program__c = readString(dis);
					
					this.noodlecrm__decline_date__c = readDate(dis);
					
					this.lastreferenceddate = readDate(dis);
					
					this.noodlecrm__temperature__c = readString(dis);
					
					this.noodlecrm__competitor_university_2__c = readString(dis);
					
					this.noodlecrm__course_requirements__c = readString(dis);
					
					this.fiscal = readString(dis);
					
					this.noodlecrm__last_name__c = readString(dis);
					
					this.noodlecrm__sop__c = readString(dis);
					
					this.noodlecrm__competitor_university_1__c = readString(dis);
					
					this.noodlecrm__bad_lead_date_time__c = readDate(dis);
					
					this.nextstep = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__signed_up_for_webinar__c = null;
           				} else {
           			    	this.noodlecrm__signed_up_for_webinar__c = dis.readBoolean();
           				}
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__preferred_phone__c = readString(dis);
					
					this.noodlecrm__program3__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__missed_attempt_counter2__c = null;
           				} else {
           			    	this.noodlecrm__missed_attempt_counter2__c = dis.readDouble();
           				}
					
					this.noodlecrm__university_app_crmid__c = readString(dis);
					
					this.noodlecrm__last_call_date_time__c = readDate(dis);
					
					this.noodlecrm__program2__r__noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__program3__r__noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__app_start_date_time__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__historical_call_count__c = null;
           				} else {
           			    	this.noodlecrm__historical_call_count__c = dis.readDouble();
           				}
					
					this.noodlecrm__revised_start_cohort__c = readString(dis);
					
					this.noodlecrm__app_enrolled_date_time__c = readDate(dis);
					
					this.noodlecrm__external_id_unique__c = readString(dis);
					
					this.noodlecrm__preferred_email__c = readString(dis);
					
					this.noodlecrm__student_contact__c = readString(dis);
					
					this.noodlecrm__decision_date_time__c = readDate(dis);
					
					this.noodlecrm__final_start_cohort__c = readString(dis);
					
					this.noodlecrm__app_complete_date_time__c = readDate(dis);
					
					this.noodlecrm__app_submit_date_time__c = readDate(dis);
					
					this.noodlecrm__application_indicated_start_cohort__c = readString(dis);
					
					this.noodlecrm__engagement_status__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__is_test_record__c = null;
           				} else {
           			    	this.noodlecrm__is_test_record__c = dis.readBoolean();
           				}
					
					this.noodlecrm__first_inquiry_action__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.noodlecrm__university_scholarship_details__c,dos);
					
					// Boolean
				
						if(this.hasopportunitylineitem == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.hasopportunitylineitem);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__final_start_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__years_experience__c,dos);
					
					// String
				
						writeString(this.noodlecrm__delivery_status_idata__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__decision_date__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__application_drafted__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__application_drafted__c);
		            	}
					
					// Double
				
						if(this.noodlecrm__total_attempts_pre_mc__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_attempts_pre_mc__c);
		            	}
					
					// Double
				
						if(this.noodlecrm__total_emails__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_emails__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__scholarships__c,dos);
					
					// String
				
						writeString(this.noodlecrm__url__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__current_start_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__will_not_complete_reason__c,dos);
					
					// String
				
						writeString(this.noodlecrm__defer_reason__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_gpa__c,dos);
					
					// String
				
						writeString(this.noodlecrm__degree_verification__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_item_received_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__phone__c,dos);
					
					// String
				
						writeString(this.noodlecrm__decline_reason_details__c,dos);
					
					// String
				
						writeString(this.noodlecrm__will_not_apply_reason__c,dos);
					
					// String
				
						writeString(this.forecastcategoryname,dos);
					
					// String
				
						writeString(this.noodlecrm__optional_statement__c,dos);
					
					// String
				
						writeString(this.noodlecrm__maincompetitors__c,dos);
					
					// String
				
						writeString(this.noodlecrm__partnerships__c,dos);
					
					// String
				
						writeString(this.noodlecrm__bad_lead_reason__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__application_last_login__c,dos);
					
					// String
				
						writeString(this.noodlecrm__out_of_pocket__c,dos);
					
					// String
				
						writeString(this.noodlecrm__enrollment_status__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_details__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_attended_zoom_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_attended_webinar_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program2__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__enrollment_status_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__noodle_crm_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.closedate,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__application_indicated_start_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university__c,dos);
					
					// String
				
						writeString(this.noodlecrm__military__c,dos);
					
					// String
				
						writeString(this.noodlecrm__decline_reason__c,dos);
					
					// String
				
						writeString(this.noodlecrm__universitycrmid__c,dos);
					
					// String
				
						writeString(this.noodlecrm__resume__c,dos);
					
					// String
				
						writeString(this.noodlecrm__meets_program_criteria__c,dos);
					
					// String
				
						writeString(this.noodlecrm__best_time_to_call__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_texts__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_texts__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__application_program_global__c,dos);
					
					// String
				
						writeString(this.accountid,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id_populated__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_source__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_inquiries__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_inquiries__c);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__first_call_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_external_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__webinar_signup_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastvieweddate,dos);
					
					// String
				
						writeString(this.noodlecrm__city__c,dos);
					
					// String
				
						writeString(this.noodlecrm__application_decision__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university_email__c,dos);
					
					// String
				
						writeString(this.noodlecrm__responsiveness__c,dos);
					
					// String
				
						writeString(this.noodlecrm__official_cohort__c,dos);
					
					// String
				
						writeString(this.stagename,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__ea_projected_submit_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__deal_stage__c,dos);
					
					// String
				
						writeString(this.noodlecrm__first_touch_source__c,dos);
					
					// String
				
						writeString(this.noodlecrm__international_language_test__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_content__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_start_date__c,dos);
					
					// String
				
						writeString(this.campaignid,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Boolean
				
						if(this.hasoverduetask == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.hasoverduetask);
		            	}
					
					// String
				
						writeString(this.noodlecrm__opportunity_owner__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__missed_attempt_date_time__c,dos);
					
					// Boolean
				
						if(this.iswon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iswon);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__application_submit_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__associated_contact__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__expected_date_to_meet_requirement__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_activitydate_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__missed_attempt_counter__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program__c,dos);
					
					// String
				
						writeString(this.noodlecrm__licensure__c,dos);
					
					// Integer
				
						writeInteger(this.fiscalquarter,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_medium__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_call_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__opportunity_external_id__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__follow_up_date__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__attended_webinar__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__attended_webinar__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__professional_experience__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lor_2__c,dos);
					
					// String
				
						writeString(this.noodlecrm__supplemental__c,dos);
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.noodlecrm__mta_interaction_record__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__meaningful_conversation_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__applying_to_a_competitor__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_professional_status__c,dos);
					
					// String
				
						writeString(this.noodlecrm__street__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lor_1__c,dos);
					
					// String
				
						writeString(this.noodlecrm__scholarship_applied__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_indicated_start_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__state_region__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__registered__c,dos);
					
					// String
				
						writeString(this.noodlecrm__employer_benefits__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_campaign__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastactivitydate,dos);
					
					// String
				
						writeString(this.noodlecrm__will_not_apply_reason_other__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_deposit_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__application_status__c,dos);
					
					// String
				
						writeString(this.noodlecrm__defer_reason_detail__c,dos);
					
					// Boolean
				
						if(this.hasopenactivity == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.hasopenactivity);
		            	}
					
					// String
				
						writeString(this.noodlecrm__last_activity_type__c,dos);
					
					// String
				
						writeString(this.noodlecrm__student_loans__c,dos);
					
					// String
				
						writeString(this.noodlecrm__deliveryinstallationstatus__c,dos);
					
					// String
				
						writeString(this.noodlecrm__trackingnumber__c,dos);
					
					// String
				
						writeString(this.noodlecrm__time_zone__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__do_not_call__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__do_not_call__c);
		            	}
					
					// Double
				
						if(this.probability == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.probability);
		            	}
					
					// String
				
						writeString(this.noodlecrm__tran_3__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__delivery_timestamp_idata__c,dos);
					
					// String
				
						writeString(this.noodlecrm__last_contacting_state__c,dos);
					
					// String
				
						writeString(this.noodlecrm__test_requirements__c,dos);
					
					// String
				
						writeString(this.noodlecrm__decision_type__c,dos);
					
					// String
				
						writeString(this.noodlecrm__admit_cohort__c,dos);
					
					// String
				
						writeString(this.noodlecrm__tran_2__c,dos);
					
					// String
				
						writeString(this.noodlecrm__email__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__university_scholarship_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__revised_start_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.noodlecrm__submit_cohort__c,dos);
					
					// Boolean
				
						if(this.isclosed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isclosed);
		            	}
					
					// String
				
						writeString(this.noodlecrm__condition_type__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__opportunity_status__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__opportunity_status__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__class_schedule_type__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_licensure__c,dos);
					
					// String
				
						writeString(this.noodlecrm__student__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university_application_id__c,dos);
					
					// String
				
						writeString(this.leadsource,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__updated__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__tran_1__c,dos);
					
					// String
				
						writeString(this.noodlecrm__google_analytics_id__c,dos);
					
					// Double
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.amount);
		            	}
					
					// String
				
						writeString(this.noodlecrm__crm_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_taken_course__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ip_address__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_calls__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_calls__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__university_id_number__c,dos);
					
					// String
				
						writeString(this.noodlecrm__decision__c,dos);
					
					// String
				
						writeString(this.noodlecrm__test_status_gre__c,dos);
					
					// String
				
						writeString(this.forecastcategory,dos);
					
					// Boolean
				
						if(this.noodlecrm__attended_zoom__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__attended_zoom__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__fafsa__c,dos);
					
					// String
				
						writeString(this.noodlecrm__level_of_education__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__ea_projected_deposit_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__currentgenerators__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__defer_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_taken_course_req__c,dos);
					
					// String
				
						writeString(this.noodlecrm__follow_up_reason__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__will_not_apply_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__trying_attempt_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__gpa__c,dos);
					
					// String
				
						writeString(this.noodlecrm__fa_comments__c,dos);
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.noodlecrm__first_name__c,dos);
					
					// String
				
						writeString(this.pricebook2id,dos);
					
					// String
				
						writeString(this.contactid,dos);
					
					// String
				
						writeString(this.noodlecrm__contact_type__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__conversion_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ordernumber__c,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__defer_start_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__postalcode__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__re_open__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__re_open__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__applying_to_a_competitor_type__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_complete_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__country__c,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.noodlecrm__application_program__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__decline_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastreferenceddate,dos);
					
					// String
				
						writeString(this.noodlecrm__temperature__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_university_2__c,dos);
					
					// String
				
						writeString(this.noodlecrm__course_requirements__c,dos);
					
					// String
				
						writeString(this.fiscal,dos);
					
					// String
				
						writeString(this.noodlecrm__last_name__c,dos);
					
					// String
				
						writeString(this.noodlecrm__sop__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_university_1__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__bad_lead_date_time__c,dos);
					
					// String
				
						writeString(this.nextstep,dos);
					
					// Boolean
				
						if(this.noodlecrm__signed_up_for_webinar__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__signed_up_for_webinar__c);
		            	}
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__preferred_phone__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program3__c,dos);
					
					// Double
				
						if(this.noodlecrm__missed_attempt_counter2__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__missed_attempt_counter2__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__university_app_crmid__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_call_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program2__r__noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program3__r__noodlecrm__external_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_start_date_time__c,dos);
					
					// Double
				
						if(this.noodlecrm__historical_call_count__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__historical_call_count__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__revised_start_cohort__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_enrolled_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id_unique__c,dos);
					
					// String
				
						writeString(this.noodlecrm__preferred_email__c,dos);
					
					// String
				
						writeString(this.noodlecrm__student_contact__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__decision_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__final_start_cohort__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_complete_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_submit_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__application_indicated_start_cohort__c,dos);
					
					// String
				
						writeString(this.noodlecrm__engagement_status__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__is_test_record__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__is_test_record__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__first_inquiry_action__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("noodlecrm__university_scholarship_details__c="+noodlecrm__university_scholarship_details__c);
		sb.append(",hasopportunitylineitem="+String.valueOf(hasopportunitylineitem));
		sb.append(",noodlecrm__final_start_date__c="+String.valueOf(noodlecrm__final_start_date__c));
		sb.append(",noodlecrm__years_experience__c="+noodlecrm__years_experience__c);
		sb.append(",noodlecrm__delivery_status_idata__c="+noodlecrm__delivery_status_idata__c);
		sb.append(",noodlecrm__decision_date__c="+String.valueOf(noodlecrm__decision_date__c));
		sb.append(",noodlecrm__application_drafted__c="+String.valueOf(noodlecrm__application_drafted__c));
		sb.append(",noodlecrm__total_attempts_pre_mc__c="+String.valueOf(noodlecrm__total_attempts_pre_mc__c));
		sb.append(",noodlecrm__total_emails__c="+String.valueOf(noodlecrm__total_emails__c));
		sb.append(",noodlecrm__scholarships__c="+noodlecrm__scholarships__c);
		sb.append(",noodlecrm__url__c="+noodlecrm__url__c);
		sb.append(",noodlecrm__current_start_date__c="+String.valueOf(noodlecrm__current_start_date__c));
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",noodlecrm__will_not_complete_reason__c="+noodlecrm__will_not_complete_reason__c);
		sb.append(",noodlecrm__defer_reason__c="+noodlecrm__defer_reason__c);
		sb.append(",noodlecrm__lead_stated_gpa__c="+noodlecrm__lead_stated_gpa__c);
		sb.append(",noodlecrm__degree_verification__c="+noodlecrm__degree_verification__c);
		sb.append(",noodlecrm__app_item_received_date_time__c="+String.valueOf(noodlecrm__app_item_received_date_time__c));
		sb.append(",noodlecrm__phone__c="+noodlecrm__phone__c);
		sb.append(",noodlecrm__decline_reason_details__c="+noodlecrm__decline_reason_details__c);
		sb.append(",noodlecrm__will_not_apply_reason__c="+noodlecrm__will_not_apply_reason__c);
		sb.append(",forecastcategoryname="+forecastcategoryname);
		sb.append(",noodlecrm__optional_statement__c="+noodlecrm__optional_statement__c);
		sb.append(",noodlecrm__maincompetitors__c="+noodlecrm__maincompetitors__c);
		sb.append(",noodlecrm__partnerships__c="+noodlecrm__partnerships__c);
		sb.append(",noodlecrm__bad_lead_reason__c="+noodlecrm__bad_lead_reason__c);
		sb.append(",noodlecrm__application_last_login__c="+String.valueOf(noodlecrm__application_last_login__c));
		sb.append(",noodlecrm__out_of_pocket__c="+noodlecrm__out_of_pocket__c);
		sb.append(",noodlecrm__enrollment_status__c="+noodlecrm__enrollment_status__c);
		sb.append(",noodlecrm__competitor_details__c="+noodlecrm__competitor_details__c);
		sb.append(",noodlecrm__last_attended_zoom_date_time__c="+String.valueOf(noodlecrm__last_attended_zoom_date_time__c));
		sb.append(",noodlecrm__last_attended_webinar_date_time__c="+String.valueOf(noodlecrm__last_attended_webinar_date_time__c));
		sb.append(",noodlecrm__program2__c="+noodlecrm__program2__c);
		sb.append(",noodlecrm__enrollment_status_date_time__c="+String.valueOf(noodlecrm__enrollment_status_date_time__c));
		sb.append(",noodlecrm__noodle_crm_id__c="+noodlecrm__noodle_crm_id__c);
		sb.append(",closedate="+String.valueOf(closedate));
		sb.append(",noodlecrm__application_indicated_start_date__c="+String.valueOf(noodlecrm__application_indicated_start_date__c));
		sb.append(",noodlecrm__university__c="+noodlecrm__university__c);
		sb.append(",noodlecrm__military__c="+noodlecrm__military__c);
		sb.append(",noodlecrm__decline_reason__c="+noodlecrm__decline_reason__c);
		sb.append(",noodlecrm__universitycrmid__c="+noodlecrm__universitycrmid__c);
		sb.append(",noodlecrm__resume__c="+noodlecrm__resume__c);
		sb.append(",noodlecrm__meets_program_criteria__c="+noodlecrm__meets_program_criteria__c);
		sb.append(",noodlecrm__best_time_to_call__c="+noodlecrm__best_time_to_call__c);
		sb.append(",noodlecrm__total_texts__c="+String.valueOf(noodlecrm__total_texts__c));
		sb.append(",noodlecrm__application_program_global__c="+noodlecrm__application_program_global__c);
		sb.append(",accountid="+accountid);
		sb.append(",noodlecrm__external_id_populated__c="+noodlecrm__external_id_populated__c);
		sb.append(",noodlecrm__utm_source__c="+noodlecrm__utm_source__c);
		sb.append(",noodlecrm__total_inquiries__c="+String.valueOf(noodlecrm__total_inquiries__c));
		sb.append(",noodlecrm__first_call_date_time__c="+String.valueOf(noodlecrm__first_call_date_time__c));
		sb.append(",noodlecrm__lead_external_id__c="+noodlecrm__lead_external_id__c);
		sb.append(",noodlecrm__webinar_signup_date_time__c="+String.valueOf(noodlecrm__webinar_signup_date_time__c));
		sb.append(",lastvieweddate="+String.valueOf(lastvieweddate));
		sb.append(",noodlecrm__city__c="+noodlecrm__city__c);
		sb.append(",noodlecrm__application_decision__c="+noodlecrm__application_decision__c);
		sb.append(",noodlecrm__university_email__c="+noodlecrm__university_email__c);
		sb.append(",noodlecrm__responsiveness__c="+noodlecrm__responsiveness__c);
		sb.append(",noodlecrm__official_cohort__c="+noodlecrm__official_cohort__c);
		sb.append(",stagename="+stagename);
		sb.append(",noodlecrm__ea_projected_submit_date__c="+String.valueOf(noodlecrm__ea_projected_submit_date__c));
		sb.append(",noodlecrm__deal_stage__c="+String.valueOf(noodlecrm__deal_stage__c));
		sb.append(",noodlecrm__first_touch_source__c="+noodlecrm__first_touch_source__c);
		sb.append(",noodlecrm__international_language_test__c="+noodlecrm__international_language_test__c);
		sb.append(",noodlecrm__utm_content__c="+noodlecrm__utm_content__c);
		sb.append(",noodlecrm__app_start_date__c="+String.valueOf(noodlecrm__app_start_date__c));
		sb.append(",campaignid="+campaignid);
		sb.append(",name="+name);
		sb.append(",hasoverduetask="+String.valueOf(hasoverduetask));
		sb.append(",noodlecrm__opportunity_owner__c="+noodlecrm__opportunity_owner__c);
		sb.append(",noodlecrm__missed_attempt_date_time__c="+String.valueOf(noodlecrm__missed_attempt_date_time__c));
		sb.append(",iswon="+String.valueOf(iswon));
		sb.append(",noodlecrm__application_submit_date__c="+String.valueOf(noodlecrm__application_submit_date__c));
		sb.append(",noodlecrm__associated_contact__c="+noodlecrm__associated_contact__c);
		sb.append(",noodlecrm__expected_date_to_meet_requirement__c="+String.valueOf(noodlecrm__expected_date_to_meet_requirement__c));
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__last_activitydate_time__c="+String.valueOf(noodlecrm__last_activitydate_time__c));
		sb.append(",noodlecrm__missed_attempt_counter__c="+noodlecrm__missed_attempt_counter__c);
		sb.append(",noodlecrm__program__c="+noodlecrm__program__c);
		sb.append(",noodlecrm__licensure__c="+noodlecrm__licensure__c);
		sb.append(",fiscalquarter="+String.valueOf(fiscalquarter));
		sb.append(",ownerid="+ownerid);
		sb.append(",noodlecrm__utm_medium__c="+noodlecrm__utm_medium__c);
		sb.append(",noodlecrm__last_call_date__c="+String.valueOf(noodlecrm__last_call_date__c));
		sb.append(",noodlecrm__opportunity_external_id__c="+noodlecrm__opportunity_external_id__c);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__follow_up_date__c="+String.valueOf(noodlecrm__follow_up_date__c));
		sb.append(",noodlecrm__attended_webinar__c="+String.valueOf(noodlecrm__attended_webinar__c));
		sb.append(",noodlecrm__professional_experience__c="+noodlecrm__professional_experience__c);
		sb.append(",noodlecrm__lor_2__c="+noodlecrm__lor_2__c);
		sb.append(",noodlecrm__supplemental__c="+noodlecrm__supplemental__c);
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",noodlecrm__mta_interaction_record__c="+noodlecrm__mta_interaction_record__c);
		sb.append(",noodlecrm__meaningful_conversation_date_time__c="+String.valueOf(noodlecrm__meaningful_conversation_date_time__c));
		sb.append(",noodlecrm__applying_to_a_competitor__c="+noodlecrm__applying_to_a_competitor__c);
		sb.append(",noodlecrm__lead_stated_professional_status__c="+noodlecrm__lead_stated_professional_status__c);
		sb.append(",noodlecrm__street__c="+noodlecrm__street__c);
		sb.append(",noodlecrm__lor_1__c="+noodlecrm__lor_1__c);
		sb.append(",noodlecrm__scholarship_applied__c="+noodlecrm__scholarship_applied__c);
		sb.append(",noodlecrm__ea_indicated_start_term__c="+noodlecrm__ea_indicated_start_term__c);
		sb.append(",noodlecrm__state_region__c="+noodlecrm__state_region__c);
		sb.append(",noodlecrm__registered__c="+String.valueOf(noodlecrm__registered__c));
		sb.append(",noodlecrm__employer_benefits__c="+noodlecrm__employer_benefits__c);
		sb.append(",noodlecrm__utm_campaign__c="+noodlecrm__utm_campaign__c);
		sb.append(",lastactivitydate="+String.valueOf(lastactivitydate));
		sb.append(",noodlecrm__will_not_apply_reason_other__c="+noodlecrm__will_not_apply_reason_other__c);
		sb.append(",noodlecrm__app_deposit_date_time__c="+String.valueOf(noodlecrm__app_deposit_date_time__c));
		sb.append(",noodlecrm__application_status__c="+noodlecrm__application_status__c);
		sb.append(",noodlecrm__defer_reason_detail__c="+noodlecrm__defer_reason_detail__c);
		sb.append(",hasopenactivity="+String.valueOf(hasopenactivity));
		sb.append(",noodlecrm__last_activity_type__c="+noodlecrm__last_activity_type__c);
		sb.append(",noodlecrm__student_loans__c="+noodlecrm__student_loans__c);
		sb.append(",noodlecrm__deliveryinstallationstatus__c="+noodlecrm__deliveryinstallationstatus__c);
		sb.append(",noodlecrm__trackingnumber__c="+noodlecrm__trackingnumber__c);
		sb.append(",noodlecrm__time_zone__c="+noodlecrm__time_zone__c);
		sb.append(",noodlecrm__do_not_call__c="+String.valueOf(noodlecrm__do_not_call__c));
		sb.append(",probability="+String.valueOf(probability));
		sb.append(",noodlecrm__tran_3__c="+noodlecrm__tran_3__c);
		sb.append(",noodlecrm__delivery_timestamp_idata__c="+String.valueOf(noodlecrm__delivery_timestamp_idata__c));
		sb.append(",noodlecrm__last_contacting_state__c="+noodlecrm__last_contacting_state__c);
		sb.append(",noodlecrm__test_requirements__c="+noodlecrm__test_requirements__c);
		sb.append(",noodlecrm__decision_type__c="+noodlecrm__decision_type__c);
		sb.append(",noodlecrm__admit_cohort__c="+noodlecrm__admit_cohort__c);
		sb.append(",noodlecrm__tran_2__c="+noodlecrm__tran_2__c);
		sb.append(",noodlecrm__email__c="+noodlecrm__email__c);
		sb.append(",noodlecrm__university_scholarship_date__c="+String.valueOf(noodlecrm__university_scholarship_date__c));
		sb.append(",noodlecrm__revised_start_date__c="+String.valueOf(noodlecrm__revised_start_date__c));
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",noodlecrm__submit_cohort__c="+noodlecrm__submit_cohort__c);
		sb.append(",isclosed="+String.valueOf(isclosed));
		sb.append(",noodlecrm__condition_type__c="+noodlecrm__condition_type__c);
		sb.append(",noodlecrm__opportunity_status__c="+String.valueOf(noodlecrm__opportunity_status__c));
		sb.append(",noodlecrm__class_schedule_type__c="+noodlecrm__class_schedule_type__c);
		sb.append(",noodlecrm__lead_stated_licensure__c="+noodlecrm__lead_stated_licensure__c);
		sb.append(",noodlecrm__student__c="+noodlecrm__student__c);
		sb.append(",noodlecrm__university_application_id__c="+noodlecrm__university_application_id__c);
		sb.append(",leadsource="+leadsource);
		sb.append(",noodlecrm__updated__c="+String.valueOf(noodlecrm__updated__c));
		sb.append(",noodlecrm__utm_term__c="+noodlecrm__utm_term__c);
		sb.append(",noodlecrm__tran_1__c="+noodlecrm__tran_1__c);
		sb.append(",noodlecrm__google_analytics_id__c="+noodlecrm__google_analytics_id__c);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",noodlecrm__crm_id__c="+noodlecrm__crm_id__c);
		sb.append(",noodlecrm__lead_stated_taken_course__c="+noodlecrm__lead_stated_taken_course__c);
		sb.append(",noodlecrm__ip_address__c="+noodlecrm__ip_address__c);
		sb.append(",noodlecrm__total_calls__c="+String.valueOf(noodlecrm__total_calls__c));
		sb.append(",noodlecrm__university_id_number__c="+noodlecrm__university_id_number__c);
		sb.append(",noodlecrm__decision__c="+noodlecrm__decision__c);
		sb.append(",noodlecrm__test_status_gre__c="+noodlecrm__test_status_gre__c);
		sb.append(",forecastcategory="+forecastcategory);
		sb.append(",noodlecrm__attended_zoom__c="+String.valueOf(noodlecrm__attended_zoom__c));
		sb.append(",noodlecrm__fafsa__c="+noodlecrm__fafsa__c);
		sb.append(",noodlecrm__level_of_education__c="+noodlecrm__level_of_education__c);
		sb.append(",noodlecrm__ea_projected_deposit_date__c="+String.valueOf(noodlecrm__ea_projected_deposit_date__c));
		sb.append(",noodlecrm__currentgenerators__c="+noodlecrm__currentgenerators__c);
		sb.append(",noodlecrm__defer_date__c="+String.valueOf(noodlecrm__defer_date__c));
		sb.append(",noodlecrm__lead_stated_taken_course_req__c="+noodlecrm__lead_stated_taken_course_req__c);
		sb.append(",noodlecrm__follow_up_reason__c="+noodlecrm__follow_up_reason__c);
		sb.append(",noodlecrm__will_not_apply_date__c="+String.valueOf(noodlecrm__will_not_apply_date__c));
		sb.append(",noodlecrm__trying_attempt_date__c="+String.valueOf(noodlecrm__trying_attempt_date__c));
		sb.append(",noodlecrm__gpa__c="+noodlecrm__gpa__c);
		sb.append(",noodlecrm__fa_comments__c="+noodlecrm__fa_comments__c);
		sb.append(",createdbyid="+createdbyid);
		sb.append(",type="+type);
		sb.append(",noodlecrm__first_name__c="+noodlecrm__first_name__c);
		sb.append(",pricebook2id="+pricebook2id);
		sb.append(",contactid="+contactid);
		sb.append(",noodlecrm__contact_type__c="+noodlecrm__contact_type__c);
		sb.append(",noodlecrm__conversion_date__c="+String.valueOf(noodlecrm__conversion_date__c));
		sb.append(",noodlecrm__ordernumber__c="+noodlecrm__ordernumber__c);
		sb.append(",fiscalyear="+String.valueOf(fiscalyear));
		sb.append(",noodlecrm__defer_start_date__c="+String.valueOf(noodlecrm__defer_start_date__c));
		sb.append(",noodlecrm__postalcode__c="+noodlecrm__postalcode__c);
		sb.append(",noodlecrm__re_open__c="+String.valueOf(noodlecrm__re_open__c));
		sb.append(",noodlecrm__applying_to_a_competitor_type__c="+noodlecrm__applying_to_a_competitor_type__c);
		sb.append(",noodlecrm__app_complete_date__c="+String.valueOf(noodlecrm__app_complete_date__c));
		sb.append(",noodlecrm__country__c="+noodlecrm__country__c);
		sb.append(",description="+description);
		sb.append(",noodlecrm__application_program__c="+noodlecrm__application_program__c);
		sb.append(",noodlecrm__decline_date__c="+String.valueOf(noodlecrm__decline_date__c));
		sb.append(",lastreferenceddate="+String.valueOf(lastreferenceddate));
		sb.append(",noodlecrm__temperature__c="+noodlecrm__temperature__c);
		sb.append(",noodlecrm__competitor_university_2__c="+noodlecrm__competitor_university_2__c);
		sb.append(",noodlecrm__course_requirements__c="+noodlecrm__course_requirements__c);
		sb.append(",fiscal="+fiscal);
		sb.append(",noodlecrm__last_name__c="+noodlecrm__last_name__c);
		sb.append(",noodlecrm__sop__c="+noodlecrm__sop__c);
		sb.append(",noodlecrm__competitor_university_1__c="+noodlecrm__competitor_university_1__c);
		sb.append(",noodlecrm__bad_lead_date_time__c="+String.valueOf(noodlecrm__bad_lead_date_time__c));
		sb.append(",nextstep="+nextstep);
		sb.append(",noodlecrm__signed_up_for_webinar__c="+String.valueOf(noodlecrm__signed_up_for_webinar__c));
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__preferred_phone__c="+noodlecrm__preferred_phone__c);
		sb.append(",noodlecrm__program3__c="+noodlecrm__program3__c);
		sb.append(",noodlecrm__missed_attempt_counter2__c="+String.valueOf(noodlecrm__missed_attempt_counter2__c));
		sb.append(",noodlecrm__university_app_crmid__c="+noodlecrm__university_app_crmid__c);
		sb.append(",noodlecrm__last_call_date_time__c="+String.valueOf(noodlecrm__last_call_date_time__c));
		sb.append(",noodlecrm__program2__r__noodlecrm__external_id__c="+noodlecrm__program2__r__noodlecrm__external_id__c);
		sb.append(",noodlecrm__program3__r__noodlecrm__external_id__c="+noodlecrm__program3__r__noodlecrm__external_id__c);
		sb.append(",noodlecrm__app_start_date_time__c="+String.valueOf(noodlecrm__app_start_date_time__c));
		sb.append(",noodlecrm__historical_call_count__c="+String.valueOf(noodlecrm__historical_call_count__c));
		sb.append(",noodlecrm__revised_start_cohort__c="+noodlecrm__revised_start_cohort__c);
		sb.append(",noodlecrm__app_enrolled_date_time__c="+String.valueOf(noodlecrm__app_enrolled_date_time__c));
		sb.append(",noodlecrm__external_id_unique__c="+noodlecrm__external_id_unique__c);
		sb.append(",noodlecrm__preferred_email__c="+noodlecrm__preferred_email__c);
		sb.append(",noodlecrm__student_contact__c="+noodlecrm__student_contact__c);
		sb.append(",noodlecrm__decision_date_time__c="+String.valueOf(noodlecrm__decision_date_time__c));
		sb.append(",noodlecrm__final_start_cohort__c="+noodlecrm__final_start_cohort__c);
		sb.append(",noodlecrm__app_complete_date_time__c="+String.valueOf(noodlecrm__app_complete_date_time__c));
		sb.append(",noodlecrm__app_submit_date_time__c="+String.valueOf(noodlecrm__app_submit_date_time__c));
		sb.append(",noodlecrm__application_indicated_start_cohort__c="+noodlecrm__application_indicated_start_cohort__c);
		sb.append(",noodlecrm__engagement_status__c="+noodlecrm__engagement_status__c);
		sb.append(",noodlecrm__is_test_record__c="+String.valueOf(noodlecrm__is_test_record__c));
		sb.append(",noodlecrm__first_inquiry_action__c="+noodlecrm__first_inquiry_action__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String noodlecrm__university_scholarship_details__c;

				public String getNoodlecrm__university_scholarship_details__c () {
					return this.noodlecrm__university_scholarship_details__c;
				}
				
			    public Boolean hasopportunitylineitem;

				public Boolean getHasopportunitylineitem () {
					return this.hasopportunitylineitem;
				}
				
			    public java.util.Date noodlecrm__final_start_date__c;

				public java.util.Date getNoodlecrm__final_start_date__c () {
					return this.noodlecrm__final_start_date__c;
				}
				
			    public String noodlecrm__years_experience__c;

				public String getNoodlecrm__years_experience__c () {
					return this.noodlecrm__years_experience__c;
				}
				
			    public String noodlecrm__delivery_status_idata__c;

				public String getNoodlecrm__delivery_status_idata__c () {
					return this.noodlecrm__delivery_status_idata__c;
				}
				
			    public java.util.Date noodlecrm__decision_date__c;

				public java.util.Date getNoodlecrm__decision_date__c () {
					return this.noodlecrm__decision_date__c;
				}
				
			    public Boolean noodlecrm__application_drafted__c;

				public Boolean getNoodlecrm__application_drafted__c () {
					return this.noodlecrm__application_drafted__c;
				}
				
			    public Double noodlecrm__total_attempts_pre_mc__c;

				public Double getNoodlecrm__total_attempts_pre_mc__c () {
					return this.noodlecrm__total_attempts_pre_mc__c;
				}
				
			    public Double noodlecrm__total_emails__c;

				public Double getNoodlecrm__total_emails__c () {
					return this.noodlecrm__total_emails__c;
				}
				
			    public String noodlecrm__scholarships__c;

				public String getNoodlecrm__scholarships__c () {
					return this.noodlecrm__scholarships__c;
				}
				
			    public String noodlecrm__url__c;

				public String getNoodlecrm__url__c () {
					return this.noodlecrm__url__c;
				}
				
			    public java.util.Date noodlecrm__current_start_date__c;

				public java.util.Date getNoodlecrm__current_start_date__c () {
					return this.noodlecrm__current_start_date__c;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__will_not_complete_reason__c;

				public String getNoodlecrm__will_not_complete_reason__c () {
					return this.noodlecrm__will_not_complete_reason__c;
				}
				
			    public String noodlecrm__defer_reason__c;

				public String getNoodlecrm__defer_reason__c () {
					return this.noodlecrm__defer_reason__c;
				}
				
			    public String noodlecrm__lead_stated_gpa__c;

				public String getNoodlecrm__lead_stated_gpa__c () {
					return this.noodlecrm__lead_stated_gpa__c;
				}
				
			    public String noodlecrm__degree_verification__c;

				public String getNoodlecrm__degree_verification__c () {
					return this.noodlecrm__degree_verification__c;
				}
				
			    public java.util.Date noodlecrm__app_item_received_date_time__c;

				public java.util.Date getNoodlecrm__app_item_received_date_time__c () {
					return this.noodlecrm__app_item_received_date_time__c;
				}
				
			    public String noodlecrm__phone__c;

				public String getNoodlecrm__phone__c () {
					return this.noodlecrm__phone__c;
				}
				
			    public String noodlecrm__decline_reason_details__c;

				public String getNoodlecrm__decline_reason_details__c () {
					return this.noodlecrm__decline_reason_details__c;
				}
				
			    public String noodlecrm__will_not_apply_reason__c;

				public String getNoodlecrm__will_not_apply_reason__c () {
					return this.noodlecrm__will_not_apply_reason__c;
				}
				
			    public String forecastcategoryname;

				public String getForecastcategoryname () {
					return this.forecastcategoryname;
				}
				
			    public String noodlecrm__optional_statement__c;

				public String getNoodlecrm__optional_statement__c () {
					return this.noodlecrm__optional_statement__c;
				}
				
			    public String noodlecrm__maincompetitors__c;

				public String getNoodlecrm__maincompetitors__c () {
					return this.noodlecrm__maincompetitors__c;
				}
				
			    public String noodlecrm__partnerships__c;

				public String getNoodlecrm__partnerships__c () {
					return this.noodlecrm__partnerships__c;
				}
				
			    public String noodlecrm__bad_lead_reason__c;

				public String getNoodlecrm__bad_lead_reason__c () {
					return this.noodlecrm__bad_lead_reason__c;
				}
				
			    public java.util.Date noodlecrm__application_last_login__c;

				public java.util.Date getNoodlecrm__application_last_login__c () {
					return this.noodlecrm__application_last_login__c;
				}
				
			    public String noodlecrm__out_of_pocket__c;

				public String getNoodlecrm__out_of_pocket__c () {
					return this.noodlecrm__out_of_pocket__c;
				}
				
			    public String noodlecrm__enrollment_status__c;

				public String getNoodlecrm__enrollment_status__c () {
					return this.noodlecrm__enrollment_status__c;
				}
				
			    public String noodlecrm__competitor_details__c;

				public String getNoodlecrm__competitor_details__c () {
					return this.noodlecrm__competitor_details__c;
				}
				
			    public java.util.Date noodlecrm__last_attended_zoom_date_time__c;

				public java.util.Date getNoodlecrm__last_attended_zoom_date_time__c () {
					return this.noodlecrm__last_attended_zoom_date_time__c;
				}
				
			    public java.util.Date noodlecrm__last_attended_webinar_date_time__c;

				public java.util.Date getNoodlecrm__last_attended_webinar_date_time__c () {
					return this.noodlecrm__last_attended_webinar_date_time__c;
				}
				
			    public String noodlecrm__program2__c;

				public String getNoodlecrm__program2__c () {
					return this.noodlecrm__program2__c;
				}
				
			    public java.util.Date noodlecrm__enrollment_status_date_time__c;

				public java.util.Date getNoodlecrm__enrollment_status_date_time__c () {
					return this.noodlecrm__enrollment_status_date_time__c;
				}
				
			    public String noodlecrm__noodle_crm_id__c;

				public String getNoodlecrm__noodle_crm_id__c () {
					return this.noodlecrm__noodle_crm_id__c;
				}
				
			    public java.util.Date closedate;

				public java.util.Date getClosedate () {
					return this.closedate;
				}
				
			    public java.util.Date noodlecrm__application_indicated_start_date__c;

				public java.util.Date getNoodlecrm__application_indicated_start_date__c () {
					return this.noodlecrm__application_indicated_start_date__c;
				}
				
			    public String noodlecrm__university__c;

				public String getNoodlecrm__university__c () {
					return this.noodlecrm__university__c;
				}
				
			    public String noodlecrm__military__c;

				public String getNoodlecrm__military__c () {
					return this.noodlecrm__military__c;
				}
				
			    public String noodlecrm__decline_reason__c;

				public String getNoodlecrm__decline_reason__c () {
					return this.noodlecrm__decline_reason__c;
				}
				
			    public String noodlecrm__universitycrmid__c;

				public String getNoodlecrm__universitycrmid__c () {
					return this.noodlecrm__universitycrmid__c;
				}
				
			    public String noodlecrm__resume__c;

				public String getNoodlecrm__resume__c () {
					return this.noodlecrm__resume__c;
				}
				
			    public String noodlecrm__meets_program_criteria__c;

				public String getNoodlecrm__meets_program_criteria__c () {
					return this.noodlecrm__meets_program_criteria__c;
				}
				
			    public String noodlecrm__best_time_to_call__c;

				public String getNoodlecrm__best_time_to_call__c () {
					return this.noodlecrm__best_time_to_call__c;
				}
				
			    public Double noodlecrm__total_texts__c;

				public Double getNoodlecrm__total_texts__c () {
					return this.noodlecrm__total_texts__c;
				}
				
			    public String noodlecrm__application_program_global__c;

				public String getNoodlecrm__application_program_global__c () {
					return this.noodlecrm__application_program_global__c;
				}
				
			    public String accountid;

				public String getAccountid () {
					return this.accountid;
				}
				
			    public String noodlecrm__external_id_populated__c;

				public String getNoodlecrm__external_id_populated__c () {
					return this.noodlecrm__external_id_populated__c;
				}
				
			    public String noodlecrm__utm_source__c;

				public String getNoodlecrm__utm_source__c () {
					return this.noodlecrm__utm_source__c;
				}
				
			    public Double noodlecrm__total_inquiries__c;

				public Double getNoodlecrm__total_inquiries__c () {
					return this.noodlecrm__total_inquiries__c;
				}
				
			    public java.util.Date noodlecrm__first_call_date_time__c;

				public java.util.Date getNoodlecrm__first_call_date_time__c () {
					return this.noodlecrm__first_call_date_time__c;
				}
				
			    public String noodlecrm__lead_external_id__c;

				public String getNoodlecrm__lead_external_id__c () {
					return this.noodlecrm__lead_external_id__c;
				}
				
			    public java.util.Date noodlecrm__webinar_signup_date_time__c;

				public java.util.Date getNoodlecrm__webinar_signup_date_time__c () {
					return this.noodlecrm__webinar_signup_date_time__c;
				}
				
			    public java.util.Date lastvieweddate;

				public java.util.Date getLastvieweddate () {
					return this.lastvieweddate;
				}
				
			    public String noodlecrm__city__c;

				public String getNoodlecrm__city__c () {
					return this.noodlecrm__city__c;
				}
				
			    public String noodlecrm__application_decision__c;

				public String getNoodlecrm__application_decision__c () {
					return this.noodlecrm__application_decision__c;
				}
				
			    public String noodlecrm__university_email__c;

				public String getNoodlecrm__university_email__c () {
					return this.noodlecrm__university_email__c;
				}
				
			    public String noodlecrm__responsiveness__c;

				public String getNoodlecrm__responsiveness__c () {
					return this.noodlecrm__responsiveness__c;
				}
				
			    public String noodlecrm__official_cohort__c;

				public String getNoodlecrm__official_cohort__c () {
					return this.noodlecrm__official_cohort__c;
				}
				
			    public String stagename;

				public String getStagename () {
					return this.stagename;
				}
				
			    public java.util.Date noodlecrm__ea_projected_submit_date__c;

				public java.util.Date getNoodlecrm__ea_projected_submit_date__c () {
					return this.noodlecrm__ea_projected_submit_date__c;
				}
				
			    public java.util.Date noodlecrm__deal_stage__c;

				public java.util.Date getNoodlecrm__deal_stage__c () {
					return this.noodlecrm__deal_stage__c;
				}
				
			    public String noodlecrm__first_touch_source__c;

				public String getNoodlecrm__first_touch_source__c () {
					return this.noodlecrm__first_touch_source__c;
				}
				
			    public String noodlecrm__international_language_test__c;

				public String getNoodlecrm__international_language_test__c () {
					return this.noodlecrm__international_language_test__c;
				}
				
			    public String noodlecrm__utm_content__c;

				public String getNoodlecrm__utm_content__c () {
					return this.noodlecrm__utm_content__c;
				}
				
			    public java.util.Date noodlecrm__app_start_date__c;

				public java.util.Date getNoodlecrm__app_start_date__c () {
					return this.noodlecrm__app_start_date__c;
				}
				
			    public String campaignid;

				public String getCampaignid () {
					return this.campaignid;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Boolean hasoverduetask;

				public Boolean getHasoverduetask () {
					return this.hasoverduetask;
				}
				
			    public String noodlecrm__opportunity_owner__c;

				public String getNoodlecrm__opportunity_owner__c () {
					return this.noodlecrm__opportunity_owner__c;
				}
				
			    public java.util.Date noodlecrm__missed_attempt_date_time__c;

				public java.util.Date getNoodlecrm__missed_attempt_date_time__c () {
					return this.noodlecrm__missed_attempt_date_time__c;
				}
				
			    public Boolean iswon;

				public Boolean getIswon () {
					return this.iswon;
				}
				
			    public java.util.Date noodlecrm__application_submit_date__c;

				public java.util.Date getNoodlecrm__application_submit_date__c () {
					return this.noodlecrm__application_submit_date__c;
				}
				
			    public String noodlecrm__associated_contact__c;

				public String getNoodlecrm__associated_contact__c () {
					return this.noodlecrm__associated_contact__c;
				}
				
			    public java.util.Date noodlecrm__expected_date_to_meet_requirement__c;

				public java.util.Date getNoodlecrm__expected_date_to_meet_requirement__c () {
					return this.noodlecrm__expected_date_to_meet_requirement__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public java.util.Date noodlecrm__last_activitydate_time__c;

				public java.util.Date getNoodlecrm__last_activitydate_time__c () {
					return this.noodlecrm__last_activitydate_time__c;
				}
				
			    public String noodlecrm__missed_attempt_counter__c;

				public String getNoodlecrm__missed_attempt_counter__c () {
					return this.noodlecrm__missed_attempt_counter__c;
				}
				
			    public String noodlecrm__program__c;

				public String getNoodlecrm__program__c () {
					return this.noodlecrm__program__c;
				}
				
			    public String noodlecrm__licensure__c;

				public String getNoodlecrm__licensure__c () {
					return this.noodlecrm__licensure__c;
				}
				
			    public Integer fiscalquarter;

				public Integer getFiscalquarter () {
					return this.fiscalquarter;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public String noodlecrm__utm_medium__c;

				public String getNoodlecrm__utm_medium__c () {
					return this.noodlecrm__utm_medium__c;
				}
				
			    public java.util.Date noodlecrm__last_call_date__c;

				public java.util.Date getNoodlecrm__last_call_date__c () {
					return this.noodlecrm__last_call_date__c;
				}
				
			    public String noodlecrm__opportunity_external_id__c;

				public String getNoodlecrm__opportunity_external_id__c () {
					return this.noodlecrm__opportunity_external_id__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public java.util.Date noodlecrm__follow_up_date__c;

				public java.util.Date getNoodlecrm__follow_up_date__c () {
					return this.noodlecrm__follow_up_date__c;
				}
				
			    public Boolean noodlecrm__attended_webinar__c;

				public Boolean getNoodlecrm__attended_webinar__c () {
					return this.noodlecrm__attended_webinar__c;
				}
				
			    public String noodlecrm__professional_experience__c;

				public String getNoodlecrm__professional_experience__c () {
					return this.noodlecrm__professional_experience__c;
				}
				
			    public String noodlecrm__lor_2__c;

				public String getNoodlecrm__lor_2__c () {
					return this.noodlecrm__lor_2__c;
				}
				
			    public String noodlecrm__supplemental__c;

				public String getNoodlecrm__supplemental__c () {
					return this.noodlecrm__supplemental__c;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String noodlecrm__mta_interaction_record__c;

				public String getNoodlecrm__mta_interaction_record__c () {
					return this.noodlecrm__mta_interaction_record__c;
				}
				
			    public java.util.Date noodlecrm__meaningful_conversation_date_time__c;

				public java.util.Date getNoodlecrm__meaningful_conversation_date_time__c () {
					return this.noodlecrm__meaningful_conversation_date_time__c;
				}
				
			    public String noodlecrm__applying_to_a_competitor__c;

				public String getNoodlecrm__applying_to_a_competitor__c () {
					return this.noodlecrm__applying_to_a_competitor__c;
				}
				
			    public String noodlecrm__lead_stated_professional_status__c;

				public String getNoodlecrm__lead_stated_professional_status__c () {
					return this.noodlecrm__lead_stated_professional_status__c;
				}
				
			    public String noodlecrm__street__c;

				public String getNoodlecrm__street__c () {
					return this.noodlecrm__street__c;
				}
				
			    public String noodlecrm__lor_1__c;

				public String getNoodlecrm__lor_1__c () {
					return this.noodlecrm__lor_1__c;
				}
				
			    public String noodlecrm__scholarship_applied__c;

				public String getNoodlecrm__scholarship_applied__c () {
					return this.noodlecrm__scholarship_applied__c;
				}
				
			    public String noodlecrm__ea_indicated_start_term__c;

				public String getNoodlecrm__ea_indicated_start_term__c () {
					return this.noodlecrm__ea_indicated_start_term__c;
				}
				
			    public String noodlecrm__state_region__c;

				public String getNoodlecrm__state_region__c () {
					return this.noodlecrm__state_region__c;
				}
				
			    public java.util.Date noodlecrm__registered__c;

				public java.util.Date getNoodlecrm__registered__c () {
					return this.noodlecrm__registered__c;
				}
				
			    public String noodlecrm__employer_benefits__c;

				public String getNoodlecrm__employer_benefits__c () {
					return this.noodlecrm__employer_benefits__c;
				}
				
			    public String noodlecrm__utm_campaign__c;

				public String getNoodlecrm__utm_campaign__c () {
					return this.noodlecrm__utm_campaign__c;
				}
				
			    public java.util.Date lastactivitydate;

				public java.util.Date getLastactivitydate () {
					return this.lastactivitydate;
				}
				
			    public String noodlecrm__will_not_apply_reason_other__c;

				public String getNoodlecrm__will_not_apply_reason_other__c () {
					return this.noodlecrm__will_not_apply_reason_other__c;
				}
				
			    public java.util.Date noodlecrm__app_deposit_date_time__c;

				public java.util.Date getNoodlecrm__app_deposit_date_time__c () {
					return this.noodlecrm__app_deposit_date_time__c;
				}
				
			    public String noodlecrm__application_status__c;

				public String getNoodlecrm__application_status__c () {
					return this.noodlecrm__application_status__c;
				}
				
			    public String noodlecrm__defer_reason_detail__c;

				public String getNoodlecrm__defer_reason_detail__c () {
					return this.noodlecrm__defer_reason_detail__c;
				}
				
			    public Boolean hasopenactivity;

				public Boolean getHasopenactivity () {
					return this.hasopenactivity;
				}
				
			    public String noodlecrm__last_activity_type__c;

				public String getNoodlecrm__last_activity_type__c () {
					return this.noodlecrm__last_activity_type__c;
				}
				
			    public String noodlecrm__student_loans__c;

				public String getNoodlecrm__student_loans__c () {
					return this.noodlecrm__student_loans__c;
				}
				
			    public String noodlecrm__deliveryinstallationstatus__c;

				public String getNoodlecrm__deliveryinstallationstatus__c () {
					return this.noodlecrm__deliveryinstallationstatus__c;
				}
				
			    public String noodlecrm__trackingnumber__c;

				public String getNoodlecrm__trackingnumber__c () {
					return this.noodlecrm__trackingnumber__c;
				}
				
			    public String noodlecrm__time_zone__c;

				public String getNoodlecrm__time_zone__c () {
					return this.noodlecrm__time_zone__c;
				}
				
			    public Boolean noodlecrm__do_not_call__c;

				public Boolean getNoodlecrm__do_not_call__c () {
					return this.noodlecrm__do_not_call__c;
				}
				
			    public Double probability;

				public Double getProbability () {
					return this.probability;
				}
				
			    public java.util.Date noodlecrm__delivery_timestamp_idata__c;

				public java.util.Date getNoodlecrm__delivery_timestamp_idata__c () {
					return this.noodlecrm__delivery_timestamp_idata__c;
				}
				
			    public String noodlecrm__last_contacting_state__c;

				public String getNoodlecrm__last_contacting_state__c () {
					return this.noodlecrm__last_contacting_state__c;
				}
				
			    public String noodlecrm__test_requirements__c;

				public String getNoodlecrm__test_requirements__c () {
					return this.noodlecrm__test_requirements__c;
				}
				
			    public String noodlecrm__decision_type__c;

				public String getNoodlecrm__decision_type__c () {
					return this.noodlecrm__decision_type__c;
				}
				
			    public String noodlecrm__admit_cohort__c;

				public String getNoodlecrm__admit_cohort__c () {
					return this.noodlecrm__admit_cohort__c;
				}
				
			    public String noodlecrm__tran_2__c;

				public String getNoodlecrm__tran_2__c () {
					return this.noodlecrm__tran_2__c;
				}
				
			    public String noodlecrm__email__c;

				public String getNoodlecrm__email__c () {
					return this.noodlecrm__email__c;
				}
				
			    public java.util.Date noodlecrm__university_scholarship_date__c;

				public java.util.Date getNoodlecrm__university_scholarship_date__c () {
					return this.noodlecrm__university_scholarship_date__c;
				}
				
			    public java.util.Date noodlecrm__revised_start_date__c;

				public java.util.Date getNoodlecrm__revised_start_date__c () {
					return this.noodlecrm__revised_start_date__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String noodlecrm__submit_cohort__c;

				public String getNoodlecrm__submit_cohort__c () {
					return this.noodlecrm__submit_cohort__c;
				}
				
			    public Boolean isclosed;

				public Boolean getIsclosed () {
					return this.isclosed;
				}
				
			    public String noodlecrm__condition_type__c;

				public String getNoodlecrm__condition_type__c () {
					return this.noodlecrm__condition_type__c;
				}
				
			    public Boolean noodlecrm__opportunity_status__c;

				public Boolean getNoodlecrm__opportunity_status__c () {
					return this.noodlecrm__opportunity_status__c;
				}
				
			    public String noodlecrm__class_schedule_type__c;

				public String getNoodlecrm__class_schedule_type__c () {
					return this.noodlecrm__class_schedule_type__c;
				}
				
			    public String noodlecrm__lead_stated_licensure__c;

				public String getNoodlecrm__lead_stated_licensure__c () {
					return this.noodlecrm__lead_stated_licensure__c;
				}
				
			    public String noodlecrm__student__c;

				public String getNoodlecrm__student__c () {
					return this.noodlecrm__student__c;
				}
				
			    public String noodlecrm__university_application_id__c;

				public String getNoodlecrm__university_application_id__c () {
					return this.noodlecrm__university_application_id__c;
				}
				
			    public String leadsource;

				public String getLeadsource () {
					return this.leadsource;
				}
				
			    public java.util.Date noodlecrm__updated__c;

				public java.util.Date getNoodlecrm__updated__c () {
					return this.noodlecrm__updated__c;
				}
				
			    public String noodlecrm__utm_term__c;

				public String getNoodlecrm__utm_term__c () {
					return this.noodlecrm__utm_term__c;
				}
				
			    public String noodlecrm__tran_1__c;

				public String getNoodlecrm__tran_1__c () {
					return this.noodlecrm__tran_1__c;
				}
				
			    public String noodlecrm__google_analytics_id__c;

				public String getNoodlecrm__google_analytics_id__c () {
					return this.noodlecrm__google_analytics_id__c;
				}
				
			    public Double amount;

				public Double getAmount () {
					return this.amount;
				}
				
			    public String noodlecrm__crm_id__c;

				public String getNoodlecrm__crm_id__c () {
					return this.noodlecrm__crm_id__c;
				}
				
			    public String noodlecrm__lead_stated_taken_course__c;

				public String getNoodlecrm__lead_stated_taken_course__c () {
					return this.noodlecrm__lead_stated_taken_course__c;
				}
				
			    public String noodlecrm__ip_address__c;

				public String getNoodlecrm__ip_address__c () {
					return this.noodlecrm__ip_address__c;
				}
				
			    public Double noodlecrm__total_calls__c;

				public Double getNoodlecrm__total_calls__c () {
					return this.noodlecrm__total_calls__c;
				}
				
			    public String noodlecrm__university_id_number__c;

				public String getNoodlecrm__university_id_number__c () {
					return this.noodlecrm__university_id_number__c;
				}
				
			    public String noodlecrm__decision__c;

				public String getNoodlecrm__decision__c () {
					return this.noodlecrm__decision__c;
				}
				
			    public String noodlecrm__test_status_gre__c;

				public String getNoodlecrm__test_status_gre__c () {
					return this.noodlecrm__test_status_gre__c;
				}
				
			    public String forecastcategory;

				public String getForecastcategory () {
					return this.forecastcategory;
				}
				
			    public Boolean noodlecrm__attended_zoom__c;

				public Boolean getNoodlecrm__attended_zoom__c () {
					return this.noodlecrm__attended_zoom__c;
				}
				
			    public String noodlecrm__fafsa__c;

				public String getNoodlecrm__fafsa__c () {
					return this.noodlecrm__fafsa__c;
				}
				
			    public String noodlecrm__level_of_education__c;

				public String getNoodlecrm__level_of_education__c () {
					return this.noodlecrm__level_of_education__c;
				}
				
			    public java.util.Date noodlecrm__ea_projected_deposit_date__c;

				public java.util.Date getNoodlecrm__ea_projected_deposit_date__c () {
					return this.noodlecrm__ea_projected_deposit_date__c;
				}
				
			    public String noodlecrm__currentgenerators__c;

				public String getNoodlecrm__currentgenerators__c () {
					return this.noodlecrm__currentgenerators__c;
				}
				
			    public java.util.Date noodlecrm__defer_date__c;

				public java.util.Date getNoodlecrm__defer_date__c () {
					return this.noodlecrm__defer_date__c;
				}
				
			    public String noodlecrm__lead_stated_taken_course_req__c;

				public String getNoodlecrm__lead_stated_taken_course_req__c () {
					return this.noodlecrm__lead_stated_taken_course_req__c;
				}
				
			    public String noodlecrm__follow_up_reason__c;

				public String getNoodlecrm__follow_up_reason__c () {
					return this.noodlecrm__follow_up_reason__c;
				}
				
			    public java.util.Date noodlecrm__will_not_apply_date__c;

				public java.util.Date getNoodlecrm__will_not_apply_date__c () {
					return this.noodlecrm__will_not_apply_date__c;
				}
				
			    public java.util.Date noodlecrm__trying_attempt_date__c;

				public java.util.Date getNoodlecrm__trying_attempt_date__c () {
					return this.noodlecrm__trying_attempt_date__c;
				}
				
			    public String noodlecrm__gpa__c;

				public String getNoodlecrm__gpa__c () {
					return this.noodlecrm__gpa__c;
				}
				
			    public String noodlecrm__fa_comments__c;

				public String getNoodlecrm__fa_comments__c () {
					return this.noodlecrm__fa_comments__c;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String noodlecrm__first_name__c;

				public String getNoodlecrm__first_name__c () {
					return this.noodlecrm__first_name__c;
				}
				
			    public String pricebook2id;

				public String getPricebook2id () {
					return this.pricebook2id;
				}
				
			    public String contactid;

				public String getContactid () {
					return this.contactid;
				}
				
			    public String noodlecrm__contact_type__c;

				public String getNoodlecrm__contact_type__c () {
					return this.noodlecrm__contact_type__c;
				}
				
			    public java.util.Date noodlecrm__conversion_date__c;

				public java.util.Date getNoodlecrm__conversion_date__c () {
					return this.noodlecrm__conversion_date__c;
				}
				
			    public String noodlecrm__ordernumber__c;

				public String getNoodlecrm__ordernumber__c () {
					return this.noodlecrm__ordernumber__c;
				}
				
			    public Integer fiscalyear;

				public Integer getFiscalyear () {
					return this.fiscalyear;
				}
				
			    public java.util.Date noodlecrm__defer_start_date__c;

				public java.util.Date getNoodlecrm__defer_start_date__c () {
					return this.noodlecrm__defer_start_date__c;
				}
				
			    public String noodlecrm__postalcode__c;

				public String getNoodlecrm__postalcode__c () {
					return this.noodlecrm__postalcode__c;
				}
				
			    public Boolean noodlecrm__re_open__c;

				public Boolean getNoodlecrm__re_open__c () {
					return this.noodlecrm__re_open__c;
				}
				
			    public String noodlecrm__applying_to_a_competitor_type__c;

				public String getNoodlecrm__applying_to_a_competitor_type__c () {
					return this.noodlecrm__applying_to_a_competitor_type__c;
				}
				
			    public java.util.Date noodlecrm__app_complete_date__c;

				public java.util.Date getNoodlecrm__app_complete_date__c () {
					return this.noodlecrm__app_complete_date__c;
				}
				
			    public String noodlecrm__country__c;

				public String getNoodlecrm__country__c () {
					return this.noodlecrm__country__c;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String noodlecrm__application_program__c;

				public String getNoodlecrm__application_program__c () {
					return this.noodlecrm__application_program__c;
				}
				
			    public java.util.Date noodlecrm__decline_date__c;

				public java.util.Date getNoodlecrm__decline_date__c () {
					return this.noodlecrm__decline_date__c;
				}
				
			    public java.util.Date lastreferenceddate;

				public java.util.Date getLastreferenceddate () {
					return this.lastreferenceddate;
				}
				
			    public String noodlecrm__temperature__c;

				public String getNoodlecrm__temperature__c () {
					return this.noodlecrm__temperature__c;
				}
				
			    public String noodlecrm__competitor_university_2__c;

				public String getNoodlecrm__competitor_university_2__c () {
					return this.noodlecrm__competitor_university_2__c;
				}
				
			    public String noodlecrm__course_requirements__c;

				public String getNoodlecrm__course_requirements__c () {
					return this.noodlecrm__course_requirements__c;
				}
				
			    public String fiscal;

				public String getFiscal () {
					return this.fiscal;
				}
				
			    public String noodlecrm__last_name__c;

				public String getNoodlecrm__last_name__c () {
					return this.noodlecrm__last_name__c;
				}
				
			    public String noodlecrm__sop__c;

				public String getNoodlecrm__sop__c () {
					return this.noodlecrm__sop__c;
				}
				
			    public String noodlecrm__competitor_university_1__c;

				public String getNoodlecrm__competitor_university_1__c () {
					return this.noodlecrm__competitor_university_1__c;
				}
				
			    public java.util.Date noodlecrm__bad_lead_date_time__c;

				public java.util.Date getNoodlecrm__bad_lead_date_time__c () {
					return this.noodlecrm__bad_lead_date_time__c;
				}
				
			    public String nextstep;

				public String getNextstep () {
					return this.nextstep;
				}
				
			    public Boolean noodlecrm__signed_up_for_webinar__c;

				public Boolean getNoodlecrm__signed_up_for_webinar__c () {
					return this.noodlecrm__signed_up_for_webinar__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__preferred_phone__c;

				public String getNoodlecrm__preferred_phone__c () {
					return this.noodlecrm__preferred_phone__c;
				}
				
			    public String noodlecrm__program3__c;

				public String getNoodlecrm__program3__c () {
					return this.noodlecrm__program3__c;
				}
				
			    public Double noodlecrm__missed_attempt_counter2__c;

				public Double getNoodlecrm__missed_attempt_counter2__c () {
					return this.noodlecrm__missed_attempt_counter2__c;
				}
				
			    public String noodlecrm__university_app_crmid__c;

				public String getNoodlecrm__university_app_crmid__c () {
					return this.noodlecrm__university_app_crmid__c;
				}
				
			    public java.util.Date noodlecrm__last_call_date_time__c;

				public java.util.Date getNoodlecrm__last_call_date_time__c () {
					return this.noodlecrm__last_call_date_time__c;
				}
				
			    public String noodlecrm__program2__r__noodlecrm__external_id__c;

				public String getNoodlecrm__program2__r__noodlecrm__external_id__c () {
					return this.noodlecrm__program2__r__noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__program3__r__noodlecrm__external_id__c;

				public String getNoodlecrm__program3__r__noodlecrm__external_id__c () {
					return this.noodlecrm__program3__r__noodlecrm__external_id__c;
				}
				
			    public java.util.Date noodlecrm__app_start_date_time__c;

				public java.util.Date getNoodlecrm__app_start_date_time__c () {
					return this.noodlecrm__app_start_date_time__c;
				}
				
			    public Double noodlecrm__historical_call_count__c;

				public Double getNoodlecrm__historical_call_count__c () {
					return this.noodlecrm__historical_call_count__c;
				}
				
			    public String noodlecrm__revised_start_cohort__c;

				public String getNoodlecrm__revised_start_cohort__c () {
					return this.noodlecrm__revised_start_cohort__c;
				}
				
			    public java.util.Date noodlecrm__app_enrolled_date_time__c;

				public java.util.Date getNoodlecrm__app_enrolled_date_time__c () {
					return this.noodlecrm__app_enrolled_date_time__c;
				}
				
			    public String noodlecrm__external_id_unique__c;

				public String getNoodlecrm__external_id_unique__c () {
					return this.noodlecrm__external_id_unique__c;
				}
				
			    public String noodlecrm__preferred_email__c;

				public String getNoodlecrm__preferred_email__c () {
					return this.noodlecrm__preferred_email__c;
				}
				
			    public String noodlecrm__student_contact__c;

				public String getNoodlecrm__student_contact__c () {
					return this.noodlecrm__student_contact__c;
				}
				
			    public java.util.Date noodlecrm__decision_date_time__c;

				public java.util.Date getNoodlecrm__decision_date_time__c () {
					return this.noodlecrm__decision_date_time__c;
				}
				
			    public String noodlecrm__final_start_cohort__c;

				public String getNoodlecrm__final_start_cohort__c () {
					return this.noodlecrm__final_start_cohort__c;
				}
				
			    public java.util.Date noodlecrm__app_complete_date_time__c;

				public java.util.Date getNoodlecrm__app_complete_date_time__c () {
					return this.noodlecrm__app_complete_date_time__c;
				}
				
			    public java.util.Date noodlecrm__app_submit_date_time__c;

				public java.util.Date getNoodlecrm__app_submit_date_time__c () {
					return this.noodlecrm__app_submit_date_time__c;
				}
				
			    public String noodlecrm__application_indicated_start_cohort__c;

				public String getNoodlecrm__application_indicated_start_cohort__c () {
					return this.noodlecrm__application_indicated_start_cohort__c;
				}
				
			    public String noodlecrm__engagement_status__c;

				public String getNoodlecrm__engagement_status__c () {
					return this.noodlecrm__engagement_status__c;
				}
				
			    public Boolean noodlecrm__is_test_record__c;

				public Boolean getNoodlecrm__is_test_record__c () {
					return this.noodlecrm__is_test_record__c;
				}
				
			    public String noodlecrm__first_inquiry_action__c;

				public String getNoodlecrm__first_inquiry_action__c () {
					return this.noodlecrm__first_inquiry_action__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.noodlecrm__university_scholarship_details__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hasopportunitylineitem = null;
           				} else {
           			    	this.hasopportunitylineitem = dis.readBoolean();
           				}
					
					this.noodlecrm__final_start_date__c = readDate(dis);
					
					this.noodlecrm__years_experience__c = readString(dis);
					
					this.noodlecrm__delivery_status_idata__c = readString(dis);
					
					this.noodlecrm__decision_date__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__application_drafted__c = null;
           				} else {
           			    	this.noodlecrm__application_drafted__c = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_attempts_pre_mc__c = null;
           				} else {
           			    	this.noodlecrm__total_attempts_pre_mc__c = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_emails__c = null;
           				} else {
           			    	this.noodlecrm__total_emails__c = dis.readDouble();
           				}
					
					this.noodlecrm__scholarships__c = readString(dis);
					
					this.noodlecrm__url__c = readString(dis);
					
					this.noodlecrm__current_start_date__c = readDate(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__will_not_complete_reason__c = readString(dis);
					
					this.noodlecrm__defer_reason__c = readString(dis);
					
					this.noodlecrm__lead_stated_gpa__c = readString(dis);
					
					this.noodlecrm__degree_verification__c = readString(dis);
					
					this.noodlecrm__app_item_received_date_time__c = readDate(dis);
					
					this.noodlecrm__phone__c = readString(dis);
					
					this.noodlecrm__decline_reason_details__c = readString(dis);
					
					this.noodlecrm__will_not_apply_reason__c = readString(dis);
					
					this.forecastcategoryname = readString(dis);
					
					this.noodlecrm__optional_statement__c = readString(dis);
					
					this.noodlecrm__maincompetitors__c = readString(dis);
					
					this.noodlecrm__partnerships__c = readString(dis);
					
					this.noodlecrm__bad_lead_reason__c = readString(dis);
					
					this.noodlecrm__application_last_login__c = readDate(dis);
					
					this.noodlecrm__out_of_pocket__c = readString(dis);
					
					this.noodlecrm__enrollment_status__c = readString(dis);
					
					this.noodlecrm__competitor_details__c = readString(dis);
					
					this.noodlecrm__last_attended_zoom_date_time__c = readDate(dis);
					
					this.noodlecrm__last_attended_webinar_date_time__c = readDate(dis);
					
					this.noodlecrm__program2__c = readString(dis);
					
					this.noodlecrm__enrollment_status_date_time__c = readDate(dis);
					
					this.noodlecrm__noodle_crm_id__c = readString(dis);
					
					this.closedate = readDate(dis);
					
					this.noodlecrm__application_indicated_start_date__c = readDate(dis);
					
					this.noodlecrm__university__c = readString(dis);
					
					this.noodlecrm__military__c = readString(dis);
					
					this.noodlecrm__decline_reason__c = readString(dis);
					
					this.noodlecrm__universitycrmid__c = readString(dis);
					
					this.noodlecrm__resume__c = readString(dis);
					
					this.noodlecrm__meets_program_criteria__c = readString(dis);
					
					this.noodlecrm__best_time_to_call__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_texts__c = null;
           				} else {
           			    	this.noodlecrm__total_texts__c = dis.readDouble();
           				}
					
					this.noodlecrm__application_program_global__c = readString(dis);
					
					this.accountid = readString(dis);
					
					this.noodlecrm__external_id_populated__c = readString(dis);
					
					this.noodlecrm__utm_source__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_inquiries__c = null;
           				} else {
           			    	this.noodlecrm__total_inquiries__c = dis.readDouble();
           				}
					
					this.noodlecrm__first_call_date_time__c = readDate(dis);
					
					this.noodlecrm__lead_external_id__c = readString(dis);
					
					this.noodlecrm__webinar_signup_date_time__c = readDate(dis);
					
					this.lastvieweddate = readDate(dis);
					
					this.noodlecrm__city__c = readString(dis);
					
					this.noodlecrm__application_decision__c = readString(dis);
					
					this.noodlecrm__university_email__c = readString(dis);
					
					this.noodlecrm__responsiveness__c = readString(dis);
					
					this.noodlecrm__official_cohort__c = readString(dis);
					
					this.stagename = readString(dis);
					
					this.noodlecrm__ea_projected_submit_date__c = readDate(dis);
					
					this.noodlecrm__deal_stage__c = readDate(dis);
					
					this.noodlecrm__first_touch_source__c = readString(dis);
					
					this.noodlecrm__international_language_test__c = readString(dis);
					
					this.noodlecrm__utm_content__c = readString(dis);
					
					this.noodlecrm__app_start_date__c = readDate(dis);
					
					this.campaignid = readString(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hasoverduetask = null;
           				} else {
           			    	this.hasoverduetask = dis.readBoolean();
           				}
					
					this.noodlecrm__opportunity_owner__c = readString(dis);
					
					this.noodlecrm__missed_attempt_date_time__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.iswon = null;
           				} else {
           			    	this.iswon = dis.readBoolean();
           				}
					
					this.noodlecrm__application_submit_date__c = readDate(dis);
					
					this.noodlecrm__associated_contact__c = readString(dis);
					
					this.noodlecrm__expected_date_to_meet_requirement__c = readDate(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__last_activitydate_time__c = readDate(dis);
					
					this.noodlecrm__missed_attempt_counter__c = readString(dis);
					
					this.noodlecrm__program__c = readString(dis);
					
					this.noodlecrm__licensure__c = readString(dis);
					
						this.fiscalquarter = readInteger(dis);
					
					this.ownerid = readString(dis);
					
					this.noodlecrm__utm_medium__c = readString(dis);
					
					this.noodlecrm__last_call_date__c = readDate(dis);
					
					this.noodlecrm__opportunity_external_id__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.noodlecrm__follow_up_date__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__attended_webinar__c = null;
           				} else {
           			    	this.noodlecrm__attended_webinar__c = dis.readBoolean();
           				}
					
					this.noodlecrm__professional_experience__c = readString(dis);
					
					this.noodlecrm__lor_2__c = readString(dis);
					
					this.noodlecrm__supplemental__c = readString(dis);
					
					this.lastmodifiedbyid = readString(dis);
					
					this.noodlecrm__mta_interaction_record__c = readString(dis);
					
					this.noodlecrm__meaningful_conversation_date_time__c = readDate(dis);
					
					this.noodlecrm__applying_to_a_competitor__c = readString(dis);
					
					this.noodlecrm__lead_stated_professional_status__c = readString(dis);
					
					this.noodlecrm__street__c = readString(dis);
					
					this.noodlecrm__lor_1__c = readString(dis);
					
					this.noodlecrm__scholarship_applied__c = readString(dis);
					
					this.noodlecrm__ea_indicated_start_term__c = readString(dis);
					
					this.noodlecrm__state_region__c = readString(dis);
					
					this.noodlecrm__registered__c = readDate(dis);
					
					this.noodlecrm__employer_benefits__c = readString(dis);
					
					this.noodlecrm__utm_campaign__c = readString(dis);
					
					this.lastactivitydate = readDate(dis);
					
					this.noodlecrm__will_not_apply_reason_other__c = readString(dis);
					
					this.noodlecrm__app_deposit_date_time__c = readDate(dis);
					
					this.noodlecrm__application_status__c = readString(dis);
					
					this.noodlecrm__defer_reason_detail__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hasopenactivity = null;
           				} else {
           			    	this.hasopenactivity = dis.readBoolean();
           				}
					
					this.noodlecrm__last_activity_type__c = readString(dis);
					
					this.noodlecrm__student_loans__c = readString(dis);
					
					this.noodlecrm__deliveryinstallationstatus__c = readString(dis);
					
					this.noodlecrm__trackingnumber__c = readString(dis);
					
					this.noodlecrm__time_zone__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__do_not_call__c = null;
           				} else {
           			    	this.noodlecrm__do_not_call__c = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.probability = null;
           				} else {
           			    	this.probability = dis.readDouble();
           				}
					
					this.noodlecrm__delivery_timestamp_idata__c = readDate(dis);
					
					this.noodlecrm__last_contacting_state__c = readString(dis);
					
					this.noodlecrm__test_requirements__c = readString(dis);
					
					this.noodlecrm__decision_type__c = readString(dis);
					
					this.noodlecrm__admit_cohort__c = readString(dis);
					
					this.noodlecrm__tran_2__c = readString(dis);
					
					this.noodlecrm__email__c = readString(dis);
					
					this.noodlecrm__university_scholarship_date__c = readDate(dis);
					
					this.noodlecrm__revised_start_date__c = readDate(dis);
					
					this.createddate = readDate(dis);
					
					this.noodlecrm__submit_cohort__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isclosed = null;
           				} else {
           			    	this.isclosed = dis.readBoolean();
           				}
					
					this.noodlecrm__condition_type__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__opportunity_status__c = null;
           				} else {
           			    	this.noodlecrm__opportunity_status__c = dis.readBoolean();
           				}
					
					this.noodlecrm__class_schedule_type__c = readString(dis);
					
					this.noodlecrm__lead_stated_licensure__c = readString(dis);
					
					this.noodlecrm__student__c = readString(dis);
					
					this.noodlecrm__university_application_id__c = readString(dis);
					
					this.leadsource = readString(dis);
					
					this.noodlecrm__updated__c = readDate(dis);
					
					this.noodlecrm__utm_term__c = readString(dis);
					
					this.noodlecrm__tran_1__c = readString(dis);
					
					this.noodlecrm__google_analytics_id__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.amount = null;
           				} else {
           			    	this.amount = dis.readDouble();
           				}
					
					this.noodlecrm__crm_id__c = readString(dis);
					
					this.noodlecrm__lead_stated_taken_course__c = readString(dis);
					
					this.noodlecrm__ip_address__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__total_calls__c = null;
           				} else {
           			    	this.noodlecrm__total_calls__c = dis.readDouble();
           				}
					
					this.noodlecrm__university_id_number__c = readString(dis);
					
					this.noodlecrm__decision__c = readString(dis);
					
					this.noodlecrm__test_status_gre__c = readString(dis);
					
					this.forecastcategory = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__attended_zoom__c = null;
           				} else {
           			    	this.noodlecrm__attended_zoom__c = dis.readBoolean();
           				}
					
					this.noodlecrm__fafsa__c = readString(dis);
					
					this.noodlecrm__level_of_education__c = readString(dis);
					
					this.noodlecrm__ea_projected_deposit_date__c = readDate(dis);
					
					this.noodlecrm__currentgenerators__c = readString(dis);
					
					this.noodlecrm__defer_date__c = readDate(dis);
					
					this.noodlecrm__lead_stated_taken_course_req__c = readString(dis);
					
					this.noodlecrm__follow_up_reason__c = readString(dis);
					
					this.noodlecrm__will_not_apply_date__c = readDate(dis);
					
					this.noodlecrm__trying_attempt_date__c = readDate(dis);
					
					this.noodlecrm__gpa__c = readString(dis);
					
					this.noodlecrm__fa_comments__c = readString(dis);
					
					this.createdbyid = readString(dis);
					
					this.type = readString(dis);
					
					this.noodlecrm__first_name__c = readString(dis);
					
					this.pricebook2id = readString(dis);
					
					this.contactid = readString(dis);
					
					this.noodlecrm__contact_type__c = readString(dis);
					
					this.noodlecrm__conversion_date__c = readDate(dis);
					
					this.noodlecrm__ordernumber__c = readString(dis);
					
						this.fiscalyear = readInteger(dis);
					
					this.noodlecrm__defer_start_date__c = readDate(dis);
					
					this.noodlecrm__postalcode__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__re_open__c = null;
           				} else {
           			    	this.noodlecrm__re_open__c = dis.readBoolean();
           				}
					
					this.noodlecrm__applying_to_a_competitor_type__c = readString(dis);
					
					this.noodlecrm__app_complete_date__c = readDate(dis);
					
					this.noodlecrm__country__c = readString(dis);
					
					this.description = readString(dis);
					
					this.noodlecrm__application_program__c = readString(dis);
					
					this.noodlecrm__decline_date__c = readDate(dis);
					
					this.lastreferenceddate = readDate(dis);
					
					this.noodlecrm__temperature__c = readString(dis);
					
					this.noodlecrm__competitor_university_2__c = readString(dis);
					
					this.noodlecrm__course_requirements__c = readString(dis);
					
					this.fiscal = readString(dis);
					
					this.noodlecrm__last_name__c = readString(dis);
					
					this.noodlecrm__sop__c = readString(dis);
					
					this.noodlecrm__competitor_university_1__c = readString(dis);
					
					this.noodlecrm__bad_lead_date_time__c = readDate(dis);
					
					this.nextstep = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__signed_up_for_webinar__c = null;
           				} else {
           			    	this.noodlecrm__signed_up_for_webinar__c = dis.readBoolean();
           				}
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__preferred_phone__c = readString(dis);
					
					this.noodlecrm__program3__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__missed_attempt_counter2__c = null;
           				} else {
           			    	this.noodlecrm__missed_attempt_counter2__c = dis.readDouble();
           				}
					
					this.noodlecrm__university_app_crmid__c = readString(dis);
					
					this.noodlecrm__last_call_date_time__c = readDate(dis);
					
					this.noodlecrm__program2__r__noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__program3__r__noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__app_start_date_time__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__historical_call_count__c = null;
           				} else {
           			    	this.noodlecrm__historical_call_count__c = dis.readDouble();
           				}
					
					this.noodlecrm__revised_start_cohort__c = readString(dis);
					
					this.noodlecrm__app_enrolled_date_time__c = readDate(dis);
					
					this.noodlecrm__external_id_unique__c = readString(dis);
					
					this.noodlecrm__preferred_email__c = readString(dis);
					
					this.noodlecrm__student_contact__c = readString(dis);
					
					this.noodlecrm__decision_date_time__c = readDate(dis);
					
					this.noodlecrm__final_start_cohort__c = readString(dis);
					
					this.noodlecrm__app_complete_date_time__c = readDate(dis);
					
					this.noodlecrm__app_submit_date_time__c = readDate(dis);
					
					this.noodlecrm__application_indicated_start_cohort__c = readString(dis);
					
					this.noodlecrm__engagement_status__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__is_test_record__c = null;
           				} else {
           			    	this.noodlecrm__is_test_record__c = dis.readBoolean();
           				}
					
					this.noodlecrm__first_inquiry_action__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.noodlecrm__university_scholarship_details__c,dos);
					
					// Boolean
				
						if(this.hasopportunitylineitem == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.hasopportunitylineitem);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__final_start_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__years_experience__c,dos);
					
					// String
				
						writeString(this.noodlecrm__delivery_status_idata__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__decision_date__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__application_drafted__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__application_drafted__c);
		            	}
					
					// Double
				
						if(this.noodlecrm__total_attempts_pre_mc__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_attempts_pre_mc__c);
		            	}
					
					// Double
				
						if(this.noodlecrm__total_emails__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_emails__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__scholarships__c,dos);
					
					// String
				
						writeString(this.noodlecrm__url__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__current_start_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__will_not_complete_reason__c,dos);
					
					// String
				
						writeString(this.noodlecrm__defer_reason__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_gpa__c,dos);
					
					// String
				
						writeString(this.noodlecrm__degree_verification__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_item_received_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__phone__c,dos);
					
					// String
				
						writeString(this.noodlecrm__decline_reason_details__c,dos);
					
					// String
				
						writeString(this.noodlecrm__will_not_apply_reason__c,dos);
					
					// String
				
						writeString(this.forecastcategoryname,dos);
					
					// String
				
						writeString(this.noodlecrm__optional_statement__c,dos);
					
					// String
				
						writeString(this.noodlecrm__maincompetitors__c,dos);
					
					// String
				
						writeString(this.noodlecrm__partnerships__c,dos);
					
					// String
				
						writeString(this.noodlecrm__bad_lead_reason__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__application_last_login__c,dos);
					
					// String
				
						writeString(this.noodlecrm__out_of_pocket__c,dos);
					
					// String
				
						writeString(this.noodlecrm__enrollment_status__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_details__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_attended_zoom_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_attended_webinar_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program2__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__enrollment_status_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__noodle_crm_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.closedate,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__application_indicated_start_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university__c,dos);
					
					// String
				
						writeString(this.noodlecrm__military__c,dos);
					
					// String
				
						writeString(this.noodlecrm__decline_reason__c,dos);
					
					// String
				
						writeString(this.noodlecrm__universitycrmid__c,dos);
					
					// String
				
						writeString(this.noodlecrm__resume__c,dos);
					
					// String
				
						writeString(this.noodlecrm__meets_program_criteria__c,dos);
					
					// String
				
						writeString(this.noodlecrm__best_time_to_call__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_texts__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_texts__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__application_program_global__c,dos);
					
					// String
				
						writeString(this.accountid,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id_populated__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_source__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_inquiries__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_inquiries__c);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__first_call_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_external_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__webinar_signup_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastvieweddate,dos);
					
					// String
				
						writeString(this.noodlecrm__city__c,dos);
					
					// String
				
						writeString(this.noodlecrm__application_decision__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university_email__c,dos);
					
					// String
				
						writeString(this.noodlecrm__responsiveness__c,dos);
					
					// String
				
						writeString(this.noodlecrm__official_cohort__c,dos);
					
					// String
				
						writeString(this.stagename,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__ea_projected_submit_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__deal_stage__c,dos);
					
					// String
				
						writeString(this.noodlecrm__first_touch_source__c,dos);
					
					// String
				
						writeString(this.noodlecrm__international_language_test__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_content__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_start_date__c,dos);
					
					// String
				
						writeString(this.campaignid,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Boolean
				
						if(this.hasoverduetask == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.hasoverduetask);
		            	}
					
					// String
				
						writeString(this.noodlecrm__opportunity_owner__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__missed_attempt_date_time__c,dos);
					
					// Boolean
				
						if(this.iswon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.iswon);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__application_submit_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__associated_contact__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__expected_date_to_meet_requirement__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_activitydate_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__missed_attempt_counter__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program__c,dos);
					
					// String
				
						writeString(this.noodlecrm__licensure__c,dos);
					
					// Integer
				
						writeInteger(this.fiscalquarter,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_medium__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_call_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__opportunity_external_id__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__follow_up_date__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__attended_webinar__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__attended_webinar__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__professional_experience__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lor_2__c,dos);
					
					// String
				
						writeString(this.noodlecrm__supplemental__c,dos);
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.noodlecrm__mta_interaction_record__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__meaningful_conversation_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__applying_to_a_competitor__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_professional_status__c,dos);
					
					// String
				
						writeString(this.noodlecrm__street__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lor_1__c,dos);
					
					// String
				
						writeString(this.noodlecrm__scholarship_applied__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ea_indicated_start_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__state_region__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__registered__c,dos);
					
					// String
				
						writeString(this.noodlecrm__employer_benefits__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_campaign__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastactivitydate,dos);
					
					// String
				
						writeString(this.noodlecrm__will_not_apply_reason_other__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_deposit_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__application_status__c,dos);
					
					// String
				
						writeString(this.noodlecrm__defer_reason_detail__c,dos);
					
					// Boolean
				
						if(this.hasopenactivity == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.hasopenactivity);
		            	}
					
					// String
				
						writeString(this.noodlecrm__last_activity_type__c,dos);
					
					// String
				
						writeString(this.noodlecrm__student_loans__c,dos);
					
					// String
				
						writeString(this.noodlecrm__deliveryinstallationstatus__c,dos);
					
					// String
				
						writeString(this.noodlecrm__trackingnumber__c,dos);
					
					// String
				
						writeString(this.noodlecrm__time_zone__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__do_not_call__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__do_not_call__c);
		            	}
					
					// Double
				
						if(this.probability == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.probability);
		            	}
					
					// java.util.Date
				
						writeDate(this.noodlecrm__delivery_timestamp_idata__c,dos);
					
					// String
				
						writeString(this.noodlecrm__last_contacting_state__c,dos);
					
					// String
				
						writeString(this.noodlecrm__test_requirements__c,dos);
					
					// String
				
						writeString(this.noodlecrm__decision_type__c,dos);
					
					// String
				
						writeString(this.noodlecrm__admit_cohort__c,dos);
					
					// String
				
						writeString(this.noodlecrm__tran_2__c,dos);
					
					// String
				
						writeString(this.noodlecrm__email__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__university_scholarship_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__revised_start_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.noodlecrm__submit_cohort__c,dos);
					
					// Boolean
				
						if(this.isclosed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isclosed);
		            	}
					
					// String
				
						writeString(this.noodlecrm__condition_type__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__opportunity_status__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__opportunity_status__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__class_schedule_type__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_licensure__c,dos);
					
					// String
				
						writeString(this.noodlecrm__student__c,dos);
					
					// String
				
						writeString(this.noodlecrm__university_application_id__c,dos);
					
					// String
				
						writeString(this.leadsource,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__updated__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__tran_1__c,dos);
					
					// String
				
						writeString(this.noodlecrm__google_analytics_id__c,dos);
					
					// Double
				
						if(this.amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.amount);
		            	}
					
					// String
				
						writeString(this.noodlecrm__crm_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_taken_course__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ip_address__c,dos);
					
					// Double
				
						if(this.noodlecrm__total_calls__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__total_calls__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__university_id_number__c,dos);
					
					// String
				
						writeString(this.noodlecrm__decision__c,dos);
					
					// String
				
						writeString(this.noodlecrm__test_status_gre__c,dos);
					
					// String
				
						writeString(this.forecastcategory,dos);
					
					// Boolean
				
						if(this.noodlecrm__attended_zoom__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__attended_zoom__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__fafsa__c,dos);
					
					// String
				
						writeString(this.noodlecrm__level_of_education__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__ea_projected_deposit_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__currentgenerators__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__defer_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__lead_stated_taken_course_req__c,dos);
					
					// String
				
						writeString(this.noodlecrm__follow_up_reason__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__will_not_apply_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__trying_attempt_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__gpa__c,dos);
					
					// String
				
						writeString(this.noodlecrm__fa_comments__c,dos);
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.noodlecrm__first_name__c,dos);
					
					// String
				
						writeString(this.pricebook2id,dos);
					
					// String
				
						writeString(this.contactid,dos);
					
					// String
				
						writeString(this.noodlecrm__contact_type__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__conversion_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__ordernumber__c,dos);
					
					// Integer
				
						writeInteger(this.fiscalyear,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__defer_start_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__postalcode__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__re_open__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__re_open__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__applying_to_a_competitor_type__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_complete_date__c,dos);
					
					// String
				
						writeString(this.noodlecrm__country__c,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.noodlecrm__application_program__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__decline_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastreferenceddate,dos);
					
					// String
				
						writeString(this.noodlecrm__temperature__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_university_2__c,dos);
					
					// String
				
						writeString(this.noodlecrm__course_requirements__c,dos);
					
					// String
				
						writeString(this.fiscal,dos);
					
					// String
				
						writeString(this.noodlecrm__last_name__c,dos);
					
					// String
				
						writeString(this.noodlecrm__sop__c,dos);
					
					// String
				
						writeString(this.noodlecrm__competitor_university_1__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__bad_lead_date_time__c,dos);
					
					// String
				
						writeString(this.nextstep,dos);
					
					// Boolean
				
						if(this.noodlecrm__signed_up_for_webinar__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__signed_up_for_webinar__c);
		            	}
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__preferred_phone__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program3__c,dos);
					
					// Double
				
						if(this.noodlecrm__missed_attempt_counter2__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__missed_attempt_counter2__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__university_app_crmid__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_call_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program2__r__noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__program3__r__noodlecrm__external_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_start_date_time__c,dos);
					
					// Double
				
						if(this.noodlecrm__historical_call_count__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.noodlecrm__historical_call_count__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__revised_start_cohort__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_enrolled_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id_unique__c,dos);
					
					// String
				
						writeString(this.noodlecrm__preferred_email__c,dos);
					
					// String
				
						writeString(this.noodlecrm__student_contact__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__decision_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__final_start_cohort__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_complete_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_submit_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__application_indicated_start_cohort__c,dos);
					
					// String
				
						writeString(this.noodlecrm__engagement_status__c,dos);
					
					// Boolean
				
						if(this.noodlecrm__is_test_record__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__is_test_record__c);
		            	}
					
					// String
				
						writeString(this.noodlecrm__first_inquiry_action__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("noodlecrm__university_scholarship_details__c="+noodlecrm__university_scholarship_details__c);
		sb.append(",hasopportunitylineitem="+String.valueOf(hasopportunitylineitem));
		sb.append(",noodlecrm__final_start_date__c="+String.valueOf(noodlecrm__final_start_date__c));
		sb.append(",noodlecrm__years_experience__c="+noodlecrm__years_experience__c);
		sb.append(",noodlecrm__delivery_status_idata__c="+noodlecrm__delivery_status_idata__c);
		sb.append(",noodlecrm__decision_date__c="+String.valueOf(noodlecrm__decision_date__c));
		sb.append(",noodlecrm__application_drafted__c="+String.valueOf(noodlecrm__application_drafted__c));
		sb.append(",noodlecrm__total_attempts_pre_mc__c="+String.valueOf(noodlecrm__total_attempts_pre_mc__c));
		sb.append(",noodlecrm__total_emails__c="+String.valueOf(noodlecrm__total_emails__c));
		sb.append(",noodlecrm__scholarships__c="+noodlecrm__scholarships__c);
		sb.append(",noodlecrm__url__c="+noodlecrm__url__c);
		sb.append(",noodlecrm__current_start_date__c="+String.valueOf(noodlecrm__current_start_date__c));
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",noodlecrm__will_not_complete_reason__c="+noodlecrm__will_not_complete_reason__c);
		sb.append(",noodlecrm__defer_reason__c="+noodlecrm__defer_reason__c);
		sb.append(",noodlecrm__lead_stated_gpa__c="+noodlecrm__lead_stated_gpa__c);
		sb.append(",noodlecrm__degree_verification__c="+noodlecrm__degree_verification__c);
		sb.append(",noodlecrm__app_item_received_date_time__c="+String.valueOf(noodlecrm__app_item_received_date_time__c));
		sb.append(",noodlecrm__phone__c="+noodlecrm__phone__c);
		sb.append(",noodlecrm__decline_reason_details__c="+noodlecrm__decline_reason_details__c);
		sb.append(",noodlecrm__will_not_apply_reason__c="+noodlecrm__will_not_apply_reason__c);
		sb.append(",forecastcategoryname="+forecastcategoryname);
		sb.append(",noodlecrm__optional_statement__c="+noodlecrm__optional_statement__c);
		sb.append(",noodlecrm__maincompetitors__c="+noodlecrm__maincompetitors__c);
		sb.append(",noodlecrm__partnerships__c="+noodlecrm__partnerships__c);
		sb.append(",noodlecrm__bad_lead_reason__c="+noodlecrm__bad_lead_reason__c);
		sb.append(",noodlecrm__application_last_login__c="+String.valueOf(noodlecrm__application_last_login__c));
		sb.append(",noodlecrm__out_of_pocket__c="+noodlecrm__out_of_pocket__c);
		sb.append(",noodlecrm__enrollment_status__c="+noodlecrm__enrollment_status__c);
		sb.append(",noodlecrm__competitor_details__c="+noodlecrm__competitor_details__c);
		sb.append(",noodlecrm__last_attended_zoom_date_time__c="+String.valueOf(noodlecrm__last_attended_zoom_date_time__c));
		sb.append(",noodlecrm__last_attended_webinar_date_time__c="+String.valueOf(noodlecrm__last_attended_webinar_date_time__c));
		sb.append(",noodlecrm__program2__c="+noodlecrm__program2__c);
		sb.append(",noodlecrm__enrollment_status_date_time__c="+String.valueOf(noodlecrm__enrollment_status_date_time__c));
		sb.append(",noodlecrm__noodle_crm_id__c="+noodlecrm__noodle_crm_id__c);
		sb.append(",closedate="+String.valueOf(closedate));
		sb.append(",noodlecrm__application_indicated_start_date__c="+String.valueOf(noodlecrm__application_indicated_start_date__c));
		sb.append(",noodlecrm__university__c="+noodlecrm__university__c);
		sb.append(",noodlecrm__military__c="+noodlecrm__military__c);
		sb.append(",noodlecrm__decline_reason__c="+noodlecrm__decline_reason__c);
		sb.append(",noodlecrm__universitycrmid__c="+noodlecrm__universitycrmid__c);
		sb.append(",noodlecrm__resume__c="+noodlecrm__resume__c);
		sb.append(",noodlecrm__meets_program_criteria__c="+noodlecrm__meets_program_criteria__c);
		sb.append(",noodlecrm__best_time_to_call__c="+noodlecrm__best_time_to_call__c);
		sb.append(",noodlecrm__total_texts__c="+String.valueOf(noodlecrm__total_texts__c));
		sb.append(",noodlecrm__application_program_global__c="+noodlecrm__application_program_global__c);
		sb.append(",accountid="+accountid);
		sb.append(",noodlecrm__external_id_populated__c="+noodlecrm__external_id_populated__c);
		sb.append(",noodlecrm__utm_source__c="+noodlecrm__utm_source__c);
		sb.append(",noodlecrm__total_inquiries__c="+String.valueOf(noodlecrm__total_inquiries__c));
		sb.append(",noodlecrm__first_call_date_time__c="+String.valueOf(noodlecrm__first_call_date_time__c));
		sb.append(",noodlecrm__lead_external_id__c="+noodlecrm__lead_external_id__c);
		sb.append(",noodlecrm__webinar_signup_date_time__c="+String.valueOf(noodlecrm__webinar_signup_date_time__c));
		sb.append(",lastvieweddate="+String.valueOf(lastvieweddate));
		sb.append(",noodlecrm__city__c="+noodlecrm__city__c);
		sb.append(",noodlecrm__application_decision__c="+noodlecrm__application_decision__c);
		sb.append(",noodlecrm__university_email__c="+noodlecrm__university_email__c);
		sb.append(",noodlecrm__responsiveness__c="+noodlecrm__responsiveness__c);
		sb.append(",noodlecrm__official_cohort__c="+noodlecrm__official_cohort__c);
		sb.append(",stagename="+stagename);
		sb.append(",noodlecrm__ea_projected_submit_date__c="+String.valueOf(noodlecrm__ea_projected_submit_date__c));
		sb.append(",noodlecrm__deal_stage__c="+String.valueOf(noodlecrm__deal_stage__c));
		sb.append(",noodlecrm__first_touch_source__c="+noodlecrm__first_touch_source__c);
		sb.append(",noodlecrm__international_language_test__c="+noodlecrm__international_language_test__c);
		sb.append(",noodlecrm__utm_content__c="+noodlecrm__utm_content__c);
		sb.append(",noodlecrm__app_start_date__c="+String.valueOf(noodlecrm__app_start_date__c));
		sb.append(",campaignid="+campaignid);
		sb.append(",name="+name);
		sb.append(",hasoverduetask="+String.valueOf(hasoverduetask));
		sb.append(",noodlecrm__opportunity_owner__c="+noodlecrm__opportunity_owner__c);
		sb.append(",noodlecrm__missed_attempt_date_time__c="+String.valueOf(noodlecrm__missed_attempt_date_time__c));
		sb.append(",iswon="+String.valueOf(iswon));
		sb.append(",noodlecrm__application_submit_date__c="+String.valueOf(noodlecrm__application_submit_date__c));
		sb.append(",noodlecrm__associated_contact__c="+noodlecrm__associated_contact__c);
		sb.append(",noodlecrm__expected_date_to_meet_requirement__c="+String.valueOf(noodlecrm__expected_date_to_meet_requirement__c));
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__last_activitydate_time__c="+String.valueOf(noodlecrm__last_activitydate_time__c));
		sb.append(",noodlecrm__missed_attempt_counter__c="+noodlecrm__missed_attempt_counter__c);
		sb.append(",noodlecrm__program__c="+noodlecrm__program__c);
		sb.append(",noodlecrm__licensure__c="+noodlecrm__licensure__c);
		sb.append(",fiscalquarter="+String.valueOf(fiscalquarter));
		sb.append(",ownerid="+ownerid);
		sb.append(",noodlecrm__utm_medium__c="+noodlecrm__utm_medium__c);
		sb.append(",noodlecrm__last_call_date__c="+String.valueOf(noodlecrm__last_call_date__c));
		sb.append(",noodlecrm__opportunity_external_id__c="+noodlecrm__opportunity_external_id__c);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__follow_up_date__c="+String.valueOf(noodlecrm__follow_up_date__c));
		sb.append(",noodlecrm__attended_webinar__c="+String.valueOf(noodlecrm__attended_webinar__c));
		sb.append(",noodlecrm__professional_experience__c="+noodlecrm__professional_experience__c);
		sb.append(",noodlecrm__lor_2__c="+noodlecrm__lor_2__c);
		sb.append(",noodlecrm__supplemental__c="+noodlecrm__supplemental__c);
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",noodlecrm__mta_interaction_record__c="+noodlecrm__mta_interaction_record__c);
		sb.append(",noodlecrm__meaningful_conversation_date_time__c="+String.valueOf(noodlecrm__meaningful_conversation_date_time__c));
		sb.append(",noodlecrm__applying_to_a_competitor__c="+noodlecrm__applying_to_a_competitor__c);
		sb.append(",noodlecrm__lead_stated_professional_status__c="+noodlecrm__lead_stated_professional_status__c);
		sb.append(",noodlecrm__street__c="+noodlecrm__street__c);
		sb.append(",noodlecrm__lor_1__c="+noodlecrm__lor_1__c);
		sb.append(",noodlecrm__scholarship_applied__c="+noodlecrm__scholarship_applied__c);
		sb.append(",noodlecrm__ea_indicated_start_term__c="+noodlecrm__ea_indicated_start_term__c);
		sb.append(",noodlecrm__state_region__c="+noodlecrm__state_region__c);
		sb.append(",noodlecrm__registered__c="+String.valueOf(noodlecrm__registered__c));
		sb.append(",noodlecrm__employer_benefits__c="+noodlecrm__employer_benefits__c);
		sb.append(",noodlecrm__utm_campaign__c="+noodlecrm__utm_campaign__c);
		sb.append(",lastactivitydate="+String.valueOf(lastactivitydate));
		sb.append(",noodlecrm__will_not_apply_reason_other__c="+noodlecrm__will_not_apply_reason_other__c);
		sb.append(",noodlecrm__app_deposit_date_time__c="+String.valueOf(noodlecrm__app_deposit_date_time__c));
		sb.append(",noodlecrm__application_status__c="+noodlecrm__application_status__c);
		sb.append(",noodlecrm__defer_reason_detail__c="+noodlecrm__defer_reason_detail__c);
		sb.append(",hasopenactivity="+String.valueOf(hasopenactivity));
		sb.append(",noodlecrm__last_activity_type__c="+noodlecrm__last_activity_type__c);
		sb.append(",noodlecrm__student_loans__c="+noodlecrm__student_loans__c);
		sb.append(",noodlecrm__deliveryinstallationstatus__c="+noodlecrm__deliveryinstallationstatus__c);
		sb.append(",noodlecrm__trackingnumber__c="+noodlecrm__trackingnumber__c);
		sb.append(",noodlecrm__time_zone__c="+noodlecrm__time_zone__c);
		sb.append(",noodlecrm__do_not_call__c="+String.valueOf(noodlecrm__do_not_call__c));
		sb.append(",probability="+String.valueOf(probability));
		sb.append(",noodlecrm__delivery_timestamp_idata__c="+String.valueOf(noodlecrm__delivery_timestamp_idata__c));
		sb.append(",noodlecrm__last_contacting_state__c="+noodlecrm__last_contacting_state__c);
		sb.append(",noodlecrm__test_requirements__c="+noodlecrm__test_requirements__c);
		sb.append(",noodlecrm__decision_type__c="+noodlecrm__decision_type__c);
		sb.append(",noodlecrm__admit_cohort__c="+noodlecrm__admit_cohort__c);
		sb.append(",noodlecrm__tran_2__c="+noodlecrm__tran_2__c);
		sb.append(",noodlecrm__email__c="+noodlecrm__email__c);
		sb.append(",noodlecrm__university_scholarship_date__c="+String.valueOf(noodlecrm__university_scholarship_date__c));
		sb.append(",noodlecrm__revised_start_date__c="+String.valueOf(noodlecrm__revised_start_date__c));
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",noodlecrm__submit_cohort__c="+noodlecrm__submit_cohort__c);
		sb.append(",isclosed="+String.valueOf(isclosed));
		sb.append(",noodlecrm__condition_type__c="+noodlecrm__condition_type__c);
		sb.append(",noodlecrm__opportunity_status__c="+String.valueOf(noodlecrm__opportunity_status__c));
		sb.append(",noodlecrm__class_schedule_type__c="+noodlecrm__class_schedule_type__c);
		sb.append(",noodlecrm__lead_stated_licensure__c="+noodlecrm__lead_stated_licensure__c);
		sb.append(",noodlecrm__student__c="+noodlecrm__student__c);
		sb.append(",noodlecrm__university_application_id__c="+noodlecrm__university_application_id__c);
		sb.append(",leadsource="+leadsource);
		sb.append(",noodlecrm__updated__c="+String.valueOf(noodlecrm__updated__c));
		sb.append(",noodlecrm__utm_term__c="+noodlecrm__utm_term__c);
		sb.append(",noodlecrm__tran_1__c="+noodlecrm__tran_1__c);
		sb.append(",noodlecrm__google_analytics_id__c="+noodlecrm__google_analytics_id__c);
		sb.append(",amount="+String.valueOf(amount));
		sb.append(",noodlecrm__crm_id__c="+noodlecrm__crm_id__c);
		sb.append(",noodlecrm__lead_stated_taken_course__c="+noodlecrm__lead_stated_taken_course__c);
		sb.append(",noodlecrm__ip_address__c="+noodlecrm__ip_address__c);
		sb.append(",noodlecrm__total_calls__c="+String.valueOf(noodlecrm__total_calls__c));
		sb.append(",noodlecrm__university_id_number__c="+noodlecrm__university_id_number__c);
		sb.append(",noodlecrm__decision__c="+noodlecrm__decision__c);
		sb.append(",noodlecrm__test_status_gre__c="+noodlecrm__test_status_gre__c);
		sb.append(",forecastcategory="+forecastcategory);
		sb.append(",noodlecrm__attended_zoom__c="+String.valueOf(noodlecrm__attended_zoom__c));
		sb.append(",noodlecrm__fafsa__c="+noodlecrm__fafsa__c);
		sb.append(",noodlecrm__level_of_education__c="+noodlecrm__level_of_education__c);
		sb.append(",noodlecrm__ea_projected_deposit_date__c="+String.valueOf(noodlecrm__ea_projected_deposit_date__c));
		sb.append(",noodlecrm__currentgenerators__c="+noodlecrm__currentgenerators__c);
		sb.append(",noodlecrm__defer_date__c="+String.valueOf(noodlecrm__defer_date__c));
		sb.append(",noodlecrm__lead_stated_taken_course_req__c="+noodlecrm__lead_stated_taken_course_req__c);
		sb.append(",noodlecrm__follow_up_reason__c="+noodlecrm__follow_up_reason__c);
		sb.append(",noodlecrm__will_not_apply_date__c="+String.valueOf(noodlecrm__will_not_apply_date__c));
		sb.append(",noodlecrm__trying_attempt_date__c="+String.valueOf(noodlecrm__trying_attempt_date__c));
		sb.append(",noodlecrm__gpa__c="+noodlecrm__gpa__c);
		sb.append(",noodlecrm__fa_comments__c="+noodlecrm__fa_comments__c);
		sb.append(",createdbyid="+createdbyid);
		sb.append(",type="+type);
		sb.append(",noodlecrm__first_name__c="+noodlecrm__first_name__c);
		sb.append(",pricebook2id="+pricebook2id);
		sb.append(",contactid="+contactid);
		sb.append(",noodlecrm__contact_type__c="+noodlecrm__contact_type__c);
		sb.append(",noodlecrm__conversion_date__c="+String.valueOf(noodlecrm__conversion_date__c));
		sb.append(",noodlecrm__ordernumber__c="+noodlecrm__ordernumber__c);
		sb.append(",fiscalyear="+String.valueOf(fiscalyear));
		sb.append(",noodlecrm__defer_start_date__c="+String.valueOf(noodlecrm__defer_start_date__c));
		sb.append(",noodlecrm__postalcode__c="+noodlecrm__postalcode__c);
		sb.append(",noodlecrm__re_open__c="+String.valueOf(noodlecrm__re_open__c));
		sb.append(",noodlecrm__applying_to_a_competitor_type__c="+noodlecrm__applying_to_a_competitor_type__c);
		sb.append(",noodlecrm__app_complete_date__c="+String.valueOf(noodlecrm__app_complete_date__c));
		sb.append(",noodlecrm__country__c="+noodlecrm__country__c);
		sb.append(",description="+description);
		sb.append(",noodlecrm__application_program__c="+noodlecrm__application_program__c);
		sb.append(",noodlecrm__decline_date__c="+String.valueOf(noodlecrm__decline_date__c));
		sb.append(",lastreferenceddate="+String.valueOf(lastreferenceddate));
		sb.append(",noodlecrm__temperature__c="+noodlecrm__temperature__c);
		sb.append(",noodlecrm__competitor_university_2__c="+noodlecrm__competitor_university_2__c);
		sb.append(",noodlecrm__course_requirements__c="+noodlecrm__course_requirements__c);
		sb.append(",fiscal="+fiscal);
		sb.append(",noodlecrm__last_name__c="+noodlecrm__last_name__c);
		sb.append(",noodlecrm__sop__c="+noodlecrm__sop__c);
		sb.append(",noodlecrm__competitor_university_1__c="+noodlecrm__competitor_university_1__c);
		sb.append(",noodlecrm__bad_lead_date_time__c="+String.valueOf(noodlecrm__bad_lead_date_time__c));
		sb.append(",nextstep="+nextstep);
		sb.append(",noodlecrm__signed_up_for_webinar__c="+String.valueOf(noodlecrm__signed_up_for_webinar__c));
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__preferred_phone__c="+noodlecrm__preferred_phone__c);
		sb.append(",noodlecrm__program3__c="+noodlecrm__program3__c);
		sb.append(",noodlecrm__missed_attempt_counter2__c="+String.valueOf(noodlecrm__missed_attempt_counter2__c));
		sb.append(",noodlecrm__university_app_crmid__c="+noodlecrm__university_app_crmid__c);
		sb.append(",noodlecrm__last_call_date_time__c="+String.valueOf(noodlecrm__last_call_date_time__c));
		sb.append(",noodlecrm__program2__r__noodlecrm__external_id__c="+noodlecrm__program2__r__noodlecrm__external_id__c);
		sb.append(",noodlecrm__program3__r__noodlecrm__external_id__c="+noodlecrm__program3__r__noodlecrm__external_id__c);
		sb.append(",noodlecrm__app_start_date_time__c="+String.valueOf(noodlecrm__app_start_date_time__c));
		sb.append(",noodlecrm__historical_call_count__c="+String.valueOf(noodlecrm__historical_call_count__c));
		sb.append(",noodlecrm__revised_start_cohort__c="+noodlecrm__revised_start_cohort__c);
		sb.append(",noodlecrm__app_enrolled_date_time__c="+String.valueOf(noodlecrm__app_enrolled_date_time__c));
		sb.append(",noodlecrm__external_id_unique__c="+noodlecrm__external_id_unique__c);
		sb.append(",noodlecrm__preferred_email__c="+noodlecrm__preferred_email__c);
		sb.append(",noodlecrm__student_contact__c="+noodlecrm__student_contact__c);
		sb.append(",noodlecrm__decision_date_time__c="+String.valueOf(noodlecrm__decision_date_time__c));
		sb.append(",noodlecrm__final_start_cohort__c="+noodlecrm__final_start_cohort__c);
		sb.append(",noodlecrm__app_complete_date_time__c="+String.valueOf(noodlecrm__app_complete_date_time__c));
		sb.append(",noodlecrm__app_submit_date_time__c="+String.valueOf(noodlecrm__app_submit_date_time__c));
		sb.append(",noodlecrm__application_indicated_start_cohort__c="+noodlecrm__application_indicated_start_cohort__c);
		sb.append(",noodlecrm__engagement_status__c="+noodlecrm__engagement_status__c);
		sb.append(",noodlecrm__is_test_record__c="+String.valueOf(noodlecrm__is_test_record__c));
		sb.append(",noodlecrm__first_inquiry_action__c="+noodlecrm__first_inquiry_action__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
out9Struct out9 = new out9Struct();
out10Struct out10 = new out10Struct();





	
	/**
	 * [tFileOutputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_5", false);
		start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out9");
					}
				
		int tos_count_tFileOutputDelimited_5 = 0;
		

String fileName_tFileOutputDelimited_5 = "";
                class FileOutputDelimitedUtil_tFileOutputDelimited_5{
                                    public void putHeaderValue_0(String[] headColutFileOutputDelimited_5)throws java.lang.Exception{
                                        headColutFileOutputDelimited_5[0]="noodlecrm__university_scholarship_details__c";
                                        headColutFileOutputDelimited_5[1]="hasopportunitylineitem";
                                        headColutFileOutputDelimited_5[2]="noodlecrm__final_start_date__c";
                                        headColutFileOutputDelimited_5[3]="noodlecrm__years_experience__c";
                                        headColutFileOutputDelimited_5[4]="noodlecrm__delivery_status_idata__c";
                                        headColutFileOutputDelimited_5[5]="noodlecrm__decision_date__c";
                                        headColutFileOutputDelimited_5[6]="noodlecrm__application_drafted__c";
                                        headColutFileOutputDelimited_5[7]="noodlecrm__total_attempts_pre_mc__c";
                                        headColutFileOutputDelimited_5[8]="noodlecrm__total_emails__c";
                                        headColutFileOutputDelimited_5[9]="noodlecrm__scholarships__c";
                                        headColutFileOutputDelimited_5[10]="noodlecrm__url__c";
                                        headColutFileOutputDelimited_5[11]="noodlecrm__current_start_date__c";
                                        headColutFileOutputDelimited_5[12]="noodlecrm__external_id__c";
                                        headColutFileOutputDelimited_5[13]="noodlecrm__will_not_complete_reason__c";
                                        headColutFileOutputDelimited_5[14]="noodlecrm__defer_reason__c";
                                        headColutFileOutputDelimited_5[15]="noodlecrm__lead_stated_gpa__c";
                                        headColutFileOutputDelimited_5[16]="noodlecrm__degree_verification__c";
                                        headColutFileOutputDelimited_5[17]="noodlecrm__app_item_received_date_time__c";
                                        headColutFileOutputDelimited_5[18]="noodlecrm__phone__c";
                                        headColutFileOutputDelimited_5[19]="noodlecrm__decline_reason_details__c";
                                        headColutFileOutputDelimited_5[20]="noodlecrm__will_not_apply_reason__c";
                                        headColutFileOutputDelimited_5[21]="forecastcategoryname";
                                        headColutFileOutputDelimited_5[22]="noodlecrm__optional_statement__c";
                                        headColutFileOutputDelimited_5[23]="noodlecrm__maincompetitors__c";
                                        headColutFileOutputDelimited_5[24]="noodlecrm__partnerships__c";
                                        headColutFileOutputDelimited_5[25]="noodlecrm__bad_lead_reason__c";
                                        headColutFileOutputDelimited_5[26]="noodlecrm__application_last_login__c";
                                        headColutFileOutputDelimited_5[27]="noodlecrm__out_of_pocket__c";
                                        headColutFileOutputDelimited_5[28]="noodlecrm__enrollment_status__c";
                                        headColutFileOutputDelimited_5[29]="noodlecrm__competitor_details__c";
                                        headColutFileOutputDelimited_5[30]="noodlecrm__last_attended_zoom_date_time__c";
                                        headColutFileOutputDelimited_5[31]="noodlecrm__last_attended_webinar_date_time__c";
                                        headColutFileOutputDelimited_5[32]="noodlecrm__program2__c";
                                        headColutFileOutputDelimited_5[33]="noodlecrm__enrollment_status_date_time__c";
                                        headColutFileOutputDelimited_5[34]="noodlecrm__noodle_crm_id__c";
                                        headColutFileOutputDelimited_5[35]="closedate";
                                        headColutFileOutputDelimited_5[36]="noodlecrm__application_indicated_start_date__c";
                                        headColutFileOutputDelimited_5[37]="noodlecrm__university__c";
                                        headColutFileOutputDelimited_5[38]="noodlecrm__military__c";
                                        headColutFileOutputDelimited_5[39]="noodlecrm__decline_reason__c";
                                        headColutFileOutputDelimited_5[40]="noodlecrm__universitycrmid__c";
                                        headColutFileOutputDelimited_5[41]="noodlecrm__resume__c";
                                        headColutFileOutputDelimited_5[42]="noodlecrm__meets_program_criteria__c";
                                        headColutFileOutputDelimited_5[43]="noodlecrm__best_time_to_call__c";
                                        headColutFileOutputDelimited_5[44]="noodlecrm__total_texts__c";
                                        headColutFileOutputDelimited_5[45]="noodlecrm__application_program_global__c";
                                        headColutFileOutputDelimited_5[46]="accountid";
                                        headColutFileOutputDelimited_5[47]="noodlecrm__external_id_populated__c";
                                        headColutFileOutputDelimited_5[48]="noodlecrm__utm_source__c";
                                        headColutFileOutputDelimited_5[49]="noodlecrm__total_inquiries__c";
                                        headColutFileOutputDelimited_5[50]="noodlecrm__first_call_date_time__c";
                                        headColutFileOutputDelimited_5[51]="noodlecrm__lead_external_id__c";
                                        headColutFileOutputDelimited_5[52]="noodlecrm__webinar_signup_date_time__c";
                                        headColutFileOutputDelimited_5[53]="lastvieweddate";
                                        headColutFileOutputDelimited_5[54]="noodlecrm__city__c";
                                        headColutFileOutputDelimited_5[55]="noodlecrm__application_decision__c";
                                        headColutFileOutputDelimited_5[56]="noodlecrm__university_email__c";
                                        headColutFileOutputDelimited_5[57]="noodlecrm__responsiveness__c";
                                        headColutFileOutputDelimited_5[58]="noodlecrm__official_cohort__c";
                                        headColutFileOutputDelimited_5[59]="stagename";
                                        headColutFileOutputDelimited_5[60]="noodlecrm__ea_projected_submit_date__c";
                                        headColutFileOutputDelimited_5[61]="noodlecrm__deal_stage__c";
                                        headColutFileOutputDelimited_5[62]="noodlecrm__first_touch_source__c";
                                        headColutFileOutputDelimited_5[63]="noodlecrm__international_language_test__c";
                                        headColutFileOutputDelimited_5[64]="noodlecrm__utm_content__c";
                                        headColutFileOutputDelimited_5[65]="noodlecrm__app_start_date__c";
                                        headColutFileOutputDelimited_5[66]="campaignid";
                                        headColutFileOutputDelimited_5[67]="name";
                                        headColutFileOutputDelimited_5[68]="hasoverduetask";
                                        headColutFileOutputDelimited_5[69]="noodlecrm__opportunity_owner__c";
                                        headColutFileOutputDelimited_5[70]="noodlecrm__missed_attempt_date_time__c";
                                        headColutFileOutputDelimited_5[71]="iswon";
                                        headColutFileOutputDelimited_5[72]="noodlecrm__application_submit_date__c";
                                        headColutFileOutputDelimited_5[73]="noodlecrm__associated_contact__c";
                                        headColutFileOutputDelimited_5[74]="noodlecrm__expected_date_to_meet_requirement__c";
                                        headColutFileOutputDelimited_5[75]="lastmodifieddate";
                                        headColutFileOutputDelimited_5[76]="noodlecrm__last_activitydate_time__c";
                                        headColutFileOutputDelimited_5[77]="noodlecrm__missed_attempt_counter__c";
                                        headColutFileOutputDelimited_5[78]="noodlecrm__program__c";
                                        headColutFileOutputDelimited_5[79]="noodlecrm__licensure__c";
                                        headColutFileOutputDelimited_5[80]="fiscalquarter";
                                        headColutFileOutputDelimited_5[81]="ownerid";
                                        headColutFileOutputDelimited_5[82]="noodlecrm__utm_medium__c";
                                        headColutFileOutputDelimited_5[83]="noodlecrm__last_call_date__c";
                                        headColutFileOutputDelimited_5[84]="noodlecrm__opportunity_external_id__c";
                                        headColutFileOutputDelimited_5[85]="isdeleted";
                                        headColutFileOutputDelimited_5[86]="systemmodstamp";
                                        headColutFileOutputDelimited_5[87]="noodlecrm__follow_up_date__c";
                                        headColutFileOutputDelimited_5[88]="noodlecrm__attended_webinar__c";
                                        headColutFileOutputDelimited_5[89]="noodlecrm__professional_experience__c";
                                    }
                                    public void putHeaderValue_1(String[] headColutFileOutputDelimited_5)throws java.lang.Exception{
                                        headColutFileOutputDelimited_5[90]="noodlecrm__lor_2__c";
                                        headColutFileOutputDelimited_5[91]="noodlecrm__supplemental__c";
                                        headColutFileOutputDelimited_5[92]="lastmodifiedbyid";
                                        headColutFileOutputDelimited_5[93]="noodlecrm__mta_interaction_record__c";
                                        headColutFileOutputDelimited_5[94]="noodlecrm__meaningful_conversation_date_time__c";
                                        headColutFileOutputDelimited_5[95]="noodlecrm__applying_to_a_competitor__c";
                                        headColutFileOutputDelimited_5[96]="noodlecrm__lead_stated_professional_status__c";
                                        headColutFileOutputDelimited_5[97]="noodlecrm__street__c";
                                        headColutFileOutputDelimited_5[98]="noodlecrm__lor_1__c";
                                        headColutFileOutputDelimited_5[99]="noodlecrm__scholarship_applied__c";
                                        headColutFileOutputDelimited_5[100]="noodlecrm__ea_indicated_start_term__c";
                                        headColutFileOutputDelimited_5[101]="noodlecrm__state_region__c";
                                        headColutFileOutputDelimited_5[102]="noodlecrm__registered__c";
                                        headColutFileOutputDelimited_5[103]="noodlecrm__employer_benefits__c";
                                        headColutFileOutputDelimited_5[104]="noodlecrm__utm_campaign__c";
                                        headColutFileOutputDelimited_5[105]="lastactivitydate";
                                        headColutFileOutputDelimited_5[106]="noodlecrm__will_not_apply_reason_other__c";
                                        headColutFileOutputDelimited_5[107]="noodlecrm__app_deposit_date_time__c";
                                        headColutFileOutputDelimited_5[108]="noodlecrm__application_status__c";
                                        headColutFileOutputDelimited_5[109]="noodlecrm__defer_reason_detail__c";
                                        headColutFileOutputDelimited_5[110]="hasopenactivity";
                                        headColutFileOutputDelimited_5[111]="noodlecrm__last_activity_type__c";
                                        headColutFileOutputDelimited_5[112]="noodlecrm__student_loans__c";
                                        headColutFileOutputDelimited_5[113]="noodlecrm__deliveryinstallationstatus__c";
                                        headColutFileOutputDelimited_5[114]="noodlecrm__trackingnumber__c";
                                        headColutFileOutputDelimited_5[115]="noodlecrm__time_zone__c";
                                        headColutFileOutputDelimited_5[116]="noodlecrm__do_not_call__c";
                                        headColutFileOutputDelimited_5[117]="probability";
                                        headColutFileOutputDelimited_5[118]="noodlecrm__tran_3__c";
                                        headColutFileOutputDelimited_5[119]="noodlecrm__delivery_timestamp_idata__c";
                                        headColutFileOutputDelimited_5[120]="noodlecrm__last_contacting_state__c";
                                        headColutFileOutputDelimited_5[121]="noodlecrm__test_requirements__c";
                                        headColutFileOutputDelimited_5[122]="noodlecrm__decision_type__c";
                                        headColutFileOutputDelimited_5[123]="noodlecrm__admit_cohort__c";
                                        headColutFileOutputDelimited_5[124]="noodlecrm__tran_2__c";
                                        headColutFileOutputDelimited_5[125]="noodlecrm__email__c";
                                        headColutFileOutputDelimited_5[126]="noodlecrm__university_scholarship_date__c";
                                        headColutFileOutputDelimited_5[127]="noodlecrm__revised_start_date__c";
                                        headColutFileOutputDelimited_5[128]="createddate";
                                        headColutFileOutputDelimited_5[129]="noodlecrm__submit_cohort__c";
                                        headColutFileOutputDelimited_5[130]="isclosed";
                                        headColutFileOutputDelimited_5[131]="noodlecrm__condition_type__c";
                                        headColutFileOutputDelimited_5[132]="noodlecrm__opportunity_status__c";
                                        headColutFileOutputDelimited_5[133]="noodlecrm__class_schedule_type__c";
                                        headColutFileOutputDelimited_5[134]="noodlecrm__lead_stated_licensure__c";
                                        headColutFileOutputDelimited_5[135]="noodlecrm__student__c";
                                        headColutFileOutputDelimited_5[136]="noodlecrm__university_application_id__c";
                                        headColutFileOutputDelimited_5[137]="leadsource";
                                        headColutFileOutputDelimited_5[138]="noodlecrm__updated__c";
                                        headColutFileOutputDelimited_5[139]="noodlecrm__utm_term__c";
                                        headColutFileOutputDelimited_5[140]="noodlecrm__tran_1__c";
                                        headColutFileOutputDelimited_5[141]="noodlecrm__google_analytics_id__c";
                                        headColutFileOutputDelimited_5[142]="amount";
                                        headColutFileOutputDelimited_5[143]="noodlecrm__crm_id__c";
                                        headColutFileOutputDelimited_5[144]="noodlecrm__lead_stated_taken_course__c";
                                        headColutFileOutputDelimited_5[145]="noodlecrm__ip_address__c";
                                        headColutFileOutputDelimited_5[146]="noodlecrm__total_calls__c";
                                        headColutFileOutputDelimited_5[147]="noodlecrm__university_id_number__c";
                                        headColutFileOutputDelimited_5[148]="noodlecrm__decision__c";
                                        headColutFileOutputDelimited_5[149]="noodlecrm__test_status_gre__c";
                                        headColutFileOutputDelimited_5[150]="forecastcategory";
                                        headColutFileOutputDelimited_5[151]="noodlecrm__attended_zoom__c";
                                        headColutFileOutputDelimited_5[152]="noodlecrm__fafsa__c";
                                        headColutFileOutputDelimited_5[153]="noodlecrm__level_of_education__c";
                                        headColutFileOutputDelimited_5[154]="noodlecrm__ea_projected_deposit_date__c";
                                        headColutFileOutputDelimited_5[155]="noodlecrm__currentgenerators__c";
                                        headColutFileOutputDelimited_5[156]="noodlecrm__defer_date__c";
                                        headColutFileOutputDelimited_5[157]="noodlecrm__lead_stated_taken_course_req__c";
                                        headColutFileOutputDelimited_5[158]="noodlecrm__follow_up_reason__c";
                                        headColutFileOutputDelimited_5[159]="noodlecrm__will_not_apply_date__c";
                                        headColutFileOutputDelimited_5[160]="noodlecrm__trying_attempt_date__c";
                                        headColutFileOutputDelimited_5[161]="noodlecrm__gpa__c";
                                        headColutFileOutputDelimited_5[162]="noodlecrm__fa_comments__c";
                                        headColutFileOutputDelimited_5[163]="createdbyid";
                                        headColutFileOutputDelimited_5[164]="type";
                                        headColutFileOutputDelimited_5[165]="noodlecrm__first_name__c";
                                        headColutFileOutputDelimited_5[166]="pricebook2id";
                                        headColutFileOutputDelimited_5[167]="contactid";
                                        headColutFileOutputDelimited_5[168]="noodlecrm__contact_type__c";
                                        headColutFileOutputDelimited_5[169]="noodlecrm__conversion_date__c";
                                        headColutFileOutputDelimited_5[170]="noodlecrm__ordernumber__c";
                                        headColutFileOutputDelimited_5[171]="fiscalyear";
                                        headColutFileOutputDelimited_5[172]="noodlecrm__defer_start_date__c";
                                        headColutFileOutputDelimited_5[173]="noodlecrm__postalcode__c";
                                        headColutFileOutputDelimited_5[174]="noodlecrm__re_open__c";
                                        headColutFileOutputDelimited_5[175]="noodlecrm__applying_to_a_competitor_type__c";
                                        headColutFileOutputDelimited_5[176]="noodlecrm__app_complete_date__c";
                                        headColutFileOutputDelimited_5[177]="noodlecrm__country__c";
                                        headColutFileOutputDelimited_5[178]="description";
                                        headColutFileOutputDelimited_5[179]="noodlecrm__application_program__c";
                                    }
                                    public void putHeaderValue_2(String[] headColutFileOutputDelimited_5)throws java.lang.Exception{
                                        headColutFileOutputDelimited_5[180]="noodlecrm__decline_date__c";
                                        headColutFileOutputDelimited_5[181]="lastreferenceddate";
                                        headColutFileOutputDelimited_5[182]="noodlecrm__temperature__c";
                                        headColutFileOutputDelimited_5[183]="noodlecrm__competitor_university_2__c";
                                        headColutFileOutputDelimited_5[184]="noodlecrm__course_requirements__c";
                                        headColutFileOutputDelimited_5[185]="fiscal";
                                        headColutFileOutputDelimited_5[186]="noodlecrm__last_name__c";
                                        headColutFileOutputDelimited_5[187]="noodlecrm__sop__c";
                                        headColutFileOutputDelimited_5[188]="noodlecrm__competitor_university_1__c";
                                        headColutFileOutputDelimited_5[189]="noodlecrm__bad_lead_date_time__c";
                                        headColutFileOutputDelimited_5[190]="nextstep";
                                        headColutFileOutputDelimited_5[191]="noodlecrm__signed_up_for_webinar__c";
                                        headColutFileOutputDelimited_5[192]="sfid";
                                        headColutFileOutputDelimited_5[193]="id";
                                        headColutFileOutputDelimited_5[194]="noodlecrm__preferred_phone__c";
                                        headColutFileOutputDelimited_5[195]="noodlecrm__program3__c";
                                        headColutFileOutputDelimited_5[196]="noodlecrm__missed_attempt_counter2__c";
                                        headColutFileOutputDelimited_5[197]="noodlecrm__university_app_crmid__c";
                                        headColutFileOutputDelimited_5[198]="noodlecrm__last_call_date_time__c";
                                        headColutFileOutputDelimited_5[199]="noodlecrm__program2__r__noodlecrm__external_id__c";
                                        headColutFileOutputDelimited_5[200]="noodlecrm__program3__r__noodlecrm__external_id__c";
                                        headColutFileOutputDelimited_5[201]="noodlecrm__app_start_date_time__c";
                                        headColutFileOutputDelimited_5[202]="noodlecrm__historical_call_count__c";
                                        headColutFileOutputDelimited_5[203]="noodlecrm__revised_start_cohort__c";
                                        headColutFileOutputDelimited_5[204]="noodlecrm__app_enrolled_date_time__c";
                                        headColutFileOutputDelimited_5[205]="noodlecrm__external_id_unique__c";
                                        headColutFileOutputDelimited_5[206]="noodlecrm__preferred_email__c";
                                        headColutFileOutputDelimited_5[207]="noodlecrm__student_contact__c";
                                        headColutFileOutputDelimited_5[208]="noodlecrm__decision_date_time__c";
                                        headColutFileOutputDelimited_5[209]="noodlecrm__final_start_cohort__c";
                                        headColutFileOutputDelimited_5[210]="noodlecrm__app_complete_date_time__c";
                                        headColutFileOutputDelimited_5[211]="noodlecrm__app_submit_date_time__c";
                                        headColutFileOutputDelimited_5[212]="noodlecrm__application_indicated_start_cohort__c";
                                        headColutFileOutputDelimited_5[213]="noodlecrm__engagement_status__c";
                                        headColutFileOutputDelimited_5[214]="noodlecrm__is_test_record__c";
                                        headColutFileOutputDelimited_5[215]="noodlecrm__first_inquiry_action__c";
                                }
                                public void putValue_0(final out9Struct out9,String[] rowtFileOutputDelimited_5){
                                    rowtFileOutputDelimited_5[0]=out9.noodlecrm__university_scholarship_details__c == null ? null : 
                                    out9.noodlecrm__university_scholarship_details__c;
                                    rowtFileOutputDelimited_5[1]=out9.hasopportunitylineitem == null ? null : 
                                    String.valueOf(out9.hasopportunitylineitem);
                                    rowtFileOutputDelimited_5[2]=out9.noodlecrm__final_start_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__final_start_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[3]=out9.noodlecrm__years_experience__c == null ? null : 
                                    out9.noodlecrm__years_experience__c;
                                    rowtFileOutputDelimited_5[4]=out9.noodlecrm__delivery_status_idata__c == null ? null : 
                                    out9.noodlecrm__delivery_status_idata__c;
                                    rowtFileOutputDelimited_5[5]=out9.noodlecrm__decision_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__decision_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[6]=out9.noodlecrm__application_drafted__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__application_drafted__c);
                                    rowtFileOutputDelimited_5[7]=out9.noodlecrm__total_attempts_pre_mc__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__total_attempts_pre_mc__c);
                                    rowtFileOutputDelimited_5[8]=out9.noodlecrm__total_emails__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__total_emails__c);
                                    rowtFileOutputDelimited_5[9]=out9.noodlecrm__scholarships__c == null ? null : 
                                    out9.noodlecrm__scholarships__c;
                                    rowtFileOutputDelimited_5[10]=out9.noodlecrm__url__c == null ? null : 
                                    out9.noodlecrm__url__c;
                                    rowtFileOutputDelimited_5[11]=out9.noodlecrm__current_start_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__current_start_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[12]=out9.noodlecrm__external_id__c == null ? null : 
                                    out9.noodlecrm__external_id__c;
                                    rowtFileOutputDelimited_5[13]=out9.noodlecrm__will_not_complete_reason__c == null ? null : 
                                    out9.noodlecrm__will_not_complete_reason__c;
                                    rowtFileOutputDelimited_5[14]=out9.noodlecrm__defer_reason__c == null ? null : 
                                    out9.noodlecrm__defer_reason__c;
                                    rowtFileOutputDelimited_5[15]=out9.noodlecrm__lead_stated_gpa__c == null ? null : 
                                    out9.noodlecrm__lead_stated_gpa__c;
                                    rowtFileOutputDelimited_5[16]=out9.noodlecrm__degree_verification__c == null ? null : 
                                    out9.noodlecrm__degree_verification__c;
                                    rowtFileOutputDelimited_5[17]=out9.noodlecrm__app_item_received_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__app_item_received_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[18]=out9.noodlecrm__phone__c == null ? null : 
                                    out9.noodlecrm__phone__c;
                                    rowtFileOutputDelimited_5[19]=out9.noodlecrm__decline_reason_details__c == null ? null : 
                                    out9.noodlecrm__decline_reason_details__c;
                                    rowtFileOutputDelimited_5[20]=out9.noodlecrm__will_not_apply_reason__c == null ? null : 
                                    out9.noodlecrm__will_not_apply_reason__c;
                                    rowtFileOutputDelimited_5[21]=out9.forecastcategoryname == null ? null : 
                                    out9.forecastcategoryname;
                                    rowtFileOutputDelimited_5[22]=out9.noodlecrm__optional_statement__c == null ? null : 
                                    out9.noodlecrm__optional_statement__c;
                                    rowtFileOutputDelimited_5[23]=out9.noodlecrm__maincompetitors__c == null ? null : 
                                    out9.noodlecrm__maincompetitors__c;
                                    rowtFileOutputDelimited_5[24]=out9.noodlecrm__partnerships__c == null ? null : 
                                    out9.noodlecrm__partnerships__c;
                                    rowtFileOutputDelimited_5[25]=out9.noodlecrm__bad_lead_reason__c == null ? null : 
                                    out9.noodlecrm__bad_lead_reason__c;
                                    rowtFileOutputDelimited_5[26]=out9.noodlecrm__application_last_login__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__application_last_login__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[27]=out9.noodlecrm__out_of_pocket__c == null ? null : 
                                    out9.noodlecrm__out_of_pocket__c;
                                    rowtFileOutputDelimited_5[28]=out9.noodlecrm__enrollment_status__c == null ? null : 
                                    out9.noodlecrm__enrollment_status__c;
                                    rowtFileOutputDelimited_5[29]=out9.noodlecrm__competitor_details__c == null ? null : 
                                    out9.noodlecrm__competitor_details__c;
                                    rowtFileOutputDelimited_5[30]=out9.noodlecrm__last_attended_zoom_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__last_attended_zoom_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[31]=out9.noodlecrm__last_attended_webinar_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__last_attended_webinar_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[32]=out9.noodlecrm__program2__c == null ? null : 
                                    out9.noodlecrm__program2__c;
                                    rowtFileOutputDelimited_5[33]=out9.noodlecrm__enrollment_status_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__enrollment_status_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[34]=out9.noodlecrm__noodle_crm_id__c == null ? null : 
                                    out9.noodlecrm__noodle_crm_id__c;
                                    rowtFileOutputDelimited_5[35]=out9.closedate == null ? null : 
                                    FormatterUtils.format_Date(out9.closedate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[36]=out9.noodlecrm__application_indicated_start_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__application_indicated_start_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[37]=out9.noodlecrm__university__c == null ? null : 
                                    out9.noodlecrm__university__c;
                                    rowtFileOutputDelimited_5[38]=out9.noodlecrm__military__c == null ? null : 
                                    out9.noodlecrm__military__c;
                                    rowtFileOutputDelimited_5[39]=out9.noodlecrm__decline_reason__c == null ? null : 
                                    out9.noodlecrm__decline_reason__c;
                                    rowtFileOutputDelimited_5[40]=out9.noodlecrm__universitycrmid__c == null ? null : 
                                    out9.noodlecrm__universitycrmid__c;
                                    rowtFileOutputDelimited_5[41]=out9.noodlecrm__resume__c == null ? null : 
                                    out9.noodlecrm__resume__c;
                                    rowtFileOutputDelimited_5[42]=out9.noodlecrm__meets_program_criteria__c == null ? null : 
                                    out9.noodlecrm__meets_program_criteria__c;
                                    rowtFileOutputDelimited_5[43]=out9.noodlecrm__best_time_to_call__c == null ? null : 
                                    out9.noodlecrm__best_time_to_call__c;
                                    rowtFileOutputDelimited_5[44]=out9.noodlecrm__total_texts__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__total_texts__c);
                                    rowtFileOutputDelimited_5[45]=out9.noodlecrm__application_program_global__c == null ? null : 
                                    out9.noodlecrm__application_program_global__c;
                                    rowtFileOutputDelimited_5[46]=out9.accountid == null ? null : 
                                    out9.accountid;
                                    rowtFileOutputDelimited_5[47]=out9.noodlecrm__external_id_populated__c == null ? null : 
                                    out9.noodlecrm__external_id_populated__c;
                                    rowtFileOutputDelimited_5[48]=out9.noodlecrm__utm_source__c == null ? null : 
                                    out9.noodlecrm__utm_source__c;
                                    rowtFileOutputDelimited_5[49]=out9.noodlecrm__total_inquiries__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__total_inquiries__c);
                                    rowtFileOutputDelimited_5[50]=out9.noodlecrm__first_call_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__first_call_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[51]=out9.noodlecrm__lead_external_id__c == null ? null : 
                                    out9.noodlecrm__lead_external_id__c;
                                    rowtFileOutputDelimited_5[52]=out9.noodlecrm__webinar_signup_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__webinar_signup_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[53]=out9.lastvieweddate == null ? null : 
                                    FormatterUtils.format_Date(out9.lastvieweddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[54]=out9.noodlecrm__city__c == null ? null : 
                                    out9.noodlecrm__city__c;
                                    rowtFileOutputDelimited_5[55]=out9.noodlecrm__application_decision__c == null ? null : 
                                    out9.noodlecrm__application_decision__c;
                                    rowtFileOutputDelimited_5[56]=out9.noodlecrm__university_email__c == null ? null : 
                                    out9.noodlecrm__university_email__c;
                                    rowtFileOutputDelimited_5[57]=out9.noodlecrm__responsiveness__c == null ? null : 
                                    out9.noodlecrm__responsiveness__c;
                                    rowtFileOutputDelimited_5[58]=out9.noodlecrm__official_cohort__c == null ? null : 
                                    out9.noodlecrm__official_cohort__c;
                                    rowtFileOutputDelimited_5[59]=out9.stagename == null ? null : 
                                    out9.stagename;
                                    rowtFileOutputDelimited_5[60]=out9.noodlecrm__ea_projected_submit_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__ea_projected_submit_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[61]=out9.noodlecrm__deal_stage__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__deal_stage__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[62]=out9.noodlecrm__first_touch_source__c == null ? null : 
                                    out9.noodlecrm__first_touch_source__c;
                                    rowtFileOutputDelimited_5[63]=out9.noodlecrm__international_language_test__c == null ? null : 
                                    out9.noodlecrm__international_language_test__c;
                                    rowtFileOutputDelimited_5[64]=out9.noodlecrm__utm_content__c == null ? null : 
                                    out9.noodlecrm__utm_content__c;
                                    rowtFileOutputDelimited_5[65]=out9.noodlecrm__app_start_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__app_start_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[66]=out9.campaignid == null ? null : 
                                    out9.campaignid;
                                    rowtFileOutputDelimited_5[67]=out9.name == null ? null : 
                                    out9.name;
                                    rowtFileOutputDelimited_5[68]=out9.hasoverduetask == null ? null : 
                                    String.valueOf(out9.hasoverduetask);
                                    rowtFileOutputDelimited_5[69]=out9.noodlecrm__opportunity_owner__c == null ? null : 
                                    out9.noodlecrm__opportunity_owner__c;
                                    rowtFileOutputDelimited_5[70]=out9.noodlecrm__missed_attempt_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__missed_attempt_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[71]=out9.iswon == null ? null : 
                                    String.valueOf(out9.iswon);
                                    rowtFileOutputDelimited_5[72]=out9.noodlecrm__application_submit_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__application_submit_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[73]=out9.noodlecrm__associated_contact__c == null ? null : 
                                    out9.noodlecrm__associated_contact__c;
                                    rowtFileOutputDelimited_5[74]=out9.noodlecrm__expected_date_to_meet_requirement__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__expected_date_to_meet_requirement__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[75]=out9.lastmodifieddate == null ? null : 
                                    FormatterUtils.format_Date(out9.lastmodifieddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[76]=out9.noodlecrm__last_activitydate_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__last_activitydate_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[77]=out9.noodlecrm__missed_attempt_counter__c == null ? null : 
                                    out9.noodlecrm__missed_attempt_counter__c;
                                    rowtFileOutputDelimited_5[78]=out9.noodlecrm__program__c == null ? null : 
                                    out9.noodlecrm__program__c;
                                    rowtFileOutputDelimited_5[79]=out9.noodlecrm__licensure__c == null ? null : 
                                    out9.noodlecrm__licensure__c;
                                    rowtFileOutputDelimited_5[80]=out9.fiscalquarter == null ? null : 
                                    String.valueOf(out9.fiscalquarter);
                                    rowtFileOutputDelimited_5[81]=out9.ownerid == null ? null : 
                                    out9.ownerid;
                                    rowtFileOutputDelimited_5[82]=out9.noodlecrm__utm_medium__c == null ? null : 
                                    out9.noodlecrm__utm_medium__c;
                                    rowtFileOutputDelimited_5[83]=out9.noodlecrm__last_call_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__last_call_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[84]=out9.noodlecrm__opportunity_external_id__c == null ? null : 
                                    out9.noodlecrm__opportunity_external_id__c;
                                    rowtFileOutputDelimited_5[85]=out9.isdeleted == null ? null : 
                                    String.valueOf(out9.isdeleted);
                                    rowtFileOutputDelimited_5[86]=out9.systemmodstamp == null ? null : 
                                    FormatterUtils.format_Date(out9.systemmodstamp, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[87]=out9.noodlecrm__follow_up_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__follow_up_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[88]=out9.noodlecrm__attended_webinar__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__attended_webinar__c);
                                    rowtFileOutputDelimited_5[89]=out9.noodlecrm__professional_experience__c == null ? null : 
                                    out9.noodlecrm__professional_experience__c;
                                }
                                public void putValue_1(final out9Struct out9,String[] rowtFileOutputDelimited_5){
                                    rowtFileOutputDelimited_5[90]=out9.noodlecrm__lor_2__c == null ? null : 
                                    out9.noodlecrm__lor_2__c;
                                    rowtFileOutputDelimited_5[91]=out9.noodlecrm__supplemental__c == null ? null : 
                                    out9.noodlecrm__supplemental__c;
                                    rowtFileOutputDelimited_5[92]=out9.lastmodifiedbyid == null ? null : 
                                    out9.lastmodifiedbyid;
                                    rowtFileOutputDelimited_5[93]=out9.noodlecrm__mta_interaction_record__c == null ? null : 
                                    out9.noodlecrm__mta_interaction_record__c;
                                    rowtFileOutputDelimited_5[94]=out9.noodlecrm__meaningful_conversation_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__meaningful_conversation_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[95]=out9.noodlecrm__applying_to_a_competitor__c == null ? null : 
                                    out9.noodlecrm__applying_to_a_competitor__c;
                                    rowtFileOutputDelimited_5[96]=out9.noodlecrm__lead_stated_professional_status__c == null ? null : 
                                    out9.noodlecrm__lead_stated_professional_status__c;
                                    rowtFileOutputDelimited_5[97]=out9.noodlecrm__street__c == null ? null : 
                                    out9.noodlecrm__street__c;
                                    rowtFileOutputDelimited_5[98]=out9.noodlecrm__lor_1__c == null ? null : 
                                    out9.noodlecrm__lor_1__c;
                                    rowtFileOutputDelimited_5[99]=out9.noodlecrm__scholarship_applied__c == null ? null : 
                                    out9.noodlecrm__scholarship_applied__c;
                                    rowtFileOutputDelimited_5[100]=out9.noodlecrm__ea_indicated_start_term__c == null ? null : 
                                    out9.noodlecrm__ea_indicated_start_term__c;
                                    rowtFileOutputDelimited_5[101]=out9.noodlecrm__state_region__c == null ? null : 
                                    out9.noodlecrm__state_region__c;
                                    rowtFileOutputDelimited_5[102]=out9.noodlecrm__registered__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__registered__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[103]=out9.noodlecrm__employer_benefits__c == null ? null : 
                                    out9.noodlecrm__employer_benefits__c;
                                    rowtFileOutputDelimited_5[104]=out9.noodlecrm__utm_campaign__c == null ? null : 
                                    out9.noodlecrm__utm_campaign__c;
                                    rowtFileOutputDelimited_5[105]=out9.lastactivitydate == null ? null : 
                                    FormatterUtils.format_Date(out9.lastactivitydate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[106]=out9.noodlecrm__will_not_apply_reason_other__c == null ? null : 
                                    out9.noodlecrm__will_not_apply_reason_other__c;
                                    rowtFileOutputDelimited_5[107]=out9.noodlecrm__app_deposit_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__app_deposit_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[108]=out9.noodlecrm__application_status__c == null ? null : 
                                    out9.noodlecrm__application_status__c;
                                    rowtFileOutputDelimited_5[109]=out9.noodlecrm__defer_reason_detail__c == null ? null : 
                                    out9.noodlecrm__defer_reason_detail__c;
                                    rowtFileOutputDelimited_5[110]=out9.hasopenactivity == null ? null : 
                                    String.valueOf(out9.hasopenactivity);
                                    rowtFileOutputDelimited_5[111]=out9.noodlecrm__last_activity_type__c == null ? null : 
                                    out9.noodlecrm__last_activity_type__c;
                                    rowtFileOutputDelimited_5[112]=out9.noodlecrm__student_loans__c == null ? null : 
                                    out9.noodlecrm__student_loans__c;
                                    rowtFileOutputDelimited_5[113]=out9.noodlecrm__deliveryinstallationstatus__c == null ? null : 
                                    out9.noodlecrm__deliveryinstallationstatus__c;
                                    rowtFileOutputDelimited_5[114]=out9.noodlecrm__trackingnumber__c == null ? null : 
                                    out9.noodlecrm__trackingnumber__c;
                                    rowtFileOutputDelimited_5[115]=out9.noodlecrm__time_zone__c == null ? null : 
                                    out9.noodlecrm__time_zone__c;
                                    rowtFileOutputDelimited_5[116]=out9.noodlecrm__do_not_call__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__do_not_call__c);
                                    rowtFileOutputDelimited_5[117]=out9.probability == null ? null : 
                                    String.valueOf(out9.probability);
                                    rowtFileOutputDelimited_5[118]=out9.noodlecrm__tran_3__c == null ? null : 
                                    out9.noodlecrm__tran_3__c;
                                    rowtFileOutputDelimited_5[119]=out9.noodlecrm__delivery_timestamp_idata__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__delivery_timestamp_idata__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[120]=out9.noodlecrm__last_contacting_state__c == null ? null : 
                                    out9.noodlecrm__last_contacting_state__c;
                                    rowtFileOutputDelimited_5[121]=out9.noodlecrm__test_requirements__c == null ? null : 
                                    out9.noodlecrm__test_requirements__c;
                                    rowtFileOutputDelimited_5[122]=out9.noodlecrm__decision_type__c == null ? null : 
                                    out9.noodlecrm__decision_type__c;
                                    rowtFileOutputDelimited_5[123]=out9.noodlecrm__admit_cohort__c == null ? null : 
                                    out9.noodlecrm__admit_cohort__c;
                                    rowtFileOutputDelimited_5[124]=out9.noodlecrm__tran_2__c == null ? null : 
                                    out9.noodlecrm__tran_2__c;
                                    rowtFileOutputDelimited_5[125]=out9.noodlecrm__email__c == null ? null : 
                                    out9.noodlecrm__email__c;
                                    rowtFileOutputDelimited_5[126]=out9.noodlecrm__university_scholarship_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__university_scholarship_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[127]=out9.noodlecrm__revised_start_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__revised_start_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[128]=out9.createddate == null ? null : 
                                    FormatterUtils.format_Date(out9.createddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[129]=out9.noodlecrm__submit_cohort__c == null ? null : 
                                    out9.noodlecrm__submit_cohort__c;
                                    rowtFileOutputDelimited_5[130]=out9.isclosed == null ? null : 
                                    String.valueOf(out9.isclosed);
                                    rowtFileOutputDelimited_5[131]=out9.noodlecrm__condition_type__c == null ? null : 
                                    out9.noodlecrm__condition_type__c;
                                    rowtFileOutputDelimited_5[132]=out9.noodlecrm__opportunity_status__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__opportunity_status__c);
                                    rowtFileOutputDelimited_5[133]=out9.noodlecrm__class_schedule_type__c == null ? null : 
                                    out9.noodlecrm__class_schedule_type__c;
                                    rowtFileOutputDelimited_5[134]=out9.noodlecrm__lead_stated_licensure__c == null ? null : 
                                    out9.noodlecrm__lead_stated_licensure__c;
                                    rowtFileOutputDelimited_5[135]=out9.noodlecrm__student__c == null ? null : 
                                    out9.noodlecrm__student__c;
                                    rowtFileOutputDelimited_5[136]=out9.noodlecrm__university_application_id__c == null ? null : 
                                    out9.noodlecrm__university_application_id__c;
                                    rowtFileOutputDelimited_5[137]=out9.leadsource == null ? null : 
                                    out9.leadsource;
                                    rowtFileOutputDelimited_5[138]=out9.noodlecrm__updated__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__updated__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[139]=out9.noodlecrm__utm_term__c == null ? null : 
                                    out9.noodlecrm__utm_term__c;
                                    rowtFileOutputDelimited_5[140]=out9.noodlecrm__tran_1__c == null ? null : 
                                    out9.noodlecrm__tran_1__c;
                                    rowtFileOutputDelimited_5[141]=out9.noodlecrm__google_analytics_id__c == null ? null : 
                                    out9.noodlecrm__google_analytics_id__c;
                                    rowtFileOutputDelimited_5[142]=out9.amount == null ? null : 
                                    String.valueOf(out9.amount);
                                    rowtFileOutputDelimited_5[143]=out9.noodlecrm__crm_id__c == null ? null : 
                                    out9.noodlecrm__crm_id__c;
                                    rowtFileOutputDelimited_5[144]=out9.noodlecrm__lead_stated_taken_course__c == null ? null : 
                                    out9.noodlecrm__lead_stated_taken_course__c;
                                    rowtFileOutputDelimited_5[145]=out9.noodlecrm__ip_address__c == null ? null : 
                                    out9.noodlecrm__ip_address__c;
                                    rowtFileOutputDelimited_5[146]=out9.noodlecrm__total_calls__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__total_calls__c);
                                    rowtFileOutputDelimited_5[147]=out9.noodlecrm__university_id_number__c == null ? null : 
                                    out9.noodlecrm__university_id_number__c;
                                    rowtFileOutputDelimited_5[148]=out9.noodlecrm__decision__c == null ? null : 
                                    out9.noodlecrm__decision__c;
                                    rowtFileOutputDelimited_5[149]=out9.noodlecrm__test_status_gre__c == null ? null : 
                                    out9.noodlecrm__test_status_gre__c;
                                    rowtFileOutputDelimited_5[150]=out9.forecastcategory == null ? null : 
                                    out9.forecastcategory;
                                    rowtFileOutputDelimited_5[151]=out9.noodlecrm__attended_zoom__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__attended_zoom__c);
                                    rowtFileOutputDelimited_5[152]=out9.noodlecrm__fafsa__c == null ? null : 
                                    out9.noodlecrm__fafsa__c;
                                    rowtFileOutputDelimited_5[153]=out9.noodlecrm__level_of_education__c == null ? null : 
                                    out9.noodlecrm__level_of_education__c;
                                    rowtFileOutputDelimited_5[154]=out9.noodlecrm__ea_projected_deposit_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__ea_projected_deposit_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[155]=out9.noodlecrm__currentgenerators__c == null ? null : 
                                    out9.noodlecrm__currentgenerators__c;
                                    rowtFileOutputDelimited_5[156]=out9.noodlecrm__defer_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__defer_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[157]=out9.noodlecrm__lead_stated_taken_course_req__c == null ? null : 
                                    out9.noodlecrm__lead_stated_taken_course_req__c;
                                    rowtFileOutputDelimited_5[158]=out9.noodlecrm__follow_up_reason__c == null ? null : 
                                    out9.noodlecrm__follow_up_reason__c;
                                    rowtFileOutputDelimited_5[159]=out9.noodlecrm__will_not_apply_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__will_not_apply_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[160]=out9.noodlecrm__trying_attempt_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__trying_attempt_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[161]=out9.noodlecrm__gpa__c == null ? null : 
                                    out9.noodlecrm__gpa__c;
                                    rowtFileOutputDelimited_5[162]=out9.noodlecrm__fa_comments__c == null ? null : 
                                    out9.noodlecrm__fa_comments__c;
                                    rowtFileOutputDelimited_5[163]=out9.createdbyid == null ? null : 
                                    out9.createdbyid;
                                    rowtFileOutputDelimited_5[164]=out9.type == null ? null : 
                                    out9.type;
                                    rowtFileOutputDelimited_5[165]=out9.noodlecrm__first_name__c == null ? null : 
                                    out9.noodlecrm__first_name__c;
                                    rowtFileOutputDelimited_5[166]=out9.pricebook2id == null ? null : 
                                    out9.pricebook2id;
                                    rowtFileOutputDelimited_5[167]=out9.contactid == null ? null : 
                                    out9.contactid;
                                    rowtFileOutputDelimited_5[168]=out9.noodlecrm__contact_type__c == null ? null : 
                                    out9.noodlecrm__contact_type__c;
                                    rowtFileOutputDelimited_5[169]=out9.noodlecrm__conversion_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__conversion_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[170]=out9.noodlecrm__ordernumber__c == null ? null : 
                                    out9.noodlecrm__ordernumber__c;
                                    rowtFileOutputDelimited_5[171]=out9.fiscalyear == null ? null : 
                                    String.valueOf(out9.fiscalyear);
                                    rowtFileOutputDelimited_5[172]=out9.noodlecrm__defer_start_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__defer_start_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[173]=out9.noodlecrm__postalcode__c == null ? null : 
                                    out9.noodlecrm__postalcode__c;
                                    rowtFileOutputDelimited_5[174]=out9.noodlecrm__re_open__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__re_open__c);
                                    rowtFileOutputDelimited_5[175]=out9.noodlecrm__applying_to_a_competitor_type__c == null ? null : 
                                    out9.noodlecrm__applying_to_a_competitor_type__c;
                                    rowtFileOutputDelimited_5[176]=out9.noodlecrm__app_complete_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__app_complete_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[177]=out9.noodlecrm__country__c == null ? null : 
                                    out9.noodlecrm__country__c;
                                    rowtFileOutputDelimited_5[178]=out9.description == null ? null : 
                                    out9.description;
                                    rowtFileOutputDelimited_5[179]=out9.noodlecrm__application_program__c == null ? null : 
                                    out9.noodlecrm__application_program__c;
                                }
                                public void putValue_2(final out9Struct out9,String[] rowtFileOutputDelimited_5){
                                    rowtFileOutputDelimited_5[180]=out9.noodlecrm__decline_date__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__decline_date__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[181]=out9.lastreferenceddate == null ? null : 
                                    FormatterUtils.format_Date(out9.lastreferenceddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[182]=out9.noodlecrm__temperature__c == null ? null : 
                                    out9.noodlecrm__temperature__c;
                                    rowtFileOutputDelimited_5[183]=out9.noodlecrm__competitor_university_2__c == null ? null : 
                                    out9.noodlecrm__competitor_university_2__c;
                                    rowtFileOutputDelimited_5[184]=out9.noodlecrm__course_requirements__c == null ? null : 
                                    out9.noodlecrm__course_requirements__c;
                                    rowtFileOutputDelimited_5[185]=out9.fiscal == null ? null : 
                                    out9.fiscal;
                                    rowtFileOutputDelimited_5[186]=out9.noodlecrm__last_name__c == null ? null : 
                                    out9.noodlecrm__last_name__c;
                                    rowtFileOutputDelimited_5[187]=out9.noodlecrm__sop__c == null ? null : 
                                    out9.noodlecrm__sop__c;
                                    rowtFileOutputDelimited_5[188]=out9.noodlecrm__competitor_university_1__c == null ? null : 
                                    out9.noodlecrm__competitor_university_1__c;
                                    rowtFileOutputDelimited_5[189]=out9.noodlecrm__bad_lead_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__bad_lead_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[190]=out9.nextstep == null ? null : 
                                    out9.nextstep;
                                    rowtFileOutputDelimited_5[191]=out9.noodlecrm__signed_up_for_webinar__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__signed_up_for_webinar__c);
                                    rowtFileOutputDelimited_5[192]=out9.sfid == null ? null : 
                                    out9.sfid;
                                    rowtFileOutputDelimited_5[193]=
                                    String.valueOf(out9.id);
                                    rowtFileOutputDelimited_5[194]=out9.noodlecrm__preferred_phone__c == null ? null : 
                                    out9.noodlecrm__preferred_phone__c;
                                    rowtFileOutputDelimited_5[195]=out9.noodlecrm__program3__c == null ? null : 
                                    out9.noodlecrm__program3__c;
                                    rowtFileOutputDelimited_5[196]=out9.noodlecrm__missed_attempt_counter2__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__missed_attempt_counter2__c);
                                    rowtFileOutputDelimited_5[197]=out9.noodlecrm__university_app_crmid__c == null ? null : 
                                    out9.noodlecrm__university_app_crmid__c;
                                    rowtFileOutputDelimited_5[198]=out9.noodlecrm__last_call_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__last_call_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[199]=out9.noodlecrm__program2__r__noodlecrm__external_id__c == null ? null : 
                                    out9.noodlecrm__program2__r__noodlecrm__external_id__c;
                                    rowtFileOutputDelimited_5[200]=out9.noodlecrm__program3__r__noodlecrm__external_id__c == null ? null : 
                                    out9.noodlecrm__program3__r__noodlecrm__external_id__c;
                                    rowtFileOutputDelimited_5[201]=out9.noodlecrm__app_start_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__app_start_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[202]=out9.noodlecrm__historical_call_count__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__historical_call_count__c);
                                    rowtFileOutputDelimited_5[203]=out9.noodlecrm__revised_start_cohort__c == null ? null : 
                                    out9.noodlecrm__revised_start_cohort__c;
                                    rowtFileOutputDelimited_5[204]=out9.noodlecrm__app_enrolled_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__app_enrolled_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[205]=out9.noodlecrm__external_id_unique__c == null ? null : 
                                    out9.noodlecrm__external_id_unique__c;
                                    rowtFileOutputDelimited_5[206]=out9.noodlecrm__preferred_email__c == null ? null : 
                                    out9.noodlecrm__preferred_email__c;
                                    rowtFileOutputDelimited_5[207]=out9.noodlecrm__student_contact__c == null ? null : 
                                    out9.noodlecrm__student_contact__c;
                                    rowtFileOutputDelimited_5[208]=out9.noodlecrm__decision_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__decision_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[209]=out9.noodlecrm__final_start_cohort__c == null ? null : 
                                    out9.noodlecrm__final_start_cohort__c;
                                    rowtFileOutputDelimited_5[210]=out9.noodlecrm__app_complete_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__app_complete_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[211]=out9.noodlecrm__app_submit_date_time__c == null ? null : 
                                    FormatterUtils.format_Date(out9.noodlecrm__app_submit_date_time__c, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_5[212]=out9.noodlecrm__application_indicated_start_cohort__c == null ? null : 
                                    out9.noodlecrm__application_indicated_start_cohort__c;
                                    rowtFileOutputDelimited_5[213]=out9.noodlecrm__engagement_status__c == null ? null : 
                                    out9.noodlecrm__engagement_status__c;
                                    rowtFileOutputDelimited_5[214]=out9.noodlecrm__is_test_record__c == null ? null : 
                                    String.valueOf(out9.noodlecrm__is_test_record__c);
                                    rowtFileOutputDelimited_5[215]=out9.noodlecrm__first_inquiry_action__c == null ? null : 
                                    out9.noodlecrm__first_inquiry_action__c;
                            }
                }
                FileOutputDelimitedUtil_tFileOutputDelimited_5 fileOutputDelimitedUtil_tFileOutputDelimited_5=new FileOutputDelimitedUtil_tFileOutputDelimited_5();
    fileName_tFileOutputDelimited_5 = (new java.io.File(context.staging_S3_dir + "opportunity.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_5 = null;
    String extension_tFileOutputDelimited_5 = null;
    String directory_tFileOutputDelimited_5 = null;
    if((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        }
        directory_tFileOutputDelimited_5 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_5 = true;
    java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
    globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
                String[] headColutFileOutputDelimited_5=new String[216];
            class CSVBasicSet_tFileOutputDelimited_5{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_5[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_5 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_5[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_5[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_5 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_5[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_5[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_5 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_5[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_5 = 0;
            int splitedFileNo_tFileOutputDelimited_5 =0;
            int currentRow_tFileOutputDelimited_5 = 0;


            CSVBasicSet_tFileOutputDelimited_5 csvSettings_tFileOutputDelimited_5 = new CSVBasicSet_tFileOutputDelimited_5();
            csvSettings_tFileOutputDelimited_5.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_5.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_5.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
                        if(!dir_tFileOutputDelimited_5.exists()) {
                            dir_tFileOutputDelimited_5.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
                            if(fileToDelete_tFileOutputDelimited_5.exists()) {
                                fileToDelete_tFileOutputDelimited_5.delete();
                            }
                            CsvWritertFileOutputDelimited_5 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_5.setSeparator(csvSettings_tFileOutputDelimited_5.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_5.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_5.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_5.setLineEnd(""+csvSettings_tFileOutputDelimited_5.getRowDelim());
                    }
                        if(filetFileOutputDelimited_5.length()==0){
                                        fileOutputDelimitedUtil_tFileOutputDelimited_5.putHeaderValue_0(headColutFileOutputDelimited_5);
                                        fileOutputDelimitedUtil_tFileOutputDelimited_5.putHeaderValue_1(headColutFileOutputDelimited_5);
                                        fileOutputDelimitedUtil_tFileOutputDelimited_5.putHeaderValue_2(headColutFileOutputDelimited_5);
                            CsvWritertFileOutputDelimited_5.writeNext(headColutFileOutputDelimited_5);
                            CsvWritertFileOutputDelimited_5.flush();
                        }
                CsvWritertFileOutputDelimited_5.setEscapeChar(csvSettings_tFileOutputDelimited_5.getEscapeChar());
                CsvWritertFileOutputDelimited_5.setQuoteChar(csvSettings_tFileOutputDelimited_5.getTextEnclosure());
                CsvWritertFileOutputDelimited_5.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_5", CsvWritertFileOutputDelimited_5);
resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

 



/**
 * [tFileOutputDelimited_5 begin ] stop
 */




	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out10");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("opportunity");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("opportunity");
}

int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_5 = 100000;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
            try (java.sql.Statement stmtClear_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                stmtClear_tDBOutput_5.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_5 + "\"");
            }
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"noodlecrm__university_scholarship_details__c\",\"hasopportunitylineitem\",\"noodlecrm__final_start_date__c\",\"noodlecrm__years_experience__c\",\"noodlecrm__delivery_status_idata__c\",\"noodlecrm__decision_date__c\",\"noodlecrm__application_drafted__c\",\"noodlecrm__total_attempts_pre_mc__c\",\"noodlecrm__total_emails__c\",\"noodlecrm__scholarships__c\",\"noodlecrm__url__c\",\"noodlecrm__current_start_date__c\",\"noodlecrm__external_id__c\",\"noodlecrm__will_not_complete_reason__c\",\"noodlecrm__defer_reason__c\",\"noodlecrm__lead_stated_gpa__c\",\"noodlecrm__degree_verification__c\",\"noodlecrm__app_item_received_date_time__c\",\"noodlecrm__phone__c\",\"noodlecrm__decline_reason_details__c\",\"noodlecrm__will_not_apply_reason__c\",\"forecastcategoryname\",\"noodlecrm__optional_statement__c\",\"noodlecrm__maincompetitors__c\",\"noodlecrm__partnerships__c\",\"noodlecrm__bad_lead_reason__c\",\"noodlecrm__application_last_login__c\",\"noodlecrm__out_of_pocket__c\",\"noodlecrm__enrollment_status__c\",\"noodlecrm__competitor_details__c\",\"noodlecrm__last_attended_zoom_date_time__c\",\"noodlecrm__last_attended_webinar_date_time__c\",\"noodlecrm__program2__c\",\"noodlecrm__enrollment_status_date_time__c\",\"noodlecrm__noodle_crm_id__c\",\"closedate\",\"noodlecrm__application_indicated_start_date__c\",\"noodlecrm__university__c\",\"noodlecrm__military__c\",\"noodlecrm__decline_reason__c\",\"noodlecrm__universitycrmid__c\",\"noodlecrm__resume__c\",\"noodlecrm__meets_program_criteria__c\",\"noodlecrm__best_time_to_call__c\",\"noodlecrm__total_texts__c\",\"noodlecrm__application_program_global__c\",\"accountid\",\"noodlecrm__external_id_populated__c\",\"noodlecrm__utm_source__c\",\"noodlecrm__total_inquiries__c\",\"noodlecrm__first_call_date_time__c\",\"noodlecrm__lead_external_id__c\",\"noodlecrm__webinar_signup_date_time__c\",\"lastvieweddate\",\"noodlecrm__city__c\",\"noodlecrm__application_decision__c\",\"noodlecrm__university_email__c\",\"noodlecrm__responsiveness__c\",\"noodlecrm__official_cohort__c\",\"stagename\",\"noodlecrm__ea_projected_submit_date__c\",\"noodlecrm__deal_stage__c\",\"noodlecrm__first_touch_source__c\",\"noodlecrm__international_language_test__c\",\"noodlecrm__utm_content__c\",\"noodlecrm__app_start_date__c\",\"campaignid\",\"name\",\"hasoverduetask\",\"noodlecrm__opportunity_owner__c\",\"noodlecrm__missed_attempt_date_time__c\",\"iswon\",\"noodlecrm__application_submit_date__c\",\"noodlecrm__associated_contact__c\",\"noodlecrm__expected_date_to_meet_requirement__c\",\"lastmodifieddate\",\"noodlecrm__last_activitydate_time__c\",\"noodlecrm__missed_attempt_counter__c\",\"noodlecrm__program__c\",\"noodlecrm__licensure__c\",\"fiscalquarter\",\"ownerid\",\"noodlecrm__utm_medium__c\",\"noodlecrm__last_call_date__c\",\"noodlecrm__opportunity_external_id__c\",\"isdeleted\",\"systemmodstamp\",\"noodlecrm__follow_up_date__c\",\"noodlecrm__attended_webinar__c\",\"noodlecrm__professional_experience__c\",\"noodlecrm__lor_2__c\",\"noodlecrm__supplemental__c\",\"lastmodifiedbyid\",\"noodlecrm__mta_interaction_record__c\",\"noodlecrm__meaningful_conversation_date_time__c\",\"noodlecrm__applying_to_a_competitor__c\",\"noodlecrm__lead_stated_professional_status__c\",\"noodlecrm__street__c\",\"noodlecrm__lor_1__c\",\"noodlecrm__scholarship_applied__c\",\"noodlecrm__ea_indicated_start_term__c\",\"noodlecrm__state_region__c\",\"noodlecrm__registered__c\",\"noodlecrm__employer_benefits__c\",\"noodlecrm__utm_campaign__c\",\"lastactivitydate\",\"noodlecrm__will_not_apply_reason_other__c\",\"noodlecrm__app_deposit_date_time__c\",\"noodlecrm__application_status__c\",\"noodlecrm__defer_reason_detail__c\",\"hasopenactivity\",\"noodlecrm__last_activity_type__c\",\"noodlecrm__student_loans__c\",\"noodlecrm__deliveryinstallationstatus__c\",\"noodlecrm__trackingnumber__c\",\"noodlecrm__time_zone__c\",\"noodlecrm__do_not_call__c\",\"probability\",\"noodlecrm__tran_3__c\",\"noodlecrm__delivery_timestamp_idata__c\",\"noodlecrm__last_contacting_state__c\",\"noodlecrm__test_requirements__c\",\"noodlecrm__decision_type__c\",\"noodlecrm__admit_cohort__c\",\"noodlecrm__tran_2__c\",\"noodlecrm__email__c\",\"noodlecrm__university_scholarship_date__c\",\"noodlecrm__revised_start_date__c\",\"createddate\",\"noodlecrm__submit_cohort__c\",\"isclosed\",\"noodlecrm__condition_type__c\",\"noodlecrm__opportunity_status__c\",\"noodlecrm__class_schedule_type__c\",\"noodlecrm__lead_stated_licensure__c\",\"noodlecrm__student__c\",\"noodlecrm__university_application_id__c\",\"leadsource\",\"noodlecrm__updated__c\",\"noodlecrm__utm_term__c\",\"noodlecrm__tran_1__c\",\"noodlecrm__google_analytics_id__c\",\"amount\",\"noodlecrm__crm_id__c\",\"noodlecrm__lead_stated_taken_course__c\",\"noodlecrm__ip_address__c\",\"noodlecrm__total_calls__c\",\"noodlecrm__university_id_number__c\",\"noodlecrm__decision__c\",\"noodlecrm__test_status_gre__c\",\"forecastcategory\",\"noodlecrm__attended_zoom__c\",\"noodlecrm__fafsa__c\",\"noodlecrm__level_of_education__c\",\"noodlecrm__ea_projected_deposit_date__c\",\"noodlecrm__currentgenerators__c\",\"noodlecrm__defer_date__c\",\"noodlecrm__lead_stated_taken_course_req__c\",\"noodlecrm__follow_up_reason__c\",\"noodlecrm__will_not_apply_date__c\",\"noodlecrm__trying_attempt_date__c\",\"noodlecrm__gpa__c\",\"noodlecrm__fa_comments__c\",\"createdbyid\",\"type\",\"noodlecrm__first_name__c\",\"pricebook2id\",\"contactid\",\"noodlecrm__contact_type__c\",\"noodlecrm__conversion_date__c\",\"noodlecrm__ordernumber__c\",\"fiscalyear\",\"noodlecrm__defer_start_date__c\",\"noodlecrm__postalcode__c\",\"noodlecrm__re_open__c\",\"noodlecrm__applying_to_a_competitor_type__c\",\"noodlecrm__app_complete_date__c\",\"noodlecrm__country__c\",\"description\",\"noodlecrm__application_program__c\",\"noodlecrm__decline_date__c\",\"lastreferenceddate\",\"noodlecrm__temperature__c\",\"noodlecrm__competitor_university_2__c\",\"noodlecrm__course_requirements__c\",\"fiscal\",\"noodlecrm__last_name__c\",\"noodlecrm__sop__c\",\"noodlecrm__competitor_university_1__c\",\"noodlecrm__bad_lead_date_time__c\",\"nextstep\",\"noodlecrm__signed_up_for_webinar__c\",\"sfid\",\"id\",\"noodlecrm__preferred_phone__c\",\"noodlecrm__program3__c\",\"noodlecrm__missed_attempt_counter2__c\",\"noodlecrm__university_app_crmid__c\",\"noodlecrm__last_call_date_time__c\",\"noodlecrm__program2__r__noodlecrm__external_id__c\",\"noodlecrm__program3__r__noodlecrm__external_id__c\",\"noodlecrm__app_start_date_time__c\",\"noodlecrm__historical_call_count__c\",\"noodlecrm__revised_start_cohort__c\",\"noodlecrm__app_enrolled_date_time__c\",\"noodlecrm__external_id_unique__c\",\"noodlecrm__preferred_email__c\",\"noodlecrm__student_contact__c\",\"noodlecrm__decision_date_time__c\",\"noodlecrm__final_start_cohort__c\",\"noodlecrm__app_complete_date_time__c\",\"noodlecrm__app_submit_date_time__c\",\"noodlecrm__application_indicated_start_cohort__c\",\"noodlecrm__engagement_status__c\",\"noodlecrm__is_test_record__c\",\"noodlecrm__first_inquiry_action__c\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out9Struct out9_tmp = new out9Struct();
out10Struct out10_tmp = new out10Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  noodlecrm__university_scholarship_details__c, \n  hasopportunitylineitem, \n  noodlecrm__final_start_date__c"
+", \n  noodlecrm__years_experience__c, \n  noodlecrm__delivery_status_idata__c, \n  noodlecrm__decision_date__c, \n  nood"
+"lecrm__application_drafted__c, \n  noodlecrm__total_attempts_pre_mc__c, \n  noodlecrm__total_emails__c, \n  noodlecrm__s"
+"cholarships__c, \n  noodlecrm__url__c, \n  noodlecrm__current_start_date__c, \n  noodlecrm__external_id__c, \n  noodlecr"
+"m__will_not_complete_reason__c, \n  noodlecrm__defer_reason__c, \n  noodlecrm__lead_stated_gpa__c, \n  noodlecrm__degree"
+"_verification__c, \n  noodlecrm__app_item_received_date_time__c, \n  noodlecrm__phone__c, \n  noodlecrm__decline_reason_"
+"details__c, \n  noodlecrm__will_not_apply_reason__c, \n  forecastcategoryname, \n  noodlecrm__optional_statement__c, \n "
+" noodlecrm__maincompetitors__c, \n  noodlecrm__partnerships__c, \n  noodlecrm__bad_lead_reason__c, \n  noodlecrm__applic"
+"ation_last_login__c, \n  noodlecrm__out_of_pocket__c, \n  noodlecrm__enrollment_status__c, \n  noodlecrm__competitor_det"
+"ails__c, \n  noodlecrm__last_attended_zoom_date_time__c, \n  noodlecrm__last_attended_webinar_date_time__c, \n  noodlecr"
+"m__program2__c, \n  noodlecrm__enrollment_status_date_time__c, \n  noodlecrm__noodle_crm_id__c, \n  closedate, \n  noodl"
+"ecrm__application_indicated_start_date__c, \n  noodlecrm__university__c, \n  noodlecrm__military__c, \n  noodlecrm__decl"
+"ine_reason__c, \n  noodlecrm__universitycrmid__c, \n  noodlecrm__resume__c, \n  noodlecrm__meets_program_criteria__c, \n"
+"  noodlecrm__best_time_to_call__c, \n  noodlecrm__total_texts__c, \n  noodlecrm__application_program_global__c, \n  acco"
+"untid, \n  noodlecrm__external_id_populated__c, \n  noodlecrm__utm_source__c, \n  noodlecrm__total_inquiries__c, \n  noo"
+"dlecrm__first_call_date_time__c, \n  noodlecrm__lead_external_id__c, \n  noodlecrm__webinar_signup_date_time__c, \n  las"
+"tvieweddate, \n  noodlecrm__city__c, \n  noodlecrm__application_decision__c, \n  noodlecrm__university_email__c, \n  noo"
+"dlecrm__responsiveness__c, \n  noodlecrm__official_cohort__c, \n  stagename, \n  noodlecrm__ea_projected_submit_date__c,"
+" \n  noodlecrm__deal_stage__c, \n  noodlecrm__first_touch_source__c, \n  noodlecrm__international_language_test__c, \n  "
+"noodlecrm__utm_content__c, \n  noodlecrm__app_start_date__c, \n  campaignid, \n  name, \n  hasoverduetask, \n  noodlecrm"
+"__opportunity_owner__c, \n  noodlecrm__missed_attempt_date_time__c, \n  iswon, \n  noodlecrm__application_submit_date__c"
+", \n  noodlecrm__associated_contact__c, \n  noodlecrm__expected_date_to_meet_requirement__c, \n  lastmodifieddate, \n  n"
+"oodlecrm__last_activitydate_time__c, \n  noodlecrm__missed_attempt_counter__c, \n  noodlecrm__program__c, \n  noodlecrm_"
+"_licensure__c, \n  fiscalquarter, \n  ownerid, \n  noodlecrm__utm_medium__c, \n  noodlecrm__last_call_date__c, \n  noodl"
+"ecrm__opportunity_external_id__c, \n  isdeleted, \n  systemmodstamp, \n  noodlecrm__follow_up_date__c, \n  noodlecrm__at"
+"tended_webinar__c, \n  noodlecrm__professional_experience__c, \n  noodlecrm__lor_2__c, \n  noodlecrm__supplemental__c, "
+"\n  lastmodifiedbyid, \n  noodlecrm__mta_interaction_record__c, \n  noodlecrm__meaningful_conversation_date_time__c, \n  "
+"noodlecrm__applying_to_a_competitor__c, \n  noodlecrm__lead_stated_professional_status__c, \n  noodlecrm__street__c, \n "
+" noodlecrm__lor_1__c, \n  noodlecrm__scholarship_applied__c, \n  noodlecrm__ea_indicated_start_term__c, \n  noodlecrm__s"
+"tate_region__c, \n  noodlecrm__registered__c, \n  noodlecrm__employer_benefits__c, \n  noodlecrm__utm_campaign__c, \n  l"
+"astactivitydate, \n  noodlecrm__will_not_apply_reason_other__c, \n  noodlecrm__app_deposit_date_time__c, \n  noodlecrm__"
+"application_status__c, \n  noodlecrm__defer_reason_detail__c, \n  hasopenactivity, \n  noodlecrm__last_activity_type__c,"
+" \n  noodlecrm__student_loans__c, \n  noodlecrm__deliveryinstallationstatus__c, \n  noodlecrm__trackingnumber__c, \n  no"
+"odlecrm__time_zone__c, \n  noodlecrm__do_not_call__c, \n  probability, \n   noodlecrm__delivery_timestamp_idata__c, \n  "
+"noodlecrm__last_contacting_state__c, \n  noodlecrm__test_requirements__c, \n  noodlecrm__decision_type__c, \n  noodlecrm"
+"__admit_cohort__c, \n  noodlecrm__tran_2__c, \n  noodlecrm__email__c, \n  noodlecrm__university_scholarship_date__c, \n "
+" noodlecrm__revised_start_date__c, \n  createddate, \n  noodlecrm__submit_cohort__c, \n  isclosed, \n  noodlecrm__condit"
+"ion_type__c, \n  noodlecrm__opportunity_status__c, \n  noodlecrm__class_schedule_type__c, \n  noodlecrm__lead_stated_lic"
+"ensure__c, \n  noodlecrm__student__c, \n  noodlecrm__university_application_id__c, \n  leadsource, \n  noodlecrm__update"
+"d__c, \n  noodlecrm__utm_term__c, \n  noodlecrm__tran_1__c, \n  noodlecrm__google_analytics_id__c, \n  amount, \n  noodl"
+"ecrm__crm_id__c, \n  noodlecrm__lead_stated_taken_course__c, \n  noodlecrm__ip_address__c, \n  noodlecrm__total_calls__c"
+", \n  noodlecrm__university_id_number__c, \n  noodlecrm__decision__c, \n  noodlecrm__test_status_gre__c, \n  forecastcat"
+"egory, \n  noodlecrm__attended_zoom__c, \n  noodlecrm__fafsa__c, \n  noodlecrm__level_of_education__c, \n  noodlecrm__ea"
+"_projected_deposit_date__c, \n  noodlecrm__currentgenerators__c, \n  noodlecrm__defer_date__c, \n  noodlecrm__lead_state"
+"d_taken_course_req__c, \n  noodlecrm__follow_up_reason__c, \n  noodlecrm__will_not_apply_date__c, \n  noodlecrm__trying_"
+"attempt_date__c, \n  noodlecrm__gpa__c, \n  noodlecrm__fa_comments__c, \n  createdbyid, \n  type, \n  noodlecrm__first_n"
+"ame__c, \n  pricebook2id, \n  contactid, \n  noodlecrm__contact_type__c, \n  noodlecrm__conversion_date__c, \n  noodlecr"
+"m__ordernumber__c, \n  fiscalyear, \n  noodlecrm__defer_start_date__c, \n  noodlecrm__postalcode__c, \n  noodlecrm__re_o"
+"pen__c, \n  noodlecrm__applying_to_a_competitor_type__c, \n  noodlecrm__app_complete_date__c, \n  noodlecrm__country__c,"
+" \n  description, \n  noodlecrm__application_program__c, \n  noodlecrm__decline_date__c, \n  lastreferenceddate, \n  noo"
+"dlecrm__temperature__c, \n  noodlecrm__competitor_university_2__c, \n  noodlecrm__course_requirements__c, \n  fiscal, \n"
+"  noodlecrm__last_name__c, \n  noodlecrm__sop__c, \n  noodlecrm__competitor_university_1__c, \n  noodlecrm__bad_lead_dat"
+"e_time__c, \n  nextstep, \n  noodlecrm__signed_up_for_webinar__c, \n  sfid, \n  id, \n  noodlecrm__preferred_phone__c, "
+"\n  noodlecrm__program3__c, \n  noodlecrm__missed_attempt_counter2__c, \n  noodlecrm__university_app_crmid__c, \n  noodle"
+"crm__last_call_date_time__c, \n  noodlecrm__program2__r__noodlecrm__external_id__c, \n  noodlecrm__program3__r__noodlecr"
+"m__external_id__c, \n  noodlecrm__app_start_date_time__c, \n  noodlecrm__historical_call_count__c, \n  noodlecrm__revise"
+"d_start_cohort__c, \n  noodlecrm__app_enrolled_date_time__c, \n  noodlecrm__external_id_unique__c, \n  noodlecrm__prefer"
+"red_email__c, \n  noodlecrm__student_contact__c, \n  noodlecrm__decision_date_time__c, \n  noodlecrm__final_start_cohort"
+"__c, \n  noodlecrm__app_complete_date_time__c, \n  noodlecrm__app_submit_date_time__c, \n  noodlecrm__application_indica"
+"ted_start_cohort__c,\nnoodlecrm__engagement_status__c,\nnoodlecrm__is_test_record__c,\nnoodlecrm__first_inquiry_action__"
+"c\nFROM "+context.university_code+".opportunity ";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row5.noodlecrm__university_scholarship_details__c = null;
							} else {
	                         		
        	row5.noodlecrm__university_scholarship_details__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row5.hasopportunitylineitem = null;
							} else {
	                         		
            row5.hasopportunitylineitem = rs_tDBInput_5.getBoolean(2);
            if(rs_tDBInput_5.wasNull()){
                    row5.hasopportunitylineitem = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row5.noodlecrm__final_start_date__c = null;
							} else {
										
			row5.noodlecrm__final_start_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 3);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row5.noodlecrm__years_experience__c = null;
							} else {
	                         		
        	row5.noodlecrm__years_experience__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row5.noodlecrm__delivery_status_idata__c = null;
							} else {
	                         		
        	row5.noodlecrm__delivery_status_idata__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row5.noodlecrm__decision_date__c = null;
							} else {
										
			row5.noodlecrm__decision_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 6);
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row5.noodlecrm__application_drafted__c = null;
							} else {
	                         		
            row5.noodlecrm__application_drafted__c = rs_tDBInput_5.getBoolean(7);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__application_drafted__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								row5.noodlecrm__total_attempts_pre_mc__c = null;
							} else {
	                         		
            row5.noodlecrm__total_attempts_pre_mc__c = rs_tDBInput_5.getDouble(8);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__total_attempts_pre_mc__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								row5.noodlecrm__total_emails__c = null;
							} else {
	                         		
            row5.noodlecrm__total_emails__c = rs_tDBInput_5.getDouble(9);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__total_emails__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 10) {
								row5.noodlecrm__scholarships__c = null;
							} else {
	                         		
        	row5.noodlecrm__scholarships__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 10, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 11) {
								row5.noodlecrm__url__c = null;
							} else {
	                         		
        	row5.noodlecrm__url__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 11, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 12) {
								row5.noodlecrm__current_start_date__c = null;
							} else {
										
			row5.noodlecrm__current_start_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 12);
		                    }
							if(colQtyInRs_tDBInput_5 < 13) {
								row5.noodlecrm__external_id__c = null;
							} else {
	                         		
        	row5.noodlecrm__external_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 13, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 14) {
								row5.noodlecrm__will_not_complete_reason__c = null;
							} else {
	                         		
        	row5.noodlecrm__will_not_complete_reason__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 14, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 15) {
								row5.noodlecrm__defer_reason__c = null;
							} else {
	                         		
        	row5.noodlecrm__defer_reason__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 15, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 16) {
								row5.noodlecrm__lead_stated_gpa__c = null;
							} else {
	                         		
        	row5.noodlecrm__lead_stated_gpa__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 16, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 17) {
								row5.noodlecrm__degree_verification__c = null;
							} else {
	                         		
        	row5.noodlecrm__degree_verification__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 17, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 18) {
								row5.noodlecrm__app_item_received_date_time__c = null;
							} else {
										
			row5.noodlecrm__app_item_received_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 18);
		                    }
							if(colQtyInRs_tDBInput_5 < 19) {
								row5.noodlecrm__phone__c = null;
							} else {
	                         		
        	row5.noodlecrm__phone__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 19, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 20) {
								row5.noodlecrm__decline_reason_details__c = null;
							} else {
	                         		
        	row5.noodlecrm__decline_reason_details__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 20, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 21) {
								row5.noodlecrm__will_not_apply_reason__c = null;
							} else {
	                         		
        	row5.noodlecrm__will_not_apply_reason__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 21, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 22) {
								row5.forecastcategoryname = null;
							} else {
	                         		
        	row5.forecastcategoryname = routines.system.JDBCUtil.getString(rs_tDBInput_5, 22, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 23) {
								row5.noodlecrm__optional_statement__c = null;
							} else {
	                         		
        	row5.noodlecrm__optional_statement__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 23, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 24) {
								row5.noodlecrm__maincompetitors__c = null;
							} else {
	                         		
        	row5.noodlecrm__maincompetitors__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 24, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 25) {
								row5.noodlecrm__partnerships__c = null;
							} else {
	                         		
        	row5.noodlecrm__partnerships__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 25, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 26) {
								row5.noodlecrm__bad_lead_reason__c = null;
							} else {
	                         		
        	row5.noodlecrm__bad_lead_reason__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 26, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 27) {
								row5.noodlecrm__application_last_login__c = null;
							} else {
										
			row5.noodlecrm__application_last_login__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 27);
		                    }
							if(colQtyInRs_tDBInput_5 < 28) {
								row5.noodlecrm__out_of_pocket__c = null;
							} else {
	                         		
        	row5.noodlecrm__out_of_pocket__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 28, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 29) {
								row5.noodlecrm__enrollment_status__c = null;
							} else {
	                         		
        	row5.noodlecrm__enrollment_status__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 29, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 30) {
								row5.noodlecrm__competitor_details__c = null;
							} else {
	                         		
        	row5.noodlecrm__competitor_details__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 30, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 31) {
								row5.noodlecrm__last_attended_zoom_date_time__c = null;
							} else {
										
			row5.noodlecrm__last_attended_zoom_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 31);
		                    }
							if(colQtyInRs_tDBInput_5 < 32) {
								row5.noodlecrm__last_attended_webinar_date_time__c = null;
							} else {
										
			row5.noodlecrm__last_attended_webinar_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 32);
		                    }
							if(colQtyInRs_tDBInput_5 < 33) {
								row5.noodlecrm__program2__c = null;
							} else {
	                         		
        	row5.noodlecrm__program2__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 33, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 34) {
								row5.noodlecrm__enrollment_status_date_time__c = null;
							} else {
										
			row5.noodlecrm__enrollment_status_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 34);
		                    }
							if(colQtyInRs_tDBInput_5 < 35) {
								row5.noodlecrm__noodle_crm_id__c = null;
							} else {
	                         		
        	row5.noodlecrm__noodle_crm_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 35, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 36) {
								row5.closedate = null;
							} else {
										
			row5.closedate = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 36);
		                    }
							if(colQtyInRs_tDBInput_5 < 37) {
								row5.noodlecrm__application_indicated_start_date__c = null;
							} else {
										
			row5.noodlecrm__application_indicated_start_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 37);
		                    }
							if(colQtyInRs_tDBInput_5 < 38) {
								row5.noodlecrm__university__c = null;
							} else {
	                         		
        	row5.noodlecrm__university__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 38, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 39) {
								row5.noodlecrm__military__c = null;
							} else {
	                         		
        	row5.noodlecrm__military__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 39, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 40) {
								row5.noodlecrm__decline_reason__c = null;
							} else {
	                         		
        	row5.noodlecrm__decline_reason__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 40, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 41) {
								row5.noodlecrm__universitycrmid__c = null;
							} else {
	                         		
        	row5.noodlecrm__universitycrmid__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 41, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 42) {
								row5.noodlecrm__resume__c = null;
							} else {
	                         		
        	row5.noodlecrm__resume__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 42, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 43) {
								row5.noodlecrm__meets_program_criteria__c = null;
							} else {
	                         		
        	row5.noodlecrm__meets_program_criteria__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 43, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 44) {
								row5.noodlecrm__best_time_to_call__c = null;
							} else {
	                         		
        	row5.noodlecrm__best_time_to_call__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 44, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 45) {
								row5.noodlecrm__total_texts__c = null;
							} else {
	                         		
            row5.noodlecrm__total_texts__c = rs_tDBInput_5.getDouble(45);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__total_texts__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 46) {
								row5.noodlecrm__application_program_global__c = null;
							} else {
	                         		
        	row5.noodlecrm__application_program_global__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 46, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 47) {
								row5.accountid = null;
							} else {
	                         		
        	row5.accountid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 47, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 48) {
								row5.noodlecrm__external_id_populated__c = null;
							} else {
	                         		
        	row5.noodlecrm__external_id_populated__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 48, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 49) {
								row5.noodlecrm__utm_source__c = null;
							} else {
	                         		
        	row5.noodlecrm__utm_source__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 49, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 50) {
								row5.noodlecrm__total_inquiries__c = null;
							} else {
	                         		
            row5.noodlecrm__total_inquiries__c = rs_tDBInput_5.getDouble(50);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__total_inquiries__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 51) {
								row5.noodlecrm__first_call_date_time__c = null;
							} else {
										
			row5.noodlecrm__first_call_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 51);
		                    }
							if(colQtyInRs_tDBInput_5 < 52) {
								row5.noodlecrm__lead_external_id__c = null;
							} else {
	                         		
        	row5.noodlecrm__lead_external_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 52, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 53) {
								row5.noodlecrm__webinar_signup_date_time__c = null;
							} else {
										
			row5.noodlecrm__webinar_signup_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 53);
		                    }
							if(colQtyInRs_tDBInput_5 < 54) {
								row5.lastvieweddate = null;
							} else {
										
			row5.lastvieweddate = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 54);
		                    }
							if(colQtyInRs_tDBInput_5 < 55) {
								row5.noodlecrm__city__c = null;
							} else {
	                         		
        	row5.noodlecrm__city__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 55, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 56) {
								row5.noodlecrm__application_decision__c = null;
							} else {
	                         		
        	row5.noodlecrm__application_decision__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 56, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 57) {
								row5.noodlecrm__university_email__c = null;
							} else {
	                         		
        	row5.noodlecrm__university_email__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 57, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 58) {
								row5.noodlecrm__responsiveness__c = null;
							} else {
	                         		
        	row5.noodlecrm__responsiveness__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 58, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 59) {
								row5.noodlecrm__official_cohort__c = null;
							} else {
	                         		
        	row5.noodlecrm__official_cohort__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 59, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 60) {
								row5.stagename = null;
							} else {
	                         		
        	row5.stagename = routines.system.JDBCUtil.getString(rs_tDBInput_5, 60, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 61) {
								row5.noodlecrm__ea_projected_submit_date__c = null;
							} else {
										
			row5.noodlecrm__ea_projected_submit_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 61);
		                    }
							if(colQtyInRs_tDBInput_5 < 62) {
								row5.noodlecrm__deal_stage__c = null;
							} else {
										
			row5.noodlecrm__deal_stage__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 62);
		                    }
							if(colQtyInRs_tDBInput_5 < 63) {
								row5.noodlecrm__first_touch_source__c = null;
							} else {
	                         		
        	row5.noodlecrm__first_touch_source__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 63, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 64) {
								row5.noodlecrm__international_language_test__c = null;
							} else {
	                         		
        	row5.noodlecrm__international_language_test__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 64, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 65) {
								row5.noodlecrm__utm_content__c = null;
							} else {
	                         		
        	row5.noodlecrm__utm_content__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 65, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 66) {
								row5.noodlecrm__app_start_date__c = null;
							} else {
										
			row5.noodlecrm__app_start_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 66);
		                    }
							if(colQtyInRs_tDBInput_5 < 67) {
								row5.campaignid = null;
							} else {
	                         		
        	row5.campaignid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 67, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 68) {
								row5.name = null;
							} else {
	                         		
        	row5.name = routines.system.JDBCUtil.getString(rs_tDBInput_5, 68, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 69) {
								row5.hasoverduetask = null;
							} else {
	                         		
            row5.hasoverduetask = rs_tDBInput_5.getBoolean(69);
            if(rs_tDBInput_5.wasNull()){
                    row5.hasoverduetask = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 70) {
								row5.noodlecrm__opportunity_owner__c = null;
							} else {
	                         		
        	row5.noodlecrm__opportunity_owner__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 70, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 71) {
								row5.noodlecrm__missed_attempt_date_time__c = null;
							} else {
										
			row5.noodlecrm__missed_attempt_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 71);
		                    }
							if(colQtyInRs_tDBInput_5 < 72) {
								row5.iswon = null;
							} else {
	                         		
            row5.iswon = rs_tDBInput_5.getBoolean(72);
            if(rs_tDBInput_5.wasNull()){
                    row5.iswon = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 73) {
								row5.noodlecrm__application_submit_date__c = null;
							} else {
										
			row5.noodlecrm__application_submit_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 73);
		                    }
							if(colQtyInRs_tDBInput_5 < 74) {
								row5.noodlecrm__associated_contact__c = null;
							} else {
	                         		
        	row5.noodlecrm__associated_contact__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 74, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 75) {
								row5.noodlecrm__expected_date_to_meet_requirement__c = null;
							} else {
										
			row5.noodlecrm__expected_date_to_meet_requirement__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 75);
		                    }
							if(colQtyInRs_tDBInput_5 < 76) {
								row5.lastmodifieddate = null;
							} else {
										
			row5.lastmodifieddate = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 76);
		                    }
							if(colQtyInRs_tDBInput_5 < 77) {
								row5.noodlecrm__last_activitydate_time__c = null;
							} else {
										
			row5.noodlecrm__last_activitydate_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 77);
		                    }
							if(colQtyInRs_tDBInput_5 < 78) {
								row5.noodlecrm__missed_attempt_counter__c = null;
							} else {
	                         		
        	row5.noodlecrm__missed_attempt_counter__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 78, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 79) {
								row5.noodlecrm__program__c = null;
							} else {
	                         		
        	row5.noodlecrm__program__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 79, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 80) {
								row5.noodlecrm__licensure__c = null;
							} else {
	                         		
        	row5.noodlecrm__licensure__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 80, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 81) {
								row5.fiscalquarter = null;
							} else {
		                          
            row5.fiscalquarter = rs_tDBInput_5.getInt(81);
            if(rs_tDBInput_5.wasNull()){
                    row5.fiscalquarter = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 82) {
								row5.ownerid = null;
							} else {
	                         		
        	row5.ownerid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 82, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 83) {
								row5.noodlecrm__utm_medium__c = null;
							} else {
	                         		
        	row5.noodlecrm__utm_medium__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 83, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 84) {
								row5.noodlecrm__last_call_date__c = null;
							} else {
										
			row5.noodlecrm__last_call_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 84);
		                    }
							if(colQtyInRs_tDBInput_5 < 85) {
								row5.noodlecrm__opportunity_external_id__c = null;
							} else {
	                         		
        	row5.noodlecrm__opportunity_external_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 85, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 86) {
								row5.isdeleted = null;
							} else {
	                         		
            row5.isdeleted = rs_tDBInput_5.getBoolean(86);
            if(rs_tDBInput_5.wasNull()){
                    row5.isdeleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 87) {
								row5.systemmodstamp = null;
							} else {
										
			row5.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 87);
		                    }
							if(colQtyInRs_tDBInput_5 < 88) {
								row5.noodlecrm__follow_up_date__c = null;
							} else {
										
			row5.noodlecrm__follow_up_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 88);
		                    }
							if(colQtyInRs_tDBInput_5 < 89) {
								row5.noodlecrm__attended_webinar__c = null;
							} else {
	                         		
            row5.noodlecrm__attended_webinar__c = rs_tDBInput_5.getBoolean(89);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__attended_webinar__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 90) {
								row5.noodlecrm__professional_experience__c = null;
							} else {
	                         		
        	row5.noodlecrm__professional_experience__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 90, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 91) {
								row5.noodlecrm__lor_2__c = null;
							} else {
	                         		
        	row5.noodlecrm__lor_2__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 91, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 92) {
								row5.noodlecrm__supplemental__c = null;
							} else {
	                         		
        	row5.noodlecrm__supplemental__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 92, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 93) {
								row5.lastmodifiedbyid = null;
							} else {
	                         		
        	row5.lastmodifiedbyid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 93, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 94) {
								row5.noodlecrm__mta_interaction_record__c = null;
							} else {
	                         		
        	row5.noodlecrm__mta_interaction_record__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 94, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 95) {
								row5.noodlecrm__meaningful_conversation_date_time__c = null;
							} else {
										
			row5.noodlecrm__meaningful_conversation_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 95);
		                    }
							if(colQtyInRs_tDBInput_5 < 96) {
								row5.noodlecrm__applying_to_a_competitor__c = null;
							} else {
	                         		
        	row5.noodlecrm__applying_to_a_competitor__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 96, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 97) {
								row5.noodlecrm__lead_stated_professional_status__c = null;
							} else {
	                         		
        	row5.noodlecrm__lead_stated_professional_status__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 97, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 98) {
								row5.noodlecrm__street__c = null;
							} else {
	                         		
        	row5.noodlecrm__street__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 98, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 99) {
								row5.noodlecrm__lor_1__c = null;
							} else {
	                         		
        	row5.noodlecrm__lor_1__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 99, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 100) {
								row5.noodlecrm__scholarship_applied__c = null;
							} else {
	                         		
        	row5.noodlecrm__scholarship_applied__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 100, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 101) {
								row5.noodlecrm__ea_indicated_start_term__c = null;
							} else {
	                         		
        	row5.noodlecrm__ea_indicated_start_term__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 101, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 102) {
								row5.noodlecrm__state_region__c = null;
							} else {
	                         		
        	row5.noodlecrm__state_region__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 102, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 103) {
								row5.noodlecrm__registered__c = null;
							} else {
										
			row5.noodlecrm__registered__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 103);
		                    }
							if(colQtyInRs_tDBInput_5 < 104) {
								row5.noodlecrm__employer_benefits__c = null;
							} else {
	                         		
        	row5.noodlecrm__employer_benefits__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 104, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 105) {
								row5.noodlecrm__utm_campaign__c = null;
							} else {
	                         		
        	row5.noodlecrm__utm_campaign__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 105, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 106) {
								row5.lastactivitydate = null;
							} else {
										
			row5.lastactivitydate = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 106);
		                    }
							if(colQtyInRs_tDBInput_5 < 107) {
								row5.noodlecrm__will_not_apply_reason_other__c = null;
							} else {
	                         		
        	row5.noodlecrm__will_not_apply_reason_other__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 107, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 108) {
								row5.noodlecrm__app_deposit_date_time__c = null;
							} else {
										
			row5.noodlecrm__app_deposit_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 108);
		                    }
							if(colQtyInRs_tDBInput_5 < 109) {
								row5.noodlecrm__application_status__c = null;
							} else {
	                         		
        	row5.noodlecrm__application_status__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 109, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 110) {
								row5.noodlecrm__defer_reason_detail__c = null;
							} else {
	                         		
        	row5.noodlecrm__defer_reason_detail__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 110, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 111) {
								row5.hasopenactivity = null;
							} else {
	                         		
            row5.hasopenactivity = rs_tDBInput_5.getBoolean(111);
            if(rs_tDBInput_5.wasNull()){
                    row5.hasopenactivity = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 112) {
								row5.noodlecrm__last_activity_type__c = null;
							} else {
	                         		
        	row5.noodlecrm__last_activity_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 112, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 113) {
								row5.noodlecrm__student_loans__c = null;
							} else {
	                         		
        	row5.noodlecrm__student_loans__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 113, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 114) {
								row5.noodlecrm__deliveryinstallationstatus__c = null;
							} else {
	                         		
        	row5.noodlecrm__deliveryinstallationstatus__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 114, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 115) {
								row5.noodlecrm__trackingnumber__c = null;
							} else {
	                         		
        	row5.noodlecrm__trackingnumber__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 115, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 116) {
								row5.noodlecrm__time_zone__c = null;
							} else {
	                         		
        	row5.noodlecrm__time_zone__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 116, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 117) {
								row5.noodlecrm__do_not_call__c = null;
							} else {
	                         		
            row5.noodlecrm__do_not_call__c = rs_tDBInput_5.getBoolean(117);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__do_not_call__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 118) {
								row5.probability = null;
							} else {
	                         		
            row5.probability = rs_tDBInput_5.getDouble(118);
            if(rs_tDBInput_5.wasNull()){
                    row5.probability = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 119) {
								row5.noodlecrm__delivery_timestamp_idata__c = null;
							} else {
										
			row5.noodlecrm__delivery_timestamp_idata__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 119);
		                    }
							if(colQtyInRs_tDBInput_5 < 120) {
								row5.noodlecrm__last_contacting_state__c = null;
							} else {
	                         		
        	row5.noodlecrm__last_contacting_state__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 120, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 121) {
								row5.noodlecrm__test_requirements__c = null;
							} else {
	                         		
        	row5.noodlecrm__test_requirements__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 121, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 122) {
								row5.noodlecrm__decision_type__c = null;
							} else {
	                         		
        	row5.noodlecrm__decision_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 122, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 123) {
								row5.noodlecrm__admit_cohort__c = null;
							} else {
	                         		
        	row5.noodlecrm__admit_cohort__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 123, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 124) {
								row5.noodlecrm__tran_2__c = null;
							} else {
	                         		
        	row5.noodlecrm__tran_2__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 124, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 125) {
								row5.noodlecrm__email__c = null;
							} else {
	                         		
        	row5.noodlecrm__email__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 125, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 126) {
								row5.noodlecrm__university_scholarship_date__c = null;
							} else {
										
			row5.noodlecrm__university_scholarship_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 126);
		                    }
							if(colQtyInRs_tDBInput_5 < 127) {
								row5.noodlecrm__revised_start_date__c = null;
							} else {
										
			row5.noodlecrm__revised_start_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 127);
		                    }
							if(colQtyInRs_tDBInput_5 < 128) {
								row5.createddate = null;
							} else {
										
			row5.createddate = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 128);
		                    }
							if(colQtyInRs_tDBInput_5 < 129) {
								row5.noodlecrm__submit_cohort__c = null;
							} else {
	                         		
        	row5.noodlecrm__submit_cohort__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 129, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 130) {
								row5.isclosed = null;
							} else {
	                         		
            row5.isclosed = rs_tDBInput_5.getBoolean(130);
            if(rs_tDBInput_5.wasNull()){
                    row5.isclosed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 131) {
								row5.noodlecrm__condition_type__c = null;
							} else {
	                         		
        	row5.noodlecrm__condition_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 131, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 132) {
								row5.noodlecrm__opportunity_status__c = null;
							} else {
	                         		
            row5.noodlecrm__opportunity_status__c = rs_tDBInput_5.getBoolean(132);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__opportunity_status__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 133) {
								row5.noodlecrm__class_schedule_type__c = null;
							} else {
	                         		
        	row5.noodlecrm__class_schedule_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 133, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 134) {
								row5.noodlecrm__lead_stated_licensure__c = null;
							} else {
	                         		
        	row5.noodlecrm__lead_stated_licensure__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 134, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 135) {
								row5.noodlecrm__student__c = null;
							} else {
	                         		
        	row5.noodlecrm__student__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 135, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 136) {
								row5.noodlecrm__university_application_id__c = null;
							} else {
	                         		
        	row5.noodlecrm__university_application_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 136, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 137) {
								row5.leadsource = null;
							} else {
	                         		
        	row5.leadsource = routines.system.JDBCUtil.getString(rs_tDBInput_5, 137, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 138) {
								row5.noodlecrm__updated__c = null;
							} else {
										
			row5.noodlecrm__updated__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 138);
		                    }
							if(colQtyInRs_tDBInput_5 < 139) {
								row5.noodlecrm__utm_term__c = null;
							} else {
	                         		
        	row5.noodlecrm__utm_term__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 139, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 140) {
								row5.noodlecrm__tran_1__c = null;
							} else {
	                         		
        	row5.noodlecrm__tran_1__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 140, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 141) {
								row5.noodlecrm__google_analytics_id__c = null;
							} else {
	                         		
        	row5.noodlecrm__google_analytics_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 141, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 142) {
								row5.amount = null;
							} else {
	                         		
            row5.amount = rs_tDBInput_5.getDouble(142);
            if(rs_tDBInput_5.wasNull()){
                    row5.amount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 143) {
								row5.noodlecrm__crm_id__c = null;
							} else {
	                         		
        	row5.noodlecrm__crm_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 143, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 144) {
								row5.noodlecrm__lead_stated_taken_course__c = null;
							} else {
	                         		
        	row5.noodlecrm__lead_stated_taken_course__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 144, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 145) {
								row5.noodlecrm__ip_address__c = null;
							} else {
	                         		
        	row5.noodlecrm__ip_address__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 145, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 146) {
								row5.noodlecrm__total_calls__c = null;
							} else {
	                         		
            row5.noodlecrm__total_calls__c = rs_tDBInput_5.getDouble(146);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__total_calls__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 147) {
								row5.noodlecrm__university_id_number__c = null;
							} else {
	                         		
        	row5.noodlecrm__university_id_number__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 147, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 148) {
								row5.noodlecrm__decision__c = null;
							} else {
	                         		
        	row5.noodlecrm__decision__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 148, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 149) {
								row5.noodlecrm__test_status_gre__c = null;
							} else {
	                         		
        	row5.noodlecrm__test_status_gre__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 149, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 150) {
								row5.forecastcategory = null;
							} else {
	                         		
        	row5.forecastcategory = routines.system.JDBCUtil.getString(rs_tDBInput_5, 150, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 151) {
								row5.noodlecrm__attended_zoom__c = null;
							} else {
	                         		
            row5.noodlecrm__attended_zoom__c = rs_tDBInput_5.getBoolean(151);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__attended_zoom__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 152) {
								row5.noodlecrm__fafsa__c = null;
							} else {
	                         		
        	row5.noodlecrm__fafsa__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 152, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 153) {
								row5.noodlecrm__level_of_education__c = null;
							} else {
	                         		
        	row5.noodlecrm__level_of_education__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 153, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 154) {
								row5.noodlecrm__ea_projected_deposit_date__c = null;
							} else {
										
			row5.noodlecrm__ea_projected_deposit_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 154);
		                    }
							if(colQtyInRs_tDBInput_5 < 155) {
								row5.noodlecrm__currentgenerators__c = null;
							} else {
	                         		
        	row5.noodlecrm__currentgenerators__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 155, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 156) {
								row5.noodlecrm__defer_date__c = null;
							} else {
										
			row5.noodlecrm__defer_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 156);
		                    }
							if(colQtyInRs_tDBInput_5 < 157) {
								row5.noodlecrm__lead_stated_taken_course_req__c = null;
							} else {
	                         		
        	row5.noodlecrm__lead_stated_taken_course_req__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 157, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 158) {
								row5.noodlecrm__follow_up_reason__c = null;
							} else {
	                         		
        	row5.noodlecrm__follow_up_reason__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 158, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 159) {
								row5.noodlecrm__will_not_apply_date__c = null;
							} else {
										
			row5.noodlecrm__will_not_apply_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 159);
		                    }
							if(colQtyInRs_tDBInput_5 < 160) {
								row5.noodlecrm__trying_attempt_date__c = null;
							} else {
										
			row5.noodlecrm__trying_attempt_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 160);
		                    }
							if(colQtyInRs_tDBInput_5 < 161) {
								row5.noodlecrm__gpa__c = null;
							} else {
	                         		
        	row5.noodlecrm__gpa__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 161, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 162) {
								row5.noodlecrm__fa_comments__c = null;
							} else {
	                         		
        	row5.noodlecrm__fa_comments__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 162, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 163) {
								row5.createdbyid = null;
							} else {
	                         		
        	row5.createdbyid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 163, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 164) {
								row5.type = null;
							} else {
	                         		
        	row5.type = routines.system.JDBCUtil.getString(rs_tDBInput_5, 164, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 165) {
								row5.noodlecrm__first_name__c = null;
							} else {
	                         		
        	row5.noodlecrm__first_name__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 165, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 166) {
								row5.pricebook2id = null;
							} else {
	                         		
        	row5.pricebook2id = routines.system.JDBCUtil.getString(rs_tDBInput_5, 166, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 167) {
								row5.contactid = null;
							} else {
	                         		
        	row5.contactid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 167, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 168) {
								row5.noodlecrm__contact_type__c = null;
							} else {
	                         		
        	row5.noodlecrm__contact_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 168, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 169) {
								row5.noodlecrm__conversion_date__c = null;
							} else {
										
			row5.noodlecrm__conversion_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 169);
		                    }
							if(colQtyInRs_tDBInput_5 < 170) {
								row5.noodlecrm__ordernumber__c = null;
							} else {
	                         		
        	row5.noodlecrm__ordernumber__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 170, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 171) {
								row5.fiscalyear = null;
							} else {
		                          
            row5.fiscalyear = rs_tDBInput_5.getInt(171);
            if(rs_tDBInput_5.wasNull()){
                    row5.fiscalyear = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 172) {
								row5.noodlecrm__defer_start_date__c = null;
							} else {
										
			row5.noodlecrm__defer_start_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 172);
		                    }
							if(colQtyInRs_tDBInput_5 < 173) {
								row5.noodlecrm__postalcode__c = null;
							} else {
	                         		
        	row5.noodlecrm__postalcode__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 173, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 174) {
								row5.noodlecrm__re_open__c = null;
							} else {
	                         		
            row5.noodlecrm__re_open__c = rs_tDBInput_5.getBoolean(174);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__re_open__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 175) {
								row5.noodlecrm__applying_to_a_competitor_type__c = null;
							} else {
	                         		
        	row5.noodlecrm__applying_to_a_competitor_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 175, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 176) {
								row5.noodlecrm__app_complete_date__c = null;
							} else {
										
			row5.noodlecrm__app_complete_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 176);
		                    }
							if(colQtyInRs_tDBInput_5 < 177) {
								row5.noodlecrm__country__c = null;
							} else {
	                         		
        	row5.noodlecrm__country__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 177, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 178) {
								row5.description = null;
							} else {
	                         		
        	row5.description = routines.system.JDBCUtil.getString(rs_tDBInput_5, 178, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 179) {
								row5.noodlecrm__application_program__c = null;
							} else {
	                         		
        	row5.noodlecrm__application_program__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 179, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 180) {
								row5.noodlecrm__decline_date__c = null;
							} else {
										
			row5.noodlecrm__decline_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 180);
		                    }
							if(colQtyInRs_tDBInput_5 < 181) {
								row5.lastreferenceddate = null;
							} else {
										
			row5.lastreferenceddate = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 181);
		                    }
							if(colQtyInRs_tDBInput_5 < 182) {
								row5.noodlecrm__temperature__c = null;
							} else {
	                         		
        	row5.noodlecrm__temperature__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 182, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 183) {
								row5.noodlecrm__competitor_university_2__c = null;
							} else {
	                         		
        	row5.noodlecrm__competitor_university_2__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 183, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 184) {
								row5.noodlecrm__course_requirements__c = null;
							} else {
	                         		
        	row5.noodlecrm__course_requirements__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 184, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 185) {
								row5.fiscal = null;
							} else {
	                         		
        	row5.fiscal = routines.system.JDBCUtil.getString(rs_tDBInput_5, 185, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 186) {
								row5.noodlecrm__last_name__c = null;
							} else {
	                         		
        	row5.noodlecrm__last_name__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 186, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 187) {
								row5.noodlecrm__sop__c = null;
							} else {
	                         		
        	row5.noodlecrm__sop__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 187, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 188) {
								row5.noodlecrm__competitor_university_1__c = null;
							} else {
	                         		
        	row5.noodlecrm__competitor_university_1__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 188, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 189) {
								row5.noodlecrm__bad_lead_date_time__c = null;
							} else {
										
			row5.noodlecrm__bad_lead_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 189);
		                    }
							if(colQtyInRs_tDBInput_5 < 190) {
								row5.nextstep = null;
							} else {
	                         		
        	row5.nextstep = routines.system.JDBCUtil.getString(rs_tDBInput_5, 190, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 191) {
								row5.noodlecrm__signed_up_for_webinar__c = null;
							} else {
	                         		
            row5.noodlecrm__signed_up_for_webinar__c = rs_tDBInput_5.getBoolean(191);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__signed_up_for_webinar__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 192) {
								row5.sfid = null;
							} else {
	                         		
        	row5.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 192, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 193) {
								row5.id = 0;
							} else {
		                          
            row5.id = rs_tDBInput_5.getInt(193);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 194) {
								row5.noodlecrm__preferred_phone__c = null;
							} else {
	                         		
        	row5.noodlecrm__preferred_phone__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 194, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 195) {
								row5.noodlecrm__program3__c = null;
							} else {
	                         		
        	row5.noodlecrm__program3__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 195, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 196) {
								row5.noodlecrm__missed_attempt_counter2__c = null;
							} else {
	                         		
            row5.noodlecrm__missed_attempt_counter2__c = rs_tDBInput_5.getDouble(196);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__missed_attempt_counter2__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 197) {
								row5.noodlecrm__university_app_crmid__c = null;
							} else {
	                         		
        	row5.noodlecrm__university_app_crmid__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 197, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 198) {
								row5.noodlecrm__last_call_date_time__c = null;
							} else {
										
			row5.noodlecrm__last_call_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 198);
		                    }
							if(colQtyInRs_tDBInput_5 < 199) {
								row5.noodlecrm__program2__r__noodlecrm__external_id__c = null;
							} else {
	                         		
        	row5.noodlecrm__program2__r__noodlecrm__external_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 199, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 200) {
								row5.noodlecrm__program3__r__noodlecrm__external_id__c = null;
							} else {
	                         		
        	row5.noodlecrm__program3__r__noodlecrm__external_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 200, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 201) {
								row5.noodlecrm__app_start_date_time__c = null;
							} else {
										
			row5.noodlecrm__app_start_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 201);
		                    }
							if(colQtyInRs_tDBInput_5 < 202) {
								row5.noodlecrm__historical_call_count__c = null;
							} else {
	                         		
            row5.noodlecrm__historical_call_count__c = rs_tDBInput_5.getDouble(202);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__historical_call_count__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 203) {
								row5.noodlecrm__revised_start_cohort__c = null;
							} else {
	                         		
        	row5.noodlecrm__revised_start_cohort__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 203, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 204) {
								row5.noodlecrm__app_enrolled_date_time__c = null;
							} else {
										
			row5.noodlecrm__app_enrolled_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 204);
		                    }
							if(colQtyInRs_tDBInput_5 < 205) {
								row5.noodlecrm__external_id_unique__c = null;
							} else {
	                         		
        	row5.noodlecrm__external_id_unique__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 205, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 206) {
								row5.noodlecrm__preferred_email__c = null;
							} else {
	                         		
        	row5.noodlecrm__preferred_email__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 206, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 207) {
								row5.noodlecrm__student_contact__c = null;
							} else {
	                         		
        	row5.noodlecrm__student_contact__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 207, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 208) {
								row5.noodlecrm__decision_date_time__c = null;
							} else {
										
			row5.noodlecrm__decision_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 208);
		                    }
							if(colQtyInRs_tDBInput_5 < 209) {
								row5.noodlecrm__final_start_cohort__c = null;
							} else {
	                         		
        	row5.noodlecrm__final_start_cohort__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 209, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 210) {
								row5.noodlecrm__app_complete_date_time__c = null;
							} else {
										
			row5.noodlecrm__app_complete_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 210);
		                    }
							if(colQtyInRs_tDBInput_5 < 211) {
								row5.noodlecrm__app_submit_date_time__c = null;
							} else {
										
			row5.noodlecrm__app_submit_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 211);
		                    }
							if(colQtyInRs_tDBInput_5 < 212) {
								row5.noodlecrm__application_indicated_start_cohort__c = null;
							} else {
	                         		
        	row5.noodlecrm__application_indicated_start_cohort__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 212, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 213) {
								row5.noodlecrm__engagement_status__c = null;
							} else {
	                         		
        	row5.noodlecrm__engagement_status__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 213, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 214) {
								row5.noodlecrm__is_test_record__c = null;
							} else {
	                         		
            row5.noodlecrm__is_test_record__c = rs_tDBInput_5.getBoolean(214);
            if(rs_tDBInput_5.wasNull()){
                    row5.noodlecrm__is_test_record__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 215) {
								row5.noodlecrm__first_inquiry_action__c = null;
							} else {
	                         		
        	row5.noodlecrm__first_inquiry_action__c = routines.system.JDBCUtil.getString(rs_tDBInput_5, 215, true);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

out9 = null;
out10 = null;


// # Output table : 'out9'
out9_tmp.noodlecrm__university_scholarship_details__c = row5.noodlecrm__university_scholarship_details__c ;
out9_tmp.hasopportunitylineitem = row5.hasopportunitylineitem ;
out9_tmp.noodlecrm__final_start_date__c = row5.noodlecrm__final_start_date__c ;
out9_tmp.noodlecrm__years_experience__c = row5.noodlecrm__years_experience__c ;
out9_tmp.noodlecrm__delivery_status_idata__c = row5.noodlecrm__delivery_status_idata__c ;
out9_tmp.noodlecrm__decision_date__c = row5.noodlecrm__decision_date__c ;
out9_tmp.noodlecrm__application_drafted__c = row5.noodlecrm__application_drafted__c ;
out9_tmp.noodlecrm__total_attempts_pre_mc__c = row5.noodlecrm__total_attempts_pre_mc__c ;
out9_tmp.noodlecrm__total_emails__c = row5.noodlecrm__total_emails__c ;
out9_tmp.noodlecrm__scholarships__c = row5.noodlecrm__scholarships__c ;
out9_tmp.noodlecrm__url__c = row5.noodlecrm__url__c ;
out9_tmp.noodlecrm__current_start_date__c = row5.noodlecrm__current_start_date__c ;
out9_tmp.noodlecrm__external_id__c = row5.noodlecrm__external_id__c ;
out9_tmp.noodlecrm__will_not_complete_reason__c = row5.noodlecrm__will_not_complete_reason__c ;
out9_tmp.noodlecrm__defer_reason__c = row5.noodlecrm__defer_reason__c ;
out9_tmp.noodlecrm__lead_stated_gpa__c = row5.noodlecrm__lead_stated_gpa__c ;
out9_tmp.noodlecrm__degree_verification__c = row5.noodlecrm__degree_verification__c ;
out9_tmp.noodlecrm__app_item_received_date_time__c = row5.noodlecrm__app_item_received_date_time__c ;
out9_tmp.noodlecrm__phone__c = row5.noodlecrm__phone__c ;
out9_tmp.noodlecrm__decline_reason_details__c = row5.noodlecrm__decline_reason_details__c ;
out9_tmp.noodlecrm__will_not_apply_reason__c = row5.noodlecrm__will_not_apply_reason__c ;
out9_tmp.forecastcategoryname = row5.forecastcategoryname ;
out9_tmp.noodlecrm__optional_statement__c = row5.noodlecrm__optional_statement__c ;
out9_tmp.noodlecrm__maincompetitors__c = row5.noodlecrm__maincompetitors__c ;
out9_tmp.noodlecrm__partnerships__c = row5.noodlecrm__partnerships__c ;
out9_tmp.noodlecrm__bad_lead_reason__c = row5.noodlecrm__bad_lead_reason__c ;
out9_tmp.noodlecrm__application_last_login__c = row5.noodlecrm__application_last_login__c ;
out9_tmp.noodlecrm__out_of_pocket__c = row5.noodlecrm__out_of_pocket__c ;
out9_tmp.noodlecrm__enrollment_status__c = row5.noodlecrm__enrollment_status__c ;
out9_tmp.noodlecrm__competitor_details__c = row5.noodlecrm__competitor_details__c ;
out9_tmp.noodlecrm__last_attended_zoom_date_time__c = row5.noodlecrm__last_attended_zoom_date_time__c ;
out9_tmp.noodlecrm__last_attended_webinar_date_time__c = row5.noodlecrm__last_attended_webinar_date_time__c ;
out9_tmp.noodlecrm__program2__c = row5.noodlecrm__program2__c ;
out9_tmp.noodlecrm__enrollment_status_date_time__c = row5.noodlecrm__enrollment_status_date_time__c ;
out9_tmp.noodlecrm__noodle_crm_id__c = row5.noodlecrm__noodle_crm_id__c ;
out9_tmp.closedate = row5.closedate ;
out9_tmp.noodlecrm__application_indicated_start_date__c = row5.noodlecrm__application_indicated_start_date__c ;
out9_tmp.noodlecrm__university__c = row5.noodlecrm__university__c ;
out9_tmp.noodlecrm__military__c = row5.noodlecrm__military__c ;
out9_tmp.noodlecrm__decline_reason__c = row5.noodlecrm__decline_reason__c ;
out9_tmp.noodlecrm__universitycrmid__c = row5.noodlecrm__universitycrmid__c ;
out9_tmp.noodlecrm__resume__c = row5.noodlecrm__resume__c ;
out9_tmp.noodlecrm__meets_program_criteria__c = row5.noodlecrm__meets_program_criteria__c ;
out9_tmp.noodlecrm__best_time_to_call__c = row5.noodlecrm__best_time_to_call__c ;
out9_tmp.noodlecrm__total_texts__c = row5.noodlecrm__total_texts__c ;
out9_tmp.noodlecrm__application_program_global__c = row5.noodlecrm__application_program_global__c ;
out9_tmp.accountid = row5.accountid ;
out9_tmp.noodlecrm__external_id_populated__c = row5.noodlecrm__external_id_populated__c ;
out9_tmp.noodlecrm__utm_source__c = row5.noodlecrm__utm_source__c ;
out9_tmp.noodlecrm__total_inquiries__c = row5.noodlecrm__total_inquiries__c ;
out9_tmp.noodlecrm__first_call_date_time__c = row5.noodlecrm__first_call_date_time__c ;
out9_tmp.noodlecrm__lead_external_id__c = row5.noodlecrm__lead_external_id__c ;
out9_tmp.noodlecrm__webinar_signup_date_time__c = row5.noodlecrm__webinar_signup_date_time__c ;
out9_tmp.lastvieweddate = row5.lastvieweddate ;
out9_tmp.noodlecrm__city__c = row5.noodlecrm__city__c ;
out9_tmp.noodlecrm__application_decision__c = row5.noodlecrm__application_decision__c ;
out9_tmp.noodlecrm__university_email__c = row5.noodlecrm__university_email__c ;
out9_tmp.noodlecrm__responsiveness__c = row5.noodlecrm__responsiveness__c ;
out9_tmp.noodlecrm__official_cohort__c = row5.noodlecrm__official_cohort__c ;
out9_tmp.stagename = row5.stagename ;
out9_tmp.noodlecrm__ea_projected_submit_date__c = row5.noodlecrm__ea_projected_submit_date__c ;
out9_tmp.noodlecrm__deal_stage__c = row5.noodlecrm__deal_stage__c ;
out9_tmp.noodlecrm__first_touch_source__c = row5.noodlecrm__first_touch_source__c ;
out9_tmp.noodlecrm__international_language_test__c = row5.noodlecrm__international_language_test__c ;
out9_tmp.noodlecrm__utm_content__c = row5.noodlecrm__utm_content__c ;
out9_tmp.noodlecrm__app_start_date__c = row5.noodlecrm__app_start_date__c ;
out9_tmp.campaignid = row5.campaignid ;
out9_tmp.name = row5.name ;
out9_tmp.hasoverduetask = row5.hasoverduetask ;
out9_tmp.noodlecrm__opportunity_owner__c = row5.noodlecrm__opportunity_owner__c ;
out9_tmp.noodlecrm__missed_attempt_date_time__c = row5.noodlecrm__missed_attempt_date_time__c ;
out9_tmp.iswon = row5.iswon ;
out9_tmp.noodlecrm__application_submit_date__c = row5.noodlecrm__application_submit_date__c ;
out9_tmp.noodlecrm__associated_contact__c = row5.noodlecrm__associated_contact__c ;
out9_tmp.noodlecrm__expected_date_to_meet_requirement__c = row5.noodlecrm__expected_date_to_meet_requirement__c ;
out9_tmp.lastmodifieddate = row5.lastmodifieddate ;
out9_tmp.noodlecrm__last_activitydate_time__c = row5.noodlecrm__last_activitydate_time__c ;
out9_tmp.noodlecrm__missed_attempt_counter__c = row5.noodlecrm__missed_attempt_counter__c ;
out9_tmp.noodlecrm__program__c = row5.noodlecrm__program__c ;
out9_tmp.noodlecrm__licensure__c = row5.noodlecrm__licensure__c ;
out9_tmp.fiscalquarter = row5.fiscalquarter ;
out9_tmp.ownerid = row5.ownerid ;
out9_tmp.noodlecrm__utm_medium__c = row5.noodlecrm__utm_medium__c ;
out9_tmp.noodlecrm__last_call_date__c = row5.noodlecrm__last_call_date__c ;
out9_tmp.noodlecrm__opportunity_external_id__c = row5.noodlecrm__opportunity_external_id__c ;
out9_tmp.isdeleted = row5.isdeleted ;
out9_tmp.systemmodstamp = row5.systemmodstamp ;
out9_tmp.noodlecrm__follow_up_date__c = row5.noodlecrm__follow_up_date__c ;
out9_tmp.noodlecrm__attended_webinar__c = row5.noodlecrm__attended_webinar__c ;
out9_tmp.noodlecrm__professional_experience__c = row5.noodlecrm__professional_experience__c ;
out9_tmp.noodlecrm__lor_2__c = row5.noodlecrm__lor_2__c ;
out9_tmp.noodlecrm__supplemental__c = row5.noodlecrm__supplemental__c ;
out9_tmp.lastmodifiedbyid = row5.lastmodifiedbyid ;
out9_tmp.noodlecrm__mta_interaction_record__c = row5.noodlecrm__mta_interaction_record__c ;
out9_tmp.noodlecrm__meaningful_conversation_date_time__c = row5.noodlecrm__meaningful_conversation_date_time__c ;
out9_tmp.noodlecrm__applying_to_a_competitor__c = row5.noodlecrm__applying_to_a_competitor__c ;
out9_tmp.noodlecrm__lead_stated_professional_status__c = row5.noodlecrm__lead_stated_professional_status__c ;
out9_tmp.noodlecrm__street__c = row5.noodlecrm__street__c ;
out9_tmp.noodlecrm__lor_1__c = row5.noodlecrm__lor_1__c ;
out9_tmp.noodlecrm__scholarship_applied__c = row5.noodlecrm__scholarship_applied__c ;
out9_tmp.noodlecrm__ea_indicated_start_term__c = row5.noodlecrm__ea_indicated_start_term__c ;
out9_tmp.noodlecrm__state_region__c = row5.noodlecrm__state_region__c ;
out9_tmp.noodlecrm__registered__c = row5.noodlecrm__registered__c ;
out9_tmp.noodlecrm__employer_benefits__c = row5.noodlecrm__employer_benefits__c ;
out9_tmp.noodlecrm__utm_campaign__c = row5.noodlecrm__utm_campaign__c ;
out9_tmp.lastactivitydate = row5.lastactivitydate ;
out9_tmp.noodlecrm__will_not_apply_reason_other__c = row5.noodlecrm__will_not_apply_reason_other__c ;
out9_tmp.noodlecrm__app_deposit_date_time__c = row5.noodlecrm__app_deposit_date_time__c ;
out9_tmp.noodlecrm__application_status__c = row5.noodlecrm__application_status__c ;
out9_tmp.noodlecrm__defer_reason_detail__c = row5.noodlecrm__defer_reason_detail__c ;
out9_tmp.hasopenactivity = row5.hasopenactivity ;
out9_tmp.noodlecrm__last_activity_type__c = row5.noodlecrm__last_activity_type__c ;
out9_tmp.noodlecrm__student_loans__c = row5.noodlecrm__student_loans__c ;
out9_tmp.noodlecrm__deliveryinstallationstatus__c = row5.noodlecrm__deliveryinstallationstatus__c ;
out9_tmp.noodlecrm__trackingnumber__c = row5.noodlecrm__trackingnumber__c ;
out9_tmp.noodlecrm__time_zone__c = row5.noodlecrm__time_zone__c ;
out9_tmp.noodlecrm__do_not_call__c = row5.noodlecrm__do_not_call__c ;
out9_tmp.probability = row5.probability ;
out9_tmp.noodlecrm__tran_3__c = null;
out9_tmp.noodlecrm__delivery_timestamp_idata__c = row5.noodlecrm__delivery_timestamp_idata__c ;
out9_tmp.noodlecrm__last_contacting_state__c = row5.noodlecrm__last_contacting_state__c ;
out9_tmp.noodlecrm__test_requirements__c = row5.noodlecrm__test_requirements__c ;
out9_tmp.noodlecrm__decision_type__c = row5.noodlecrm__decision_type__c ;
out9_tmp.noodlecrm__admit_cohort__c = row5.noodlecrm__admit_cohort__c ;
out9_tmp.noodlecrm__tran_2__c = row5.noodlecrm__tran_2__c ;
out9_tmp.noodlecrm__email__c = row5.noodlecrm__email__c ;
out9_tmp.noodlecrm__university_scholarship_date__c = row5.noodlecrm__university_scholarship_date__c ;
out9_tmp.noodlecrm__revised_start_date__c = row5.noodlecrm__revised_start_date__c ;
out9_tmp.createddate = row5.createddate ;
out9_tmp.noodlecrm__submit_cohort__c = row5.noodlecrm__submit_cohort__c ;
out9_tmp.isclosed = row5.isclosed ;
out9_tmp.noodlecrm__condition_type__c = row5.noodlecrm__condition_type__c ;
out9_tmp.noodlecrm__opportunity_status__c = row5.noodlecrm__opportunity_status__c ;
out9_tmp.noodlecrm__class_schedule_type__c = row5.noodlecrm__class_schedule_type__c ;
out9_tmp.noodlecrm__lead_stated_licensure__c = row5.noodlecrm__lead_stated_licensure__c ;
out9_tmp.noodlecrm__student__c = row5.noodlecrm__student__c ;
out9_tmp.noodlecrm__university_application_id__c = row5.noodlecrm__university_application_id__c ;
out9_tmp.leadsource = row5.leadsource ;
out9_tmp.noodlecrm__updated__c = row5.noodlecrm__updated__c ;
out9_tmp.noodlecrm__utm_term__c = row5.noodlecrm__utm_term__c ;
out9_tmp.noodlecrm__tran_1__c = row5.noodlecrm__tran_1__c ;
out9_tmp.noodlecrm__google_analytics_id__c = row5.noodlecrm__google_analytics_id__c ;
out9_tmp.amount = row5.amount ;
out9_tmp.noodlecrm__crm_id__c = row5.noodlecrm__crm_id__c ;
out9_tmp.noodlecrm__lead_stated_taken_course__c = row5.noodlecrm__lead_stated_taken_course__c ;
out9_tmp.noodlecrm__ip_address__c = row5.noodlecrm__ip_address__c ;
out9_tmp.noodlecrm__total_calls__c = row5.noodlecrm__total_calls__c ;
out9_tmp.noodlecrm__university_id_number__c = row5.noodlecrm__university_id_number__c ;
out9_tmp.noodlecrm__decision__c = row5.noodlecrm__decision__c ;
out9_tmp.noodlecrm__test_status_gre__c = row5.noodlecrm__test_status_gre__c ;
out9_tmp.forecastcategory = row5.forecastcategory ;
out9_tmp.noodlecrm__attended_zoom__c = row5.noodlecrm__attended_zoom__c ;
out9_tmp.noodlecrm__fafsa__c = row5.noodlecrm__fafsa__c ;
out9_tmp.noodlecrm__level_of_education__c = row5.noodlecrm__level_of_education__c ;
out9_tmp.noodlecrm__ea_projected_deposit_date__c = row5.noodlecrm__ea_projected_deposit_date__c ;
out9_tmp.noodlecrm__currentgenerators__c = row5.noodlecrm__currentgenerators__c ;
out9_tmp.noodlecrm__defer_date__c = row5.noodlecrm__defer_date__c ;
out9_tmp.noodlecrm__lead_stated_taken_course_req__c = row5.noodlecrm__lead_stated_taken_course_req__c ;
out9_tmp.noodlecrm__follow_up_reason__c = row5.noodlecrm__follow_up_reason__c ;
out9_tmp.noodlecrm__will_not_apply_date__c = row5.noodlecrm__will_not_apply_date__c ;
out9_tmp.noodlecrm__trying_attempt_date__c = row5.noodlecrm__trying_attempt_date__c ;
out9_tmp.noodlecrm__gpa__c = row5.noodlecrm__gpa__c ;
out9_tmp.noodlecrm__fa_comments__c = row5.noodlecrm__fa_comments__c ;
out9_tmp.createdbyid = row5.createdbyid ;
out9_tmp.type = row5.type ;
out9_tmp.noodlecrm__first_name__c = row5.noodlecrm__first_name__c ;
out9_tmp.pricebook2id = row5.pricebook2id ;
out9_tmp.contactid = row5.contactid ;
out9_tmp.noodlecrm__contact_type__c = row5.noodlecrm__contact_type__c ;
out9_tmp.noodlecrm__conversion_date__c = row5.noodlecrm__conversion_date__c ;
out9_tmp.noodlecrm__ordernumber__c = row5.noodlecrm__ordernumber__c ;
out9_tmp.fiscalyear = row5.fiscalyear ;
out9_tmp.noodlecrm__defer_start_date__c = row5.noodlecrm__defer_start_date__c ;
out9_tmp.noodlecrm__postalcode__c = row5.noodlecrm__postalcode__c ;
out9_tmp.noodlecrm__re_open__c = row5.noodlecrm__re_open__c ;
out9_tmp.noodlecrm__applying_to_a_competitor_type__c = row5.noodlecrm__applying_to_a_competitor_type__c ;
out9_tmp.noodlecrm__app_complete_date__c = row5.noodlecrm__app_complete_date__c ;
out9_tmp.noodlecrm__country__c = row5.noodlecrm__country__c ;
out9_tmp.description = row5.description ;
out9_tmp.noodlecrm__application_program__c = row5.noodlecrm__application_program__c ;
out9_tmp.noodlecrm__decline_date__c = row5.noodlecrm__decline_date__c ;
out9_tmp.lastreferenceddate = row5.lastreferenceddate ;
out9_tmp.noodlecrm__temperature__c = row5.noodlecrm__temperature__c ;
out9_tmp.noodlecrm__competitor_university_2__c = row5.noodlecrm__competitor_university_2__c ;
out9_tmp.noodlecrm__course_requirements__c = row5.noodlecrm__course_requirements__c ;
out9_tmp.fiscal = row5.fiscal ;
out9_tmp.noodlecrm__last_name__c = row5.noodlecrm__last_name__c ;
out9_tmp.noodlecrm__sop__c = row5.noodlecrm__sop__c ;
out9_tmp.noodlecrm__competitor_university_1__c = row5.noodlecrm__competitor_university_1__c ;
out9_tmp.noodlecrm__bad_lead_date_time__c = row5.noodlecrm__bad_lead_date_time__c ;
out9_tmp.nextstep = row5.nextstep ;
out9_tmp.noodlecrm__signed_up_for_webinar__c = row5.noodlecrm__signed_up_for_webinar__c ;
out9_tmp.sfid = row5.sfid ;
out9_tmp.id = row5.id ;
out9_tmp.noodlecrm__preferred_phone__c = row5.noodlecrm__preferred_phone__c ;
out9_tmp.noodlecrm__program3__c = row5.noodlecrm__program3__c ;
out9_tmp.noodlecrm__missed_attempt_counter2__c = row5.noodlecrm__missed_attempt_counter2__c ;
out9_tmp.noodlecrm__university_app_crmid__c = row5.noodlecrm__university_app_crmid__c ;
out9_tmp.noodlecrm__last_call_date_time__c = row5.noodlecrm__last_call_date_time__c ;
out9_tmp.noodlecrm__program2__r__noodlecrm__external_id__c = row5.noodlecrm__program2__r__noodlecrm__external_id__c ;
out9_tmp.noodlecrm__program3__r__noodlecrm__external_id__c = row5.noodlecrm__program3__r__noodlecrm__external_id__c ;
out9_tmp.noodlecrm__app_start_date_time__c = row5.noodlecrm__app_start_date_time__c ;
out9_tmp.noodlecrm__historical_call_count__c = row5.noodlecrm__historical_call_count__c ;
out9_tmp.noodlecrm__revised_start_cohort__c = row5.noodlecrm__revised_start_cohort__c ;
out9_tmp.noodlecrm__app_enrolled_date_time__c = row5.noodlecrm__app_enrolled_date_time__c ;
out9_tmp.noodlecrm__external_id_unique__c = row5.noodlecrm__external_id_unique__c ;
out9_tmp.noodlecrm__preferred_email__c = row5.noodlecrm__preferred_email__c ;
out9_tmp.noodlecrm__student_contact__c = row5.noodlecrm__student_contact__c ;
out9_tmp.noodlecrm__decision_date_time__c = row5.noodlecrm__decision_date_time__c ;
out9_tmp.noodlecrm__final_start_cohort__c = row5.noodlecrm__final_start_cohort__c ;
out9_tmp.noodlecrm__app_complete_date_time__c = row5.noodlecrm__app_complete_date_time__c ;
out9_tmp.noodlecrm__app_submit_date_time__c = row5.noodlecrm__app_submit_date_time__c ;
out9_tmp.noodlecrm__application_indicated_start_cohort__c = row5.noodlecrm__application_indicated_start_cohort__c ;
out9_tmp.noodlecrm__engagement_status__c = row5.noodlecrm__engagement_status__c ;
out9_tmp.noodlecrm__is_test_record__c = row5.noodlecrm__is_test_record__c;
out9_tmp.noodlecrm__first_inquiry_action__c = row5.noodlecrm__first_inquiry_action__c ;
out9 = out9_tmp;

// # Output table : 'out10'
out10_tmp.noodlecrm__university_scholarship_details__c = row5.noodlecrm__university_scholarship_details__c ;
out10_tmp.hasopportunitylineitem = row5.hasopportunitylineitem ;
out10_tmp.noodlecrm__final_start_date__c = row5.noodlecrm__final_start_date__c ;
out10_tmp.noodlecrm__years_experience__c = row5.noodlecrm__years_experience__c ;
out10_tmp.noodlecrm__delivery_status_idata__c = row5.noodlecrm__delivery_status_idata__c ;
out10_tmp.noodlecrm__decision_date__c = row5.noodlecrm__decision_date__c ;
out10_tmp.noodlecrm__application_drafted__c = row5.noodlecrm__application_drafted__c ;
out10_tmp.noodlecrm__total_attempts_pre_mc__c = row5.noodlecrm__total_attempts_pre_mc__c ;
out10_tmp.noodlecrm__total_emails__c = row5.noodlecrm__total_emails__c ;
out10_tmp.noodlecrm__scholarships__c = row5.noodlecrm__scholarships__c ;
out10_tmp.noodlecrm__url__c = row5.noodlecrm__url__c ;
out10_tmp.noodlecrm__current_start_date__c = row5.noodlecrm__current_start_date__c ;
out10_tmp.noodlecrm__external_id__c = row5.noodlecrm__external_id__c ;
out10_tmp.noodlecrm__will_not_complete_reason__c = row5.noodlecrm__will_not_complete_reason__c ;
out10_tmp.noodlecrm__defer_reason__c = row5.noodlecrm__defer_reason__c ;
out10_tmp.noodlecrm__lead_stated_gpa__c = row5.noodlecrm__lead_stated_gpa__c ;
out10_tmp.noodlecrm__degree_verification__c = row5.noodlecrm__degree_verification__c ;
out10_tmp.noodlecrm__app_item_received_date_time__c = row5.noodlecrm__app_item_received_date_time__c ;
out10_tmp.noodlecrm__phone__c = row5.noodlecrm__phone__c ;
out10_tmp.noodlecrm__decline_reason_details__c = row5.noodlecrm__decline_reason_details__c ;
out10_tmp.noodlecrm__will_not_apply_reason__c = row5.noodlecrm__will_not_apply_reason__c ;
out10_tmp.forecastcategoryname = row5.forecastcategoryname ;
out10_tmp.noodlecrm__optional_statement__c = row5.noodlecrm__optional_statement__c ;
out10_tmp.noodlecrm__maincompetitors__c = row5.noodlecrm__maincompetitors__c ;
out10_tmp.noodlecrm__partnerships__c = row5.noodlecrm__partnerships__c ;
out10_tmp.noodlecrm__bad_lead_reason__c = row5.noodlecrm__bad_lead_reason__c ;
out10_tmp.noodlecrm__application_last_login__c = row5.noodlecrm__application_last_login__c ;
out10_tmp.noodlecrm__out_of_pocket__c = row5.noodlecrm__out_of_pocket__c ;
out10_tmp.noodlecrm__enrollment_status__c = row5.noodlecrm__enrollment_status__c ;
out10_tmp.noodlecrm__competitor_details__c = row5.noodlecrm__competitor_details__c ;
out10_tmp.noodlecrm__last_attended_zoom_date_time__c = row5.noodlecrm__last_attended_zoom_date_time__c ;
out10_tmp.noodlecrm__last_attended_webinar_date_time__c = row5.noodlecrm__last_attended_webinar_date_time__c ;
out10_tmp.noodlecrm__program2__c = row5.noodlecrm__program2__c ;
out10_tmp.noodlecrm__enrollment_status_date_time__c = row5.noodlecrm__enrollment_status_date_time__c ;
out10_tmp.noodlecrm__noodle_crm_id__c = row5.noodlecrm__noodle_crm_id__c ;
out10_tmp.closedate = row5.closedate ;
out10_tmp.noodlecrm__application_indicated_start_date__c = row5.noodlecrm__application_indicated_start_date__c ;
out10_tmp.noodlecrm__university__c = row5.noodlecrm__university__c ;
out10_tmp.noodlecrm__military__c = row5.noodlecrm__military__c ;
out10_tmp.noodlecrm__decline_reason__c = row5.noodlecrm__decline_reason__c ;
out10_tmp.noodlecrm__universitycrmid__c = row5.noodlecrm__universitycrmid__c ;
out10_tmp.noodlecrm__resume__c = row5.noodlecrm__resume__c ;
out10_tmp.noodlecrm__meets_program_criteria__c = row5.noodlecrm__meets_program_criteria__c ;
out10_tmp.noodlecrm__best_time_to_call__c = row5.noodlecrm__best_time_to_call__c ;
out10_tmp.noodlecrm__total_texts__c = row5.noodlecrm__total_texts__c ;
out10_tmp.noodlecrm__application_program_global__c = row5.noodlecrm__application_program_global__c ;
out10_tmp.accountid = row5.accountid ;
out10_tmp.noodlecrm__external_id_populated__c = row5.noodlecrm__external_id_populated__c ;
out10_tmp.noodlecrm__utm_source__c = row5.noodlecrm__utm_source__c ;
out10_tmp.noodlecrm__total_inquiries__c = row5.noodlecrm__total_inquiries__c ;
out10_tmp.noodlecrm__first_call_date_time__c = row5.noodlecrm__first_call_date_time__c ;
out10_tmp.noodlecrm__lead_external_id__c = row5.noodlecrm__lead_external_id__c ;
out10_tmp.noodlecrm__webinar_signup_date_time__c = row5.noodlecrm__webinar_signup_date_time__c ;
out10_tmp.lastvieweddate = row5.lastvieweddate ;
out10_tmp.noodlecrm__city__c = row5.noodlecrm__city__c ;
out10_tmp.noodlecrm__application_decision__c = row5.noodlecrm__application_decision__c ;
out10_tmp.noodlecrm__university_email__c = row5.noodlecrm__university_email__c ;
out10_tmp.noodlecrm__responsiveness__c = row5.noodlecrm__responsiveness__c ;
out10_tmp.noodlecrm__official_cohort__c = row5.noodlecrm__official_cohort__c ;
out10_tmp.stagename = row5.stagename ;
out10_tmp.noodlecrm__ea_projected_submit_date__c = row5.noodlecrm__ea_projected_submit_date__c ;
out10_tmp.noodlecrm__deal_stage__c = row5.noodlecrm__deal_stage__c ;
out10_tmp.noodlecrm__first_touch_source__c = row5.noodlecrm__first_touch_source__c ;
out10_tmp.noodlecrm__international_language_test__c = row5.noodlecrm__international_language_test__c ;
out10_tmp.noodlecrm__utm_content__c = row5.noodlecrm__utm_content__c ;
out10_tmp.noodlecrm__app_start_date__c = row5.noodlecrm__app_start_date__c ;
out10_tmp.campaignid = row5.campaignid ;
out10_tmp.name = row5.name ;
out10_tmp.hasoverduetask = row5.hasoverduetask ;
out10_tmp.noodlecrm__opportunity_owner__c = row5.noodlecrm__opportunity_owner__c ;
out10_tmp.noodlecrm__missed_attempt_date_time__c = row5.noodlecrm__missed_attempt_date_time__c ;
out10_tmp.iswon = row5.iswon ;
out10_tmp.noodlecrm__application_submit_date__c = row5.noodlecrm__application_submit_date__c ;
out10_tmp.noodlecrm__associated_contact__c = row5.noodlecrm__associated_contact__c ;
out10_tmp.noodlecrm__expected_date_to_meet_requirement__c = row5.noodlecrm__expected_date_to_meet_requirement__c ;
out10_tmp.lastmodifieddate = row5.lastmodifieddate ;
out10_tmp.noodlecrm__last_activitydate_time__c = row5.noodlecrm__last_activitydate_time__c ;
out10_tmp.noodlecrm__missed_attempt_counter__c = row5.noodlecrm__missed_attempt_counter__c ;
out10_tmp.noodlecrm__program__c = row5.noodlecrm__program__c ;
out10_tmp.noodlecrm__licensure__c = row5.noodlecrm__licensure__c ;
out10_tmp.fiscalquarter = row5.fiscalquarter ;
out10_tmp.ownerid = row5.ownerid ;
out10_tmp.noodlecrm__utm_medium__c = row5.noodlecrm__utm_medium__c ;
out10_tmp.noodlecrm__last_call_date__c = row5.noodlecrm__last_call_date__c ;
out10_tmp.noodlecrm__opportunity_external_id__c = row5.noodlecrm__opportunity_external_id__c ;
out10_tmp.isdeleted = row5.isdeleted ;
out10_tmp.systemmodstamp = row5.systemmodstamp ;
out10_tmp.noodlecrm__follow_up_date__c = row5.noodlecrm__follow_up_date__c ;
out10_tmp.noodlecrm__attended_webinar__c = row5.noodlecrm__attended_webinar__c ;
out10_tmp.noodlecrm__professional_experience__c = row5.noodlecrm__professional_experience__c ;
out10_tmp.noodlecrm__lor_2__c = row5.noodlecrm__lor_2__c ;
out10_tmp.noodlecrm__supplemental__c = row5.noodlecrm__supplemental__c ;
out10_tmp.lastmodifiedbyid = row5.lastmodifiedbyid ;
out10_tmp.noodlecrm__mta_interaction_record__c = row5.noodlecrm__mta_interaction_record__c ;
out10_tmp.noodlecrm__meaningful_conversation_date_time__c = row5.noodlecrm__meaningful_conversation_date_time__c ;
out10_tmp.noodlecrm__applying_to_a_competitor__c = row5.noodlecrm__applying_to_a_competitor__c ;
out10_tmp.noodlecrm__lead_stated_professional_status__c = row5.noodlecrm__lead_stated_professional_status__c ;
out10_tmp.noodlecrm__street__c = row5.noodlecrm__street__c ;
out10_tmp.noodlecrm__lor_1__c = row5.noodlecrm__lor_1__c ;
out10_tmp.noodlecrm__scholarship_applied__c = row5.noodlecrm__scholarship_applied__c ;
out10_tmp.noodlecrm__ea_indicated_start_term__c = row5.noodlecrm__ea_indicated_start_term__c ;
out10_tmp.noodlecrm__state_region__c = row5.noodlecrm__state_region__c ;
out10_tmp.noodlecrm__registered__c = row5.noodlecrm__registered__c ;
out10_tmp.noodlecrm__employer_benefits__c = row5.noodlecrm__employer_benefits__c ;
out10_tmp.noodlecrm__utm_campaign__c = row5.noodlecrm__utm_campaign__c ;
out10_tmp.lastactivitydate = row5.lastactivitydate ;
out10_tmp.noodlecrm__will_not_apply_reason_other__c = row5.noodlecrm__will_not_apply_reason_other__c ;
out10_tmp.noodlecrm__app_deposit_date_time__c = row5.noodlecrm__app_deposit_date_time__c ;
out10_tmp.noodlecrm__application_status__c = row5.noodlecrm__application_status__c ;
out10_tmp.noodlecrm__defer_reason_detail__c = row5.noodlecrm__defer_reason_detail__c ;
out10_tmp.hasopenactivity = row5.hasopenactivity ;
out10_tmp.noodlecrm__last_activity_type__c = row5.noodlecrm__last_activity_type__c ;
out10_tmp.noodlecrm__student_loans__c = row5.noodlecrm__student_loans__c ;
out10_tmp.noodlecrm__deliveryinstallationstatus__c = row5.noodlecrm__deliveryinstallationstatus__c ;
out10_tmp.noodlecrm__trackingnumber__c = row5.noodlecrm__trackingnumber__c ;
out10_tmp.noodlecrm__time_zone__c = row5.noodlecrm__time_zone__c ;
out10_tmp.noodlecrm__do_not_call__c = row5.noodlecrm__do_not_call__c ;
out10_tmp.probability = row5.probability ;
out10_tmp.noodlecrm__tran_3__c = null;
out10_tmp.noodlecrm__delivery_timestamp_idata__c = row5.noodlecrm__delivery_timestamp_idata__c ;
out10_tmp.noodlecrm__last_contacting_state__c = row5.noodlecrm__last_contacting_state__c ;
out10_tmp.noodlecrm__test_requirements__c = row5.noodlecrm__test_requirements__c ;
out10_tmp.noodlecrm__decision_type__c = row5.noodlecrm__decision_type__c ;
out10_tmp.noodlecrm__admit_cohort__c = row5.noodlecrm__admit_cohort__c ;
out10_tmp.noodlecrm__tran_2__c = row5.noodlecrm__tran_2__c ;
out10_tmp.noodlecrm__email__c = row5.noodlecrm__email__c ;
out10_tmp.noodlecrm__university_scholarship_date__c = row5.noodlecrm__university_scholarship_date__c ;
out10_tmp.noodlecrm__revised_start_date__c = row5.noodlecrm__revised_start_date__c ;
out10_tmp.createddate = row5.createddate ;
out10_tmp.noodlecrm__submit_cohort__c = row5.noodlecrm__submit_cohort__c ;
out10_tmp.isclosed = row5.isclosed ;
out10_tmp.noodlecrm__condition_type__c = row5.noodlecrm__condition_type__c ;
out10_tmp.noodlecrm__opportunity_status__c = row5.noodlecrm__opportunity_status__c ;
out10_tmp.noodlecrm__class_schedule_type__c = row5.noodlecrm__class_schedule_type__c ;
out10_tmp.noodlecrm__lead_stated_licensure__c = row5.noodlecrm__lead_stated_licensure__c ;
out10_tmp.noodlecrm__student__c = row5.noodlecrm__student__c ;
out10_tmp.noodlecrm__university_application_id__c = row5.noodlecrm__university_application_id__c ;
out10_tmp.leadsource = row5.leadsource ;
out10_tmp.noodlecrm__updated__c = row5.noodlecrm__updated__c ;
out10_tmp.noodlecrm__utm_term__c = row5.noodlecrm__utm_term__c ;
out10_tmp.noodlecrm__tran_1__c = row5.noodlecrm__tran_1__c ;
out10_tmp.noodlecrm__google_analytics_id__c = row5.noodlecrm__google_analytics_id__c ;
out10_tmp.amount = row5.amount ;
out10_tmp.noodlecrm__crm_id__c = row5.noodlecrm__crm_id__c ;
out10_tmp.noodlecrm__lead_stated_taken_course__c = row5.noodlecrm__lead_stated_taken_course__c ;
out10_tmp.noodlecrm__ip_address__c = row5.noodlecrm__ip_address__c ;
out10_tmp.noodlecrm__total_calls__c = row5.noodlecrm__total_calls__c ;
out10_tmp.noodlecrm__university_id_number__c = row5.noodlecrm__university_id_number__c ;
out10_tmp.noodlecrm__decision__c = row5.noodlecrm__decision__c ;
out10_tmp.noodlecrm__test_status_gre__c = row5.noodlecrm__test_status_gre__c ;
out10_tmp.forecastcategory = row5.forecastcategory ;
out10_tmp.noodlecrm__attended_zoom__c = row5.noodlecrm__attended_zoom__c ;
out10_tmp.noodlecrm__fafsa__c = row5.noodlecrm__fafsa__c ;
out10_tmp.noodlecrm__level_of_education__c = row5.noodlecrm__level_of_education__c ;
out10_tmp.noodlecrm__ea_projected_deposit_date__c = row5.noodlecrm__ea_projected_deposit_date__c ;
out10_tmp.noodlecrm__currentgenerators__c = row5.noodlecrm__currentgenerators__c ;
out10_tmp.noodlecrm__defer_date__c = row5.noodlecrm__defer_date__c ;
out10_tmp.noodlecrm__lead_stated_taken_course_req__c = row5.noodlecrm__lead_stated_taken_course_req__c ;
out10_tmp.noodlecrm__follow_up_reason__c = row5.noodlecrm__follow_up_reason__c ;
out10_tmp.noodlecrm__will_not_apply_date__c = row5.noodlecrm__will_not_apply_date__c ;
out10_tmp.noodlecrm__trying_attempt_date__c = row5.noodlecrm__trying_attempt_date__c ;
out10_tmp.noodlecrm__gpa__c = row5.noodlecrm__gpa__c ;
out10_tmp.noodlecrm__fa_comments__c = row5.noodlecrm__fa_comments__c ;
out10_tmp.createdbyid = row5.createdbyid ;
out10_tmp.type = row5.type ;
out10_tmp.noodlecrm__first_name__c = row5.noodlecrm__first_name__c ;
out10_tmp.pricebook2id = row5.pricebook2id ;
out10_tmp.contactid = row5.contactid ;
out10_tmp.noodlecrm__contact_type__c = row5.noodlecrm__contact_type__c ;
out10_tmp.noodlecrm__conversion_date__c = row5.noodlecrm__conversion_date__c ;
out10_tmp.noodlecrm__ordernumber__c = row5.noodlecrm__ordernumber__c ;
out10_tmp.fiscalyear = row5.fiscalyear ;
out10_tmp.noodlecrm__defer_start_date__c = row5.noodlecrm__defer_start_date__c ;
out10_tmp.noodlecrm__postalcode__c = row5.noodlecrm__postalcode__c ;
out10_tmp.noodlecrm__re_open__c = row5.noodlecrm__re_open__c ;
out10_tmp.noodlecrm__applying_to_a_competitor_type__c = row5.noodlecrm__applying_to_a_competitor_type__c ;
out10_tmp.noodlecrm__app_complete_date__c = row5.noodlecrm__app_complete_date__c ;
out10_tmp.noodlecrm__country__c = row5.noodlecrm__country__c ;
out10_tmp.description = row5.description ;
out10_tmp.noodlecrm__application_program__c = row5.noodlecrm__application_program__c ;
out10_tmp.noodlecrm__decline_date__c = row5.noodlecrm__decline_date__c ;
out10_tmp.lastreferenceddate = row5.lastreferenceddate ;
out10_tmp.noodlecrm__temperature__c = row5.noodlecrm__temperature__c ;
out10_tmp.noodlecrm__competitor_university_2__c = row5.noodlecrm__competitor_university_2__c ;
out10_tmp.noodlecrm__course_requirements__c = row5.noodlecrm__course_requirements__c ;
out10_tmp.fiscal = row5.fiscal ;
out10_tmp.noodlecrm__last_name__c = row5.noodlecrm__last_name__c ;
out10_tmp.noodlecrm__sop__c = row5.noodlecrm__sop__c ;
out10_tmp.noodlecrm__competitor_university_1__c = row5.noodlecrm__competitor_university_1__c ;
out10_tmp.noodlecrm__bad_lead_date_time__c = row5.noodlecrm__bad_lead_date_time__c ;
out10_tmp.nextstep = row5.nextstep ;
out10_tmp.noodlecrm__signed_up_for_webinar__c = row5.noodlecrm__signed_up_for_webinar__c ;
out10_tmp.sfid = row5.sfid ;
out10_tmp.id = row5.id ;
out10_tmp.noodlecrm__preferred_phone__c = row5.noodlecrm__preferred_phone__c ;
out10_tmp.noodlecrm__program3__c = row5.noodlecrm__program3__c ;
out10_tmp.noodlecrm__missed_attempt_counter2__c = row5.noodlecrm__missed_attempt_counter2__c ;
out10_tmp.noodlecrm__university_app_crmid__c = row5.noodlecrm__university_app_crmid__c ;
out10_tmp.noodlecrm__last_call_date_time__c = row5.noodlecrm__last_call_date_time__c ;
out10_tmp.noodlecrm__program2__r__noodlecrm__external_id__c = row5.noodlecrm__program2__r__noodlecrm__external_id__c ;
out10_tmp.noodlecrm__program3__r__noodlecrm__external_id__c = row5.noodlecrm__program3__r__noodlecrm__external_id__c ;
out10_tmp.noodlecrm__app_start_date_time__c = row5.noodlecrm__app_start_date_time__c ;
out10_tmp.noodlecrm__historical_call_count__c = row5.noodlecrm__historical_call_count__c ;
out10_tmp.noodlecrm__revised_start_cohort__c = row5.noodlecrm__revised_start_cohort__c ;
out10_tmp.noodlecrm__app_enrolled_date_time__c = row5.noodlecrm__app_enrolled_date_time__c ;
out10_tmp.noodlecrm__external_id_unique__c = row5.noodlecrm__external_id_unique__c ;
out10_tmp.noodlecrm__preferred_email__c = row5.noodlecrm__preferred_email__c ;
out10_tmp.noodlecrm__student_contact__c = row5.noodlecrm__student_contact__c ;
out10_tmp.noodlecrm__decision_date_time__c = row5.noodlecrm__decision_date_time__c ;
out10_tmp.noodlecrm__final_start_cohort__c = row5.noodlecrm__final_start_cohort__c ;
out10_tmp.noodlecrm__app_complete_date_time__c = row5.noodlecrm__app_complete_date_time__c ;
out10_tmp.noodlecrm__app_submit_date_time__c = row5.noodlecrm__app_submit_date_time__c ;
out10_tmp.noodlecrm__application_indicated_start_cohort__c = row5.noodlecrm__application_indicated_start_cohort__c ;
out10_tmp.noodlecrm__engagement_status__c = row5.noodlecrm__engagement_status__c ;
out10_tmp.noodlecrm__is_test_record__c = row5.noodlecrm__is_test_record__c;
out10_tmp.noodlecrm__first_inquiry_action__c = row5.noodlecrm__first_inquiry_action__c ;
out10 = out10_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out9"
if(out9 != null) { 



	
	/**
	 * [tFileOutputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out9");
					}
					


                        String[] rowtFileOutputDelimited_5=new String[216];
                                fileOutputDelimitedUtil_tFileOutputDelimited_5.putValue_0(out9,rowtFileOutputDelimited_5);
                                fileOutputDelimitedUtil_tFileOutputDelimited_5.putValue_1(out9,rowtFileOutputDelimited_5);
                                fileOutputDelimitedUtil_tFileOutputDelimited_5.putValue_2(out9,rowtFileOutputDelimited_5);
                nb_line_tFileOutputDelimited_5++;
                resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);
                                       CsvWritertFileOutputDelimited_5.writeNext(rowtFileOutputDelimited_5);




 


	tos_count_tFileOutputDelimited_5++;

/**
 * [tFileOutputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	

 



/**
 * [tFileOutputDelimited_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	

 



/**
 * [tFileOutputDelimited_5 process_data_end ] stop
 */

} // End of branch "out9"




// Start of branch "out10"
if(out10 != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out10");
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(out10.noodlecrm__university_scholarship_details__c == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, out10.noodlecrm__university_scholarship_details__c);
}

                    if(out10.hasopportunitylineitem == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(2, out10.hasopportunitylineitem);
}

                    if(out10.noodlecrm__final_start_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(3, new java.sql.Timestamp(out10.noodlecrm__final_start_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__years_experience__c == null) {
pstmt_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(4, out10.noodlecrm__years_experience__c);
}

                    if(out10.noodlecrm__delivery_status_idata__c == null) {
pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(5, out10.noodlecrm__delivery_status_idata__c);
}

                    if(out10.noodlecrm__decision_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(6, new java.sql.Timestamp(out10.noodlecrm__decision_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__application_drafted__c == null) {
pstmt_tDBOutput_5.setNull(7, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(7, out10.noodlecrm__application_drafted__c);
}

                    if(out10.noodlecrm__total_attempts_pre_mc__c == null) {
pstmt_tDBOutput_5.setNull(8, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_5.setDouble(8, out10.noodlecrm__total_attempts_pre_mc__c);
}

                    if(out10.noodlecrm__total_emails__c == null) {
pstmt_tDBOutput_5.setNull(9, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_5.setDouble(9, out10.noodlecrm__total_emails__c);
}

                    if(out10.noodlecrm__scholarships__c == null) {
pstmt_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(10, out10.noodlecrm__scholarships__c);
}

                    if(out10.noodlecrm__url__c == null) {
pstmt_tDBOutput_5.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(11, out10.noodlecrm__url__c);
}

                    if(out10.noodlecrm__current_start_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(12, new java.sql.Timestamp(out10.noodlecrm__current_start_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(12, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__external_id__c == null) {
pstmt_tDBOutput_5.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(13, out10.noodlecrm__external_id__c);
}

                    if(out10.noodlecrm__will_not_complete_reason__c == null) {
pstmt_tDBOutput_5.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(14, out10.noodlecrm__will_not_complete_reason__c);
}

                    if(out10.noodlecrm__defer_reason__c == null) {
pstmt_tDBOutput_5.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(15, out10.noodlecrm__defer_reason__c);
}

                    if(out10.noodlecrm__lead_stated_gpa__c == null) {
pstmt_tDBOutput_5.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(16, out10.noodlecrm__lead_stated_gpa__c);
}

                    if(out10.noodlecrm__degree_verification__c == null) {
pstmt_tDBOutput_5.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(17, out10.noodlecrm__degree_verification__c);
}

                    if(out10.noodlecrm__app_item_received_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(18, new java.sql.Timestamp(out10.noodlecrm__app_item_received_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(18, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__phone__c == null) {
pstmt_tDBOutput_5.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(19, out10.noodlecrm__phone__c);
}

                    if(out10.noodlecrm__decline_reason_details__c == null) {
pstmt_tDBOutput_5.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(20, out10.noodlecrm__decline_reason_details__c);
}

                    if(out10.noodlecrm__will_not_apply_reason__c == null) {
pstmt_tDBOutput_5.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(21, out10.noodlecrm__will_not_apply_reason__c);
}

                    if(out10.forecastcategoryname == null) {
pstmt_tDBOutput_5.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(22, out10.forecastcategoryname);
}

                    if(out10.noodlecrm__optional_statement__c == null) {
pstmt_tDBOutput_5.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(23, out10.noodlecrm__optional_statement__c);
}

                    if(out10.noodlecrm__maincompetitors__c == null) {
pstmt_tDBOutput_5.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(24, out10.noodlecrm__maincompetitors__c);
}

                    if(out10.noodlecrm__partnerships__c == null) {
pstmt_tDBOutput_5.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(25, out10.noodlecrm__partnerships__c);
}

                    if(out10.noodlecrm__bad_lead_reason__c == null) {
pstmt_tDBOutput_5.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(26, out10.noodlecrm__bad_lead_reason__c);
}

                    if(out10.noodlecrm__application_last_login__c != null) {
pstmt_tDBOutput_5.setTimestamp(27, new java.sql.Timestamp(out10.noodlecrm__application_last_login__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(27, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__out_of_pocket__c == null) {
pstmt_tDBOutput_5.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(28, out10.noodlecrm__out_of_pocket__c);
}

                    if(out10.noodlecrm__enrollment_status__c == null) {
pstmt_tDBOutput_5.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(29, out10.noodlecrm__enrollment_status__c);
}

                    if(out10.noodlecrm__competitor_details__c == null) {
pstmt_tDBOutput_5.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(30, out10.noodlecrm__competitor_details__c);
}

                    if(out10.noodlecrm__last_attended_zoom_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(31, new java.sql.Timestamp(out10.noodlecrm__last_attended_zoom_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(31, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__last_attended_webinar_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(32, new java.sql.Timestamp(out10.noodlecrm__last_attended_webinar_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(32, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__program2__c == null) {
pstmt_tDBOutput_5.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(33, out10.noodlecrm__program2__c);
}

                    if(out10.noodlecrm__enrollment_status_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(34, new java.sql.Timestamp(out10.noodlecrm__enrollment_status_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(34, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__noodle_crm_id__c == null) {
pstmt_tDBOutput_5.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(35, out10.noodlecrm__noodle_crm_id__c);
}

                    if(out10.closedate != null) {
pstmt_tDBOutput_5.setTimestamp(36, new java.sql.Timestamp(out10.closedate.getTime()));
} else {
pstmt_tDBOutput_5.setNull(36, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__application_indicated_start_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(37, new java.sql.Timestamp(out10.noodlecrm__application_indicated_start_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(37, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__university__c == null) {
pstmt_tDBOutput_5.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(38, out10.noodlecrm__university__c);
}

                    if(out10.noodlecrm__military__c == null) {
pstmt_tDBOutput_5.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(39, out10.noodlecrm__military__c);
}

                    if(out10.noodlecrm__decline_reason__c == null) {
pstmt_tDBOutput_5.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(40, out10.noodlecrm__decline_reason__c);
}

                    if(out10.noodlecrm__universitycrmid__c == null) {
pstmt_tDBOutput_5.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(41, out10.noodlecrm__universitycrmid__c);
}

                    if(out10.noodlecrm__resume__c == null) {
pstmt_tDBOutput_5.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(42, out10.noodlecrm__resume__c);
}

                    if(out10.noodlecrm__meets_program_criteria__c == null) {
pstmt_tDBOutput_5.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(43, out10.noodlecrm__meets_program_criteria__c);
}

                    if(out10.noodlecrm__best_time_to_call__c == null) {
pstmt_tDBOutput_5.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(44, out10.noodlecrm__best_time_to_call__c);
}

                    if(out10.noodlecrm__total_texts__c == null) {
pstmt_tDBOutput_5.setNull(45, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_5.setDouble(45, out10.noodlecrm__total_texts__c);
}

                    if(out10.noodlecrm__application_program_global__c == null) {
pstmt_tDBOutput_5.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(46, out10.noodlecrm__application_program_global__c);
}

                    if(out10.accountid == null) {
pstmt_tDBOutput_5.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(47, out10.accountid);
}

                    if(out10.noodlecrm__external_id_populated__c == null) {
pstmt_tDBOutput_5.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(48, out10.noodlecrm__external_id_populated__c);
}

                    if(out10.noodlecrm__utm_source__c == null) {
pstmt_tDBOutput_5.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(49, out10.noodlecrm__utm_source__c);
}

                    if(out10.noodlecrm__total_inquiries__c == null) {
pstmt_tDBOutput_5.setNull(50, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_5.setDouble(50, out10.noodlecrm__total_inquiries__c);
}

                    if(out10.noodlecrm__first_call_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(51, new java.sql.Timestamp(out10.noodlecrm__first_call_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(51, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__lead_external_id__c == null) {
pstmt_tDBOutput_5.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(52, out10.noodlecrm__lead_external_id__c);
}

                    if(out10.noodlecrm__webinar_signup_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(53, new java.sql.Timestamp(out10.noodlecrm__webinar_signup_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(53, java.sql.Types.TIMESTAMP);
}

                    if(out10.lastvieweddate != null) {
pstmt_tDBOutput_5.setTimestamp(54, new java.sql.Timestamp(out10.lastvieweddate.getTime()));
} else {
pstmt_tDBOutput_5.setNull(54, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__city__c == null) {
pstmt_tDBOutput_5.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(55, out10.noodlecrm__city__c);
}

                    if(out10.noodlecrm__application_decision__c == null) {
pstmt_tDBOutput_5.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(56, out10.noodlecrm__application_decision__c);
}

                    if(out10.noodlecrm__university_email__c == null) {
pstmt_tDBOutput_5.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(57, out10.noodlecrm__university_email__c);
}

                    if(out10.noodlecrm__responsiveness__c == null) {
pstmt_tDBOutput_5.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(58, out10.noodlecrm__responsiveness__c);
}

                    if(out10.noodlecrm__official_cohort__c == null) {
pstmt_tDBOutput_5.setNull(59, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(59, out10.noodlecrm__official_cohort__c);
}

                    if(out10.stagename == null) {
pstmt_tDBOutput_5.setNull(60, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(60, out10.stagename);
}

                    if(out10.noodlecrm__ea_projected_submit_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(61, new java.sql.Timestamp(out10.noodlecrm__ea_projected_submit_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(61, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__deal_stage__c != null) {
pstmt_tDBOutput_5.setTimestamp(62, new java.sql.Timestamp(out10.noodlecrm__deal_stage__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(62, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__first_touch_source__c == null) {
pstmt_tDBOutput_5.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(63, out10.noodlecrm__first_touch_source__c);
}

                    if(out10.noodlecrm__international_language_test__c == null) {
pstmt_tDBOutput_5.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(64, out10.noodlecrm__international_language_test__c);
}

                    if(out10.noodlecrm__utm_content__c == null) {
pstmt_tDBOutput_5.setNull(65, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(65, out10.noodlecrm__utm_content__c);
}

                    if(out10.noodlecrm__app_start_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(66, new java.sql.Timestamp(out10.noodlecrm__app_start_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(66, java.sql.Types.TIMESTAMP);
}

                    if(out10.campaignid == null) {
pstmt_tDBOutput_5.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(67, out10.campaignid);
}

                    if(out10.name == null) {
pstmt_tDBOutput_5.setNull(68, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(68, out10.name);
}

                    if(out10.hasoverduetask == null) {
pstmt_tDBOutput_5.setNull(69, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(69, out10.hasoverduetask);
}

                    if(out10.noodlecrm__opportunity_owner__c == null) {
pstmt_tDBOutput_5.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(70, out10.noodlecrm__opportunity_owner__c);
}

                    if(out10.noodlecrm__missed_attempt_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(71, new java.sql.Timestamp(out10.noodlecrm__missed_attempt_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(71, java.sql.Types.TIMESTAMP);
}

                    if(out10.iswon == null) {
pstmt_tDBOutput_5.setNull(72, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(72, out10.iswon);
}

                    if(out10.noodlecrm__application_submit_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(73, new java.sql.Timestamp(out10.noodlecrm__application_submit_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(73, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__associated_contact__c == null) {
pstmt_tDBOutput_5.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(74, out10.noodlecrm__associated_contact__c);
}

                    if(out10.noodlecrm__expected_date_to_meet_requirement__c != null) {
pstmt_tDBOutput_5.setTimestamp(75, new java.sql.Timestamp(out10.noodlecrm__expected_date_to_meet_requirement__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(75, java.sql.Types.TIMESTAMP);
}

                    if(out10.lastmodifieddate != null) {
pstmt_tDBOutput_5.setTimestamp(76, new java.sql.Timestamp(out10.lastmodifieddate.getTime()));
} else {
pstmt_tDBOutput_5.setNull(76, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__last_activitydate_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(77, new java.sql.Timestamp(out10.noodlecrm__last_activitydate_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(77, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__missed_attempt_counter__c == null) {
pstmt_tDBOutput_5.setNull(78, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(78, out10.noodlecrm__missed_attempt_counter__c);
}

                    if(out10.noodlecrm__program__c == null) {
pstmt_tDBOutput_5.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(79, out10.noodlecrm__program__c);
}

                    if(out10.noodlecrm__licensure__c == null) {
pstmt_tDBOutput_5.setNull(80, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(80, out10.noodlecrm__licensure__c);
}

                    if(out10.fiscalquarter == null) {
pstmt_tDBOutput_5.setNull(81, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(81, out10.fiscalquarter);
}

                    if(out10.ownerid == null) {
pstmt_tDBOutput_5.setNull(82, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(82, out10.ownerid);
}

                    if(out10.noodlecrm__utm_medium__c == null) {
pstmt_tDBOutput_5.setNull(83, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(83, out10.noodlecrm__utm_medium__c);
}

                    if(out10.noodlecrm__last_call_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(84, new java.sql.Timestamp(out10.noodlecrm__last_call_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(84, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__opportunity_external_id__c == null) {
pstmt_tDBOutput_5.setNull(85, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(85, out10.noodlecrm__opportunity_external_id__c);
}

                    if(out10.isdeleted == null) {
pstmt_tDBOutput_5.setNull(86, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(86, out10.isdeleted);
}

                    if(out10.systemmodstamp != null) {
pstmt_tDBOutput_5.setTimestamp(87, new java.sql.Timestamp(out10.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_5.setNull(87, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__follow_up_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(88, new java.sql.Timestamp(out10.noodlecrm__follow_up_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(88, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__attended_webinar__c == null) {
pstmt_tDBOutput_5.setNull(89, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(89, out10.noodlecrm__attended_webinar__c);
}

                    if(out10.noodlecrm__professional_experience__c == null) {
pstmt_tDBOutput_5.setNull(90, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(90, out10.noodlecrm__professional_experience__c);
}

                    if(out10.noodlecrm__lor_2__c == null) {
pstmt_tDBOutput_5.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(91, out10.noodlecrm__lor_2__c);
}

                    if(out10.noodlecrm__supplemental__c == null) {
pstmt_tDBOutput_5.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(92, out10.noodlecrm__supplemental__c);
}

                    if(out10.lastmodifiedbyid == null) {
pstmt_tDBOutput_5.setNull(93, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(93, out10.lastmodifiedbyid);
}

                    if(out10.noodlecrm__mta_interaction_record__c == null) {
pstmt_tDBOutput_5.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(94, out10.noodlecrm__mta_interaction_record__c);
}

                    if(out10.noodlecrm__meaningful_conversation_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(95, new java.sql.Timestamp(out10.noodlecrm__meaningful_conversation_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(95, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__applying_to_a_competitor__c == null) {
pstmt_tDBOutput_5.setNull(96, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(96, out10.noodlecrm__applying_to_a_competitor__c);
}

                    if(out10.noodlecrm__lead_stated_professional_status__c == null) {
pstmt_tDBOutput_5.setNull(97, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(97, out10.noodlecrm__lead_stated_professional_status__c);
}

                    if(out10.noodlecrm__street__c == null) {
pstmt_tDBOutput_5.setNull(98, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(98, out10.noodlecrm__street__c);
}

                    if(out10.noodlecrm__lor_1__c == null) {
pstmt_tDBOutput_5.setNull(99, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(99, out10.noodlecrm__lor_1__c);
}

                    if(out10.noodlecrm__scholarship_applied__c == null) {
pstmt_tDBOutput_5.setNull(100, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(100, out10.noodlecrm__scholarship_applied__c);
}

                    if(out10.noodlecrm__ea_indicated_start_term__c == null) {
pstmt_tDBOutput_5.setNull(101, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(101, out10.noodlecrm__ea_indicated_start_term__c);
}

                    if(out10.noodlecrm__state_region__c == null) {
pstmt_tDBOutput_5.setNull(102, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(102, out10.noodlecrm__state_region__c);
}

                    if(out10.noodlecrm__registered__c != null) {
pstmt_tDBOutput_5.setTimestamp(103, new java.sql.Timestamp(out10.noodlecrm__registered__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(103, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__employer_benefits__c == null) {
pstmt_tDBOutput_5.setNull(104, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(104, out10.noodlecrm__employer_benefits__c);
}

                    if(out10.noodlecrm__utm_campaign__c == null) {
pstmt_tDBOutput_5.setNull(105, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(105, out10.noodlecrm__utm_campaign__c);
}

                    if(out10.lastactivitydate != null) {
pstmt_tDBOutput_5.setTimestamp(106, new java.sql.Timestamp(out10.lastactivitydate.getTime()));
} else {
pstmt_tDBOutput_5.setNull(106, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__will_not_apply_reason_other__c == null) {
pstmt_tDBOutput_5.setNull(107, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(107, out10.noodlecrm__will_not_apply_reason_other__c);
}

                    if(out10.noodlecrm__app_deposit_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(108, new java.sql.Timestamp(out10.noodlecrm__app_deposit_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(108, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__application_status__c == null) {
pstmt_tDBOutput_5.setNull(109, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(109, out10.noodlecrm__application_status__c);
}

                    if(out10.noodlecrm__defer_reason_detail__c == null) {
pstmt_tDBOutput_5.setNull(110, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(110, out10.noodlecrm__defer_reason_detail__c);
}

                    if(out10.hasopenactivity == null) {
pstmt_tDBOutput_5.setNull(111, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(111, out10.hasopenactivity);
}

                    if(out10.noodlecrm__last_activity_type__c == null) {
pstmt_tDBOutput_5.setNull(112, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(112, out10.noodlecrm__last_activity_type__c);
}

                    if(out10.noodlecrm__student_loans__c == null) {
pstmt_tDBOutput_5.setNull(113, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(113, out10.noodlecrm__student_loans__c);
}

                    if(out10.noodlecrm__deliveryinstallationstatus__c == null) {
pstmt_tDBOutput_5.setNull(114, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(114, out10.noodlecrm__deliveryinstallationstatus__c);
}

                    if(out10.noodlecrm__trackingnumber__c == null) {
pstmt_tDBOutput_5.setNull(115, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(115, out10.noodlecrm__trackingnumber__c);
}

                    if(out10.noodlecrm__time_zone__c == null) {
pstmt_tDBOutput_5.setNull(116, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(116, out10.noodlecrm__time_zone__c);
}

                    if(out10.noodlecrm__do_not_call__c == null) {
pstmt_tDBOutput_5.setNull(117, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(117, out10.noodlecrm__do_not_call__c);
}

                    if(out10.probability == null) {
pstmt_tDBOutput_5.setNull(118, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_5.setDouble(118, out10.probability);
}

                    if(out10.noodlecrm__tran_3__c == null) {
pstmt_tDBOutput_5.setNull(119, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(119, out10.noodlecrm__tran_3__c);
}

                    if(out10.noodlecrm__delivery_timestamp_idata__c != null) {
pstmt_tDBOutput_5.setTimestamp(120, new java.sql.Timestamp(out10.noodlecrm__delivery_timestamp_idata__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(120, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__last_contacting_state__c == null) {
pstmt_tDBOutput_5.setNull(121, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(121, out10.noodlecrm__last_contacting_state__c);
}

                    if(out10.noodlecrm__test_requirements__c == null) {
pstmt_tDBOutput_5.setNull(122, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(122, out10.noodlecrm__test_requirements__c);
}

                    if(out10.noodlecrm__decision_type__c == null) {
pstmt_tDBOutput_5.setNull(123, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(123, out10.noodlecrm__decision_type__c);
}

                    if(out10.noodlecrm__admit_cohort__c == null) {
pstmt_tDBOutput_5.setNull(124, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(124, out10.noodlecrm__admit_cohort__c);
}

                    if(out10.noodlecrm__tran_2__c == null) {
pstmt_tDBOutput_5.setNull(125, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(125, out10.noodlecrm__tran_2__c);
}

                    if(out10.noodlecrm__email__c == null) {
pstmt_tDBOutput_5.setNull(126, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(126, out10.noodlecrm__email__c);
}

                    if(out10.noodlecrm__university_scholarship_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(127, new java.sql.Timestamp(out10.noodlecrm__university_scholarship_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(127, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__revised_start_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(128, new java.sql.Timestamp(out10.noodlecrm__revised_start_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(128, java.sql.Types.TIMESTAMP);
}

                    if(out10.createddate != null) {
pstmt_tDBOutput_5.setTimestamp(129, new java.sql.Timestamp(out10.createddate.getTime()));
} else {
pstmt_tDBOutput_5.setNull(129, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__submit_cohort__c == null) {
pstmt_tDBOutput_5.setNull(130, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(130, out10.noodlecrm__submit_cohort__c);
}

                    if(out10.isclosed == null) {
pstmt_tDBOutput_5.setNull(131, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(131, out10.isclosed);
}

                    if(out10.noodlecrm__condition_type__c == null) {
pstmt_tDBOutput_5.setNull(132, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(132, out10.noodlecrm__condition_type__c);
}

                    if(out10.noodlecrm__opportunity_status__c == null) {
pstmt_tDBOutput_5.setNull(133, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(133, out10.noodlecrm__opportunity_status__c);
}

                    if(out10.noodlecrm__class_schedule_type__c == null) {
pstmt_tDBOutput_5.setNull(134, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(134, out10.noodlecrm__class_schedule_type__c);
}

                    if(out10.noodlecrm__lead_stated_licensure__c == null) {
pstmt_tDBOutput_5.setNull(135, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(135, out10.noodlecrm__lead_stated_licensure__c);
}

                    if(out10.noodlecrm__student__c == null) {
pstmt_tDBOutput_5.setNull(136, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(136, out10.noodlecrm__student__c);
}

                    if(out10.noodlecrm__university_application_id__c == null) {
pstmt_tDBOutput_5.setNull(137, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(137, out10.noodlecrm__university_application_id__c);
}

                    if(out10.leadsource == null) {
pstmt_tDBOutput_5.setNull(138, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(138, out10.leadsource);
}

                    if(out10.noodlecrm__updated__c != null) {
pstmt_tDBOutput_5.setTimestamp(139, new java.sql.Timestamp(out10.noodlecrm__updated__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(139, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__utm_term__c == null) {
pstmt_tDBOutput_5.setNull(140, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(140, out10.noodlecrm__utm_term__c);
}

                    if(out10.noodlecrm__tran_1__c == null) {
pstmt_tDBOutput_5.setNull(141, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(141, out10.noodlecrm__tran_1__c);
}

                    if(out10.noodlecrm__google_analytics_id__c == null) {
pstmt_tDBOutput_5.setNull(142, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(142, out10.noodlecrm__google_analytics_id__c);
}

                    if(out10.amount == null) {
pstmt_tDBOutput_5.setNull(143, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_5.setDouble(143, out10.amount);
}

                    if(out10.noodlecrm__crm_id__c == null) {
pstmt_tDBOutput_5.setNull(144, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(144, out10.noodlecrm__crm_id__c);
}

                    if(out10.noodlecrm__lead_stated_taken_course__c == null) {
pstmt_tDBOutput_5.setNull(145, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(145, out10.noodlecrm__lead_stated_taken_course__c);
}

                    if(out10.noodlecrm__ip_address__c == null) {
pstmt_tDBOutput_5.setNull(146, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(146, out10.noodlecrm__ip_address__c);
}

                    if(out10.noodlecrm__total_calls__c == null) {
pstmt_tDBOutput_5.setNull(147, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_5.setDouble(147, out10.noodlecrm__total_calls__c);
}

                    if(out10.noodlecrm__university_id_number__c == null) {
pstmt_tDBOutput_5.setNull(148, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(148, out10.noodlecrm__university_id_number__c);
}

                    if(out10.noodlecrm__decision__c == null) {
pstmt_tDBOutput_5.setNull(149, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(149, out10.noodlecrm__decision__c);
}

                    if(out10.noodlecrm__test_status_gre__c == null) {
pstmt_tDBOutput_5.setNull(150, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(150, out10.noodlecrm__test_status_gre__c);
}

                    if(out10.forecastcategory == null) {
pstmt_tDBOutput_5.setNull(151, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(151, out10.forecastcategory);
}

                    if(out10.noodlecrm__attended_zoom__c == null) {
pstmt_tDBOutput_5.setNull(152, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(152, out10.noodlecrm__attended_zoom__c);
}

                    if(out10.noodlecrm__fafsa__c == null) {
pstmt_tDBOutput_5.setNull(153, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(153, out10.noodlecrm__fafsa__c);
}

                    if(out10.noodlecrm__level_of_education__c == null) {
pstmt_tDBOutput_5.setNull(154, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(154, out10.noodlecrm__level_of_education__c);
}

                    if(out10.noodlecrm__ea_projected_deposit_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(155, new java.sql.Timestamp(out10.noodlecrm__ea_projected_deposit_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(155, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__currentgenerators__c == null) {
pstmt_tDBOutput_5.setNull(156, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(156, out10.noodlecrm__currentgenerators__c);
}

                    if(out10.noodlecrm__defer_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(157, new java.sql.Timestamp(out10.noodlecrm__defer_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(157, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__lead_stated_taken_course_req__c == null) {
pstmt_tDBOutput_5.setNull(158, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(158, out10.noodlecrm__lead_stated_taken_course_req__c);
}

                    if(out10.noodlecrm__follow_up_reason__c == null) {
pstmt_tDBOutput_5.setNull(159, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(159, out10.noodlecrm__follow_up_reason__c);
}

                    if(out10.noodlecrm__will_not_apply_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(160, new java.sql.Timestamp(out10.noodlecrm__will_not_apply_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(160, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__trying_attempt_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(161, new java.sql.Timestamp(out10.noodlecrm__trying_attempt_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(161, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__gpa__c == null) {
pstmt_tDBOutput_5.setNull(162, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(162, out10.noodlecrm__gpa__c);
}

                    if(out10.noodlecrm__fa_comments__c == null) {
pstmt_tDBOutput_5.setNull(163, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(163, out10.noodlecrm__fa_comments__c);
}

                    if(out10.createdbyid == null) {
pstmt_tDBOutput_5.setNull(164, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(164, out10.createdbyid);
}

                    if(out10.type == null) {
pstmt_tDBOutput_5.setNull(165, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(165, out10.type);
}

                    if(out10.noodlecrm__first_name__c == null) {
pstmt_tDBOutput_5.setNull(166, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(166, out10.noodlecrm__first_name__c);
}

                    if(out10.pricebook2id == null) {
pstmt_tDBOutput_5.setNull(167, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(167, out10.pricebook2id);
}

                    if(out10.contactid == null) {
pstmt_tDBOutput_5.setNull(168, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(168, out10.contactid);
}

                    if(out10.noodlecrm__contact_type__c == null) {
pstmt_tDBOutput_5.setNull(169, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(169, out10.noodlecrm__contact_type__c);
}

                    if(out10.noodlecrm__conversion_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(170, new java.sql.Timestamp(out10.noodlecrm__conversion_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(170, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__ordernumber__c == null) {
pstmt_tDBOutput_5.setNull(171, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(171, out10.noodlecrm__ordernumber__c);
}

                    if(out10.fiscalyear == null) {
pstmt_tDBOutput_5.setNull(172, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(172, out10.fiscalyear);
}

                    if(out10.noodlecrm__defer_start_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(173, new java.sql.Timestamp(out10.noodlecrm__defer_start_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(173, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__postalcode__c == null) {
pstmt_tDBOutput_5.setNull(174, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(174, out10.noodlecrm__postalcode__c);
}

                    if(out10.noodlecrm__re_open__c == null) {
pstmt_tDBOutput_5.setNull(175, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(175, out10.noodlecrm__re_open__c);
}

                    if(out10.noodlecrm__applying_to_a_competitor_type__c == null) {
pstmt_tDBOutput_5.setNull(176, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(176, out10.noodlecrm__applying_to_a_competitor_type__c);
}

                    if(out10.noodlecrm__app_complete_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(177, new java.sql.Timestamp(out10.noodlecrm__app_complete_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(177, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__country__c == null) {
pstmt_tDBOutput_5.setNull(178, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(178, out10.noodlecrm__country__c);
}

                    if(out10.description == null) {
pstmt_tDBOutput_5.setNull(179, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(179, out10.description);
}

                    if(out10.noodlecrm__application_program__c == null) {
pstmt_tDBOutput_5.setNull(180, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(180, out10.noodlecrm__application_program__c);
}

                    if(out10.noodlecrm__decline_date__c != null) {
pstmt_tDBOutput_5.setTimestamp(181, new java.sql.Timestamp(out10.noodlecrm__decline_date__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(181, java.sql.Types.TIMESTAMP);
}

                    if(out10.lastreferenceddate != null) {
pstmt_tDBOutput_5.setTimestamp(182, new java.sql.Timestamp(out10.lastreferenceddate.getTime()));
} else {
pstmt_tDBOutput_5.setNull(182, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__temperature__c == null) {
pstmt_tDBOutput_5.setNull(183, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(183, out10.noodlecrm__temperature__c);
}

                    if(out10.noodlecrm__competitor_university_2__c == null) {
pstmt_tDBOutput_5.setNull(184, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(184, out10.noodlecrm__competitor_university_2__c);
}

                    if(out10.noodlecrm__course_requirements__c == null) {
pstmt_tDBOutput_5.setNull(185, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(185, out10.noodlecrm__course_requirements__c);
}

                    if(out10.fiscal == null) {
pstmt_tDBOutput_5.setNull(186, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(186, out10.fiscal);
}

                    if(out10.noodlecrm__last_name__c == null) {
pstmt_tDBOutput_5.setNull(187, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(187, out10.noodlecrm__last_name__c);
}

                    if(out10.noodlecrm__sop__c == null) {
pstmt_tDBOutput_5.setNull(188, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(188, out10.noodlecrm__sop__c);
}

                    if(out10.noodlecrm__competitor_university_1__c == null) {
pstmt_tDBOutput_5.setNull(189, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(189, out10.noodlecrm__competitor_university_1__c);
}

                    if(out10.noodlecrm__bad_lead_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(190, new java.sql.Timestamp(out10.noodlecrm__bad_lead_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(190, java.sql.Types.TIMESTAMP);
}

                    if(out10.nextstep == null) {
pstmt_tDBOutput_5.setNull(191, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(191, out10.nextstep);
}

                    if(out10.noodlecrm__signed_up_for_webinar__c == null) {
pstmt_tDBOutput_5.setNull(192, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(192, out10.noodlecrm__signed_up_for_webinar__c);
}

                    if(out10.sfid == null) {
pstmt_tDBOutput_5.setNull(193, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(193, out10.sfid);
}

                    pstmt_tDBOutput_5.setInt(194, out10.id);

                    if(out10.noodlecrm__preferred_phone__c == null) {
pstmt_tDBOutput_5.setNull(195, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(195, out10.noodlecrm__preferred_phone__c);
}

                    if(out10.noodlecrm__program3__c == null) {
pstmt_tDBOutput_5.setNull(196, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(196, out10.noodlecrm__program3__c);
}

                    if(out10.noodlecrm__missed_attempt_counter2__c == null) {
pstmt_tDBOutput_5.setNull(197, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_5.setDouble(197, out10.noodlecrm__missed_attempt_counter2__c);
}

                    if(out10.noodlecrm__university_app_crmid__c == null) {
pstmt_tDBOutput_5.setNull(198, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(198, out10.noodlecrm__university_app_crmid__c);
}

                    if(out10.noodlecrm__last_call_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(199, new java.sql.Timestamp(out10.noodlecrm__last_call_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(199, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__program2__r__noodlecrm__external_id__c == null) {
pstmt_tDBOutput_5.setNull(200, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(200, out10.noodlecrm__program2__r__noodlecrm__external_id__c);
}

                    if(out10.noodlecrm__program3__r__noodlecrm__external_id__c == null) {
pstmt_tDBOutput_5.setNull(201, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(201, out10.noodlecrm__program3__r__noodlecrm__external_id__c);
}

                    if(out10.noodlecrm__app_start_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(202, new java.sql.Timestamp(out10.noodlecrm__app_start_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(202, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__historical_call_count__c == null) {
pstmt_tDBOutput_5.setNull(203, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_5.setDouble(203, out10.noodlecrm__historical_call_count__c);
}

                    if(out10.noodlecrm__revised_start_cohort__c == null) {
pstmt_tDBOutput_5.setNull(204, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(204, out10.noodlecrm__revised_start_cohort__c);
}

                    if(out10.noodlecrm__app_enrolled_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(205, new java.sql.Timestamp(out10.noodlecrm__app_enrolled_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(205, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__external_id_unique__c == null) {
pstmt_tDBOutput_5.setNull(206, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(206, out10.noodlecrm__external_id_unique__c);
}

                    if(out10.noodlecrm__preferred_email__c == null) {
pstmt_tDBOutput_5.setNull(207, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(207, out10.noodlecrm__preferred_email__c);
}

                    if(out10.noodlecrm__student_contact__c == null) {
pstmt_tDBOutput_5.setNull(208, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(208, out10.noodlecrm__student_contact__c);
}

                    if(out10.noodlecrm__decision_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(209, new java.sql.Timestamp(out10.noodlecrm__decision_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(209, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__final_start_cohort__c == null) {
pstmt_tDBOutput_5.setNull(210, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(210, out10.noodlecrm__final_start_cohort__c);
}

                    if(out10.noodlecrm__app_complete_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(211, new java.sql.Timestamp(out10.noodlecrm__app_complete_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(211, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__app_submit_date_time__c != null) {
pstmt_tDBOutput_5.setTimestamp(212, new java.sql.Timestamp(out10.noodlecrm__app_submit_date_time__c.getTime()));
} else {
pstmt_tDBOutput_5.setNull(212, java.sql.Types.TIMESTAMP);
}

                    if(out10.noodlecrm__application_indicated_start_cohort__c == null) {
pstmt_tDBOutput_5.setNull(213, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(213, out10.noodlecrm__application_indicated_start_cohort__c);
}

                    if(out10.noodlecrm__engagement_status__c == null) {
pstmt_tDBOutput_5.setNull(214, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(214, out10.noodlecrm__engagement_status__c);
}

                    if(out10.noodlecrm__is_test_record__c == null) {
pstmt_tDBOutput_5.setNull(215, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(215, out10.noodlecrm__is_test_record__c);
}

                    if(out10.noodlecrm__first_inquiry_action__c == null) {
pstmt_tDBOutput_5.setNull(216, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(216, out10.noodlecrm__first_inquiry_action__c);
}

			
    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
            if(!whetherReject_tDBOutput_5) {
            }
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    	int countSum_tDBOutput_5 = 0;
						for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
						
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    	System.err.println(errormessage_tDBOutput_5);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "out10"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_5!=null) {
				    	CsvWritertFileOutputDelimited_5.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_5_NB_LINE",nb_line_tFileOutputDelimited_5);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_5", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out9");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_5", true);
end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk67", 0, "ok");
				}
				tFileArchive_5Process(globalMap);



/**
 * [tFileOutputDelimited_5 end ] stop
 */




	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    	int countSum_tDBOutput_5 = 0;
			for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
				countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
			}
			
	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
	    	
	    	System.err.println(errormessage_tDBOutput_5);
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out10");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk70", 0, "ok");
				}
				tJava_24Process(globalMap);



/**
 * [tDBOutput_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	


		if(resourceMap.get("finish_tFileOutputDelimited_5") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_5");
					
						if(CsvWritertFileOutputDelimited_5!=null) {
					    	CsvWritertFileOutputDelimited_5.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_5 finally ] stop
 */




	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_5", false);
		start_Hash.put("tFileArchive_5", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_5";

	
		int tos_count_tFileArchive_5 = 0;
		

 



/**
 * [tFileArchive_5 begin ] stop
 */
	
	/**
	 * [tFileArchive_5 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_5";

	

	

		String sourceFile_tFileArchive_5 = context.staging_S3_dir + "opportunity.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_5), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_5 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_5 = context.staging_S3_dir + "opportunity.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_5 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_5, zipFile_tFileArchive_5);
    zip_tFileArchive_5.setOverwriteExistTargetZip(true);
	zip_tFileArchive_5.setMakeTargetDir(true);
	zip_tFileArchive_5.setCompressLevel(9);
	zip_tFileArchive_5.setArchiveFormat("gzip");
	zip_tFileArchive_5.setAllFiles(true);
	
	
		zip_tFileArchive_5.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_5_ARCHIVE_FILEPATH",zipFile_tFileArchive_5);
   
   globalMap.put("tFileArchive_5_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_5).getName());

   zip_tFileArchive_5.doZip();


 


	tos_count_tFileArchive_5++;

/**
 * [tFileArchive_5 main ] stop
 */
	
	/**
	 * [tFileArchive_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_5";

	

 



/**
 * [tFileArchive_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_5";

	

 



/**
 * [tFileArchive_5 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_5 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_5";

	

 

ok_Hash.put("tFileArchive_5", true);
end_Hash.put("tFileArchive_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk68", 0, "ok");
				}
				tS3Put_5Process(globalMap);



/**
 * [tFileArchive_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_5 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_5";

	

 



/**
 * [tFileArchive_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_5_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_5", false);
		start_Hash.put("tS3Put_5", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_5";

	
		int tos_count_tS3Put_5 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_5 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_5 = context.nd_s3_data_lake_path_sfdc +"/opportunity/latest/university_id="+context.university_code+"/opportunity.csv.gz";
	
	int partSizeInBytes_tS3Put_5 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_5 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_5 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_5 = context.staging_S3_dir + "opportunity.csv.gz";
	
	boolean useStream_tS3Put_5 = false;
	java.io.InputStream uploadStream_tS3Put_5 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_5 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_5 instanceof String){
		    useStream_tS3Put_5 = false;
		}else if(fileOrStream_tS3Put_5 instanceof java.io.InputStream){
		    useStream_tS3Put_5 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_5 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_5) {
				java.io.File inputFile_tS3Put_5 = new java.io.File((String)fileOrStream_tS3Put_5);
				
				long multipart_upload_threshold_tS3Put_5 = 5 * 1024 * 1024;
				
    		tm_tS3Put_5 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_5)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_5)
    			.withS3Client(conn_tS3Put_5)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_5 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_5, inputFile_tS3Put_5).withMetadata(objectMetadata_tS3Put_5);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_5 = tm_tS3Put_5.upload(putRequest_tS3Put_5);
  		
  			upload_tS3Put_5.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_5 = ((java.io.InputStream)fileOrStream_tS3Put_5);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_5 = new S3StreamUtil();
    		byte[] buffer_tS3Put_5 = new byte[partSizeInBytes_tS3Put_5];
    		sourceStream_tS3Put_5.read(buffer_tS3Put_5);
    		long curPartSize_tS3Put_5 = streamUtil_tS3Put_5.getLength(buffer_tS3Put_5);
    		boolean multiUpload_tS3Put_5 = curPartSize_tS3Put_5 == partSizeInBytes_tS3Put_5;
    		
    		if(!multiUpload_tS3Put_5) {
    				objectMetadata_tS3Put_5.setContentLength(curPartSize_tS3Put_5);
    				uploadStream_tS3Put_5 = new java.io.ByteArrayInputStream(buffer_tS3Put_5,0,Long.valueOf(curPartSize_tS3Put_5).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_5 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_5, uploadStream_tS3Put_5, objectMetadata_tS3Put_5);
			
    				
    				

    				
    				conn_tS3Put_5.putObject(putRequest_tS3Put_5);
    		} else {
    				uploadStream_tS3Put_5 = new java.io.ByteArrayInputStream(buffer_tS3Put_5);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_5 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_5 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_5, objectMetadata_tS3Put_5);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_5 = conn_tS3Put_5.initiateMultipartUpload(putRequest_tS3Put_5);
      			String uploadId_tS3Put_5 = initResponse_tS3Put_5.getUploadId();
      			int partNumber_tS3Put_5 = 1;
      			boolean streamHasNext_tS3Put_5 = true;
      			byte[] probeAvailability_tS3Put_5 = new byte[1];
				try {
					while (streamHasNext_tS3Put_5) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_5 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_5)
						.withUploadId(uploadId_tS3Put_5)
                    	.withPartNumber(partNumber_tS3Put_5)
						.withPartSize(curPartSize_tS3Put_5);
            		    uploadRequest_tS3Put_5.setInputStream(uploadStream_tS3Put_5);
            		    streamHasNext_tS3Put_5 = sourceStream_tS3Put_5.read(probeAvailability_tS3Put_5) != -1;
            		    if(!streamHasNext_tS3Put_5){
                    	    uploadRequest_tS3Put_5.setLastPart(true);
                    	}

                		partTags_tS3Put_5.add(conn_tS3Put_5.uploadPart(uploadRequest_tS3Put_5).getPartETag());
                  	    partNumber_tS3Put_5++;

          		     	if(uploadStream_tS3Put_5!=null){
      		         			uploadStream_tS3Put_5.close();
          		     	}
          		     	buffer_tS3Put_5 = new byte[partSizeInBytes_tS3Put_5];
          		     	sourceStream_tS3Put_5.read(buffer_tS3Put_5,1,partSizeInBytes_tS3Put_5-1);
          		     	buffer_tS3Put_5[0] = probeAvailability_tS3Put_5[0];
          		     	probeAvailability_tS3Put_5 = new byte[1];
          		     	curPartSize_tS3Put_5 = streamUtil_tS3Put_5.getLength(buffer_tS3Put_5);
          		     	uploadStream_tS3Put_5 = new java.io.ByteArrayInputStream(buffer_tS3Put_5);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_5 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_5,
                        uploadId_tS3Put_5, partTags_tS3Put_5);
            		conn_tS3Put_5.completeMultipartUpload(compRequest_tS3Put_5);
            } catch (java.lang.Exception uploadException_tS3Put_5) {
  							conn_tS3Put_5.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_5, uploadId_tS3Put_5));
    						throw uploadException_tS3Put_5;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_5){
		
			throw(e_tS3Put_5);
		
	}finally{
		if(useStream_tS3Put_5 && uploadStream_tS3Put_5!=null){
    	uploadStream_tS3Put_5.close();
    }
    
    if(tm_tS3Put_5 != null){
        tm_tS3Put_5.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_5 begin ] stop
 */
	
	/**
	 * [tS3Put_5 main ] start
	 */

	

	
	
	currentComponent="tS3Put_5";

	

 


	tos_count_tS3Put_5++;

/**
 * [tS3Put_5 main ] stop
 */
	
	/**
	 * [tS3Put_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_5";

	

 



/**
 * [tS3Put_5 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_5";

	

 



/**
 * [tS3Put_5 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_5 end ] start
	 */

	

	
	
	currentComponent="tS3Put_5";

	

 

ok_Hash.put("tS3Put_5", true);
end_Hash.put("tS3Put_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk69", 0, "ok");
				}
				tJava_23Process(globalMap);



/**
 * [tS3Put_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_5 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_5";

	

 



/**
 * [tS3Put_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_5_SUBPROCESS_STATE", 1);
	}
	

public void tJava_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_23", false);
		start_Hash.put("tJava_23", System.currentTimeMillis());
		
	
	currentComponent="tJava_23";

	
		int tos_count_tJava_23 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_23 begin ] stop
 */
	
	/**
	 * [tJava_23 main ] start
	 */

	

	
	
	currentComponent="tJava_23";

	

 


	tos_count_tJava_23++;

/**
 * [tJava_23 main ] stop
 */
	
	/**
	 * [tJava_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_23";

	

 



/**
 * [tJava_23 process_data_begin ] stop
 */
	
	/**
	 * [tJava_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_23";

	

 



/**
 * [tJava_23 process_data_end ] stop
 */
	
	/**
	 * [tJava_23 end ] start
	 */

	

	
	
	currentComponent="tJava_23";

	

 

ok_Hash.put("tJava_23", true);
end_Hash.put("tJava_23", System.currentTimeMillis());




/**
 * [tJava_23 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_23 finally ] start
	 */

	

	
	
	currentComponent="tJava_23";

	

 



/**
 * [tJava_23 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_23_SUBPROCESS_STATE", 1);
	}
	

public void tJava_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_24", false);
		start_Hash.put("tJava_24", System.currentTimeMillis());
		
	
	currentComponent="tJava_24";

	
		int tos_count_tJava_24 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_5_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");
 



/**
 * [tJava_24 begin ] stop
 */
	
	/**
	 * [tJava_24 main ] start
	 */

	

	
	
	currentComponent="tJava_24";

	

 


	tos_count_tJava_24++;

/**
 * [tJava_24 main ] stop
 */
	
	/**
	 * [tJava_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_24";

	

 



/**
 * [tJava_24 process_data_begin ] stop
 */
	
	/**
	 * [tJava_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_24";

	

 



/**
 * [tJava_24 process_data_end ] stop
 */
	
	/**
	 * [tJava_24 end ] start
	 */

	

	
	
	currentComponent="tJava_24";

	

 

ok_Hash.put("tJava_24", true);
end_Hash.put("tJava_24", System.currentTimeMillis());




/**
 * [tJava_24 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_24 finally ] start
	 */

	

	
	
	currentComponent="tJava_24";

	

 



/**
 * [tJava_24 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_24_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_8", false);
		start_Hash.put("tS3Copy_8", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_8";

	
		int tos_count_tS3Copy_8 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_8 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_8 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_8 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_8 = null;
		
		
		final String from_bucket_tS3Copy_8 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_8 = context.nd_s3_data_lake_path_sfdc+"/recordtype/latest/university_id="+context.university_code+"/recordtype.csv.gz";
		final String to_bucket_tS3Copy_8 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_8 = context.nd_s3_data_lake_path_sfdc+"/recordtype/archive/university_id="+context.university_code+"/recordtype_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_8 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_8, from_key_tS3Copy_8);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_8 = conn_tS3Copy_8.getObjectMetadata(metadataRequest_tS3Copy_8);
    long objectSize_tS3Copy_8 = metadataResult_tS3Copy_8.getContentLength();
    
    boolean multiUpload_tS3Copy_8 = objectSize_tS3Copy_8 > maxBytes4SingleCopyCall_tS3Copy_8;
    
    if(!multiUpload_tS3Copy_8) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_8 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_8, from_key_tS3Copy_8, to_bucket_tS3Copy_8, to_key_tS3Copy_8);
    		if(objectMetadata_tS3Copy_8 != null) {
    				putRequest_tS3Copy_8.setNewObjectMetadata(objectMetadata_tS3Copy_8);
    		}
    		
    		

    		
    		conn_tS3Copy_8.copyObject(putRequest_tS3Copy_8);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_8 = metadataResult_tS3Copy_8.getUserMetadata();
						if((userMetadata_tS3Copy_8!=null) && userMetadata_tS3Copy_8.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_8 = null;
    				if(objectMetadata_tS3Copy_8 != null) {
    						putRequest_tS3Copy_8 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_8, to_key_tS3Copy_8, objectMetadata_tS3Copy_8);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_8 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_8, to_key_tS3Copy_8, metadataResult_tS3Copy_8);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_8 = conn_tS3Copy_8.initiateMultipartUpload(putRequest_tS3Copy_8);
            
            long bytePosition_tS3Copy_8 = 0;
            int partNum_tS3Copy_8 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_8 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_8 < objectSize_tS3Copy_8) {
                long lastByte_tS3Copy_8 = java.lang.Math.min(bytePosition_tS3Copy_8 + partSizeInBytes_tS3Copy_8 - 1, objectSize_tS3Copy_8 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_8 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_8)
                        .withSourceKey(from_key_tS3Copy_8)
                        .withDestinationBucketName(to_bucket_tS3Copy_8)
                        .withDestinationKey(to_key_tS3Copy_8)
                        .withUploadId(initResult_tS3Copy_8.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_8)
                        .withLastByte(lastByte_tS3Copy_8)
                        .withPartNumber(partNum_tS3Copy_8++);
                partTags_tS3Copy_8.add(conn_tS3Copy_8.copyPart(copyPartRequest_tS3Copy_8).getPartETag());
                bytePosition_tS3Copy_8 += partSizeInBytes_tS3Copy_8;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_8 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_8,
                                                                        to_key_tS3Copy_8, 
                                                                        initResult_tS3Copy_8.getUploadId(),
                                                                        partTags_tS3Copy_8);
            conn_tS3Copy_8.completeMultipartUpload(completeRequest_tS3Copy_8);
    		} catch (java.lang.Exception uploadException_tS3Copy_8) {
    				conn_tS3Copy_8.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_8, to_key_tS3Copy_8, initResult_tS3Copy_8.getUploadId()));
    				throw uploadException_tS3Copy_8;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_8){
		
			System.err.println(e_tS3Copy_8.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_8 begin ] stop
 */
	
	/**
	 * [tS3Copy_8 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_8";

	

 


	tos_count_tS3Copy_8++;

/**
 * [tS3Copy_8 main ] stop
 */
	
	/**
	 * [tS3Copy_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_8";

	

 



/**
 * [tS3Copy_8 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_8";

	

 



/**
 * [tS3Copy_8 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_8 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_8";

	

 

ok_Hash.put("tS3Copy_8", true);
end_Hash.put("tS3Copy_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk78", 0, "ok");
				}
				tJava_27Process(globalMap);



/**
 * [tS3Copy_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Copy_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tS3Copy_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_8 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_8";

	

 



/**
 * [tS3Copy_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_8_SUBPROCESS_STATE", 1);
	}
	

public void tJava_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_27", false);
		start_Hash.put("tJava_27", System.currentTimeMillis());
		
	
	currentComponent="tJava_27";

	
		int tos_count_tJava_27 = 0;
		


System.out.println("Step 0: Running For Recordtype Object");
System.out.println("Step 1: Copied Previous Run File To Archive");
 



/**
 * [tJava_27 begin ] stop
 */
	
	/**
	 * [tJava_27 main ] start
	 */

	

	
	
	currentComponent="tJava_27";

	

 


	tos_count_tJava_27++;

/**
 * [tJava_27 main ] stop
 */
	
	/**
	 * [tJava_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_27";

	

 



/**
 * [tJava_27 process_data_begin ] stop
 */
	
	/**
	 * [tJava_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_27";

	

 



/**
 * [tJava_27 process_data_end ] stop
 */
	
	/**
	 * [tJava_27 end ] start
	 */

	

	
	
	currentComponent="tJava_27";

	

 

ok_Hash.put("tJava_27", true);
end_Hash.put("tJava_27", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk79", 0, "ok");
				}
				tS3Delete_8Process(globalMap);



/**
 * [tJava_27 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_27 finally ] start
	 */

	

	
	
	currentComponent="tJava_27";

	

 



/**
 * [tJava_27 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_27_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_8", false);
		start_Hash.put("tS3Delete_8", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_8";

	
		int tos_count_tS3Delete_8 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_8 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_8 = context.nd_s3_data_lake_path_sfdc +"/recordtype/latest/university_id="+context.university_code+"/recordtype.csv.gz";
		if(key_tS3Delete_8!=null && key_tS3Delete_8.trim().length()>0){
			
			conn_tS3Delete_8.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_8);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_8){
		
			System.err.println(e_tS3Delete_8.getMessage());
		
	}
	
 



/**
 * [tS3Delete_8 begin ] stop
 */
	
	/**
	 * [tS3Delete_8 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_8";

	

 


	tos_count_tS3Delete_8++;

/**
 * [tS3Delete_8 main ] stop
 */
	
	/**
	 * [tS3Delete_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_8";

	

 



/**
 * [tS3Delete_8 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_8";

	

 



/**
 * [tS3Delete_8 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_8 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_8";

	

 

ok_Hash.put("tS3Delete_8", true);
end_Hash.put("tS3Delete_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk80", 0, "ok");
				}
				tJava_28Process(globalMap);



/**
 * [tS3Delete_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_8 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_8";

	

 



/**
 * [tS3Delete_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_8_SUBPROCESS_STATE", 1);
	}
	

public void tJava_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_28", false);
		start_Hash.put("tJava_28", System.currentTimeMillis());
		
	
	currentComponent="tJava_28";

	
		int tos_count_tJava_28 = 0;
		


System.out.println("Step 2: Deleted Previous Run File From Latest Folder");
System.out.println("Step 3: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_28 begin ] stop
 */
	
	/**
	 * [tJava_28 main ] start
	 */

	

	
	
	currentComponent="tJava_28";

	

 


	tos_count_tJava_28++;

/**
 * [tJava_28 main ] stop
 */
	
	/**
	 * [tJava_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_28";

	

 



/**
 * [tJava_28 process_data_begin ] stop
 */
	
	/**
	 * [tJava_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_28";

	

 



/**
 * [tJava_28 process_data_end ] stop
 */
	
	/**
	 * [tJava_28 end ] start
	 */

	

	
	
	currentComponent="tJava_28";

	

 

ok_Hash.put("tJava_28", true);
end_Hash.put("tJava_28", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk84", 0, "ok");
				}
				tDBInput_6Process(globalMap);



/**
 * [tJava_28 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_28 finally ] start
	 */

	

	
	
	currentComponent="tJava_28";

	

 



/**
 * [tJava_28 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_28_SUBPROCESS_STATE", 1);
	}
	


public static class out11Struct implements routines.system.IPersistableRow<out11Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String developername;

				public String getDevelopername () {
					return this.developername;
				}
				
			    public Boolean isactive;

				public Boolean getIsactive () {
					return this.isactive;
				}
				
			    public String sobjecttype;

				public String getSobjecttype () {
					return this.sobjecttype;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String namespaceprefix;

				public String getNamespaceprefix () {
					return this.namespaceprefix;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out11Struct other = (out11Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out11Struct other) {

		other.createddate = this.createddate;
	            other.name = this.name;
	            other.systemmodstamp = this.systemmodstamp;
	            other.description = this.description;
	            other.developername = this.developername;
	            other.isactive = this.isactive;
	            other.sobjecttype = this.sobjecttype;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            other.namespaceprefix = this.namespaceprefix;
	            
	}

	public void copyKeysDataTo(out11Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.createddate = readDate(dis);
					
					this.name = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.description = readString(dis);
					
					this.developername = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isactive = null;
           				} else {
           			    	this.isactive = dis.readBoolean();
           				}
					
					this.sobjecttype = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.namespaceprefix = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.developername,dos);
					
					// Boolean
				
						if(this.isactive == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isactive);
		            	}
					
					// String
				
						writeString(this.sobjecttype,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.namespaceprefix,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("createddate="+String.valueOf(createddate));
		sb.append(",name="+name);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",description="+description);
		sb.append(",developername="+developername);
		sb.append(",isactive="+String.valueOf(isactive));
		sb.append(",sobjecttype="+sobjecttype);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",namespaceprefix="+namespaceprefix);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out12Struct implements routines.system.IPersistableRow<out12Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String developername;

				public String getDevelopername () {
					return this.developername;
				}
				
			    public Boolean isactive;

				public Boolean getIsactive () {
					return this.isactive;
				}
				
			    public String sobjecttype;

				public String getSobjecttype () {
					return this.sobjecttype;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String namespaceprefix;

				public String getNamespaceprefix () {
					return this.namespaceprefix;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out12Struct other = (out12Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out12Struct other) {

		other.createddate = this.createddate;
	            other.name = this.name;
	            other.systemmodstamp = this.systemmodstamp;
	            other.description = this.description;
	            other.developername = this.developername;
	            other.isactive = this.isactive;
	            other.sobjecttype = this.sobjecttype;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            other.namespaceprefix = this.namespaceprefix;
	            
	}

	public void copyKeysDataTo(out12Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.createddate = readDate(dis);
					
					this.name = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.description = readString(dis);
					
					this.developername = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isactive = null;
           				} else {
           			    	this.isactive = dis.readBoolean();
           				}
					
					this.sobjecttype = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.namespaceprefix = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.developername,dos);
					
					// Boolean
				
						if(this.isactive == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isactive);
		            	}
					
					// String
				
						writeString(this.sobjecttype,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.namespaceprefix,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("createddate="+String.valueOf(createddate));
		sb.append(",name="+name);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",description="+description);
		sb.append(",developername="+developername);
		sb.append(",isactive="+String.valueOf(isactive));
		sb.append(",sobjecttype="+sobjecttype);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",namespaceprefix="+namespaceprefix);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String developername;

				public String getDevelopername () {
					return this.developername;
				}
				
			    public Boolean isactive;

				public Boolean getIsactive () {
					return this.isactive;
				}
				
			    public String sobjecttype;

				public String getSobjecttype () {
					return this.sobjecttype;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String namespaceprefix;

				public String getNamespaceprefix () {
					return this.namespaceprefix;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.createddate = readDate(dis);
					
					this.name = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.description = readString(dis);
					
					this.developername = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isactive = null;
           				} else {
           			    	this.isactive = dis.readBoolean();
           				}
					
					this.sobjecttype = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.namespaceprefix = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.developername,dos);
					
					// Boolean
				
						if(this.isactive == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isactive);
		            	}
					
					// String
				
						writeString(this.sobjecttype,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.namespaceprefix,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("createddate="+String.valueOf(createddate));
		sb.append(",name="+name);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",description="+description);
		sb.append(",developername="+developername);
		sb.append(",isactive="+String.valueOf(isactive));
		sb.append(",sobjecttype="+sobjecttype);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",namespaceprefix="+namespaceprefix);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
out11Struct out11 = new out11Struct();
out12Struct out12 = new out12Struct();





	
	/**
	 * [tFileOutputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_6", false);
		start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out11");
					}
				
		int tos_count_tFileOutputDelimited_6 = 0;
		

String fileName_tFileOutputDelimited_6 = "";
    fileName_tFileOutputDelimited_6 = (new java.io.File(context.staging_S3_dir + "recordtype.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_6 = null;
    String extension_tFileOutputDelimited_6 = null;
    String directory_tFileOutputDelimited_6 = null;
    if((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
            extension_tFileOutputDelimited_6 = "";
        } else {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("."));
            extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("."));
            extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
            extension_tFileOutputDelimited_6 = "";
        }
        directory_tFileOutputDelimited_6 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_6 = true;
    java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
    globalMap.put("tFileOutputDelimited_6_FILE_NAME",fileName_tFileOutputDelimited_6);
                String[] headColutFileOutputDelimited_6=new String[10];
            class CSVBasicSet_tFileOutputDelimited_6{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_6[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_6 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_6[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_6[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_6 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_6[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_6[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_6 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_6[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_6 = 0;
            int splitedFileNo_tFileOutputDelimited_6 =0;
            int currentRow_tFileOutputDelimited_6 = 0;


            CSVBasicSet_tFileOutputDelimited_6 csvSettings_tFileOutputDelimited_6 = new CSVBasicSet_tFileOutputDelimited_6();
            csvSettings_tFileOutputDelimited_6.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_6.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_6.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
                        if(!dir_tFileOutputDelimited_6.exists()) {
                            dir_tFileOutputDelimited_6.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
                            if(fileToDelete_tFileOutputDelimited_6.exists()) {
                                fileToDelete_tFileOutputDelimited_6.delete();
                            }
                            CsvWritertFileOutputDelimited_6 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_6.setSeparator(csvSettings_tFileOutputDelimited_6.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_6.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_6.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_6.setLineEnd(""+csvSettings_tFileOutputDelimited_6.getRowDelim());
                    }
                        if(filetFileOutputDelimited_6.length()==0){
                                    headColutFileOutputDelimited_6[0]="createddate";
                                    headColutFileOutputDelimited_6[1]="name";
                                    headColutFileOutputDelimited_6[2]="systemmodstamp";
                                    headColutFileOutputDelimited_6[3]="description";
                                    headColutFileOutputDelimited_6[4]="developername";
                                    headColutFileOutputDelimited_6[5]="isactive";
                                    headColutFileOutputDelimited_6[6]="sobjecttype";
                                    headColutFileOutputDelimited_6[7]="sfid";
                                    headColutFileOutputDelimited_6[8]="id";
                                    headColutFileOutputDelimited_6[9]="namespaceprefix";
                            CsvWritertFileOutputDelimited_6.writeNext(headColutFileOutputDelimited_6);
                            CsvWritertFileOutputDelimited_6.flush();
                        }
                CsvWritertFileOutputDelimited_6.setEscapeChar(csvSettings_tFileOutputDelimited_6.getEscapeChar());
                CsvWritertFileOutputDelimited_6.setQuoteChar(csvSettings_tFileOutputDelimited_6.getTextEnclosure());
                CsvWritertFileOutputDelimited_6.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_6", CsvWritertFileOutputDelimited_6);
resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

 



/**
 * [tFileOutputDelimited_6 begin ] stop
 */




	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out12");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("recordtype");
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("recordtype");
}

int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	conn_tDBOutput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_6 = 100000;
   int batchSizeCounter_tDBOutput_6=0;

int count_tDBOutput_6=0;
            try (java.sql.Statement stmtClear_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                stmtClear_tDBOutput_6.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_6 + "\"");
            }
	    String insert_tDBOutput_6 = "INSERT INTO \"" + tableName_tDBOutput_6 + "\" (\"createddate\",\"name\",\"systemmodstamp\",\"description\",\"developername\",\"isactive\",\"sobjecttype\",\"sfid\",\"id\",\"namespaceprefix\") VALUES (?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out11Struct out11_tmp = new out11Struct();
out12Struct out12_tmp = new out12Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT createddate\n       , name\n       , systemmodstamp\n       , description\n       , developername\n       , isac"
+"tive\n       , sobjecttype\n       , sfid\n       , id\n       , namespaceprefix\n FROM "+context.university_code+".recordtype ";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row6.createddate = null;
							} else {
										
			row6.createddate = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 1);
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row6.name = null;
							} else {
	                         		
        	row6.name = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row6.systemmodstamp = null;
							} else {
										
			row6.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 3);
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row6.description = null;
							} else {
	                         		
        	row6.description = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								row6.developername = null;
							} else {
	                         		
        	row6.developername = routines.system.JDBCUtil.getString(rs_tDBInput_6, 5, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 6) {
								row6.isactive = null;
							} else {
	                         		
            row6.isactive = rs_tDBInput_6.getBoolean(6);
            if(rs_tDBInput_6.wasNull()){
                    row6.isactive = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 7) {
								row6.sobjecttype = null;
							} else {
	                         		
        	row6.sobjecttype = routines.system.JDBCUtil.getString(rs_tDBInput_6, 7, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 8) {
								row6.sfid = null;
							} else {
	                         		
        	row6.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_6, 8, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 9) {
								row6.id = 0;
							} else {
		                          
            row6.id = rs_tDBInput_6.getInt(9);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 10) {
								row6.namespaceprefix = null;
							} else {
	                         		
        	row6.namespaceprefix = routines.system.JDBCUtil.getString(rs_tDBInput_6, 10, true);
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out11 = null;
out12 = null;


// # Output table : 'out11'
out11_tmp.createddate = row6.createddate ;
out11_tmp.name = row6.name ;
out11_tmp.systemmodstamp = row6.systemmodstamp ;
out11_tmp.description = row6.description ;
out11_tmp.developername = row6.developername ;
out11_tmp.isactive = row6.isactive ;
out11_tmp.sobjecttype = row6.sobjecttype ;
out11_tmp.sfid = row6.sfid ;
out11_tmp.id = row6.id ;
out11_tmp.namespaceprefix = row6.namespaceprefix ;
out11 = out11_tmp;

// # Output table : 'out12'
out12_tmp.createddate = row6.createddate ;
out12_tmp.name = row6.name ;
out12_tmp.systemmodstamp = row6.systemmodstamp ;
out12_tmp.description = row6.description ;
out12_tmp.developername = row6.developername ;
out12_tmp.isactive = row6.isactive ;
out12_tmp.sobjecttype = row6.sobjecttype ;
out12_tmp.sfid = row6.sfid ;
out12_tmp.id = row6.id ;
out12_tmp.namespaceprefix = row6.namespaceprefix ;
out12 = out12_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out11"
if(out11 != null) { 



	
	/**
	 * [tFileOutputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out11");
					}
					


                        String[] rowtFileOutputDelimited_6=new String[10];
                            rowtFileOutputDelimited_6[0]=out11.createddate == null ? null : FormatterUtils.format_Date(out11.createddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_6[1]=out11.name == null ? null : out11.name;
                            rowtFileOutputDelimited_6[2]=out11.systemmodstamp == null ? null : FormatterUtils.format_Date(out11.systemmodstamp, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_6[3]=out11.description == null ? null : out11.description;
                            rowtFileOutputDelimited_6[4]=out11.developername == null ? null : out11.developername;
                            rowtFileOutputDelimited_6[5]=out11.isactive == null ? null : String.valueOf(out11.isactive);
                            rowtFileOutputDelimited_6[6]=out11.sobjecttype == null ? null : out11.sobjecttype;
                            rowtFileOutputDelimited_6[7]=out11.sfid == null ? null : out11.sfid;
                            rowtFileOutputDelimited_6[8]=String.valueOf(out11.id);
                            rowtFileOutputDelimited_6[9]=out11.namespaceprefix == null ? null : out11.namespaceprefix;
                nb_line_tFileOutputDelimited_6++;
                resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);
                                       CsvWritertFileOutputDelimited_6.writeNext(rowtFileOutputDelimited_6);




 


	tos_count_tFileOutputDelimited_6++;

/**
 * [tFileOutputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	

 



/**
 * [tFileOutputDelimited_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	

 



/**
 * [tFileOutputDelimited_6 process_data_end ] stop
 */

} // End of branch "out11"




// Start of branch "out12"
if(out12 != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out12");
					}
					



        whetherReject_tDBOutput_6 = false;
                    if(out12.createddate != null) {
pstmt_tDBOutput_6.setTimestamp(1, new java.sql.Timestamp(out12.createddate.getTime()));
} else {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(out12.name == null) {
pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(2, out12.name);
}

                    if(out12.systemmodstamp != null) {
pstmt_tDBOutput_6.setTimestamp(3, new java.sql.Timestamp(out12.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_6.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(out12.description == null) {
pstmt_tDBOutput_6.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(4, out12.description);
}

                    if(out12.developername == null) {
pstmt_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(5, out12.developername);
}

                    if(out12.isactive == null) {
pstmt_tDBOutput_6.setNull(6, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_6.setBoolean(6, out12.isactive);
}

                    if(out12.sobjecttype == null) {
pstmt_tDBOutput_6.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(7, out12.sobjecttype);
}

                    if(out12.sfid == null) {
pstmt_tDBOutput_6.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(8, out12.sfid);
}

                    pstmt_tDBOutput_6.setInt(9, out12.id);

                    if(out12.namespaceprefix == null) {
pstmt_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(10, out12.namespaceprefix);
}

			
    		pstmt_tDBOutput_6.addBatch();
    		nb_line_tDBOutput_6++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_6++;
    		  
            if(!whetherReject_tDBOutput_6) {
            }
    			if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
						int countSum_tDBOutput_6 = 0;
						    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
				    	
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            	    	batchSizeCounter_tDBOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_6){
				    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
				    	String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						}else{
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}
				    	
				    	int countSum_tDBOutput_6 = 0;
						for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
						
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    	System.err.println(errormessage_tDBOutput_6);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "out12"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_6!=null) {
				    	CsvWritertFileOutputDelimited_6.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_6_NB_LINE",nb_line_tFileOutputDelimited_6);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_6", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out11");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_6", true);
end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk88", 0, "ok");
				}
				tFileArchive_6Process(globalMap);



/**
 * [tFileOutputDelimited_6 end ] stop
 */




	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



	    try {
				int countSum_tDBOutput_6 = 0;
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						
					for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_6){
	    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
	    	String errormessage_tDBOutput_6;
			if (ne_tDBOutput_6 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
				errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
			}else{
				errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
			}
	    	
	    	int countSum_tDBOutput_6 = 0;
			for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
				countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
			}
			
	    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
	    	
	    	System.err.println(errormessage_tDBOutput_6);
	    	
		}
	    
        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out12");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk89", 0, "ok");
				}
				tJava_31Process(globalMap);



/**
 * [tDBOutput_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	


		if(resourceMap.get("finish_tFileOutputDelimited_6") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_6");
					
						if(CsvWritertFileOutputDelimited_6!=null) {
					    	CsvWritertFileOutputDelimited_6.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_6 finally ] stop
 */




	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_6", false);
		start_Hash.put("tFileArchive_6", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_6";

	
		int tos_count_tFileArchive_6 = 0;
		

 



/**
 * [tFileArchive_6 begin ] stop
 */
	
	/**
	 * [tFileArchive_6 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_6";

	

	

		String sourceFile_tFileArchive_6 = context.staging_S3_dir + "recordtype.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_6), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_6 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_6 = context.staging_S3_dir + "recordtype.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_6 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_6, zipFile_tFileArchive_6);
    zip_tFileArchive_6.setOverwriteExistTargetZip(true);
	zip_tFileArchive_6.setMakeTargetDir(true);
	zip_tFileArchive_6.setCompressLevel(9);
	zip_tFileArchive_6.setArchiveFormat("gzip");
	zip_tFileArchive_6.setAllFiles(true);
	
	
		zip_tFileArchive_6.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_6_ARCHIVE_FILEPATH",zipFile_tFileArchive_6);
   
   globalMap.put("tFileArchive_6_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_6).getName());

   zip_tFileArchive_6.doZip();


 


	tos_count_tFileArchive_6++;

/**
 * [tFileArchive_6 main ] stop
 */
	
	/**
	 * [tFileArchive_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_6";

	

 



/**
 * [tFileArchive_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_6";

	

 



/**
 * [tFileArchive_6 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_6 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_6";

	

 

ok_Hash.put("tFileArchive_6", true);
end_Hash.put("tFileArchive_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk90", 0, "ok");
				}
				tS3Put_6Process(globalMap);



/**
 * [tFileArchive_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_6 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_6";

	

 



/**
 * [tFileArchive_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_6_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_6", false);
		start_Hash.put("tS3Put_6", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_6";

	
		int tos_count_tS3Put_6 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_6 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_6 = context.nd_s3_data_lake_path_sfdc +"/recordtype/latest/university_id="+context.university_code+"/recordtype.csv.gz";
	
	int partSizeInBytes_tS3Put_6 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_6 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_6 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_6 = context.staging_S3_dir + "recordtype.csv.gz";
	
	boolean useStream_tS3Put_6 = false;
	java.io.InputStream uploadStream_tS3Put_6 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_6 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_6 instanceof String){
		    useStream_tS3Put_6 = false;
		}else if(fileOrStream_tS3Put_6 instanceof java.io.InputStream){
		    useStream_tS3Put_6 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_6 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_6) {
				java.io.File inputFile_tS3Put_6 = new java.io.File((String)fileOrStream_tS3Put_6);
				
				long multipart_upload_threshold_tS3Put_6 = 5 * 1024 * 1024;
				
    		tm_tS3Put_6 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_6)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_6)
    			.withS3Client(conn_tS3Put_6)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_6 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_6, inputFile_tS3Put_6).withMetadata(objectMetadata_tS3Put_6);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_6 = tm_tS3Put_6.upload(putRequest_tS3Put_6);
  		
  			upload_tS3Put_6.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_6 = ((java.io.InputStream)fileOrStream_tS3Put_6);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_6 = new S3StreamUtil();
    		byte[] buffer_tS3Put_6 = new byte[partSizeInBytes_tS3Put_6];
    		sourceStream_tS3Put_6.read(buffer_tS3Put_6);
    		long curPartSize_tS3Put_6 = streamUtil_tS3Put_6.getLength(buffer_tS3Put_6);
    		boolean multiUpload_tS3Put_6 = curPartSize_tS3Put_6 == partSizeInBytes_tS3Put_6;
    		
    		if(!multiUpload_tS3Put_6) {
    				objectMetadata_tS3Put_6.setContentLength(curPartSize_tS3Put_6);
    				uploadStream_tS3Put_6 = new java.io.ByteArrayInputStream(buffer_tS3Put_6,0,Long.valueOf(curPartSize_tS3Put_6).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_6 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_6, uploadStream_tS3Put_6, objectMetadata_tS3Put_6);
			
    				
    				

    				
    				conn_tS3Put_6.putObject(putRequest_tS3Put_6);
    		} else {
    				uploadStream_tS3Put_6 = new java.io.ByteArrayInputStream(buffer_tS3Put_6);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_6 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_6 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_6, objectMetadata_tS3Put_6);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_6 = conn_tS3Put_6.initiateMultipartUpload(putRequest_tS3Put_6);
      			String uploadId_tS3Put_6 = initResponse_tS3Put_6.getUploadId();
      			int partNumber_tS3Put_6 = 1;
      			boolean streamHasNext_tS3Put_6 = true;
      			byte[] probeAvailability_tS3Put_6 = new byte[1];
				try {
					while (streamHasNext_tS3Put_6) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_6 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_6)
						.withUploadId(uploadId_tS3Put_6)
                    	.withPartNumber(partNumber_tS3Put_6)
						.withPartSize(curPartSize_tS3Put_6);
            		    uploadRequest_tS3Put_6.setInputStream(uploadStream_tS3Put_6);
            		    streamHasNext_tS3Put_6 = sourceStream_tS3Put_6.read(probeAvailability_tS3Put_6) != -1;
            		    if(!streamHasNext_tS3Put_6){
                    	    uploadRequest_tS3Put_6.setLastPart(true);
                    	}

                		partTags_tS3Put_6.add(conn_tS3Put_6.uploadPart(uploadRequest_tS3Put_6).getPartETag());
                  	    partNumber_tS3Put_6++;

          		     	if(uploadStream_tS3Put_6!=null){
      		         			uploadStream_tS3Put_6.close();
          		     	}
          		     	buffer_tS3Put_6 = new byte[partSizeInBytes_tS3Put_6];
          		     	sourceStream_tS3Put_6.read(buffer_tS3Put_6,1,partSizeInBytes_tS3Put_6-1);
          		     	buffer_tS3Put_6[0] = probeAvailability_tS3Put_6[0];
          		     	probeAvailability_tS3Put_6 = new byte[1];
          		     	curPartSize_tS3Put_6 = streamUtil_tS3Put_6.getLength(buffer_tS3Put_6);
          		     	uploadStream_tS3Put_6 = new java.io.ByteArrayInputStream(buffer_tS3Put_6);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_6 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_6,
                        uploadId_tS3Put_6, partTags_tS3Put_6);
            		conn_tS3Put_6.completeMultipartUpload(compRequest_tS3Put_6);
            } catch (java.lang.Exception uploadException_tS3Put_6) {
  							conn_tS3Put_6.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_6, uploadId_tS3Put_6));
    						throw uploadException_tS3Put_6;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_6){
		
			throw(e_tS3Put_6);
		
	}finally{
		if(useStream_tS3Put_6 && uploadStream_tS3Put_6!=null){
    	uploadStream_tS3Put_6.close();
    }
    
    if(tm_tS3Put_6 != null){
        tm_tS3Put_6.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_6 begin ] stop
 */
	
	/**
	 * [tS3Put_6 main ] start
	 */

	

	
	
	currentComponent="tS3Put_6";

	

 


	tos_count_tS3Put_6++;

/**
 * [tS3Put_6 main ] stop
 */
	
	/**
	 * [tS3Put_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_6";

	

 



/**
 * [tS3Put_6 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_6";

	

 



/**
 * [tS3Put_6 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_6 end ] start
	 */

	

	
	
	currentComponent="tS3Put_6";

	

 

ok_Hash.put("tS3Put_6", true);
end_Hash.put("tS3Put_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk91", 0, "ok");
				}
				tJava_32Process(globalMap);



/**
 * [tS3Put_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_6 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_6";

	

 



/**
 * [tS3Put_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_6_SUBPROCESS_STATE", 1);
	}
	

public void tJava_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_32_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_32", false);
		start_Hash.put("tJava_32", System.currentTimeMillis());
		
	
	currentComponent="tJava_32";

	
		int tos_count_tJava_32 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_32 begin ] stop
 */
	
	/**
	 * [tJava_32 main ] start
	 */

	

	
	
	currentComponent="tJava_32";

	

 


	tos_count_tJava_32++;

/**
 * [tJava_32 main ] stop
 */
	
	/**
	 * [tJava_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_32";

	

 



/**
 * [tJava_32 process_data_begin ] stop
 */
	
	/**
	 * [tJava_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_32";

	

 



/**
 * [tJava_32 process_data_end ] stop
 */
	
	/**
	 * [tJava_32 end ] start
	 */

	

	
	
	currentComponent="tJava_32";

	

 

ok_Hash.put("tJava_32", true);
end_Hash.put("tJava_32", System.currentTimeMillis());




/**
 * [tJava_32 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_32 finally ] start
	 */

	

	
	
	currentComponent="tJava_32";

	

 



/**
 * [tJava_32 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_32_SUBPROCESS_STATE", 1);
	}
	

public void tJava_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_31", false);
		start_Hash.put("tJava_31", System.currentTimeMillis());
		
	
	currentComponent="tJava_31";

	
		int tos_count_tJava_31 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_6_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");
 



/**
 * [tJava_31 begin ] stop
 */
	
	/**
	 * [tJava_31 main ] start
	 */

	

	
	
	currentComponent="tJava_31";

	

 


	tos_count_tJava_31++;

/**
 * [tJava_31 main ] stop
 */
	
	/**
	 * [tJava_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_31";

	

 



/**
 * [tJava_31 process_data_begin ] stop
 */
	
	/**
	 * [tJava_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_31";

	

 



/**
 * [tJava_31 process_data_end ] stop
 */
	
	/**
	 * [tJava_31 end ] start
	 */

	

	
	
	currentComponent="tJava_31";

	

 

ok_Hash.put("tJava_31", true);
end_Hash.put("tJava_31", System.currentTimeMillis());




/**
 * [tJava_31 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_31 finally ] start
	 */

	

	
	
	currentComponent="tJava_31";

	

 



/**
 * [tJava_31 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_31_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_9", false);
		start_Hash.put("tS3Copy_9", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_9";

	
		int tos_count_tS3Copy_9 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_9 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_9 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_9 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_9 = null;
		
		
		final String from_bucket_tS3Copy_9 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_9 = context.nd_s3_data_lake_path_sfdc+"/task/latest/university_id="+context.university_code+"/task.csv.gz";
		final String to_bucket_tS3Copy_9 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_9 = context.nd_s3_data_lake_path_sfdc+"/task/archive/university_id="+context.university_code+"/task_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_9 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_9, from_key_tS3Copy_9);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_9 = conn_tS3Copy_9.getObjectMetadata(metadataRequest_tS3Copy_9);
    long objectSize_tS3Copy_9 = metadataResult_tS3Copy_9.getContentLength();
    
    boolean multiUpload_tS3Copy_9 = objectSize_tS3Copy_9 > maxBytes4SingleCopyCall_tS3Copy_9;
    
    if(!multiUpload_tS3Copy_9) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_9 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_9, from_key_tS3Copy_9, to_bucket_tS3Copy_9, to_key_tS3Copy_9);
    		if(objectMetadata_tS3Copy_9 != null) {
    				putRequest_tS3Copy_9.setNewObjectMetadata(objectMetadata_tS3Copy_9);
    		}
    		
    		

    		
    		conn_tS3Copy_9.copyObject(putRequest_tS3Copy_9);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_9 = metadataResult_tS3Copy_9.getUserMetadata();
						if((userMetadata_tS3Copy_9!=null) && userMetadata_tS3Copy_9.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_9 = null;
    				if(objectMetadata_tS3Copy_9 != null) {
    						putRequest_tS3Copy_9 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_9, to_key_tS3Copy_9, objectMetadata_tS3Copy_9);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_9 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_9, to_key_tS3Copy_9, metadataResult_tS3Copy_9);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_9 = conn_tS3Copy_9.initiateMultipartUpload(putRequest_tS3Copy_9);
            
            long bytePosition_tS3Copy_9 = 0;
            int partNum_tS3Copy_9 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_9 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_9 < objectSize_tS3Copy_9) {
                long lastByte_tS3Copy_9 = java.lang.Math.min(bytePosition_tS3Copy_9 + partSizeInBytes_tS3Copy_9 - 1, objectSize_tS3Copy_9 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_9 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_9)
                        .withSourceKey(from_key_tS3Copy_9)
                        .withDestinationBucketName(to_bucket_tS3Copy_9)
                        .withDestinationKey(to_key_tS3Copy_9)
                        .withUploadId(initResult_tS3Copy_9.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_9)
                        .withLastByte(lastByte_tS3Copy_9)
                        .withPartNumber(partNum_tS3Copy_9++);
                partTags_tS3Copy_9.add(conn_tS3Copy_9.copyPart(copyPartRequest_tS3Copy_9).getPartETag());
                bytePosition_tS3Copy_9 += partSizeInBytes_tS3Copy_9;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_9 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_9,
                                                                        to_key_tS3Copy_9, 
                                                                        initResult_tS3Copy_9.getUploadId(),
                                                                        partTags_tS3Copy_9);
            conn_tS3Copy_9.completeMultipartUpload(completeRequest_tS3Copy_9);
    		} catch (java.lang.Exception uploadException_tS3Copy_9) {
    				conn_tS3Copy_9.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_9, to_key_tS3Copy_9, initResult_tS3Copy_9.getUploadId()));
    				throw uploadException_tS3Copy_9;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_9){
		
			System.err.println(e_tS3Copy_9.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_9 begin ] stop
 */
	
	/**
	 * [tS3Copy_9 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_9";

	

 


	tos_count_tS3Copy_9++;

/**
 * [tS3Copy_9 main ] stop
 */
	
	/**
	 * [tS3Copy_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_9";

	

 



/**
 * [tS3Copy_9 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_9";

	

 



/**
 * [tS3Copy_9 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_9 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_9";

	

 

ok_Hash.put("tS3Copy_9", true);
end_Hash.put("tS3Copy_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk81", 0, "ok");
				}
				tJava_29Process(globalMap);



/**
 * [tS3Copy_9 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Copy_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tS3Copy_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_9 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_9";

	

 



/**
 * [tS3Copy_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_9_SUBPROCESS_STATE", 1);
	}
	

public void tJava_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_29", false);
		start_Hash.put("tJava_29", System.currentTimeMillis());
		
	
	currentComponent="tJava_29";

	
		int tos_count_tJava_29 = 0;
		


System.out.println("Step 0: Running For Task Object");
System.out.println("Step 1: Copied Previous Run File To Archive");
 



/**
 * [tJava_29 begin ] stop
 */
	
	/**
	 * [tJava_29 main ] start
	 */

	

	
	
	currentComponent="tJava_29";

	

 


	tos_count_tJava_29++;

/**
 * [tJava_29 main ] stop
 */
	
	/**
	 * [tJava_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_29";

	

 



/**
 * [tJava_29 process_data_begin ] stop
 */
	
	/**
	 * [tJava_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_29";

	

 



/**
 * [tJava_29 process_data_end ] stop
 */
	
	/**
	 * [tJava_29 end ] start
	 */

	

	
	
	currentComponent="tJava_29";

	

 

ok_Hash.put("tJava_29", true);
end_Hash.put("tJava_29", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk82", 0, "ok");
				}
				tS3Delete_9Process(globalMap);



/**
 * [tJava_29 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_29 finally ] start
	 */

	

	
	
	currentComponent="tJava_29";

	

 



/**
 * [tJava_29 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_29_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_9", false);
		start_Hash.put("tS3Delete_9", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_9";

	
		int tos_count_tS3Delete_9 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_9 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_9 = context.nd_s3_data_lake_path_sfdc +"/task/latest/university_id="+context.university_code+"/task.csv.gz";
		if(key_tS3Delete_9!=null && key_tS3Delete_9.trim().length()>0){
			
			conn_tS3Delete_9.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_9);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_9){
		
			System.err.println(e_tS3Delete_9.getMessage());
		
	}
	
 



/**
 * [tS3Delete_9 begin ] stop
 */
	
	/**
	 * [tS3Delete_9 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_9";

	

 


	tos_count_tS3Delete_9++;

/**
 * [tS3Delete_9 main ] stop
 */
	
	/**
	 * [tS3Delete_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_9";

	

 



/**
 * [tS3Delete_9 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_9";

	

 



/**
 * [tS3Delete_9 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_9 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_9";

	

 

ok_Hash.put("tS3Delete_9", true);
end_Hash.put("tS3Delete_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk83", 0, "ok");
				}
				tJava_30Process(globalMap);



/**
 * [tS3Delete_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_9 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_9";

	

 



/**
 * [tS3Delete_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_9_SUBPROCESS_STATE", 1);
	}
	

public void tJava_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_30", false);
		start_Hash.put("tJava_30", System.currentTimeMillis());
		
	
	currentComponent="tJava_30";

	
		int tos_count_tJava_30 = 0;
		


System.out.println("Step 2: Deleted Previous Run File From Latest Folder");
System.out.println("Step 3: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_30 begin ] stop
 */
	
	/**
	 * [tJava_30 main ] start
	 */

	

	
	
	currentComponent="tJava_30";

	

 


	tos_count_tJava_30++;

/**
 * [tJava_30 main ] stop
 */
	
	/**
	 * [tJava_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_30";

	

 



/**
 * [tJava_30 process_data_begin ] stop
 */
	
	/**
	 * [tJava_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_30";

	

 



/**
 * [tJava_30 process_data_end ] stop
 */
	
	/**
	 * [tJava_30 end ] start
	 */

	

	
	
	currentComponent="tJava_30";

	

 

ok_Hash.put("tJava_30", true);
end_Hash.put("tJava_30", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk85", 0, "ok");
				}
				tDBInput_7Process(globalMap);



/**
 * [tJava_30 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_30 finally ] start
	 */

	

	
	
	currentComponent="tJava_30";

	

 



/**
 * [tJava_30 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_30_SUBPROCESS_STATE", 1);
	}
	


public static class out13Struct implements routines.system.IPersistableRow<out13Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String rcsfl__rc_logging_type__c;

				public String getRcsfl__rc_logging_type__c () {
					return this.rcsfl__rc_logging_type__c;
				}
				
			    public Integer recurrencedayofweekmask;

				public Integer getRecurrencedayofweekmask () {
					return this.recurrencedayofweekmask;
				}
				
			    public String priority;

				public String getPriority () {
					return this.priority;
				}
				
			    public String recurrencemonthofyear;

				public String getRecurrencemonthofyear () {
					return this.recurrencemonthofyear;
				}
				
			    public String recurrenceinstance;

				public String getRecurrenceinstance () {
					return this.recurrenceinstance;
				}
				
			    public java.util.Date recurrenceenddateonly;

				public java.util.Date getRecurrenceenddateonly () {
					return this.recurrenceenddateonly;
				}
				
			    public String recurrenceregeneratedtype;

				public String getRecurrenceregeneratedtype () {
					return this.recurrenceregeneratedtype;
				}
				
			    public Boolean isreminderset;

				public Boolean getIsreminderset () {
					return this.isreminderset;
				}
				
			    public java.util.Date completeddatetime;

				public java.util.Date getCompleteddatetime () {
					return this.completeddatetime;
				}
				
			    public String accountid;

				public String getAccountid () {
					return this.accountid;
				}
				
			    public Integer calldurationinseconds;

				public Integer getCalldurationinseconds () {
					return this.calldurationinseconds;
				}
				
			    public String recurrencetype;

				public String getRecurrencetype () {
					return this.recurrencetype;
				}
				
			    public String subject;

				public String getSubject () {
					return this.subject;
				}
				
			    public java.util.Date recurrencestartdateonly;

				public java.util.Date getRecurrencestartdateonly () {
					return this.recurrencestartdateonly;
				}
				
			    public String rcsfl__key__c;

				public String getRcsfl__key__c () {
					return this.rcsfl__key__c;
				}
				
			    public java.util.Date reminderdatetime;

				public java.util.Date getReminderdatetime () {
					return this.reminderdatetime;
				}
				
			    public String rcsfl__recording_information__c;

				public String getRcsfl__recording_information__c () {
					return this.rcsfl__recording_information__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public String rcsfl__call_uuid__c;

				public String getRcsfl__call_uuid__c () {
					return this.rcsfl__call_uuid__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public Boolean ishighpriority;

				public Boolean getIshighpriority () {
					return this.ishighpriority;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String rcsfl__call_unique_id__c;

				public String getRcsfl__call_unique_id__c () {
					return this.rcsfl__call_unique_id__c;
				}
				
			    public String tasksubtype;

				public String getTasksubtype () {
					return this.tasksubtype;
				}
				
			    public Integer recurrenceinterval;

				public Integer getRecurrenceinterval () {
					return this.recurrenceinterval;
				}
				
			    public String rcsfl__external_whoid__c;

				public String getRcsfl__external_whoid__c () {
					return this.rcsfl__external_whoid__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean isclosed;

				public Boolean getIsclosed () {
					return this.isclosed;
				}
				
			    public String calltype;

				public String getCalltype () {
					return this.calltype;
				}
				
			    public String whoid;

				public String getWhoid () {
					return this.whoid;
				}
				
			    public String calldisposition;

				public String getCalldisposition () {
					return this.calldisposition;
				}
				
			    public Boolean isrecurrence;

				public Boolean getIsrecurrence () {
					return this.isrecurrence;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String recurrencetimezonesidkey;

				public String getRecurrencetimezonesidkey () {
					return this.recurrencetimezonesidkey;
				}
				
			    public String recurrenceactivityid;

				public String getRecurrenceactivityid () {
					return this.recurrenceactivityid;
				}
				
			    public String noodlecrm__contact_type__c;

				public String getNoodlecrm__contact_type__c () {
					return this.noodlecrm__contact_type__c;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Integer recurrencedayofmonth;

				public Integer getRecurrencedayofmonth () {
					return this.recurrencedayofmonth;
				}
				
			    public String callobject;

				public String getCallobject () {
					return this.callobject;
				}
				
			    public java.util.Date activitydate;

				public java.util.Date getActivitydate () {
					return this.activitydate;
				}
				
			    public String whatid;

				public String getWhatid () {
					return this.whatid;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__category__c;

				public String getNoodlecrm__category__c () {
					return this.noodlecrm__category__c;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out13Struct other = (out13Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out13Struct other) {

		other.rcsfl__rc_logging_type__c = this.rcsfl__rc_logging_type__c;
	            other.recurrencedayofweekmask = this.recurrencedayofweekmask;
	            other.priority = this.priority;
	            other.recurrencemonthofyear = this.recurrencemonthofyear;
	            other.recurrenceinstance = this.recurrenceinstance;
	            other.recurrenceenddateonly = this.recurrenceenddateonly;
	            other.recurrenceregeneratedtype = this.recurrenceregeneratedtype;
	            other.isreminderset = this.isreminderset;
	            other.completeddatetime = this.completeddatetime;
	            other.accountid = this.accountid;
	            other.calldurationinseconds = this.calldurationinseconds;
	            other.recurrencetype = this.recurrencetype;
	            other.subject = this.subject;
	            other.recurrencestartdateonly = this.recurrencestartdateonly;
	            other.rcsfl__key__c = this.rcsfl__key__c;
	            other.reminderdatetime = this.reminderdatetime;
	            other.rcsfl__recording_information__c = this.rcsfl__recording_information__c;
	            other.lastmodifieddate = this.lastmodifieddate;
	            other.ownerid = this.ownerid;
	            other.rcsfl__call_uuid__c = this.rcsfl__call_uuid__c;
	            other.isdeleted = this.isdeleted;
	            other.systemmodstamp = this.systemmodstamp;
	            other.ishighpriority = this.ishighpriority;
	            other.lastmodifiedbyid = this.lastmodifiedbyid;
	            other.status = this.status;
	            other.rcsfl__call_unique_id__c = this.rcsfl__call_unique_id__c;
	            other.tasksubtype = this.tasksubtype;
	            other.recurrenceinterval = this.recurrenceinterval;
	            other.rcsfl__external_whoid__c = this.rcsfl__external_whoid__c;
	            other.createddate = this.createddate;
	            other.isclosed = this.isclosed;
	            other.calltype = this.calltype;
	            other.whoid = this.whoid;
	            other.calldisposition = this.calldisposition;
	            other.isrecurrence = this.isrecurrence;
	            other.createdbyid = this.createdbyid;
	            other.recurrencetimezonesidkey = this.recurrencetimezonesidkey;
	            other.recurrenceactivityid = this.recurrenceactivityid;
	            other.noodlecrm__contact_type__c = this.noodlecrm__contact_type__c;
	            other.description = this.description;
	            other.recurrencedayofmonth = this.recurrencedayofmonth;
	            other.callobject = this.callobject;
	            other.activitydate = this.activitydate;
	            other.whatid = this.whatid;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            other.noodlecrm__category__c = this.noodlecrm__category__c;
	            
	}

	public void copyKeysDataTo(out13Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.rcsfl__rc_logging_type__c = readString(dis);
					
						this.recurrencedayofweekmask = readInteger(dis);
					
					this.priority = readString(dis);
					
					this.recurrencemonthofyear = readString(dis);
					
					this.recurrenceinstance = readString(dis);
					
					this.recurrenceenddateonly = readDate(dis);
					
					this.recurrenceregeneratedtype = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isreminderset = null;
           				} else {
           			    	this.isreminderset = dis.readBoolean();
           				}
					
					this.completeddatetime = readDate(dis);
					
					this.accountid = readString(dis);
					
						this.calldurationinseconds = readInteger(dis);
					
					this.recurrencetype = readString(dis);
					
					this.subject = readString(dis);
					
					this.recurrencestartdateonly = readDate(dis);
					
					this.rcsfl__key__c = readString(dis);
					
					this.reminderdatetime = readDate(dis);
					
					this.rcsfl__recording_information__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.ownerid = readString(dis);
					
					this.rcsfl__call_uuid__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ishighpriority = null;
           				} else {
           			    	this.ishighpriority = dis.readBoolean();
           				}
					
					this.lastmodifiedbyid = readString(dis);
					
					this.status = readString(dis);
					
					this.rcsfl__call_unique_id__c = readString(dis);
					
					this.tasksubtype = readString(dis);
					
						this.recurrenceinterval = readInteger(dis);
					
					this.rcsfl__external_whoid__c = readString(dis);
					
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isclosed = null;
           				} else {
           			    	this.isclosed = dis.readBoolean();
           				}
					
					this.calltype = readString(dis);
					
					this.whoid = readString(dis);
					
					this.calldisposition = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence = null;
           				} else {
           			    	this.isrecurrence = dis.readBoolean();
           				}
					
					this.createdbyid = readString(dis);
					
					this.recurrencetimezonesidkey = readString(dis);
					
					this.recurrenceactivityid = readString(dis);
					
					this.noodlecrm__contact_type__c = readString(dis);
					
					this.description = readString(dis);
					
						this.recurrencedayofmonth = readInteger(dis);
					
					this.callobject = readString(dis);
					
					this.activitydate = readDate(dis);
					
					this.whatid = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__category__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.rcsfl__rc_logging_type__c,dos);
					
					// Integer
				
						writeInteger(this.recurrencedayofweekmask,dos);
					
					// String
				
						writeString(this.priority,dos);
					
					// String
				
						writeString(this.recurrencemonthofyear,dos);
					
					// String
				
						writeString(this.recurrenceinstance,dos);
					
					// java.util.Date
				
						writeDate(this.recurrenceenddateonly,dos);
					
					// String
				
						writeString(this.recurrenceregeneratedtype,dos);
					
					// Boolean
				
						if(this.isreminderset == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isreminderset);
		            	}
					
					// java.util.Date
				
						writeDate(this.completeddatetime,dos);
					
					// String
				
						writeString(this.accountid,dos);
					
					// Integer
				
						writeInteger(this.calldurationinseconds,dos);
					
					// String
				
						writeString(this.recurrencetype,dos);
					
					// String
				
						writeString(this.subject,dos);
					
					// java.util.Date
				
						writeDate(this.recurrencestartdateonly,dos);
					
					// String
				
						writeString(this.rcsfl__key__c,dos);
					
					// java.util.Date
				
						writeDate(this.reminderdatetime,dos);
					
					// String
				
						writeString(this.rcsfl__recording_information__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// String
				
						writeString(this.rcsfl__call_uuid__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// Boolean
				
						if(this.ishighpriority == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.ishighpriority);
		            	}
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.rcsfl__call_unique_id__c,dos);
					
					// String
				
						writeString(this.tasksubtype,dos);
					
					// Integer
				
						writeInteger(this.recurrenceinterval,dos);
					
					// String
				
						writeString(this.rcsfl__external_whoid__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.isclosed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isclosed);
		            	}
					
					// String
				
						writeString(this.calltype,dos);
					
					// String
				
						writeString(this.whoid,dos);
					
					// String
				
						writeString(this.calldisposition,dos);
					
					// Boolean
				
						if(this.isrecurrence == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence);
		            	}
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.recurrencetimezonesidkey,dos);
					
					// String
				
						writeString(this.recurrenceactivityid,dos);
					
					// String
				
						writeString(this.noodlecrm__contact_type__c,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Integer
				
						writeInteger(this.recurrencedayofmonth,dos);
					
					// String
				
						writeString(this.callobject,dos);
					
					// java.util.Date
				
						writeDate(this.activitydate,dos);
					
					// String
				
						writeString(this.whatid,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__category__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("rcsfl__rc_logging_type__c="+rcsfl__rc_logging_type__c);
		sb.append(",recurrencedayofweekmask="+String.valueOf(recurrencedayofweekmask));
		sb.append(",priority="+priority);
		sb.append(",recurrencemonthofyear="+recurrencemonthofyear);
		sb.append(",recurrenceinstance="+recurrenceinstance);
		sb.append(",recurrenceenddateonly="+String.valueOf(recurrenceenddateonly));
		sb.append(",recurrenceregeneratedtype="+recurrenceregeneratedtype);
		sb.append(",isreminderset="+String.valueOf(isreminderset));
		sb.append(",completeddatetime="+String.valueOf(completeddatetime));
		sb.append(",accountid="+accountid);
		sb.append(",calldurationinseconds="+String.valueOf(calldurationinseconds));
		sb.append(",recurrencetype="+recurrencetype);
		sb.append(",subject="+subject);
		sb.append(",recurrencestartdateonly="+String.valueOf(recurrencestartdateonly));
		sb.append(",rcsfl__key__c="+rcsfl__key__c);
		sb.append(",reminderdatetime="+String.valueOf(reminderdatetime));
		sb.append(",rcsfl__recording_information__c="+rcsfl__recording_information__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",ownerid="+ownerid);
		sb.append(",rcsfl__call_uuid__c="+rcsfl__call_uuid__c);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",ishighpriority="+String.valueOf(ishighpriority));
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",status="+status);
		sb.append(",rcsfl__call_unique_id__c="+rcsfl__call_unique_id__c);
		sb.append(",tasksubtype="+tasksubtype);
		sb.append(",recurrenceinterval="+String.valueOf(recurrenceinterval));
		sb.append(",rcsfl__external_whoid__c="+rcsfl__external_whoid__c);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",isclosed="+String.valueOf(isclosed));
		sb.append(",calltype="+calltype);
		sb.append(",whoid="+whoid);
		sb.append(",calldisposition="+calldisposition);
		sb.append(",isrecurrence="+String.valueOf(isrecurrence));
		sb.append(",createdbyid="+createdbyid);
		sb.append(",recurrencetimezonesidkey="+recurrencetimezonesidkey);
		sb.append(",recurrenceactivityid="+recurrenceactivityid);
		sb.append(",noodlecrm__contact_type__c="+noodlecrm__contact_type__c);
		sb.append(",description="+description);
		sb.append(",recurrencedayofmonth="+String.valueOf(recurrencedayofmonth));
		sb.append(",callobject="+callobject);
		sb.append(",activitydate="+String.valueOf(activitydate));
		sb.append(",whatid="+whatid);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__category__c="+noodlecrm__category__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out14Struct implements routines.system.IPersistableRow<out14Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String rcsfl__rc_logging_type__c;

				public String getRcsfl__rc_logging_type__c () {
					return this.rcsfl__rc_logging_type__c;
				}
				
			    public Integer recurrencedayofweekmask;

				public Integer getRecurrencedayofweekmask () {
					return this.recurrencedayofweekmask;
				}
				
			    public String priority;

				public String getPriority () {
					return this.priority;
				}
				
			    public String recurrencemonthofyear;

				public String getRecurrencemonthofyear () {
					return this.recurrencemonthofyear;
				}
				
			    public String recurrenceinstance;

				public String getRecurrenceinstance () {
					return this.recurrenceinstance;
				}
				
			    public java.util.Date recurrenceenddateonly;

				public java.util.Date getRecurrenceenddateonly () {
					return this.recurrenceenddateonly;
				}
				
			    public String recurrenceregeneratedtype;

				public String getRecurrenceregeneratedtype () {
					return this.recurrenceregeneratedtype;
				}
				
			    public Boolean isreminderset;

				public Boolean getIsreminderset () {
					return this.isreminderset;
				}
				
			    public java.util.Date completeddatetime;

				public java.util.Date getCompleteddatetime () {
					return this.completeddatetime;
				}
				
			    public String accountid;

				public String getAccountid () {
					return this.accountid;
				}
				
			    public Integer calldurationinseconds;

				public Integer getCalldurationinseconds () {
					return this.calldurationinseconds;
				}
				
			    public String recurrencetype;

				public String getRecurrencetype () {
					return this.recurrencetype;
				}
				
			    public String subject;

				public String getSubject () {
					return this.subject;
				}
				
			    public java.util.Date recurrencestartdateonly;

				public java.util.Date getRecurrencestartdateonly () {
					return this.recurrencestartdateonly;
				}
				
			    public String rcsfl__key__c;

				public String getRcsfl__key__c () {
					return this.rcsfl__key__c;
				}
				
			    public java.util.Date reminderdatetime;

				public java.util.Date getReminderdatetime () {
					return this.reminderdatetime;
				}
				
			    public String rcsfl__recording_information__c;

				public String getRcsfl__recording_information__c () {
					return this.rcsfl__recording_information__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public String rcsfl__call_uuid__c;

				public String getRcsfl__call_uuid__c () {
					return this.rcsfl__call_uuid__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public Boolean ishighpriority;

				public Boolean getIshighpriority () {
					return this.ishighpriority;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String rcsfl__call_unique_id__c;

				public String getRcsfl__call_unique_id__c () {
					return this.rcsfl__call_unique_id__c;
				}
				
			    public String tasksubtype;

				public String getTasksubtype () {
					return this.tasksubtype;
				}
				
			    public Integer recurrenceinterval;

				public Integer getRecurrenceinterval () {
					return this.recurrenceinterval;
				}
				
			    public String rcsfl__external_whoid__c;

				public String getRcsfl__external_whoid__c () {
					return this.rcsfl__external_whoid__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean isclosed;

				public Boolean getIsclosed () {
					return this.isclosed;
				}
				
			    public String calltype;

				public String getCalltype () {
					return this.calltype;
				}
				
			    public String whoid;

				public String getWhoid () {
					return this.whoid;
				}
				
			    public String calldisposition;

				public String getCalldisposition () {
					return this.calldisposition;
				}
				
			    public Boolean isrecurrence;

				public Boolean getIsrecurrence () {
					return this.isrecurrence;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String recurrencetimezonesidkey;

				public String getRecurrencetimezonesidkey () {
					return this.recurrencetimezonesidkey;
				}
				
			    public String recurrenceactivityid;

				public String getRecurrenceactivityid () {
					return this.recurrenceactivityid;
				}
				
			    public String noodlecrm__contact_type__c;

				public String getNoodlecrm__contact_type__c () {
					return this.noodlecrm__contact_type__c;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Integer recurrencedayofmonth;

				public Integer getRecurrencedayofmonth () {
					return this.recurrencedayofmonth;
				}
				
			    public String callobject;

				public String getCallobject () {
					return this.callobject;
				}
				
			    public java.util.Date activitydate;

				public java.util.Date getActivitydate () {
					return this.activitydate;
				}
				
			    public String whatid;

				public String getWhatid () {
					return this.whatid;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__category__c;

				public String getNoodlecrm__category__c () {
					return this.noodlecrm__category__c;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out14Struct other = (out14Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out14Struct other) {

		other.rcsfl__rc_logging_type__c = this.rcsfl__rc_logging_type__c;
	            other.recurrencedayofweekmask = this.recurrencedayofweekmask;
	            other.priority = this.priority;
	            other.recurrencemonthofyear = this.recurrencemonthofyear;
	            other.recurrenceinstance = this.recurrenceinstance;
	            other.recurrenceenddateonly = this.recurrenceenddateonly;
	            other.recurrenceregeneratedtype = this.recurrenceregeneratedtype;
	            other.isreminderset = this.isreminderset;
	            other.completeddatetime = this.completeddatetime;
	            other.accountid = this.accountid;
	            other.calldurationinseconds = this.calldurationinseconds;
	            other.recurrencetype = this.recurrencetype;
	            other.subject = this.subject;
	            other.recurrencestartdateonly = this.recurrencestartdateonly;
	            other.rcsfl__key__c = this.rcsfl__key__c;
	            other.reminderdatetime = this.reminderdatetime;
	            other.rcsfl__recording_information__c = this.rcsfl__recording_information__c;
	            other.lastmodifieddate = this.lastmodifieddate;
	            other.ownerid = this.ownerid;
	            other.rcsfl__call_uuid__c = this.rcsfl__call_uuid__c;
	            other.isdeleted = this.isdeleted;
	            other.systemmodstamp = this.systemmodstamp;
	            other.ishighpriority = this.ishighpriority;
	            other.lastmodifiedbyid = this.lastmodifiedbyid;
	            other.status = this.status;
	            other.rcsfl__call_unique_id__c = this.rcsfl__call_unique_id__c;
	            other.tasksubtype = this.tasksubtype;
	            other.recurrenceinterval = this.recurrenceinterval;
	            other.rcsfl__external_whoid__c = this.rcsfl__external_whoid__c;
	            other.createddate = this.createddate;
	            other.isclosed = this.isclosed;
	            other.calltype = this.calltype;
	            other.whoid = this.whoid;
	            other.calldisposition = this.calldisposition;
	            other.isrecurrence = this.isrecurrence;
	            other.createdbyid = this.createdbyid;
	            other.recurrencetimezonesidkey = this.recurrencetimezonesidkey;
	            other.recurrenceactivityid = this.recurrenceactivityid;
	            other.noodlecrm__contact_type__c = this.noodlecrm__contact_type__c;
	            other.description = this.description;
	            other.recurrencedayofmonth = this.recurrencedayofmonth;
	            other.callobject = this.callobject;
	            other.activitydate = this.activitydate;
	            other.whatid = this.whatid;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            other.noodlecrm__category__c = this.noodlecrm__category__c;
	            
	}

	public void copyKeysDataTo(out14Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.rcsfl__rc_logging_type__c = readString(dis);
					
						this.recurrencedayofweekmask = readInteger(dis);
					
					this.priority = readString(dis);
					
					this.recurrencemonthofyear = readString(dis);
					
					this.recurrenceinstance = readString(dis);
					
					this.recurrenceenddateonly = readDate(dis);
					
					this.recurrenceregeneratedtype = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isreminderset = null;
           				} else {
           			    	this.isreminderset = dis.readBoolean();
           				}
					
					this.completeddatetime = readDate(dis);
					
					this.accountid = readString(dis);
					
						this.calldurationinseconds = readInteger(dis);
					
					this.recurrencetype = readString(dis);
					
					this.subject = readString(dis);
					
					this.recurrencestartdateonly = readDate(dis);
					
					this.rcsfl__key__c = readString(dis);
					
					this.reminderdatetime = readDate(dis);
					
					this.rcsfl__recording_information__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.ownerid = readString(dis);
					
					this.rcsfl__call_uuid__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ishighpriority = null;
           				} else {
           			    	this.ishighpriority = dis.readBoolean();
           				}
					
					this.lastmodifiedbyid = readString(dis);
					
					this.status = readString(dis);
					
					this.rcsfl__call_unique_id__c = readString(dis);
					
					this.tasksubtype = readString(dis);
					
						this.recurrenceinterval = readInteger(dis);
					
					this.rcsfl__external_whoid__c = readString(dis);
					
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isclosed = null;
           				} else {
           			    	this.isclosed = dis.readBoolean();
           				}
					
					this.calltype = readString(dis);
					
					this.whoid = readString(dis);
					
					this.calldisposition = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence = null;
           				} else {
           			    	this.isrecurrence = dis.readBoolean();
           				}
					
					this.createdbyid = readString(dis);
					
					this.recurrencetimezonesidkey = readString(dis);
					
					this.recurrenceactivityid = readString(dis);
					
					this.noodlecrm__contact_type__c = readString(dis);
					
					this.description = readString(dis);
					
						this.recurrencedayofmonth = readInteger(dis);
					
					this.callobject = readString(dis);
					
					this.activitydate = readDate(dis);
					
					this.whatid = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__category__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.rcsfl__rc_logging_type__c,dos);
					
					// Integer
				
						writeInteger(this.recurrencedayofweekmask,dos);
					
					// String
				
						writeString(this.priority,dos);
					
					// String
				
						writeString(this.recurrencemonthofyear,dos);
					
					// String
				
						writeString(this.recurrenceinstance,dos);
					
					// java.util.Date
				
						writeDate(this.recurrenceenddateonly,dos);
					
					// String
				
						writeString(this.recurrenceregeneratedtype,dos);
					
					// Boolean
				
						if(this.isreminderset == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isreminderset);
		            	}
					
					// java.util.Date
				
						writeDate(this.completeddatetime,dos);
					
					// String
				
						writeString(this.accountid,dos);
					
					// Integer
				
						writeInteger(this.calldurationinseconds,dos);
					
					// String
				
						writeString(this.recurrencetype,dos);
					
					// String
				
						writeString(this.subject,dos);
					
					// java.util.Date
				
						writeDate(this.recurrencestartdateonly,dos);
					
					// String
				
						writeString(this.rcsfl__key__c,dos);
					
					// java.util.Date
				
						writeDate(this.reminderdatetime,dos);
					
					// String
				
						writeString(this.rcsfl__recording_information__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// String
				
						writeString(this.rcsfl__call_uuid__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// Boolean
				
						if(this.ishighpriority == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.ishighpriority);
		            	}
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.rcsfl__call_unique_id__c,dos);
					
					// String
				
						writeString(this.tasksubtype,dos);
					
					// Integer
				
						writeInteger(this.recurrenceinterval,dos);
					
					// String
				
						writeString(this.rcsfl__external_whoid__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.isclosed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isclosed);
		            	}
					
					// String
				
						writeString(this.calltype,dos);
					
					// String
				
						writeString(this.whoid,dos);
					
					// String
				
						writeString(this.calldisposition,dos);
					
					// Boolean
				
						if(this.isrecurrence == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence);
		            	}
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.recurrencetimezonesidkey,dos);
					
					// String
				
						writeString(this.recurrenceactivityid,dos);
					
					// String
				
						writeString(this.noodlecrm__contact_type__c,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Integer
				
						writeInteger(this.recurrencedayofmonth,dos);
					
					// String
				
						writeString(this.callobject,dos);
					
					// java.util.Date
				
						writeDate(this.activitydate,dos);
					
					// String
				
						writeString(this.whatid,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__category__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("rcsfl__rc_logging_type__c="+rcsfl__rc_logging_type__c);
		sb.append(",recurrencedayofweekmask="+String.valueOf(recurrencedayofweekmask));
		sb.append(",priority="+priority);
		sb.append(",recurrencemonthofyear="+recurrencemonthofyear);
		sb.append(",recurrenceinstance="+recurrenceinstance);
		sb.append(",recurrenceenddateonly="+String.valueOf(recurrenceenddateonly));
		sb.append(",recurrenceregeneratedtype="+recurrenceregeneratedtype);
		sb.append(",isreminderset="+String.valueOf(isreminderset));
		sb.append(",completeddatetime="+String.valueOf(completeddatetime));
		sb.append(",accountid="+accountid);
		sb.append(",calldurationinseconds="+String.valueOf(calldurationinseconds));
		sb.append(",recurrencetype="+recurrencetype);
		sb.append(",subject="+subject);
		sb.append(",recurrencestartdateonly="+String.valueOf(recurrencestartdateonly));
		sb.append(",rcsfl__key__c="+rcsfl__key__c);
		sb.append(",reminderdatetime="+String.valueOf(reminderdatetime));
		sb.append(",rcsfl__recording_information__c="+rcsfl__recording_information__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",ownerid="+ownerid);
		sb.append(",rcsfl__call_uuid__c="+rcsfl__call_uuid__c);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",ishighpriority="+String.valueOf(ishighpriority));
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",status="+status);
		sb.append(",rcsfl__call_unique_id__c="+rcsfl__call_unique_id__c);
		sb.append(",tasksubtype="+tasksubtype);
		sb.append(",recurrenceinterval="+String.valueOf(recurrenceinterval));
		sb.append(",rcsfl__external_whoid__c="+rcsfl__external_whoid__c);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",isclosed="+String.valueOf(isclosed));
		sb.append(",calltype="+calltype);
		sb.append(",whoid="+whoid);
		sb.append(",calldisposition="+calldisposition);
		sb.append(",isrecurrence="+String.valueOf(isrecurrence));
		sb.append(",createdbyid="+createdbyid);
		sb.append(",recurrencetimezonesidkey="+recurrencetimezonesidkey);
		sb.append(",recurrenceactivityid="+recurrenceactivityid);
		sb.append(",noodlecrm__contact_type__c="+noodlecrm__contact_type__c);
		sb.append(",description="+description);
		sb.append(",recurrencedayofmonth="+String.valueOf(recurrencedayofmonth));
		sb.append(",callobject="+callobject);
		sb.append(",activitydate="+String.valueOf(activitydate));
		sb.append(",whatid="+whatid);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__category__c="+noodlecrm__category__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String rcsfl__rc_logging_type__c;

				public String getRcsfl__rc_logging_type__c () {
					return this.rcsfl__rc_logging_type__c;
				}
				
			    public Integer recurrencedayofweekmask;

				public Integer getRecurrencedayofweekmask () {
					return this.recurrencedayofweekmask;
				}
				
			    public String priority;

				public String getPriority () {
					return this.priority;
				}
				
			    public String recurrencemonthofyear;

				public String getRecurrencemonthofyear () {
					return this.recurrencemonthofyear;
				}
				
			    public String recurrenceinstance;

				public String getRecurrenceinstance () {
					return this.recurrenceinstance;
				}
				
			    public java.util.Date recurrenceenddateonly;

				public java.util.Date getRecurrenceenddateonly () {
					return this.recurrenceenddateonly;
				}
				
			    public String recurrenceregeneratedtype;

				public String getRecurrenceregeneratedtype () {
					return this.recurrenceregeneratedtype;
				}
				
			    public Boolean isreminderset;

				public Boolean getIsreminderset () {
					return this.isreminderset;
				}
				
			    public java.util.Date completeddatetime;

				public java.util.Date getCompleteddatetime () {
					return this.completeddatetime;
				}
				
			    public String accountid;

				public String getAccountid () {
					return this.accountid;
				}
				
			    public Integer calldurationinseconds;

				public Integer getCalldurationinseconds () {
					return this.calldurationinseconds;
				}
				
			    public String recurrencetype;

				public String getRecurrencetype () {
					return this.recurrencetype;
				}
				
			    public String subject;

				public String getSubject () {
					return this.subject;
				}
				
			    public java.util.Date recurrencestartdateonly;

				public java.util.Date getRecurrencestartdateonly () {
					return this.recurrencestartdateonly;
				}
				
			    public String rcsfl__key__c;

				public String getRcsfl__key__c () {
					return this.rcsfl__key__c;
				}
				
			    public java.util.Date reminderdatetime;

				public java.util.Date getReminderdatetime () {
					return this.reminderdatetime;
				}
				
			    public String rcsfl__recording_information__c;

				public String getRcsfl__recording_information__c () {
					return this.rcsfl__recording_information__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public String rcsfl__call_uuid__c;

				public String getRcsfl__call_uuid__c () {
					return this.rcsfl__call_uuid__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public Boolean ishighpriority;

				public Boolean getIshighpriority () {
					return this.ishighpriority;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String rcsfl__call_unique_id__c;

				public String getRcsfl__call_unique_id__c () {
					return this.rcsfl__call_unique_id__c;
				}
				
			    public String tasksubtype;

				public String getTasksubtype () {
					return this.tasksubtype;
				}
				
			    public Integer recurrenceinterval;

				public Integer getRecurrenceinterval () {
					return this.recurrenceinterval;
				}
				
			    public String rcsfl__external_whoid__c;

				public String getRcsfl__external_whoid__c () {
					return this.rcsfl__external_whoid__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean isclosed;

				public Boolean getIsclosed () {
					return this.isclosed;
				}
				
			    public String calltype;

				public String getCalltype () {
					return this.calltype;
				}
				
			    public String whoid;

				public String getWhoid () {
					return this.whoid;
				}
				
			    public String calldisposition;

				public String getCalldisposition () {
					return this.calldisposition;
				}
				
			    public Boolean isrecurrence;

				public Boolean getIsrecurrence () {
					return this.isrecurrence;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public String recurrencetimezonesidkey;

				public String getRecurrencetimezonesidkey () {
					return this.recurrencetimezonesidkey;
				}
				
			    public String recurrenceactivityid;

				public String getRecurrenceactivityid () {
					return this.recurrenceactivityid;
				}
				
			    public String noodlecrm__contact_type__c;

				public String getNoodlecrm__contact_type__c () {
					return this.noodlecrm__contact_type__c;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Integer recurrencedayofmonth;

				public Integer getRecurrencedayofmonth () {
					return this.recurrencedayofmonth;
				}
				
			    public String callobject;

				public String getCallobject () {
					return this.callobject;
				}
				
			    public java.util.Date activitydate;

				public java.util.Date getActivitydate () {
					return this.activitydate;
				}
				
			    public String whatid;

				public String getWhatid () {
					return this.whatid;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__category__c;

				public String getNoodlecrm__category__c () {
					return this.noodlecrm__category__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.rcsfl__rc_logging_type__c = readString(dis);
					
						this.recurrencedayofweekmask = readInteger(dis);
					
					this.priority = readString(dis);
					
					this.recurrencemonthofyear = readString(dis);
					
					this.recurrenceinstance = readString(dis);
					
					this.recurrenceenddateonly = readDate(dis);
					
					this.recurrenceregeneratedtype = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isreminderset = null;
           				} else {
           			    	this.isreminderset = dis.readBoolean();
           				}
					
					this.completeddatetime = readDate(dis);
					
					this.accountid = readString(dis);
					
						this.calldurationinseconds = readInteger(dis);
					
					this.recurrencetype = readString(dis);
					
					this.subject = readString(dis);
					
					this.recurrencestartdateonly = readDate(dis);
					
					this.rcsfl__key__c = readString(dis);
					
					this.reminderdatetime = readDate(dis);
					
					this.rcsfl__recording_information__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.ownerid = readString(dis);
					
					this.rcsfl__call_uuid__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ishighpriority = null;
           				} else {
           			    	this.ishighpriority = dis.readBoolean();
           				}
					
					this.lastmodifiedbyid = readString(dis);
					
					this.status = readString(dis);
					
					this.rcsfl__call_unique_id__c = readString(dis);
					
					this.tasksubtype = readString(dis);
					
						this.recurrenceinterval = readInteger(dis);
					
					this.rcsfl__external_whoid__c = readString(dis);
					
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isclosed = null;
           				} else {
           			    	this.isclosed = dis.readBoolean();
           				}
					
					this.calltype = readString(dis);
					
					this.whoid = readString(dis);
					
					this.calldisposition = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isrecurrence = null;
           				} else {
           			    	this.isrecurrence = dis.readBoolean();
           				}
					
					this.createdbyid = readString(dis);
					
					this.recurrencetimezonesidkey = readString(dis);
					
					this.recurrenceactivityid = readString(dis);
					
					this.noodlecrm__contact_type__c = readString(dis);
					
					this.description = readString(dis);
					
						this.recurrencedayofmonth = readInteger(dis);
					
					this.callobject = readString(dis);
					
					this.activitydate = readDate(dis);
					
					this.whatid = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__category__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.rcsfl__rc_logging_type__c,dos);
					
					// Integer
				
						writeInteger(this.recurrencedayofweekmask,dos);
					
					// String
				
						writeString(this.priority,dos);
					
					// String
				
						writeString(this.recurrencemonthofyear,dos);
					
					// String
				
						writeString(this.recurrenceinstance,dos);
					
					// java.util.Date
				
						writeDate(this.recurrenceenddateonly,dos);
					
					// String
				
						writeString(this.recurrenceregeneratedtype,dos);
					
					// Boolean
				
						if(this.isreminderset == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isreminderset);
		            	}
					
					// java.util.Date
				
						writeDate(this.completeddatetime,dos);
					
					// String
				
						writeString(this.accountid,dos);
					
					// Integer
				
						writeInteger(this.calldurationinseconds,dos);
					
					// String
				
						writeString(this.recurrencetype,dos);
					
					// String
				
						writeString(this.subject,dos);
					
					// java.util.Date
				
						writeDate(this.recurrencestartdateonly,dos);
					
					// String
				
						writeString(this.rcsfl__key__c,dos);
					
					// java.util.Date
				
						writeDate(this.reminderdatetime,dos);
					
					// String
				
						writeString(this.rcsfl__recording_information__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// String
				
						writeString(this.rcsfl__call_uuid__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// Boolean
				
						if(this.ishighpriority == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.ishighpriority);
		            	}
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.rcsfl__call_unique_id__c,dos);
					
					// String
				
						writeString(this.tasksubtype,dos);
					
					// Integer
				
						writeInteger(this.recurrenceinterval,dos);
					
					// String
				
						writeString(this.rcsfl__external_whoid__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.isclosed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isclosed);
		            	}
					
					// String
				
						writeString(this.calltype,dos);
					
					// String
				
						writeString(this.whoid,dos);
					
					// String
				
						writeString(this.calldisposition,dos);
					
					// Boolean
				
						if(this.isrecurrence == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isrecurrence);
		            	}
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// String
				
						writeString(this.recurrencetimezonesidkey,dos);
					
					// String
				
						writeString(this.recurrenceactivityid,dos);
					
					// String
				
						writeString(this.noodlecrm__contact_type__c,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Integer
				
						writeInteger(this.recurrencedayofmonth,dos);
					
					// String
				
						writeString(this.callobject,dos);
					
					// java.util.Date
				
						writeDate(this.activitydate,dos);
					
					// String
				
						writeString(this.whatid,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__category__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("rcsfl__rc_logging_type__c="+rcsfl__rc_logging_type__c);
		sb.append(",recurrencedayofweekmask="+String.valueOf(recurrencedayofweekmask));
		sb.append(",priority="+priority);
		sb.append(",recurrencemonthofyear="+recurrencemonthofyear);
		sb.append(",recurrenceinstance="+recurrenceinstance);
		sb.append(",recurrenceenddateonly="+String.valueOf(recurrenceenddateonly));
		sb.append(",recurrenceregeneratedtype="+recurrenceregeneratedtype);
		sb.append(",isreminderset="+String.valueOf(isreminderset));
		sb.append(",completeddatetime="+String.valueOf(completeddatetime));
		sb.append(",accountid="+accountid);
		sb.append(",calldurationinseconds="+String.valueOf(calldurationinseconds));
		sb.append(",recurrencetype="+recurrencetype);
		sb.append(",subject="+subject);
		sb.append(",recurrencestartdateonly="+String.valueOf(recurrencestartdateonly));
		sb.append(",rcsfl__key__c="+rcsfl__key__c);
		sb.append(",reminderdatetime="+String.valueOf(reminderdatetime));
		sb.append(",rcsfl__recording_information__c="+rcsfl__recording_information__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",ownerid="+ownerid);
		sb.append(",rcsfl__call_uuid__c="+rcsfl__call_uuid__c);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",ishighpriority="+String.valueOf(ishighpriority));
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",status="+status);
		sb.append(",rcsfl__call_unique_id__c="+rcsfl__call_unique_id__c);
		sb.append(",tasksubtype="+tasksubtype);
		sb.append(",recurrenceinterval="+String.valueOf(recurrenceinterval));
		sb.append(",rcsfl__external_whoid__c="+rcsfl__external_whoid__c);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",isclosed="+String.valueOf(isclosed));
		sb.append(",calltype="+calltype);
		sb.append(",whoid="+whoid);
		sb.append(",calldisposition="+calldisposition);
		sb.append(",isrecurrence="+String.valueOf(isrecurrence));
		sb.append(",createdbyid="+createdbyid);
		sb.append(",recurrencetimezonesidkey="+recurrencetimezonesidkey);
		sb.append(",recurrenceactivityid="+recurrenceactivityid);
		sb.append(",noodlecrm__contact_type__c="+noodlecrm__contact_type__c);
		sb.append(",description="+description);
		sb.append(",recurrencedayofmonth="+String.valueOf(recurrencedayofmonth));
		sb.append(",callobject="+callobject);
		sb.append(",activitydate="+String.valueOf(activitydate));
		sb.append(",whatid="+whatid);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__category__c="+noodlecrm__category__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
out13Struct out13 = new out13Struct();
out14Struct out14 = new out14Struct();





	
	/**
	 * [tFileOutputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_7", false);
		start_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out13");
					}
				
		int tos_count_tFileOutputDelimited_7 = 0;
		

String fileName_tFileOutputDelimited_7 = "";
    fileName_tFileOutputDelimited_7 = (new java.io.File(context.staging_S3_dir + "task.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_7 = null;
    String extension_tFileOutputDelimited_7 = null;
    String directory_tFileOutputDelimited_7 = null;
    if((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
            extension_tFileOutputDelimited_7 = "";
        } else {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("."));
            extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("."));
            extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
            extension_tFileOutputDelimited_7 = "";
        }
        directory_tFileOutputDelimited_7 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_7 = true;
    java.io.File filetFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
    globalMap.put("tFileOutputDelimited_7_FILE_NAME",fileName_tFileOutputDelimited_7);
                String[] headColutFileOutputDelimited_7=new String[47];
            class CSVBasicSet_tFileOutputDelimited_7{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_7[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_7 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_7[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_7[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_7 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_7[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_7[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_7 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_7[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_7 = 0;
            int splitedFileNo_tFileOutputDelimited_7 =0;
            int currentRow_tFileOutputDelimited_7 = 0;


            CSVBasicSet_tFileOutputDelimited_7 csvSettings_tFileOutputDelimited_7 = new CSVBasicSet_tFileOutputDelimited_7();
            csvSettings_tFileOutputDelimited_7.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_7.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_7.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_7 != null && directory_tFileOutputDelimited_7.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_7 = new java.io.File(directory_tFileOutputDelimited_7);
                        if(!dir_tFileOutputDelimited_7.exists()) {
                            dir_tFileOutputDelimited_7.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
                            if(fileToDelete_tFileOutputDelimited_7.exists()) {
                                fileToDelete_tFileOutputDelimited_7.delete();
                            }
                            CsvWritertFileOutputDelimited_7 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_7, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_7.setSeparator(csvSettings_tFileOutputDelimited_7.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_7.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_7.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_7.setLineEnd(""+csvSettings_tFileOutputDelimited_7.getRowDelim());
                    }
                        if(filetFileOutputDelimited_7.length()==0){
                                    headColutFileOutputDelimited_7[0]="rcsfl__rc_logging_type__c";
                                    headColutFileOutputDelimited_7[1]="recurrencedayofweekmask";
                                    headColutFileOutputDelimited_7[2]="priority";
                                    headColutFileOutputDelimited_7[3]="recurrencemonthofyear";
                                    headColutFileOutputDelimited_7[4]="recurrenceinstance";
                                    headColutFileOutputDelimited_7[5]="recurrenceenddateonly";
                                    headColutFileOutputDelimited_7[6]="recurrenceregeneratedtype";
                                    headColutFileOutputDelimited_7[7]="isreminderset";
                                    headColutFileOutputDelimited_7[8]="completeddatetime";
                                    headColutFileOutputDelimited_7[9]="accountid";
                                    headColutFileOutputDelimited_7[10]="calldurationinseconds";
                                    headColutFileOutputDelimited_7[11]="recurrencetype";
                                    headColutFileOutputDelimited_7[12]="subject";
                                    headColutFileOutputDelimited_7[13]="recurrencestartdateonly";
                                    headColutFileOutputDelimited_7[14]="rcsfl__key__c";
                                    headColutFileOutputDelimited_7[15]="reminderdatetime";
                                    headColutFileOutputDelimited_7[16]="rcsfl__recording_information__c";
                                    headColutFileOutputDelimited_7[17]="lastmodifieddate";
                                    headColutFileOutputDelimited_7[18]="ownerid";
                                    headColutFileOutputDelimited_7[19]="rcsfl__call_uuid__c";
                                    headColutFileOutputDelimited_7[20]="isdeleted";
                                    headColutFileOutputDelimited_7[21]="systemmodstamp";
                                    headColutFileOutputDelimited_7[22]="ishighpriority";
                                    headColutFileOutputDelimited_7[23]="lastmodifiedbyid";
                                    headColutFileOutputDelimited_7[24]="status";
                                    headColutFileOutputDelimited_7[25]="rcsfl__call_unique_id__c";
                                    headColutFileOutputDelimited_7[26]="tasksubtype";
                                    headColutFileOutputDelimited_7[27]="recurrenceinterval";
                                    headColutFileOutputDelimited_7[28]="rcsfl__external_whoid__c";
                                    headColutFileOutputDelimited_7[29]="createddate";
                                    headColutFileOutputDelimited_7[30]="isclosed";
                                    headColutFileOutputDelimited_7[31]="calltype";
                                    headColutFileOutputDelimited_7[32]="whoid";
                                    headColutFileOutputDelimited_7[33]="calldisposition";
                                    headColutFileOutputDelimited_7[34]="isrecurrence";
                                    headColutFileOutputDelimited_7[35]="createdbyid";
                                    headColutFileOutputDelimited_7[36]="recurrencetimezonesidkey";
                                    headColutFileOutputDelimited_7[37]="recurrenceactivityid";
                                    headColutFileOutputDelimited_7[38]="noodlecrm__contact_type__c";
                                    headColutFileOutputDelimited_7[39]="description";
                                    headColutFileOutputDelimited_7[40]="recurrencedayofmonth";
                                    headColutFileOutputDelimited_7[41]="callobject";
                                    headColutFileOutputDelimited_7[42]="activitydate";
                                    headColutFileOutputDelimited_7[43]="whatid";
                                    headColutFileOutputDelimited_7[44]="sfid";
                                    headColutFileOutputDelimited_7[45]="id";
                                    headColutFileOutputDelimited_7[46]="noodlecrm__category__c";
                            CsvWritertFileOutputDelimited_7.writeNext(headColutFileOutputDelimited_7);
                            CsvWritertFileOutputDelimited_7.flush();
                        }
                CsvWritertFileOutputDelimited_7.setEscapeChar(csvSettings_tFileOutputDelimited_7.getEscapeChar());
                CsvWritertFileOutputDelimited_7.setQuoteChar(csvSettings_tFileOutputDelimited_7.getTextEnclosure());
                CsvWritertFileOutputDelimited_7.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_7", CsvWritertFileOutputDelimited_7);
resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

 



/**
 * [tFileOutputDelimited_7 begin ] stop
 */




	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out14");
					}
				
		int tos_count_tDBOutput_7 = 0;
		





String dbschema_tDBOutput_7 = null;
	dbschema_tDBOutput_7 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_7 = null;
if(dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
	tableName_tDBOutput_7 = ("task");
} else {
	tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\"" + ("task");
}

int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;
int rejectedCount_tDBOutput_7=0;

boolean whetherReject_tDBOutput_7 = false;

java.sql.Connection conn_tDBOutput_7 = null;
String dbUser_tDBOutput_7 = null;

	conn_tDBOutput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_7 = 100000;
   int batchSizeCounter_tDBOutput_7=0;

int count_tDBOutput_7=0;
            try (java.sql.Statement stmtClear_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                stmtClear_tDBOutput_7.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_7 + "\"");
            }
	    String insert_tDBOutput_7 = "INSERT INTO \"" + tableName_tDBOutput_7 + "\" (\"rcsfl__rc_logging_type__c\",\"recurrencedayofweekmask\",\"priority\",\"recurrencemonthofyear\",\"recurrenceinstance\",\"recurrenceenddateonly\",\"recurrenceregeneratedtype\",\"isreminderset\",\"completeddatetime\",\"accountid\",\"calldurationinseconds\",\"recurrencetype\",\"subject\",\"recurrencestartdateonly\",\"rcsfl__key__c\",\"reminderdatetime\",\"rcsfl__recording_information__c\",\"lastmodifieddate\",\"ownerid\",\"rcsfl__call_uuid__c\",\"isdeleted\",\"systemmodstamp\",\"ishighpriority\",\"lastmodifiedbyid\",\"status\",\"rcsfl__call_unique_id__c\",\"tasksubtype\",\"recurrenceinterval\",\"rcsfl__external_whoid__c\",\"createddate\",\"isclosed\",\"calltype\",\"whoid\",\"calldisposition\",\"isrecurrence\",\"createdbyid\",\"recurrencetimezonesidkey\",\"recurrenceactivityid\",\"noodlecrm__contact_type__c\",\"description\",\"recurrencedayofmonth\",\"callobject\",\"activitydate\",\"whatid\",\"sfid\",\"id\",\"noodlecrm__category__c\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
	    resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
	    

 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
out13Struct out13_tmp = new out13Struct();
out14Struct out14_tmp = new out14Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT \n rcsfl__rc_logging_type__c, \n recurrencedayofweekmask, \n priority, \n recurrencemonthofyear, \n recurrencein"
+"stance, \n recurrenceenddateonly, \n recurrenceregeneratedtype, \n isreminderset, \n completeddatetime, \n accountid, \n"
+" calldurationinseconds, \n recurrencetype, \n subject, \n recurrencestartdateonly, \n rcsfl__key__c, \n reminderdatetime"
+", \n rcsfl__recording_information__c, \n lastmodifieddate, \n ownerid, \n rcsfl__call_uuid__c, \n isdeleted, \n systemmo"
+"dstamp, \n ishighpriority, \n lastmodifiedbyid, \n status, \n rcsfl__call_unique_id__c, \n tasksubtype, \n recurrenceint"
+"erval, \n rcsfl__external_whoid__c, \n createddate, \n isclosed, \n calltype, \n whoid, \n calldisposition, \n isrecurre"
+"nce, \n createdbyid, \n recurrencetimezonesidkey, \n recurrenceactivityid, \n noodlecrm__contact_type__c, \n description"
+", \n recurrencedayofmonth, \n callobject, \n activitydate, \n whatid, \n sfid, \n id, \n noodlecrm__category__c\nFROM "+context.university_code+".task";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row7.rcsfl__rc_logging_type__c = null;
							} else {
	                         		
        	row7.rcsfl__rc_logging_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_7, 1, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row7.recurrencedayofweekmask = null;
							} else {
		                          
            row7.recurrencedayofweekmask = rs_tDBInput_7.getInt(2);
            if(rs_tDBInput_7.wasNull()){
                    row7.recurrencedayofweekmask = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								row7.priority = null;
							} else {
	                         		
        	row7.priority = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								row7.recurrencemonthofyear = null;
							} else {
	                         		
        	row7.recurrencemonthofyear = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 5) {
								row7.recurrenceinstance = null;
							} else {
	                         		
        	row7.recurrenceinstance = routines.system.JDBCUtil.getString(rs_tDBInput_7, 5, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 6) {
								row7.recurrenceenddateonly = null;
							} else {
										
			row7.recurrenceenddateonly = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 6);
		                    }
							if(colQtyInRs_tDBInput_7 < 7) {
								row7.recurrenceregeneratedtype = null;
							} else {
	                         		
        	row7.recurrenceregeneratedtype = routines.system.JDBCUtil.getString(rs_tDBInput_7, 7, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 8) {
								row7.isreminderset = null;
							} else {
	                         		
            row7.isreminderset = rs_tDBInput_7.getBoolean(8);
            if(rs_tDBInput_7.wasNull()){
                    row7.isreminderset = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 9) {
								row7.completeddatetime = null;
							} else {
										
			row7.completeddatetime = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 9);
		                    }
							if(colQtyInRs_tDBInput_7 < 10) {
								row7.accountid = null;
							} else {
	                         		
        	row7.accountid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 10, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 11) {
								row7.calldurationinseconds = null;
							} else {
		                          
            row7.calldurationinseconds = rs_tDBInput_7.getInt(11);
            if(rs_tDBInput_7.wasNull()){
                    row7.calldurationinseconds = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 12) {
								row7.recurrencetype = null;
							} else {
	                         		
        	row7.recurrencetype = routines.system.JDBCUtil.getString(rs_tDBInput_7, 12, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 13) {
								row7.subject = null;
							} else {
	                         		
        	row7.subject = routines.system.JDBCUtil.getString(rs_tDBInput_7, 13, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 14) {
								row7.recurrencestartdateonly = null;
							} else {
										
			row7.recurrencestartdateonly = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 14);
		                    }
							if(colQtyInRs_tDBInput_7 < 15) {
								row7.rcsfl__key__c = null;
							} else {
	                         		
        	row7.rcsfl__key__c = routines.system.JDBCUtil.getString(rs_tDBInput_7, 15, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 16) {
								row7.reminderdatetime = null;
							} else {
										
			row7.reminderdatetime = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 16);
		                    }
							if(colQtyInRs_tDBInput_7 < 17) {
								row7.rcsfl__recording_information__c = null;
							} else {
	                         		
        	row7.rcsfl__recording_information__c = routines.system.JDBCUtil.getString(rs_tDBInput_7, 17, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 18) {
								row7.lastmodifieddate = null;
							} else {
										
			row7.lastmodifieddate = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 18);
		                    }
							if(colQtyInRs_tDBInput_7 < 19) {
								row7.ownerid = null;
							} else {
	                         		
        	row7.ownerid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 19, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 20) {
								row7.rcsfl__call_uuid__c = null;
							} else {
	                         		
        	row7.rcsfl__call_uuid__c = routines.system.JDBCUtil.getString(rs_tDBInput_7, 20, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 21) {
								row7.isdeleted = null;
							} else {
	                         		
            row7.isdeleted = rs_tDBInput_7.getBoolean(21);
            if(rs_tDBInput_7.wasNull()){
                    row7.isdeleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 22) {
								row7.systemmodstamp = null;
							} else {
										
			row7.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 22);
		                    }
							if(colQtyInRs_tDBInput_7 < 23) {
								row7.ishighpriority = null;
							} else {
	                         		
            row7.ishighpriority = rs_tDBInput_7.getBoolean(23);
            if(rs_tDBInput_7.wasNull()){
                    row7.ishighpriority = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 24) {
								row7.lastmodifiedbyid = null;
							} else {
	                         		
        	row7.lastmodifiedbyid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 24, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 25) {
								row7.status = null;
							} else {
	                         		
        	row7.status = routines.system.JDBCUtil.getString(rs_tDBInput_7, 25, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 26) {
								row7.rcsfl__call_unique_id__c = null;
							} else {
	                         		
        	row7.rcsfl__call_unique_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_7, 26, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 27) {
								row7.tasksubtype = null;
							} else {
	                         		
        	row7.tasksubtype = routines.system.JDBCUtil.getString(rs_tDBInput_7, 27, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 28) {
								row7.recurrenceinterval = null;
							} else {
		                          
            row7.recurrenceinterval = rs_tDBInput_7.getInt(28);
            if(rs_tDBInput_7.wasNull()){
                    row7.recurrenceinterval = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 29) {
								row7.rcsfl__external_whoid__c = null;
							} else {
	                         		
        	row7.rcsfl__external_whoid__c = routines.system.JDBCUtil.getString(rs_tDBInput_7, 29, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 30) {
								row7.createddate = null;
							} else {
										
			row7.createddate = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 30);
		                    }
							if(colQtyInRs_tDBInput_7 < 31) {
								row7.isclosed = null;
							} else {
	                         		
            row7.isclosed = rs_tDBInput_7.getBoolean(31);
            if(rs_tDBInput_7.wasNull()){
                    row7.isclosed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 32) {
								row7.calltype = null;
							} else {
	                         		
        	row7.calltype = routines.system.JDBCUtil.getString(rs_tDBInput_7, 32, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 33) {
								row7.whoid = null;
							} else {
	                         		
        	row7.whoid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 33, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 34) {
								row7.calldisposition = null;
							} else {
	                         		
        	row7.calldisposition = routines.system.JDBCUtil.getString(rs_tDBInput_7, 34, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 35) {
								row7.isrecurrence = null;
							} else {
	                         		
            row7.isrecurrence = rs_tDBInput_7.getBoolean(35);
            if(rs_tDBInput_7.wasNull()){
                    row7.isrecurrence = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 36) {
								row7.createdbyid = null;
							} else {
	                         		
        	row7.createdbyid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 36, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 37) {
								row7.recurrencetimezonesidkey = null;
							} else {
	                         		
        	row7.recurrencetimezonesidkey = routines.system.JDBCUtil.getString(rs_tDBInput_7, 37, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 38) {
								row7.recurrenceactivityid = null;
							} else {
	                         		
        	row7.recurrenceactivityid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 38, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 39) {
								row7.noodlecrm__contact_type__c = null;
							} else {
	                         		
        	row7.noodlecrm__contact_type__c = routines.system.JDBCUtil.getString(rs_tDBInput_7, 39, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 40) {
								row7.description = null;
							} else {
	                         		
        	row7.description = routines.system.JDBCUtil.getString(rs_tDBInput_7, 40, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 41) {
								row7.recurrencedayofmonth = null;
							} else {
		                          
            row7.recurrencedayofmonth = rs_tDBInput_7.getInt(41);
            if(rs_tDBInput_7.wasNull()){
                    row7.recurrencedayofmonth = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 42) {
								row7.callobject = null;
							} else {
	                         		
        	row7.callobject = routines.system.JDBCUtil.getString(rs_tDBInput_7, 42, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 43) {
								row7.activitydate = null;
							} else {
										
			row7.activitydate = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 43);
		                    }
							if(colQtyInRs_tDBInput_7 < 44) {
								row7.whatid = null;
							} else {
	                         		
        	row7.whatid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 44, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 45) {
								row7.sfid = null;
							} else {
	                         		
        	row7.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 45, true);
		                    }
							if(colQtyInRs_tDBInput_7 < 46) {
								row7.id = 0;
							} else {
		                          
            row7.id = rs_tDBInput_7.getInt(46);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 47) {
								row7.noodlecrm__category__c = null;
							} else {
	                         		
        	row7.noodlecrm__category__c = routines.system.JDBCUtil.getString(rs_tDBInput_7, 47, true);
		                    }
					


 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

out13 = null;
out14 = null;


// # Output table : 'out13'
out13_tmp.rcsfl__rc_logging_type__c = row7.rcsfl__rc_logging_type__c ;
out13_tmp.recurrencedayofweekmask = row7.recurrencedayofweekmask ;
out13_tmp.priority = row7.priority ;
out13_tmp.recurrencemonthofyear = row7.recurrencemonthofyear ;
out13_tmp.recurrenceinstance = row7.recurrenceinstance ;
out13_tmp.recurrenceenddateonly = row7.recurrenceenddateonly ;
out13_tmp.recurrenceregeneratedtype = row7.recurrenceregeneratedtype ;
out13_tmp.isreminderset = row7.isreminderset ;
out13_tmp.completeddatetime = row7.completeddatetime ;
out13_tmp.accountid = row7.accountid ;
out13_tmp.calldurationinseconds = row7.calldurationinseconds ;
out13_tmp.recurrencetype = row7.recurrencetype ;
out13_tmp.subject = row7.subject ;
out13_tmp.recurrencestartdateonly = row7.recurrencestartdateonly ;
out13_tmp.rcsfl__key__c = row7.rcsfl__key__c ;
out13_tmp.reminderdatetime = row7.reminderdatetime ;
out13_tmp.rcsfl__recording_information__c = row7.rcsfl__recording_information__c ;
out13_tmp.lastmodifieddate = row7.lastmodifieddate ;
out13_tmp.ownerid = row7.ownerid ;
out13_tmp.rcsfl__call_uuid__c = row7.rcsfl__call_uuid__c ;
out13_tmp.isdeleted = row7.isdeleted ;
out13_tmp.systemmodstamp = row7.systemmodstamp ;
out13_tmp.ishighpriority = row7.ishighpriority ;
out13_tmp.lastmodifiedbyid = row7.lastmodifiedbyid ;
out13_tmp.status = row7.status ;
out13_tmp.rcsfl__call_unique_id__c = row7.rcsfl__call_unique_id__c ;
out13_tmp.tasksubtype = row7.tasksubtype ;
out13_tmp.recurrenceinterval = row7.recurrenceinterval ;
out13_tmp.rcsfl__external_whoid__c = row7.rcsfl__external_whoid__c ;
out13_tmp.createddate = row7.createddate ;
out13_tmp.isclosed = row7.isclosed ;
out13_tmp.calltype = row7.calltype ;
out13_tmp.whoid = row7.whoid ;
out13_tmp.calldisposition = row7.calldisposition ;
out13_tmp.isrecurrence = row7.isrecurrence ;
out13_tmp.createdbyid = row7.createdbyid ;
out13_tmp.recurrencetimezonesidkey = row7.recurrencetimezonesidkey ;
out13_tmp.recurrenceactivityid = row7.recurrenceactivityid ;
out13_tmp.noodlecrm__contact_type__c = row7.noodlecrm__contact_type__c ;
out13_tmp.description = row7.description ;
out13_tmp.recurrencedayofmonth = row7.recurrencedayofmonth ;
out13_tmp.callobject = row7.callobject ;
out13_tmp.activitydate = row7.activitydate ;
out13_tmp.whatid = row7.whatid ;
out13_tmp.sfid = row7.sfid ;
out13_tmp.id = row7.id ;
out13_tmp.noodlecrm__category__c = row7.noodlecrm__category__c ;
out13 = out13_tmp;

// # Output table : 'out14'
out14_tmp.rcsfl__rc_logging_type__c = row7.rcsfl__rc_logging_type__c ;
out14_tmp.recurrencedayofweekmask = row7.recurrencedayofweekmask ;
out14_tmp.priority = row7.priority ;
out14_tmp.recurrencemonthofyear = row7.recurrencemonthofyear ;
out14_tmp.recurrenceinstance = row7.recurrenceinstance ;
out14_tmp.recurrenceenddateonly = row7.recurrenceenddateonly ;
out14_tmp.recurrenceregeneratedtype = row7.recurrenceregeneratedtype ;
out14_tmp.isreminderset = row7.isreminderset ;
out14_tmp.completeddatetime = row7.completeddatetime ;
out14_tmp.accountid = row7.accountid ;
out14_tmp.calldurationinseconds = row7.calldurationinseconds ;
out14_tmp.recurrencetype = row7.recurrencetype ;
out14_tmp.subject = row7.subject ;
out14_tmp.recurrencestartdateonly = row7.recurrencestartdateonly ;
out14_tmp.rcsfl__key__c = row7.rcsfl__key__c ;
out14_tmp.reminderdatetime = row7.reminderdatetime ;
out14_tmp.rcsfl__recording_information__c = row7.rcsfl__recording_information__c ;
out14_tmp.lastmodifieddate = row7.lastmodifieddate ;
out14_tmp.ownerid = row7.ownerid ;
out14_tmp.rcsfl__call_uuid__c = row7.rcsfl__call_uuid__c ;
out14_tmp.isdeleted = row7.isdeleted ;
out14_tmp.systemmodstamp = row7.systemmodstamp ;
out14_tmp.ishighpriority = row7.ishighpriority ;
out14_tmp.lastmodifiedbyid = row7.lastmodifiedbyid ;
out14_tmp.status = row7.status ;
out14_tmp.rcsfl__call_unique_id__c = row7.rcsfl__call_unique_id__c ;
out14_tmp.tasksubtype = row7.tasksubtype ;
out14_tmp.recurrenceinterval = row7.recurrenceinterval ;
out14_tmp.rcsfl__external_whoid__c = row7.rcsfl__external_whoid__c ;
out14_tmp.createddate = row7.createddate ;
out14_tmp.isclosed = row7.isclosed ;
out14_tmp.calltype = row7.calltype ;
out14_tmp.whoid = row7.whoid ;
out14_tmp.calldisposition = row7.calldisposition ;
out14_tmp.isrecurrence = row7.isrecurrence ;
out14_tmp.createdbyid = row7.createdbyid ;
out14_tmp.recurrencetimezonesidkey = row7.recurrencetimezonesidkey ;
out14_tmp.recurrenceactivityid = row7.recurrenceactivityid ;
out14_tmp.noodlecrm__contact_type__c = row7.noodlecrm__contact_type__c ;
out14_tmp.description = row7.description ;
out14_tmp.recurrencedayofmonth = row7.recurrencedayofmonth ;
out14_tmp.callobject = row7.callobject ;
out14_tmp.activitydate = row7.activitydate ;
out14_tmp.whatid = row7.whatid ;
out14_tmp.sfid = row7.sfid ;
out14_tmp.id = row7.id ;
out14_tmp.noodlecrm__category__c = row7.noodlecrm__category__c ;
out14 = out14_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "out13"
if(out13 != null) { 



	
	/**
	 * [tFileOutputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out13");
					}
					


                        String[] rowtFileOutputDelimited_7=new String[47];
                            rowtFileOutputDelimited_7[0]=out13.rcsfl__rc_logging_type__c == null ? null : out13.rcsfl__rc_logging_type__c;
                            rowtFileOutputDelimited_7[1]=out13.recurrencedayofweekmask == null ? null : String.valueOf(out13.recurrencedayofweekmask);
                            rowtFileOutputDelimited_7[2]=out13.priority == null ? null : out13.priority;
                            rowtFileOutputDelimited_7[3]=out13.recurrencemonthofyear == null ? null : out13.recurrencemonthofyear;
                            rowtFileOutputDelimited_7[4]=out13.recurrenceinstance == null ? null : out13.recurrenceinstance;
                            rowtFileOutputDelimited_7[5]=out13.recurrenceenddateonly == null ? null : FormatterUtils.format_Date(out13.recurrenceenddateonly, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_7[6]=out13.recurrenceregeneratedtype == null ? null : out13.recurrenceregeneratedtype;
                            rowtFileOutputDelimited_7[7]=out13.isreminderset == null ? null : String.valueOf(out13.isreminderset);
                            rowtFileOutputDelimited_7[8]=out13.completeddatetime == null ? null : FormatterUtils.format_Date(out13.completeddatetime, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_7[9]=out13.accountid == null ? null : out13.accountid;
                            rowtFileOutputDelimited_7[10]=out13.calldurationinseconds == null ? null : String.valueOf(out13.calldurationinseconds);
                            rowtFileOutputDelimited_7[11]=out13.recurrencetype == null ? null : out13.recurrencetype;
                            rowtFileOutputDelimited_7[12]=out13.subject == null ? null : out13.subject;
                            rowtFileOutputDelimited_7[13]=out13.recurrencestartdateonly == null ? null : FormatterUtils.format_Date(out13.recurrencestartdateonly, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_7[14]=out13.rcsfl__key__c == null ? null : out13.rcsfl__key__c;
                            rowtFileOutputDelimited_7[15]=out13.reminderdatetime == null ? null : FormatterUtils.format_Date(out13.reminderdatetime, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_7[16]=out13.rcsfl__recording_information__c == null ? null : out13.rcsfl__recording_information__c;
                            rowtFileOutputDelimited_7[17]=out13.lastmodifieddate == null ? null : FormatterUtils.format_Date(out13.lastmodifieddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_7[18]=out13.ownerid == null ? null : out13.ownerid;
                            rowtFileOutputDelimited_7[19]=out13.rcsfl__call_uuid__c == null ? null : out13.rcsfl__call_uuid__c;
                            rowtFileOutputDelimited_7[20]=out13.isdeleted == null ? null : String.valueOf(out13.isdeleted);
                            rowtFileOutputDelimited_7[21]=out13.systemmodstamp == null ? null : FormatterUtils.format_Date(out13.systemmodstamp, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_7[22]=out13.ishighpriority == null ? null : String.valueOf(out13.ishighpriority);
                            rowtFileOutputDelimited_7[23]=out13.lastmodifiedbyid == null ? null : out13.lastmodifiedbyid;
                            rowtFileOutputDelimited_7[24]=out13.status == null ? null : out13.status;
                            rowtFileOutputDelimited_7[25]=out13.rcsfl__call_unique_id__c == null ? null : out13.rcsfl__call_unique_id__c;
                            rowtFileOutputDelimited_7[26]=out13.tasksubtype == null ? null : out13.tasksubtype;
                            rowtFileOutputDelimited_7[27]=out13.recurrenceinterval == null ? null : String.valueOf(out13.recurrenceinterval);
                            rowtFileOutputDelimited_7[28]=out13.rcsfl__external_whoid__c == null ? null : out13.rcsfl__external_whoid__c;
                            rowtFileOutputDelimited_7[29]=out13.createddate == null ? null : FormatterUtils.format_Date(out13.createddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_7[30]=out13.isclosed == null ? null : String.valueOf(out13.isclosed);
                            rowtFileOutputDelimited_7[31]=out13.calltype == null ? null : out13.calltype;
                            rowtFileOutputDelimited_7[32]=out13.whoid == null ? null : out13.whoid;
                            rowtFileOutputDelimited_7[33]=out13.calldisposition == null ? null : out13.calldisposition;
                            rowtFileOutputDelimited_7[34]=out13.isrecurrence == null ? null : String.valueOf(out13.isrecurrence);
                            rowtFileOutputDelimited_7[35]=out13.createdbyid == null ? null : out13.createdbyid;
                            rowtFileOutputDelimited_7[36]=out13.recurrencetimezonesidkey == null ? null : out13.recurrencetimezonesidkey;
                            rowtFileOutputDelimited_7[37]=out13.recurrenceactivityid == null ? null : out13.recurrenceactivityid;
                            rowtFileOutputDelimited_7[38]=out13.noodlecrm__contact_type__c == null ? null : out13.noodlecrm__contact_type__c;
                            rowtFileOutputDelimited_7[39]=out13.description == null ? null : out13.description;
                            rowtFileOutputDelimited_7[40]=out13.recurrencedayofmonth == null ? null : String.valueOf(out13.recurrencedayofmonth);
                            rowtFileOutputDelimited_7[41]=out13.callobject == null ? null : out13.callobject;
                            rowtFileOutputDelimited_7[42]=out13.activitydate == null ? null : FormatterUtils.format_Date(out13.activitydate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_7[43]=out13.whatid == null ? null : out13.whatid;
                            rowtFileOutputDelimited_7[44]=out13.sfid == null ? null : out13.sfid;
                            rowtFileOutputDelimited_7[45]=String.valueOf(out13.id);
                            rowtFileOutputDelimited_7[46]=out13.noodlecrm__category__c == null ? null : out13.noodlecrm__category__c;
                nb_line_tFileOutputDelimited_7++;
                resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);
                                       CsvWritertFileOutputDelimited_7.writeNext(rowtFileOutputDelimited_7);




 


	tos_count_tFileOutputDelimited_7++;

/**
 * [tFileOutputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	

 



/**
 * [tFileOutputDelimited_7 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	

 



/**
 * [tFileOutputDelimited_7 process_data_end ] stop
 */

} // End of branch "out13"




// Start of branch "out14"
if(out14 != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out14");
					}
					



        whetherReject_tDBOutput_7 = false;
                    if(out14.rcsfl__rc_logging_type__c == null) {
pstmt_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(1, out14.rcsfl__rc_logging_type__c);
}

                    if(out14.recurrencedayofweekmask == null) {
pstmt_tDBOutput_7.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(2, out14.recurrencedayofweekmask);
}

                    if(out14.priority == null) {
pstmt_tDBOutput_7.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(3, out14.priority);
}

                    if(out14.recurrencemonthofyear == null) {
pstmt_tDBOutput_7.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(4, out14.recurrencemonthofyear);
}

                    if(out14.recurrenceinstance == null) {
pstmt_tDBOutput_7.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(5, out14.recurrenceinstance);
}

                    if(out14.recurrenceenddateonly != null) {
pstmt_tDBOutput_7.setTimestamp(6, new java.sql.Timestamp(out14.recurrenceenddateonly.getTime()));
} else {
pstmt_tDBOutput_7.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(out14.recurrenceregeneratedtype == null) {
pstmt_tDBOutput_7.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(7, out14.recurrenceregeneratedtype);
}

                    if(out14.isreminderset == null) {
pstmt_tDBOutput_7.setNull(8, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_7.setBoolean(8, out14.isreminderset);
}

                    if(out14.completeddatetime != null) {
pstmt_tDBOutput_7.setTimestamp(9, new java.sql.Timestamp(out14.completeddatetime.getTime()));
} else {
pstmt_tDBOutput_7.setNull(9, java.sql.Types.TIMESTAMP);
}

                    if(out14.accountid == null) {
pstmt_tDBOutput_7.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(10, out14.accountid);
}

                    if(out14.calldurationinseconds == null) {
pstmt_tDBOutput_7.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(11, out14.calldurationinseconds);
}

                    if(out14.recurrencetype == null) {
pstmt_tDBOutput_7.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(12, out14.recurrencetype);
}

                    if(out14.subject == null) {
pstmt_tDBOutput_7.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(13, out14.subject);
}

                    if(out14.recurrencestartdateonly != null) {
pstmt_tDBOutput_7.setTimestamp(14, new java.sql.Timestamp(out14.recurrencestartdateonly.getTime()));
} else {
pstmt_tDBOutput_7.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(out14.rcsfl__key__c == null) {
pstmt_tDBOutput_7.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(15, out14.rcsfl__key__c);
}

                    if(out14.reminderdatetime != null) {
pstmt_tDBOutput_7.setTimestamp(16, new java.sql.Timestamp(out14.reminderdatetime.getTime()));
} else {
pstmt_tDBOutput_7.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(out14.rcsfl__recording_information__c == null) {
pstmt_tDBOutput_7.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(17, out14.rcsfl__recording_information__c);
}

                    if(out14.lastmodifieddate != null) {
pstmt_tDBOutput_7.setTimestamp(18, new java.sql.Timestamp(out14.lastmodifieddate.getTime()));
} else {
pstmt_tDBOutput_7.setNull(18, java.sql.Types.TIMESTAMP);
}

                    if(out14.ownerid == null) {
pstmt_tDBOutput_7.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(19, out14.ownerid);
}

                    if(out14.rcsfl__call_uuid__c == null) {
pstmt_tDBOutput_7.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(20, out14.rcsfl__call_uuid__c);
}

                    if(out14.isdeleted == null) {
pstmt_tDBOutput_7.setNull(21, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_7.setBoolean(21, out14.isdeleted);
}

                    if(out14.systemmodstamp != null) {
pstmt_tDBOutput_7.setTimestamp(22, new java.sql.Timestamp(out14.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_7.setNull(22, java.sql.Types.TIMESTAMP);
}

                    if(out14.ishighpriority == null) {
pstmt_tDBOutput_7.setNull(23, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_7.setBoolean(23, out14.ishighpriority);
}

                    if(out14.lastmodifiedbyid == null) {
pstmt_tDBOutput_7.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(24, out14.lastmodifiedbyid);
}

                    if(out14.status == null) {
pstmt_tDBOutput_7.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(25, out14.status);
}

                    if(out14.rcsfl__call_unique_id__c == null) {
pstmt_tDBOutput_7.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(26, out14.rcsfl__call_unique_id__c);
}

                    if(out14.tasksubtype == null) {
pstmt_tDBOutput_7.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(27, out14.tasksubtype);
}

                    if(out14.recurrenceinterval == null) {
pstmt_tDBOutput_7.setNull(28, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(28, out14.recurrenceinterval);
}

                    if(out14.rcsfl__external_whoid__c == null) {
pstmt_tDBOutput_7.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(29, out14.rcsfl__external_whoid__c);
}

                    if(out14.createddate != null) {
pstmt_tDBOutput_7.setTimestamp(30, new java.sql.Timestamp(out14.createddate.getTime()));
} else {
pstmt_tDBOutput_7.setNull(30, java.sql.Types.TIMESTAMP);
}

                    if(out14.isclosed == null) {
pstmt_tDBOutput_7.setNull(31, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_7.setBoolean(31, out14.isclosed);
}

                    if(out14.calltype == null) {
pstmt_tDBOutput_7.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(32, out14.calltype);
}

                    if(out14.whoid == null) {
pstmt_tDBOutput_7.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(33, out14.whoid);
}

                    if(out14.calldisposition == null) {
pstmt_tDBOutput_7.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(34, out14.calldisposition);
}

                    if(out14.isrecurrence == null) {
pstmt_tDBOutput_7.setNull(35, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_7.setBoolean(35, out14.isrecurrence);
}

                    if(out14.createdbyid == null) {
pstmt_tDBOutput_7.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(36, out14.createdbyid);
}

                    if(out14.recurrencetimezonesidkey == null) {
pstmt_tDBOutput_7.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(37, out14.recurrencetimezonesidkey);
}

                    if(out14.recurrenceactivityid == null) {
pstmt_tDBOutput_7.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(38, out14.recurrenceactivityid);
}

                    if(out14.noodlecrm__contact_type__c == null) {
pstmt_tDBOutput_7.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(39, out14.noodlecrm__contact_type__c);
}

                    if(out14.description == null) {
pstmt_tDBOutput_7.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(40, out14.description);
}

                    if(out14.recurrencedayofmonth == null) {
pstmt_tDBOutput_7.setNull(41, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_7.setInt(41, out14.recurrencedayofmonth);
}

                    if(out14.callobject == null) {
pstmt_tDBOutput_7.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(42, out14.callobject);
}

                    if(out14.activitydate != null) {
pstmt_tDBOutput_7.setTimestamp(43, new java.sql.Timestamp(out14.activitydate.getTime()));
} else {
pstmt_tDBOutput_7.setNull(43, java.sql.Types.TIMESTAMP);
}

                    if(out14.whatid == null) {
pstmt_tDBOutput_7.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(44, out14.whatid);
}

                    if(out14.sfid == null) {
pstmt_tDBOutput_7.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(45, out14.sfid);
}

                    pstmt_tDBOutput_7.setInt(46, out14.id);

                    if(out14.noodlecrm__category__c == null) {
pstmt_tDBOutput_7.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(47, out14.noodlecrm__category__c);
}

			
    		pstmt_tDBOutput_7.addBatch();
    		nb_line_tDBOutput_7++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_7++;
    		  
            if(!whetherReject_tDBOutput_7) {
            }
    			if ((batchSize_tDBOutput_7 > 0) && (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
                try {
						int countSum_tDBOutput_7 = 0;
						    
						for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}
				    	
				    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
				    	
            	    	batchSizeCounter_tDBOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_7){
				    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
				    	String errormessage_tDBOutput_7;
						if (ne_tDBOutput_7 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
							errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
						}else{
							errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
						}
				    	
				    	int countSum_tDBOutput_7 = 0;
						for(int countEach_tDBOutput_7: e_tDBOutput_7.getUpdateCounts()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}
						
				    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
				    	
				    	System.err.println(errormessage_tDBOutput_7);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "out14"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_7!=null) {
				    	CsvWritertFileOutputDelimited_7.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_7_NB_LINE",nb_line_tFileOutputDelimited_7);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_7", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out13");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_7", true);
end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk92", 0, "ok");
				}
				tFileArchive_7Process(globalMap);



/**
 * [tFileOutputDelimited_7 end ] stop
 */




	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



	    try {
				int countSum_tDBOutput_7 = 0;
				if (pstmt_tDBOutput_7 != null && batchSizeCounter_tDBOutput_7 > 0) {
						
					for(int countEach_tDBOutput_7: pstmt_tDBOutput_7.executeBatch()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_7){
	    	java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),sqle_tDBOutput_7=null;
	    	String errormessage_tDBOutput_7;
			if (ne_tDBOutput_7 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_7 = new java.sql.SQLException(e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(), ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
				errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
			}else{
				errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
			}
	    	
	    	int countSum_tDBOutput_7 = 0;
			for(int countEach_tDBOutput_7: e_tDBOutput_7.getUpdateCounts()) {
				countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
			}
			
	    		insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
	    	
	    	System.err.println(errormessage_tDBOutput_7);
	    	
		}
	    
        if(pstmt_tDBOutput_7 != null) {
        		
            pstmt_tDBOutput_7.close();
            resourceMap.remove("pstmt_tDBOutput_7");
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out14");
			  	}
			  	
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk95", 0, "ok");
				}
				tJava_33Process(globalMap);



/**
 * [tDBOutput_7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	


		if(resourceMap.get("finish_tFileOutputDelimited_7") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_7");
					
						if(CsvWritertFileOutputDelimited_7!=null) {
					    	CsvWritertFileOutputDelimited_7.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_7 finally ] stop
 */




	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_7", false);
		start_Hash.put("tFileArchive_7", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_7";

	
		int tos_count_tFileArchive_7 = 0;
		

 



/**
 * [tFileArchive_7 begin ] stop
 */
	
	/**
	 * [tFileArchive_7 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_7";

	

	

		String sourceFile_tFileArchive_7 = context.staging_S3_dir + "task.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_7), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_7 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_7 = context.staging_S3_dir + "task.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_7 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_7, zipFile_tFileArchive_7);
    zip_tFileArchive_7.setOverwriteExistTargetZip(true);
	zip_tFileArchive_7.setMakeTargetDir(true);
	zip_tFileArchive_7.setCompressLevel(9);
	zip_tFileArchive_7.setArchiveFormat("gzip");
	zip_tFileArchive_7.setAllFiles(true);
	
	
		zip_tFileArchive_7.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_7_ARCHIVE_FILEPATH",zipFile_tFileArchive_7);
   
   globalMap.put("tFileArchive_7_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_7).getName());

   zip_tFileArchive_7.doZip();


 


	tos_count_tFileArchive_7++;

/**
 * [tFileArchive_7 main ] stop
 */
	
	/**
	 * [tFileArchive_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_7";

	

 



/**
 * [tFileArchive_7 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_7";

	

 



/**
 * [tFileArchive_7 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_7 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_7";

	

 

ok_Hash.put("tFileArchive_7", true);
end_Hash.put("tFileArchive_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk93", 0, "ok");
				}
				tS3Put_7Process(globalMap);



/**
 * [tFileArchive_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_7 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_7";

	

 



/**
 * [tFileArchive_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_7_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_7", false);
		start_Hash.put("tS3Put_7", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_7";

	
		int tos_count_tS3Put_7 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_7 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_7 = context.nd_s3_data_lake_path_sfdc +"/task/latest/university_id="+context.university_code+"/task.csv.gz";
	
	int partSizeInBytes_tS3Put_7 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_7 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_7 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_7 = context.staging_S3_dir + "task.csv.gz";
	
	boolean useStream_tS3Put_7 = false;
	java.io.InputStream uploadStream_tS3Put_7 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_7 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_7 instanceof String){
		    useStream_tS3Put_7 = false;
		}else if(fileOrStream_tS3Put_7 instanceof java.io.InputStream){
		    useStream_tS3Put_7 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_7 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_7) {
				java.io.File inputFile_tS3Put_7 = new java.io.File((String)fileOrStream_tS3Put_7);
				
				long multipart_upload_threshold_tS3Put_7 = 5 * 1024 * 1024;
				
    		tm_tS3Put_7 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_7)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_7)
    			.withS3Client(conn_tS3Put_7)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_7 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_7, inputFile_tS3Put_7).withMetadata(objectMetadata_tS3Put_7);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_7 = tm_tS3Put_7.upload(putRequest_tS3Put_7);
  		
  			upload_tS3Put_7.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_7 = ((java.io.InputStream)fileOrStream_tS3Put_7);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_7 = new S3StreamUtil();
    		byte[] buffer_tS3Put_7 = new byte[partSizeInBytes_tS3Put_7];
    		sourceStream_tS3Put_7.read(buffer_tS3Put_7);
    		long curPartSize_tS3Put_7 = streamUtil_tS3Put_7.getLength(buffer_tS3Put_7);
    		boolean multiUpload_tS3Put_7 = curPartSize_tS3Put_7 == partSizeInBytes_tS3Put_7;
    		
    		if(!multiUpload_tS3Put_7) {
    				objectMetadata_tS3Put_7.setContentLength(curPartSize_tS3Put_7);
    				uploadStream_tS3Put_7 = new java.io.ByteArrayInputStream(buffer_tS3Put_7,0,Long.valueOf(curPartSize_tS3Put_7).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_7 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_7, uploadStream_tS3Put_7, objectMetadata_tS3Put_7);
			
    				
    				

    				
    				conn_tS3Put_7.putObject(putRequest_tS3Put_7);
    		} else {
    				uploadStream_tS3Put_7 = new java.io.ByteArrayInputStream(buffer_tS3Put_7);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_7 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_7 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_7, objectMetadata_tS3Put_7);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_7 = conn_tS3Put_7.initiateMultipartUpload(putRequest_tS3Put_7);
      			String uploadId_tS3Put_7 = initResponse_tS3Put_7.getUploadId();
      			int partNumber_tS3Put_7 = 1;
      			boolean streamHasNext_tS3Put_7 = true;
      			byte[] probeAvailability_tS3Put_7 = new byte[1];
				try {
					while (streamHasNext_tS3Put_7) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_7 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_7)
						.withUploadId(uploadId_tS3Put_7)
                    	.withPartNumber(partNumber_tS3Put_7)
						.withPartSize(curPartSize_tS3Put_7);
            		    uploadRequest_tS3Put_7.setInputStream(uploadStream_tS3Put_7);
            		    streamHasNext_tS3Put_7 = sourceStream_tS3Put_7.read(probeAvailability_tS3Put_7) != -1;
            		    if(!streamHasNext_tS3Put_7){
                    	    uploadRequest_tS3Put_7.setLastPart(true);
                    	}

                		partTags_tS3Put_7.add(conn_tS3Put_7.uploadPart(uploadRequest_tS3Put_7).getPartETag());
                  	    partNumber_tS3Put_7++;

          		     	if(uploadStream_tS3Put_7!=null){
      		         			uploadStream_tS3Put_7.close();
          		     	}
          		     	buffer_tS3Put_7 = new byte[partSizeInBytes_tS3Put_7];
          		     	sourceStream_tS3Put_7.read(buffer_tS3Put_7,1,partSizeInBytes_tS3Put_7-1);
          		     	buffer_tS3Put_7[0] = probeAvailability_tS3Put_7[0];
          		     	probeAvailability_tS3Put_7 = new byte[1];
          		     	curPartSize_tS3Put_7 = streamUtil_tS3Put_7.getLength(buffer_tS3Put_7);
          		     	uploadStream_tS3Put_7 = new java.io.ByteArrayInputStream(buffer_tS3Put_7);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_7 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_7,
                        uploadId_tS3Put_7, partTags_tS3Put_7);
            		conn_tS3Put_7.completeMultipartUpload(compRequest_tS3Put_7);
            } catch (java.lang.Exception uploadException_tS3Put_7) {
  							conn_tS3Put_7.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_7, uploadId_tS3Put_7));
    						throw uploadException_tS3Put_7;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_7){
		
			throw(e_tS3Put_7);
		
	}finally{
		if(useStream_tS3Put_7 && uploadStream_tS3Put_7!=null){
    	uploadStream_tS3Put_7.close();
    }
    
    if(tm_tS3Put_7 != null){
        tm_tS3Put_7.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_7 begin ] stop
 */
	
	/**
	 * [tS3Put_7 main ] start
	 */

	

	
	
	currentComponent="tS3Put_7";

	

 


	tos_count_tS3Put_7++;

/**
 * [tS3Put_7 main ] stop
 */
	
	/**
	 * [tS3Put_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_7";

	

 



/**
 * [tS3Put_7 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_7";

	

 



/**
 * [tS3Put_7 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_7 end ] start
	 */

	

	
	
	currentComponent="tS3Put_7";

	

 

ok_Hash.put("tS3Put_7", true);
end_Hash.put("tS3Put_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk94", 0, "ok");
				}
				tJava_34Process(globalMap);



/**
 * [tS3Put_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_7 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_7";

	

 



/**
 * [tS3Put_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_7_SUBPROCESS_STATE", 1);
	}
	

public void tJava_34Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_34_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_34", false);
		start_Hash.put("tJava_34", System.currentTimeMillis());
		
	
	currentComponent="tJava_34";

	
		int tos_count_tJava_34 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_34 begin ] stop
 */
	
	/**
	 * [tJava_34 main ] start
	 */

	

	
	
	currentComponent="tJava_34";

	

 


	tos_count_tJava_34++;

/**
 * [tJava_34 main ] stop
 */
	
	/**
	 * [tJava_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_34";

	

 



/**
 * [tJava_34 process_data_begin ] stop
 */
	
	/**
	 * [tJava_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_34";

	

 



/**
 * [tJava_34 process_data_end ] stop
 */
	
	/**
	 * [tJava_34 end ] start
	 */

	

	
	
	currentComponent="tJava_34";

	

 

ok_Hash.put("tJava_34", true);
end_Hash.put("tJava_34", System.currentTimeMillis());




/**
 * [tJava_34 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_34 finally ] start
	 */

	

	
	
	currentComponent="tJava_34";

	

 



/**
 * [tJava_34 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_34_SUBPROCESS_STATE", 1);
	}
	

public void tJava_33Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_33_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_33", false);
		start_Hash.put("tJava_33", System.currentTimeMillis());
		
	
	currentComponent="tJava_33";

	
		int tos_count_tJava_33 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_7_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");
 



/**
 * [tJava_33 begin ] stop
 */
	
	/**
	 * [tJava_33 main ] start
	 */

	

	
	
	currentComponent="tJava_33";

	

 


	tos_count_tJava_33++;

/**
 * [tJava_33 main ] stop
 */
	
	/**
	 * [tJava_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_33";

	

 



/**
 * [tJava_33 process_data_begin ] stop
 */
	
	/**
	 * [tJava_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_33";

	

 



/**
 * [tJava_33 process_data_end ] stop
 */
	
	/**
	 * [tJava_33 end ] start
	 */

	

	
	
	currentComponent="tJava_33";

	

 

ok_Hash.put("tJava_33", true);
end_Hash.put("tJava_33", System.currentTimeMillis());




/**
 * [tJava_33 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_33 finally ] start
	 */

	

	
	
	currentComponent="tJava_33";

	

 



/**
 * [tJava_33 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_33_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_7", false);
		start_Hash.put("tS3Copy_7", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_7";

	
		int tos_count_tS3Copy_7 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_7 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_7 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_7 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_7 = null;
		
		
		final String from_bucket_tS3Copy_7 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_7 = context.nd_s3_data_lake_path_sfdc+"/user/latest/university_id="+context.university_code+"/user.csv.gz";
		final String to_bucket_tS3Copy_7 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_7 = context.nd_s3_data_lake_path_sfdc+"/user/archive/university_id="+context.university_code+"/user_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_7 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_7, from_key_tS3Copy_7);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_7 = conn_tS3Copy_7.getObjectMetadata(metadataRequest_tS3Copy_7);
    long objectSize_tS3Copy_7 = metadataResult_tS3Copy_7.getContentLength();
    
    boolean multiUpload_tS3Copy_7 = objectSize_tS3Copy_7 > maxBytes4SingleCopyCall_tS3Copy_7;
    
    if(!multiUpload_tS3Copy_7) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_7 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_7, from_key_tS3Copy_7, to_bucket_tS3Copy_7, to_key_tS3Copy_7);
    		if(objectMetadata_tS3Copy_7 != null) {
    				putRequest_tS3Copy_7.setNewObjectMetadata(objectMetadata_tS3Copy_7);
    		}
    		
    		

    		
    		conn_tS3Copy_7.copyObject(putRequest_tS3Copy_7);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_7 = metadataResult_tS3Copy_7.getUserMetadata();
						if((userMetadata_tS3Copy_7!=null) && userMetadata_tS3Copy_7.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_7 = null;
    				if(objectMetadata_tS3Copy_7 != null) {
    						putRequest_tS3Copy_7 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_7, to_key_tS3Copy_7, objectMetadata_tS3Copy_7);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_7 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_7, to_key_tS3Copy_7, metadataResult_tS3Copy_7);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_7 = conn_tS3Copy_7.initiateMultipartUpload(putRequest_tS3Copy_7);
            
            long bytePosition_tS3Copy_7 = 0;
            int partNum_tS3Copy_7 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_7 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_7 < objectSize_tS3Copy_7) {
                long lastByte_tS3Copy_7 = java.lang.Math.min(bytePosition_tS3Copy_7 + partSizeInBytes_tS3Copy_7 - 1, objectSize_tS3Copy_7 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_7 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_7)
                        .withSourceKey(from_key_tS3Copy_7)
                        .withDestinationBucketName(to_bucket_tS3Copy_7)
                        .withDestinationKey(to_key_tS3Copy_7)
                        .withUploadId(initResult_tS3Copy_7.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_7)
                        .withLastByte(lastByte_tS3Copy_7)
                        .withPartNumber(partNum_tS3Copy_7++);
                partTags_tS3Copy_7.add(conn_tS3Copy_7.copyPart(copyPartRequest_tS3Copy_7).getPartETag());
                bytePosition_tS3Copy_7 += partSizeInBytes_tS3Copy_7;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_7 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_7,
                                                                        to_key_tS3Copy_7, 
                                                                        initResult_tS3Copy_7.getUploadId(),
                                                                        partTags_tS3Copy_7);
            conn_tS3Copy_7.completeMultipartUpload(completeRequest_tS3Copy_7);
    		} catch (java.lang.Exception uploadException_tS3Copy_7) {
    				conn_tS3Copy_7.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_7, to_key_tS3Copy_7, initResult_tS3Copy_7.getUploadId()));
    				throw uploadException_tS3Copy_7;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_7){
		
			System.err.println(e_tS3Copy_7.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_7 begin ] stop
 */
	
	/**
	 * [tS3Copy_7 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_7";

	

 


	tos_count_tS3Copy_7++;

/**
 * [tS3Copy_7 main ] stop
 */
	
	/**
	 * [tS3Copy_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_7";

	

 



/**
 * [tS3Copy_7 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_7";

	

 



/**
 * [tS3Copy_7 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_7 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_7";

	

 

ok_Hash.put("tS3Copy_7", true);
end_Hash.put("tS3Copy_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk75", 0, "ok");
				}
				tJava_25Process(globalMap);



/**
 * [tS3Copy_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Copy_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tS3Copy_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_7 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_7";

	

 



/**
 * [tS3Copy_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_7_SUBPROCESS_STATE", 1);
	}
	

public void tJava_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_25", false);
		start_Hash.put("tJava_25", System.currentTimeMillis());
		
	
	currentComponent="tJava_25";

	
		int tos_count_tJava_25 = 0;
		


System.out.println("Step 0: Running For User Object");
System.out.println("Step 1: Copied Previous Run File To Archive");
 



/**
 * [tJava_25 begin ] stop
 */
	
	/**
	 * [tJava_25 main ] start
	 */

	

	
	
	currentComponent="tJava_25";

	

 


	tos_count_tJava_25++;

/**
 * [tJava_25 main ] stop
 */
	
	/**
	 * [tJava_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_25";

	

 



/**
 * [tJava_25 process_data_begin ] stop
 */
	
	/**
	 * [tJava_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_25";

	

 



/**
 * [tJava_25 process_data_end ] stop
 */
	
	/**
	 * [tJava_25 end ] start
	 */

	

	
	
	currentComponent="tJava_25";

	

 

ok_Hash.put("tJava_25", true);
end_Hash.put("tJava_25", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk76", 0, "ok");
				}
				tS3Delete_7Process(globalMap);



/**
 * [tJava_25 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_25 finally ] start
	 */

	

	
	
	currentComponent="tJava_25";

	

 



/**
 * [tJava_25 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_25_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_7", false);
		start_Hash.put("tS3Delete_7", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_7";

	
		int tos_count_tS3Delete_7 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_7 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_7 = context.nd_s3_data_lake_path_sfdc +"/user/latest/university_id="+context.university_code+"/user.csv.gz";
		if(key_tS3Delete_7!=null && key_tS3Delete_7.trim().length()>0){
			
			conn_tS3Delete_7.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_7);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_7){
		
			System.err.println(e_tS3Delete_7.getMessage());
		
	}
	
 



/**
 * [tS3Delete_7 begin ] stop
 */
	
	/**
	 * [tS3Delete_7 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_7";

	

 


	tos_count_tS3Delete_7++;

/**
 * [tS3Delete_7 main ] stop
 */
	
	/**
	 * [tS3Delete_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_7";

	

 



/**
 * [tS3Delete_7 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_7";

	

 



/**
 * [tS3Delete_7 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_7 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_7";

	

 

ok_Hash.put("tS3Delete_7", true);
end_Hash.put("tS3Delete_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk77", 0, "ok");
				}
				tJava_26Process(globalMap);



/**
 * [tS3Delete_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_7 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_7";

	

 



/**
 * [tS3Delete_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_7_SUBPROCESS_STATE", 1);
	}
	

public void tJava_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_26", false);
		start_Hash.put("tJava_26", System.currentTimeMillis());
		
	
	currentComponent="tJava_26";

	
		int tos_count_tJava_26 = 0;
		


System.out.println("Step 2: Deleted Previous Run File From Latest Folder");
System.out.println("Step 3: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_26 begin ] stop
 */
	
	/**
	 * [tJava_26 main ] start
	 */

	

	
	
	currentComponent="tJava_26";

	

 


	tos_count_tJava_26++;

/**
 * [tJava_26 main ] stop
 */
	
	/**
	 * [tJava_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_26";

	

 



/**
 * [tJava_26 process_data_begin ] stop
 */
	
	/**
	 * [tJava_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_26";

	

 



/**
 * [tJava_26 process_data_end ] stop
 */
	
	/**
	 * [tJava_26 end ] start
	 */

	

	
	
	currentComponent="tJava_26";

	

 

ok_Hash.put("tJava_26", true);
end_Hash.put("tJava_26", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk86", 0, "ok");
				}
				tDBInput_8Process(globalMap);



/**
 * [tJava_26 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_26 finally ] start
	 */

	

	
	
	currentComponent="tJava_26";

	

 



/**
 * [tJava_26 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_26_SUBPROCESS_STATE", 1);
	}
	


public static class out15Struct implements routines.system.IPersistableRow<out15Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Boolean userpreferencesshowmobilephonetoexternalusers;

				public Boolean getUserpreferencesshowmobilephonetoexternalusers () {
					return this.userpreferencesshowmobilephonetoexternalusers;
				}
				
			    public Boolean userpreferencesshowpostalcodetoexternalusers;

				public Boolean getUserpreferencesshowpostalcodetoexternalusers () {
					return this.userpreferencesshowpostalcodetoexternalusers;
				}
				
			    public String sendername;

				public String getSendername () {
					return this.sendername;
				}
				
			    public Boolean userpreferencesreceivenotificationsasdelegatedapprover;

				public Boolean getUserpreferencesreceivenotificationsasdelegatedapprover () {
					return this.userpreferencesreceivenotificationsasdelegatedapprover;
				}
				
			    public Boolean userpreferencesshowcitytoguestusers;

				public Boolean getUserpreferencesshowcitytoguestusers () {
					return this.userpreferencesshowcitytoguestusers;
				}
				
			    public java.util.Date lastlogindate;

				public java.util.Date getLastlogindate () {
					return this.lastlogindate;
				}
				
			    public Boolean userpreferencesuserdebugmodepref;

				public Boolean getUserpreferencesuserdebugmodepref () {
					return this.userpreferencesuserdebugmodepref;
				}
				
			    public Boolean userpreferenceshidebiggerphotocallout;

				public Boolean getUserpreferenceshidebiggerphotocallout () {
					return this.userpreferenceshidebiggerphotocallout;
				}
				
			    public String lastname;

				public String getLastname () {
					return this.lastname;
				}
				
			    public Boolean userpermissionssupportuser;

				public Boolean getUserpermissionssupportuser () {
					return this.userpermissionssupportuser;
				}
				
			    public Boolean userpreferenceshideenduseronboardingassistantmodal;

				public Boolean getUserpreferenceshideenduseronboardingassistantmodal () {
					return this.userpreferenceshideenduseronboardingassistantmodal;
				}
				
			    public Boolean userpreferencesdisablefollowersemail;

				public Boolean getUserpreferencesdisablefollowersemail () {
					return this.userpreferencesdisablefollowersemail;
				}
				
			    public String street;

				public String getStreet () {
					return this.street;
				}
				
			    public Boolean userpreferencessuppresstasksfxreminders;

				public Boolean getUserpreferencessuppresstasksfxreminders () {
					return this.userpreferencessuppresstasksfxreminders;
				}
				
			    public Boolean userpermissionsinteractionuser;

				public Boolean getUserpermissionsinteractionuser () {
					return this.userpermissionsinteractionuser;
				}
				
			    public String profileid;

				public String getProfileid () {
					return this.profileid;
				}
				
			    public Boolean receivesadmininfoemails;

				public Boolean getReceivesadmininfoemails () {
					return this.receivesadmininfoemails;
				}
				
			    public String smallphotourl;

				public String getSmallphotourl () {
					return this.smallphotourl;
				}
				
			    public String usertype;

				public String getUsertype () {
					return this.usertype;
				}
				
			    public String aboutme;

				public String getAboutme () {
					return this.aboutme;
				}
				
			    public String et4ae5__default_mid__c;

				public String getEt4ae5__default_mid__c () {
					return this.et4ae5__default_mid__c;
				}
				
			    public String outofofficemessage;

				public String getOutofofficemessage () {
					return this.outofofficemessage;
				}
				
			    public Boolean userpermissionsmobileuser;

				public Boolean getUserpermissionsmobileuser () {
					return this.userpermissionsmobileuser;
				}
				
			    public Boolean forecastenabled;

				public Boolean getForecastenabled () {
					return this.forecastenabled;
				}
				
			    public Boolean userpreferenceshascelebrationbadge;

				public Boolean getUserpreferenceshascelebrationbadge () {
					return this.userpreferenceshascelebrationbadge;
				}
				
			    public Integer numberoffailedlogins;

				public Integer getNumberoffailedlogins () {
					return this.numberoffailedlogins;
				}
				
			    public String senderemail;

				public String getSenderemail () {
					return this.senderemail;
				}
				
			    public Boolean userpreferencesactivityreminderspopup;

				public Boolean getUserpreferencesactivityreminderspopup () {
					return this.userpreferencesactivityreminderspopup;
				}
				
			    public Boolean userpreferencesdiscommentafterlikeemail;

				public Boolean getUserpreferencesdiscommentafterlikeemail () {
					return this.userpreferencesdiscommentafterlikeemail;
				}
				
			    public Boolean userpreferencesdismentionscommentemail;

				public Boolean getUserpreferencesdismentionscommentemail () {
					return this.userpreferencesdismentionscommentemail;
				}
				
			    public String accountid;

				public String getAccountid () {
					return this.accountid;
				}
				
			    public String companyname;

				public String getCompanyname () {
					return this.companyname;
				}
				
			    public String managerid;

				public String getManagerid () {
					return this.managerid;
				}
				
			    public Boolean userpreferencesreceivenonotificationsasapprover;

				public Boolean getUserpreferencesreceivenonotificationsasapprover () {
					return this.userpreferencesreceivenonotificationsasapprover;
				}
				
			    public Boolean userpreferenceshidesecondchatteronboardingsplash;

				public Boolean getUserpreferenceshidesecondchatteronboardingsplash () {
					return this.userpreferenceshidesecondchatteronboardingsplash;
				}
				
			    public java.util.Date lastvieweddate;

				public java.util.Date getLastvieweddate () {
					return this.lastvieweddate;
				}
				
			    public Boolean userpreferencesdisablechangecommentemail;

				public Boolean getUserpreferencesdisablechangecommentemail () {
					return this.userpreferencesdisablechangecommentemail;
				}
				
			    public Boolean userpreferenceshidecsngetchattermobiletask;

				public Boolean getUserpreferenceshidecsngetchattermobiletask () {
					return this.userpreferenceshidecsngetchattermobiletask;
				}
				
			    public String bannerphotourl;

				public String getBannerphotourl () {
					return this.bannerphotourl;
				}
				
			    public String et4ae5__exacttargetusername__c;

				public String getEt4ae5__exacttargetusername__c () {
					return this.et4ae5__exacttargetusername__c;
				}
				
			    public Boolean userpreferencesdisableendorsementemail;

				public Boolean getUserpreferencesdisableendorsementemail () {
					return this.userpreferencesdisableendorsementemail;
				}
				
			    public Boolean userpreferencesfavoritesshowtopfavorites;

				public Boolean getUserpreferencesfavoritesshowtopfavorites () {
					return this.userpreferencesfavoritesshowtopfavorites;
				}
				
			    public java.util.Date offlinepdatrialexpirationdate;

				public java.util.Date getOfflinepdatrialexpirationdate () {
					return this.offlinepdatrialexpirationdate;
				}
				
			    public String timezonesidkey;

				public String getTimezonesidkey () {
					return this.timezonesidkey;
				}
				
			    public Boolean userpreferencesdisablelikeemail;

				public Boolean getUserpreferencesdisablelikeemail () {
					return this.userpreferencesdisablelikeemail;
				}
				
			    public Boolean emailpreferencesautobccstayintouch;

				public Boolean getEmailpreferencesautobccstayintouch () {
					return this.emailpreferencesautobccstayintouch;
				}
				
			    public Boolean userpreferencesfavoriteswtshown;

				public Boolean getUserpreferencesfavoriteswtshown () {
					return this.userpreferencesfavoriteswtshown;
				}
				
			    public Boolean userpreferenceseventreminderscheckboxdefault;

				public Boolean getUserpreferenceseventreminderscheckboxdefault () {
					return this.userpreferenceseventreminderscheckboxdefault;
				}
				
			    public Boolean userpreferencespathassistantcollapsed;

				public Boolean getUserpreferencespathassistantcollapsed () {
					return this.userpreferencespathassistantcollapsed;
				}
				
			    public String stayintouchsubject;

				public String getStayintouchsubject () {
					return this.stayintouchsubject;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String localesidkey;

				public String getLocalesidkey () {
					return this.localesidkey;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Boolean userpreferencesdisablebookmarkemail;

				public Boolean getUserpreferencesdisablebookmarkemail () {
					return this.userpreferencesdisablebookmarkemail;
				}
				
			    public String federationidentifier;

				public String getFederationidentifier () {
					return this.federationidentifier;
				}
				
			    public Double latitude;

				public Double getLatitude () {
					return this.latitude;
				}
				
			    public String fullphotourl;

				public String getFullphotourl () {
					return this.fullphotourl;
				}
				
			    public String mobilephone;

				public String getMobilephone () {
					return this.mobilephone;
				}
				
			    public Boolean userpreferencescreatelexappswtshown;

				public Boolean getUserpreferencescreatelexappswtshown () {
					return this.userpreferencescreatelexappswtshown;
				}
				
			    public Boolean userpreferencesenableautosubforfeeds;

				public Boolean getUserpreferencesenableautosubforfeeds () {
					return this.userpreferencesenableautosubforfeeds;
				}
				
			    public Boolean userpreferencesshowpostalcodetoguestusers;

				public Boolean getUserpreferencesshowpostalcodetoguestusers () {
					return this.userpreferencesshowpostalcodetoguestusers;
				}
				
			    public String division;

				public String getDivision () {
					return this.division;
				}
				
			    public String languagelocalekey;

				public String getLanguagelocalekey () {
					return this.languagelocalekey;
				}
				
			    public Boolean userpreferencesshowmobilephonetoguestusers;

				public Boolean getUserpreferencesshowmobilephonetoguestusers () {
					return this.userpreferencesshowmobilephonetoguestusers;
				}
				
			    public Boolean userpreferencesdisableallfeedsemail;

				public Boolean getUserpreferencesdisableallfeedsemail () {
					return this.userpreferencesdisableallfeedsemail;
				}
				
			    public Boolean userpreferencesshowcitytoexternalusers;

				public Boolean getUserpreferencesshowcitytoexternalusers () {
					return this.userpreferencesshowcitytoexternalusers;
				}
				
			    public String et4ae5__exacttarget_oauth_token__c;

				public String getEt4ae5__exacttarget_oauth_token__c () {
					return this.et4ae5__exacttarget_oauth_token__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String callcenterid;

				public String getCallcenterid () {
					return this.callcenterid;
				}
				
			    public Boolean userpreferencesshowmanagertoguestusers;

				public Boolean getUserpreferencesshowmanagertoguestusers () {
					return this.userpreferencesshowmanagertoguestusers;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				
			    public Boolean userpreferencesdisableprofilepostemail;

				public Boolean getUserpreferencesdisableprofilepostemail () {
					return this.userpreferencesdisableprofilepostemail;
				}
				
			    public Boolean userpreferencesdisablelatercommentemail;

				public Boolean getUserpreferencesdisablelatercommentemail () {
					return this.userpreferencesdisablelatercommentemail;
				}
				
			    public Boolean userpermissionscallcenterautologin;

				public Boolean getUserpermissionscallcenterautologin () {
					return this.userpermissionscallcenterautologin;
				}
				
			    public String et4ae5__default_et_page__c;

				public String getEt4ae5__default_et_page__c () {
					return this.et4ae5__default_et_page__c;
				}
				
			    public Boolean userpreferencespipelineviewhidehelppopover;

				public Boolean getUserpreferencespipelineviewhidehelppopover () {
					return this.userpreferencespipelineviewhidehelppopover;
				}
				
			    public Boolean userpreferencespreviewlightning;

				public Boolean getUserpreferencespreviewlightning () {
					return this.userpreferencespreviewlightning;
				}
				
			    public Boolean userpreferencesshowworkphonetoexternalusers;

				public Boolean getUserpreferencesshowworkphonetoexternalusers () {
					return this.userpreferencesshowworkphonetoexternalusers;
				}
				
			    public Double longitude;

				public Double getLongitude () {
					return this.longitude;
				}
				
			    public Boolean userpreferencesshowfaxtoexternalusers;

				public Boolean getUserpreferencesshowfaxtoexternalusers () {
					return this.userpreferencesshowfaxtoexternalusers;
				}
				
			    public java.util.Date lastpasswordchangedate;

				public java.util.Date getLastpasswordchangedate () {
					return this.lastpasswordchangedate;
				}
				
			    public Boolean userpreferenceshides1browserui;

				public Boolean getUserpreferenceshides1browserui () {
					return this.userpreferenceshides1browserui;
				}
				
			    public Boolean userpreferencesrecordhomereservedwtshown;

				public Boolean getUserpreferencesrecordhomereservedwtshown () {
					return this.userpreferencesrecordhomereservedwtshown;
				}
				
			    public Boolean userpreferencestaskreminderscheckboxdefault;

				public Boolean getUserpreferencestaskreminderscheckboxdefault () {
					return this.userpreferencestaskreminderscheckboxdefault;
				}
				
			    public Boolean userpreferencesshowemailtoexternalusers;

				public Boolean getUserpreferencesshowemailtoexternalusers () {
					return this.userpreferencesshowemailtoexternalusers;
				}
				
			    public java.util.Date offlinetrialexpirationdate;

				public java.util.Date getOfflinetrialexpirationdate () {
					return this.offlinetrialexpirationdate;
				}
				
			    public Boolean isactive;

				public Boolean getIsactive () {
					return this.isactive;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String smallbannerphotourl;

				public String getSmallbannerphotourl () {
					return this.smallbannerphotourl;
				}
				
			    public String alias;

				public String getAlias () {
					return this.alias;
				}
				
			    public String emailencodingkey;

				public String getEmailencodingkey () {
					return this.emailencodingkey;
				}
				
			    public String badgetext;

				public String getBadgetext () {
					return this.badgetext;
				}
				
			    public Boolean userpreferencesdisablemessageemail;

				public Boolean getUserpreferencesdisablemessageemail () {
					return this.userpreferencesdisablemessageemail;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public Boolean userpreferencesdisablefilesharenotificationsforapi;

				public Boolean getUserpreferencesdisablefilesharenotificationsforapi () {
					return this.userpreferencesdisablefilesharenotificationsforapi;
				}
				
			    public String mediumphotourl;

				public String getMediumphotourl () {
					return this.mediumphotourl;
				}
				
			    public Boolean userpreferencesshowstreetaddresstoguestusers;

				public Boolean getUserpreferencesshowstreetaddresstoguestusers () {
					return this.userpreferencesshowstreetaddresstoguestusers;
				}
				
			    public Boolean userpreferencesshowstatetoguestusers;

				public Boolean getUserpreferencesshowstatetoguestusers () {
					return this.userpreferencesshowstatetoguestusers;
				}
				
			    public Boolean userpreferenceshidecsndesktoptask;

				public Boolean getUserpreferenceshidecsndesktoptask () {
					return this.userpreferenceshidecsndesktoptask;
				}
				
			    public Boolean userpreferencesnewlightningreportrunpageenabled;

				public Boolean getUserpreferencesnewlightningreportrunpageenabled () {
					return this.userpreferencesnewlightningreportrunpageenabled;
				}
				
			    public String department;

				public String getDepartment () {
					return this.department;
				}
				
			    public Boolean userpreferencesexcludemailappattachments;

				public Boolean getUserpreferencesexcludemailappattachments () {
					return this.userpreferencesexcludemailappattachments;
				}
				
			    public String defaultgroupnotificationfrequency;

				public String getDefaultgroupnotificationfrequency () {
					return this.defaultgroupnotificationfrequency;
				}
				
			    public Boolean et4ae5__exacttargetforappexchangeadmin__c;

				public Boolean getEt4ae5__exacttargetforappexchangeadmin__c () {
					return this.et4ae5__exacttargetforappexchangeadmin__c;
				}
				
			    public String stayintouchnote;

				public String getStayintouchnote () {
					return this.stayintouchnote;
				}
				
			    public Boolean userpreferencesglobalnavbarwtshown;

				public Boolean getUserpreferencesglobalnavbarwtshown () {
					return this.userpreferencesglobalnavbarwtshown;
				}
				
			    public Boolean userpreferenceshidesfxwelcomemat;

				public Boolean getUserpreferenceshidesfxwelcomemat () {
					return this.userpreferenceshidesfxwelcomemat;
				}
				
			    public Boolean et4ae5__validexacttargetadmin__c;

				public Boolean getEt4ae5__validexacttargetadmin__c () {
					return this.et4ae5__validexacttargetadmin__c;
				}
				
			    public String individualid;

				public String getIndividualid () {
					return this.individualid;
				}
				
			    public Boolean userpreferencesshowtitletoexternalusers;

				public Boolean getUserpreferencesshowtitletoexternalusers () {
					return this.userpreferencesshowtitletoexternalusers;
				}
				
			    public Boolean userpreferencessuppresseventsfxreminders;

				public Boolean getUserpreferencessuppresseventsfxreminders () {
					return this.userpreferencessuppresseventsfxreminders;
				}
				
			    public Boolean receivesinfoemails;

				public Boolean getReceivesinfoemails () {
					return this.receivesinfoemails;
				}
				
			    public Boolean userpreferencessrhoverrideactivities;

				public Boolean getUserpreferencessrhoverrideactivities () {
					return this.userpreferencessrhoverrideactivities;
				}
				
			    public Boolean userpermissionsofflineuser;

				public Boolean getUserpermissionsofflineuser () {
					return this.userpermissionsofflineuser;
				}
				
			    public Boolean userpreferencesshowprofilepictoguestusers;

				public Boolean getUserpreferencesshowprofilepictoguestusers () {
					return this.userpreferencesshowprofilepictoguestusers;
				}
				
			    public String username;

				public String getUsername () {
					return this.username;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean userpreferencesshowcountrytoexternalusers;

				public Boolean getUserpreferencesshowcountrytoexternalusers () {
					return this.userpreferencesshowcountrytoexternalusers;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public Boolean emailpreferencesstayintouchreminder;

				public Boolean getEmailpreferencesstayintouchreminder () {
					return this.emailpreferencesstayintouchreminder;
				}
				
			    public Boolean userpreferencescachediagnostics;

				public Boolean getUserpreferencescachediagnostics () {
					return this.userpreferencescachediagnostics;
				}
				
			    public String stayintouchsignature;

				public String getStayintouchsignature () {
					return this.stayintouchsignature;
				}
				
			    public Boolean emailpreferencesautobcc;

				public Boolean getEmailpreferencesautobcc () {
					return this.emailpreferencesautobcc;
				}
				
			    public String communitynickname;

				public String getCommunitynickname () {
					return this.communitynickname;
				}
				
			    public Boolean userpreferencesdisprofpostcommentemail;

				public Boolean getUserpreferencesdisprofpostcommentemail () {
					return this.userpreferencesdisprofpostcommentemail;
				}
				
			    public Boolean userpreferencesshowcountrytoguestusers;

				public Boolean getUserpreferencesshowcountrytoguestusers () {
					return this.userpreferencesshowcountrytoguestusers;
				}
				
			    public String employeenumber;

				public String getEmployeenumber () {
					return this.employeenumber;
				}
				
			    public String geocodeaccuracy;

				public String getGeocodeaccuracy () {
					return this.geocodeaccuracy;
				}
				
			    public String signature;

				public String getSignature () {
					return this.signature;
				}
				
			    public Boolean userpermissionssfcontentuser;

				public Boolean getUserpermissionssfcontentuser () {
					return this.userpermissionssfcontentuser;
				}
				
			    public String postalcode;

				public String getPostalcode () {
					return this.postalcode;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public Boolean userpreferencesdisablementionspostemail;

				public Boolean getUserpreferencesdisablementionspostemail () {
					return this.userpreferencesdisablementionspostemail;
				}
				
			    public Boolean userpreferencesapexpagesdevelopermode;

				public Boolean getUserpreferencesapexpagesdevelopermode () {
					return this.userpreferencesapexpagesdevelopermode;
				}
				
			    public Boolean userpreferencesdisablesharepostemail;

				public Boolean getUserpreferencesdisablesharepostemail () {
					return this.userpreferencesdisablesharepostemail;
				}
				
			    public Boolean et4ae5__validexacttargetuser__c;

				public Boolean getEt4ae5__validexacttargetuser__c () {
					return this.et4ae5__validexacttargetuser__c;
				}
				
			    public String digestfrequency;

				public String getDigestfrequency () {
					return this.digestfrequency;
				}
				
			    public Boolean userpermissionsmarketinguser;

				public Boolean getUserpermissionsmarketinguser () {
					return this.userpermissionsmarketinguser;
				}
				
			    public Boolean userpreferencesshowtitletoguestusers;

				public Boolean getUserpreferencesshowtitletoguestusers () {
					return this.userpreferencesshowtitletoguestusers;
				}
				
			    public Boolean isprofilephotoactive;

				public Boolean getIsprofilephotoactive () {
					return this.isprofilephotoactive;
				}
				
			    public Boolean et4ae5__exacttargetforappexchangeuser__c;

				public Boolean getEt4ae5__exacttargetforappexchangeuser__c () {
					return this.et4ae5__exacttargetforappexchangeuser__c;
				}
				
			    public Boolean isextindicatorvisible;

				public Boolean getIsextindicatorvisible () {
					return this.isextindicatorvisible;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public Boolean userpreferenceshidelightningmigrationmodal;

				public Boolean getUserpreferenceshidelightningmigrationmodal () {
					return this.userpreferenceshidelightningmigrationmodal;
				}
				
			    public Boolean userpreferenceslightningexperiencepreferred;

				public Boolean getUserpreferenceslightningexperiencepreferred () {
					return this.userpreferenceslightningexperiencepreferred;
				}
				
			    public String firstname;

				public String getFirstname () {
					return this.firstname;
				}
				
			    public String contactid;

				public String getContactid () {
					return this.contactid;
				}
				
			    public Boolean userpreferencesshowstatetoexternalusers;

				public Boolean getUserpreferencesshowstatetoexternalusers () {
					return this.userpreferencesshowstatetoexternalusers;
				}
				
			    public Boolean userpreferencesshowstreetaddresstoexternalusers;

				public Boolean getUserpreferencesshowstreetaddresstoexternalusers () {
					return this.userpreferencesshowstreetaddresstoexternalusers;
				}
				
			    public Boolean userpreferenceshidechatteronboardingsplash;

				public Boolean getUserpreferenceshidechatteronboardingsplash () {
					return this.userpreferenceshidechatteronboardingsplash;
				}
				
			    public Boolean userpreferencesglobalnavgridmenuwtshown;

				public Boolean getUserpreferencesglobalnavgridmenuwtshown () {
					return this.userpreferencesglobalnavgridmenuwtshown;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String userroleid;

				public String getUserroleid () {
					return this.userroleid;
				}
				
			    public Boolean userpreferencesshowemailtoguestusers;

				public Boolean getUserpreferencesshowemailtoguestusers () {
					return this.userpreferencesshowemailtoguestusers;
				}
				
			    public Boolean userpreferencespreviewcustomtheme;

				public Boolean getUserpreferencespreviewcustomtheme () {
					return this.userpreferencespreviewcustomtheme;
				}
				
			    public java.util.Date lastreferenceddate;

				public java.util.Date getLastreferenceddate () {
					return this.lastreferenceddate;
				}
				
			    public String fax;

				public String getFax () {
					return this.fax;
				}
				
			    public Boolean noodlecrm__default_owner__c;

				public Boolean getNoodlecrm__default_owner__c () {
					return this.noodlecrm__default_owner__c;
				}
				
			    public String mediumbannerphotourl;

				public String getMediumbannerphotourl () {
					return this.mediumbannerphotourl;
				}
				
			    public Boolean userpreferencesshowworkphonetoguestusers;

				public Boolean getUserpreferencesshowworkphonetoguestusers () {
					return this.userpreferencesshowworkphonetoguestusers;
				}
				
			    public Boolean userpreferencesshowfaxtoguestusers;

				public Boolean getUserpreferencesshowfaxtoguestusers () {
					return this.userpreferencesshowfaxtoguestusers;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public Boolean userpreferencesremindersoundoff;

				public Boolean getUserpreferencesremindersoundoff () {
					return this.userpreferencesremindersoundoff;
				}
				
			    public Boolean userpreferencesrecordhomesectioncollapsewtshown;

				public Boolean getUserpreferencesrecordhomesectioncollapsewtshown () {
					return this.userpreferencesrecordhomesectioncollapsewtshown;
				}
				
			    public Boolean userpreferencesshowmanagertoexternalusers;

				public Boolean getUserpreferencesshowmanagertoexternalusers () {
					return this.userpreferencesshowmanagertoexternalusers;
				}
				
			    public Boolean userpreferencessortfeedbycomment;

				public Boolean getUserpreferencessortfeedbycomment () {
					return this.userpreferencessortfeedbycomment;
				}
				
			    public String delegatedapproverid;

				public String getDelegatedapproverid () {
					return this.delegatedapproverid;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out15Struct other = (out15Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out15Struct other) {

		other.userpreferencesshowmobilephonetoexternalusers = this.userpreferencesshowmobilephonetoexternalusers;
	            other.userpreferencesshowpostalcodetoexternalusers = this.userpreferencesshowpostalcodetoexternalusers;
	            other.sendername = this.sendername;
	            other.userpreferencesreceivenotificationsasdelegatedapprover = this.userpreferencesreceivenotificationsasdelegatedapprover;
	            other.userpreferencesshowcitytoguestusers = this.userpreferencesshowcitytoguestusers;
	            other.lastlogindate = this.lastlogindate;
	            other.userpreferencesuserdebugmodepref = this.userpreferencesuserdebugmodepref;
	            other.userpreferenceshidebiggerphotocallout = this.userpreferenceshidebiggerphotocallout;
	            other.lastname = this.lastname;
	            other.userpermissionssupportuser = this.userpermissionssupportuser;
	            other.userpreferenceshideenduseronboardingassistantmodal = this.userpreferenceshideenduseronboardingassistantmodal;
	            other.userpreferencesdisablefollowersemail = this.userpreferencesdisablefollowersemail;
	            other.street = this.street;
	            other.userpreferencessuppresstasksfxreminders = this.userpreferencessuppresstasksfxreminders;
	            other.userpermissionsinteractionuser = this.userpermissionsinteractionuser;
	            other.profileid = this.profileid;
	            other.receivesadmininfoemails = this.receivesadmininfoemails;
	            other.smallphotourl = this.smallphotourl;
	            other.usertype = this.usertype;
	            other.aboutme = this.aboutme;
	            other.et4ae5__default_mid__c = this.et4ae5__default_mid__c;
	            other.outofofficemessage = this.outofofficemessage;
	            other.userpermissionsmobileuser = this.userpermissionsmobileuser;
	            other.forecastenabled = this.forecastenabled;
	            other.userpreferenceshascelebrationbadge = this.userpreferenceshascelebrationbadge;
	            other.numberoffailedlogins = this.numberoffailedlogins;
	            other.senderemail = this.senderemail;
	            other.userpreferencesactivityreminderspopup = this.userpreferencesactivityreminderspopup;
	            other.userpreferencesdiscommentafterlikeemail = this.userpreferencesdiscommentafterlikeemail;
	            other.userpreferencesdismentionscommentemail = this.userpreferencesdismentionscommentemail;
	            other.accountid = this.accountid;
	            other.companyname = this.companyname;
	            other.managerid = this.managerid;
	            other.userpreferencesreceivenonotificationsasapprover = this.userpreferencesreceivenonotificationsasapprover;
	            other.userpreferenceshidesecondchatteronboardingsplash = this.userpreferenceshidesecondchatteronboardingsplash;
	            other.lastvieweddate = this.lastvieweddate;
	            other.userpreferencesdisablechangecommentemail = this.userpreferencesdisablechangecommentemail;
	            other.userpreferenceshidecsngetchattermobiletask = this.userpreferenceshidecsngetchattermobiletask;
	            other.bannerphotourl = this.bannerphotourl;
	            other.et4ae5__exacttargetusername__c = this.et4ae5__exacttargetusername__c;
	            other.userpreferencesdisableendorsementemail = this.userpreferencesdisableendorsementemail;
	            other.userpreferencesfavoritesshowtopfavorites = this.userpreferencesfavoritesshowtopfavorites;
	            other.offlinepdatrialexpirationdate = this.offlinepdatrialexpirationdate;
	            other.timezonesidkey = this.timezonesidkey;
	            other.userpreferencesdisablelikeemail = this.userpreferencesdisablelikeemail;
	            other.emailpreferencesautobccstayintouch = this.emailpreferencesautobccstayintouch;
	            other.userpreferencesfavoriteswtshown = this.userpreferencesfavoriteswtshown;
	            other.userpreferenceseventreminderscheckboxdefault = this.userpreferenceseventreminderscheckboxdefault;
	            other.userpreferencespathassistantcollapsed = this.userpreferencespathassistantcollapsed;
	            other.stayintouchsubject = this.stayintouchsubject;
	            other.city = this.city;
	            other.localesidkey = this.localesidkey;
	            other.name = this.name;
	            other.userpreferencesdisablebookmarkemail = this.userpreferencesdisablebookmarkemail;
	            other.federationidentifier = this.federationidentifier;
	            other.latitude = this.latitude;
	            other.fullphotourl = this.fullphotourl;
	            other.mobilephone = this.mobilephone;
	            other.userpreferencescreatelexappswtshown = this.userpreferencescreatelexappswtshown;
	            other.userpreferencesenableautosubforfeeds = this.userpreferencesenableautosubforfeeds;
	            other.userpreferencesshowpostalcodetoguestusers = this.userpreferencesshowpostalcodetoguestusers;
	            other.division = this.division;
	            other.languagelocalekey = this.languagelocalekey;
	            other.userpreferencesshowmobilephonetoguestusers = this.userpreferencesshowmobilephonetoguestusers;
	            other.userpreferencesdisableallfeedsemail = this.userpreferencesdisableallfeedsemail;
	            other.userpreferencesshowcitytoexternalusers = this.userpreferencesshowcitytoexternalusers;
	            other.et4ae5__exacttarget_oauth_token__c = this.et4ae5__exacttarget_oauth_token__c;
	            other.lastmodifieddate = this.lastmodifieddate;
	            other.callcenterid = this.callcenterid;
	            other.userpreferencesshowmanagertoguestusers = this.userpreferencesshowmanagertoguestusers;
	            other.phone = this.phone;
	            other.userpreferencesdisableprofilepostemail = this.userpreferencesdisableprofilepostemail;
	            other.userpreferencesdisablelatercommentemail = this.userpreferencesdisablelatercommentemail;
	            other.userpermissionscallcenterautologin = this.userpermissionscallcenterautologin;
	            other.et4ae5__default_et_page__c = this.et4ae5__default_et_page__c;
	            other.userpreferencespipelineviewhidehelppopover = this.userpreferencespipelineviewhidehelppopover;
	            other.userpreferencespreviewlightning = this.userpreferencespreviewlightning;
	            other.userpreferencesshowworkphonetoexternalusers = this.userpreferencesshowworkphonetoexternalusers;
	            other.longitude = this.longitude;
	            other.userpreferencesshowfaxtoexternalusers = this.userpreferencesshowfaxtoexternalusers;
	            other.lastpasswordchangedate = this.lastpasswordchangedate;
	            other.userpreferenceshides1browserui = this.userpreferenceshides1browserui;
	            other.userpreferencesrecordhomereservedwtshown = this.userpreferencesrecordhomereservedwtshown;
	            other.userpreferencestaskreminderscheckboxdefault = this.userpreferencestaskreminderscheckboxdefault;
	            other.userpreferencesshowemailtoexternalusers = this.userpreferencesshowemailtoexternalusers;
	            other.offlinetrialexpirationdate = this.offlinetrialexpirationdate;
	            other.isactive = this.isactive;
	            other.systemmodstamp = this.systemmodstamp;
	            other.smallbannerphotourl = this.smallbannerphotourl;
	            other.alias = this.alias;
	            other.emailencodingkey = this.emailencodingkey;
	            other.badgetext = this.badgetext;
	            other.userpreferencesdisablemessageemail = this.userpreferencesdisablemessageemail;
	            other.lastmodifiedbyid = this.lastmodifiedbyid;
	            other.state = this.state;
	            other.userpreferencesdisablefilesharenotificationsforapi = this.userpreferencesdisablefilesharenotificationsforapi;
	            other.mediumphotourl = this.mediumphotourl;
	            other.userpreferencesshowstreetaddresstoguestusers = this.userpreferencesshowstreetaddresstoguestusers;
	            other.userpreferencesshowstatetoguestusers = this.userpreferencesshowstatetoguestusers;
	            other.userpreferenceshidecsndesktoptask = this.userpreferenceshidecsndesktoptask;
	            other.userpreferencesnewlightningreportrunpageenabled = this.userpreferencesnewlightningreportrunpageenabled;
	            other.department = this.department;
	            other.userpreferencesexcludemailappattachments = this.userpreferencesexcludemailappattachments;
	            other.defaultgroupnotificationfrequency = this.defaultgroupnotificationfrequency;
	            other.et4ae5__exacttargetforappexchangeadmin__c = this.et4ae5__exacttargetforappexchangeadmin__c;
	            other.stayintouchnote = this.stayintouchnote;
	            other.userpreferencesglobalnavbarwtshown = this.userpreferencesglobalnavbarwtshown;
	            other.userpreferenceshidesfxwelcomemat = this.userpreferenceshidesfxwelcomemat;
	            other.et4ae5__validexacttargetadmin__c = this.et4ae5__validexacttargetadmin__c;
	            other.individualid = this.individualid;
	            other.userpreferencesshowtitletoexternalusers = this.userpreferencesshowtitletoexternalusers;
	            other.userpreferencessuppresseventsfxreminders = this.userpreferencessuppresseventsfxreminders;
	            other.receivesinfoemails = this.receivesinfoemails;
	            other.userpreferencessrhoverrideactivities = this.userpreferencessrhoverrideactivities;
	            other.userpermissionsofflineuser = this.userpermissionsofflineuser;
	            other.userpreferencesshowprofilepictoguestusers = this.userpreferencesshowprofilepictoguestusers;
	            other.username = this.username;
	            other.createddate = this.createddate;
	            other.userpreferencesshowcountrytoexternalusers = this.userpreferencesshowcountrytoexternalusers;
	            other.country = this.country;
	            other.emailpreferencesstayintouchreminder = this.emailpreferencesstayintouchreminder;
	            other.userpreferencescachediagnostics = this.userpreferencescachediagnostics;
	            other.stayintouchsignature = this.stayintouchsignature;
	            other.emailpreferencesautobcc = this.emailpreferencesautobcc;
	            other.communitynickname = this.communitynickname;
	            other.userpreferencesdisprofpostcommentemail = this.userpreferencesdisprofpostcommentemail;
	            other.userpreferencesshowcountrytoguestusers = this.userpreferencesshowcountrytoguestusers;
	            other.employeenumber = this.employeenumber;
	            other.geocodeaccuracy = this.geocodeaccuracy;
	            other.signature = this.signature;
	            other.userpermissionssfcontentuser = this.userpermissionssfcontentuser;
	            other.postalcode = this.postalcode;
	            other.title = this.title;
	            other.userpreferencesdisablementionspostemail = this.userpreferencesdisablementionspostemail;
	            other.userpreferencesapexpagesdevelopermode = this.userpreferencesapexpagesdevelopermode;
	            other.userpreferencesdisablesharepostemail = this.userpreferencesdisablesharepostemail;
	            other.et4ae5__validexacttargetuser__c = this.et4ae5__validexacttargetuser__c;
	            other.digestfrequency = this.digestfrequency;
	            other.userpermissionsmarketinguser = this.userpermissionsmarketinguser;
	            other.userpreferencesshowtitletoguestusers = this.userpreferencesshowtitletoguestusers;
	            other.isprofilephotoactive = this.isprofilephotoactive;
	            other.et4ae5__exacttargetforappexchangeuser__c = this.et4ae5__exacttargetforappexchangeuser__c;
	            other.isextindicatorvisible = this.isextindicatorvisible;
	            other.createdbyid = this.createdbyid;
	            other.userpreferenceshidelightningmigrationmodal = this.userpreferenceshidelightningmigrationmodal;
	            other.userpreferenceslightningexperiencepreferred = this.userpreferenceslightningexperiencepreferred;
	            other.firstname = this.firstname;
	            other.contactid = this.contactid;
	            other.userpreferencesshowstatetoexternalusers = this.userpreferencesshowstatetoexternalusers;
	            other.userpreferencesshowstreetaddresstoexternalusers = this.userpreferencesshowstreetaddresstoexternalusers;
	            other.userpreferenceshidechatteronboardingsplash = this.userpreferenceshidechatteronboardingsplash;
	            other.userpreferencesglobalnavgridmenuwtshown = this.userpreferencesglobalnavgridmenuwtshown;
	            other.email = this.email;
	            other.userroleid = this.userroleid;
	            other.userpreferencesshowemailtoguestusers = this.userpreferencesshowemailtoguestusers;
	            other.userpreferencespreviewcustomtheme = this.userpreferencespreviewcustomtheme;
	            other.lastreferenceddate = this.lastreferenceddate;
	            other.fax = this.fax;
	            other.noodlecrm__default_owner__c = this.noodlecrm__default_owner__c;
	            other.mediumbannerphotourl = this.mediumbannerphotourl;
	            other.userpreferencesshowworkphonetoguestusers = this.userpreferencesshowworkphonetoguestusers;
	            other.userpreferencesshowfaxtoguestusers = this.userpreferencesshowfaxtoguestusers;
	            other.extension = this.extension;
	            other.userpreferencesremindersoundoff = this.userpreferencesremindersoundoff;
	            other.userpreferencesrecordhomesectioncollapsewtshown = this.userpreferencesrecordhomesectioncollapsewtshown;
	            other.userpreferencesshowmanagertoexternalusers = this.userpreferencesshowmanagertoexternalusers;
	            other.userpreferencessortfeedbycomment = this.userpreferencessortfeedbycomment;
	            other.delegatedapproverid = this.delegatedapproverid;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            
	}

	public void copyKeysDataTo(out15Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowmobilephonetoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowmobilephonetoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowpostalcodetoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowpostalcodetoexternalusers = dis.readBoolean();
           				}
					
					this.sendername = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesreceivenotificationsasdelegatedapprover = null;
           				} else {
           			    	this.userpreferencesreceivenotificationsasdelegatedapprover = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowcitytoguestusers = null;
           				} else {
           			    	this.userpreferencesshowcitytoguestusers = dis.readBoolean();
           				}
					
					this.lastlogindate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesuserdebugmodepref = null;
           				} else {
           			    	this.userpreferencesuserdebugmodepref = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidebiggerphotocallout = null;
           				} else {
           			    	this.userpreferenceshidebiggerphotocallout = dis.readBoolean();
           				}
					
					this.lastname = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionssupportuser = null;
           				} else {
           			    	this.userpermissionssupportuser = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshideenduseronboardingassistantmodal = null;
           				} else {
           			    	this.userpreferenceshideenduseronboardingassistantmodal = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablefollowersemail = null;
           				} else {
           			    	this.userpreferencesdisablefollowersemail = dis.readBoolean();
           				}
					
					this.street = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencessuppresstasksfxreminders = null;
           				} else {
           			    	this.userpreferencessuppresstasksfxreminders = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionsinteractionuser = null;
           				} else {
           			    	this.userpermissionsinteractionuser = dis.readBoolean();
           				}
					
					this.profileid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.receivesadmininfoemails = null;
           				} else {
           			    	this.receivesadmininfoemails = dis.readBoolean();
           				}
					
					this.smallphotourl = readString(dis);
					
					this.usertype = readString(dis);
					
					this.aboutme = readString(dis);
					
					this.et4ae5__default_mid__c = readString(dis);
					
					this.outofofficemessage = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionsmobileuser = null;
           				} else {
           			    	this.userpermissionsmobileuser = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.forecastenabled = null;
           				} else {
           			    	this.forecastenabled = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshascelebrationbadge = null;
           				} else {
           			    	this.userpreferenceshascelebrationbadge = dis.readBoolean();
           				}
					
						this.numberoffailedlogins = readInteger(dis);
					
					this.senderemail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesactivityreminderspopup = null;
           				} else {
           			    	this.userpreferencesactivityreminderspopup = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdiscommentafterlikeemail = null;
           				} else {
           			    	this.userpreferencesdiscommentafterlikeemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdismentionscommentemail = null;
           				} else {
           			    	this.userpreferencesdismentionscommentemail = dis.readBoolean();
           				}
					
					this.accountid = readString(dis);
					
					this.companyname = readString(dis);
					
					this.managerid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesreceivenonotificationsasapprover = null;
           				} else {
           			    	this.userpreferencesreceivenonotificationsasapprover = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidesecondchatteronboardingsplash = null;
           				} else {
           			    	this.userpreferenceshidesecondchatteronboardingsplash = dis.readBoolean();
           				}
					
					this.lastvieweddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablechangecommentemail = null;
           				} else {
           			    	this.userpreferencesdisablechangecommentemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidecsngetchattermobiletask = null;
           				} else {
           			    	this.userpreferenceshidecsngetchattermobiletask = dis.readBoolean();
           				}
					
					this.bannerphotourl = readString(dis);
					
					this.et4ae5__exacttargetusername__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisableendorsementemail = null;
           				} else {
           			    	this.userpreferencesdisableendorsementemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesfavoritesshowtopfavorites = null;
           				} else {
           			    	this.userpreferencesfavoritesshowtopfavorites = dis.readBoolean();
           				}
					
					this.offlinepdatrialexpirationdate = readDate(dis);
					
					this.timezonesidkey = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablelikeemail = null;
           				} else {
           			    	this.userpreferencesdisablelikeemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.emailpreferencesautobccstayintouch = null;
           				} else {
           			    	this.emailpreferencesautobccstayintouch = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesfavoriteswtshown = null;
           				} else {
           			    	this.userpreferencesfavoriteswtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceseventreminderscheckboxdefault = null;
           				} else {
           			    	this.userpreferenceseventreminderscheckboxdefault = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencespathassistantcollapsed = null;
           				} else {
           			    	this.userpreferencespathassistantcollapsed = dis.readBoolean();
           				}
					
					this.stayintouchsubject = readString(dis);
					
					this.city = readString(dis);
					
					this.localesidkey = readString(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablebookmarkemail = null;
           				} else {
           			    	this.userpreferencesdisablebookmarkemail = dis.readBoolean();
           				}
					
					this.federationidentifier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.latitude = null;
           				} else {
           			    	this.latitude = dis.readDouble();
           				}
					
					this.fullphotourl = readString(dis);
					
					this.mobilephone = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencescreatelexappswtshown = null;
           				} else {
           			    	this.userpreferencescreatelexappswtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesenableautosubforfeeds = null;
           				} else {
           			    	this.userpreferencesenableautosubforfeeds = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowpostalcodetoguestusers = null;
           				} else {
           			    	this.userpreferencesshowpostalcodetoguestusers = dis.readBoolean();
           				}
					
					this.division = readString(dis);
					
					this.languagelocalekey = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowmobilephonetoguestusers = null;
           				} else {
           			    	this.userpreferencesshowmobilephonetoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisableallfeedsemail = null;
           				} else {
           			    	this.userpreferencesdisableallfeedsemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowcitytoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowcitytoexternalusers = dis.readBoolean();
           				}
					
					this.et4ae5__exacttarget_oauth_token__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.callcenterid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowmanagertoguestusers = null;
           				} else {
           			    	this.userpreferencesshowmanagertoguestusers = dis.readBoolean();
           				}
					
					this.phone = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisableprofilepostemail = null;
           				} else {
           			    	this.userpreferencesdisableprofilepostemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablelatercommentemail = null;
           				} else {
           			    	this.userpreferencesdisablelatercommentemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionscallcenterautologin = null;
           				} else {
           			    	this.userpermissionscallcenterautologin = dis.readBoolean();
           				}
					
					this.et4ae5__default_et_page__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencespipelineviewhidehelppopover = null;
           				} else {
           			    	this.userpreferencespipelineviewhidehelppopover = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencespreviewlightning = null;
           				} else {
           			    	this.userpreferencespreviewlightning = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowworkphonetoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowworkphonetoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.longitude = null;
           				} else {
           			    	this.longitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowfaxtoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowfaxtoexternalusers = dis.readBoolean();
           				}
					
					this.lastpasswordchangedate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshides1browserui = null;
           				} else {
           			    	this.userpreferenceshides1browserui = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesrecordhomereservedwtshown = null;
           				} else {
           			    	this.userpreferencesrecordhomereservedwtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencestaskreminderscheckboxdefault = null;
           				} else {
           			    	this.userpreferencestaskreminderscheckboxdefault = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowemailtoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowemailtoexternalusers = dis.readBoolean();
           				}
					
					this.offlinetrialexpirationdate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isactive = null;
           				} else {
           			    	this.isactive = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.smallbannerphotourl = readString(dis);
					
					this.alias = readString(dis);
					
					this.emailencodingkey = readString(dis);
					
					this.badgetext = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablemessageemail = null;
           				} else {
           			    	this.userpreferencesdisablemessageemail = dis.readBoolean();
           				}
					
					this.lastmodifiedbyid = readString(dis);
					
					this.state = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablefilesharenotificationsforapi = null;
           				} else {
           			    	this.userpreferencesdisablefilesharenotificationsforapi = dis.readBoolean();
           				}
					
					this.mediumphotourl = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowstreetaddresstoguestusers = null;
           				} else {
           			    	this.userpreferencesshowstreetaddresstoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowstatetoguestusers = null;
           				} else {
           			    	this.userpreferencesshowstatetoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidecsndesktoptask = null;
           				} else {
           			    	this.userpreferenceshidecsndesktoptask = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesnewlightningreportrunpageenabled = null;
           				} else {
           			    	this.userpreferencesnewlightningreportrunpageenabled = dis.readBoolean();
           				}
					
					this.department = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesexcludemailappattachments = null;
           				} else {
           			    	this.userpreferencesexcludemailappattachments = dis.readBoolean();
           				}
					
					this.defaultgroupnotificationfrequency = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.et4ae5__exacttargetforappexchangeadmin__c = null;
           				} else {
           			    	this.et4ae5__exacttargetforappexchangeadmin__c = dis.readBoolean();
           				}
					
					this.stayintouchnote = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesglobalnavbarwtshown = null;
           				} else {
           			    	this.userpreferencesglobalnavbarwtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidesfxwelcomemat = null;
           				} else {
           			    	this.userpreferenceshidesfxwelcomemat = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.et4ae5__validexacttargetadmin__c = null;
           				} else {
           			    	this.et4ae5__validexacttargetadmin__c = dis.readBoolean();
           				}
					
					this.individualid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowtitletoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowtitletoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencessuppresseventsfxreminders = null;
           				} else {
           			    	this.userpreferencessuppresseventsfxreminders = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.receivesinfoemails = null;
           				} else {
           			    	this.receivesinfoemails = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencessrhoverrideactivities = null;
           				} else {
           			    	this.userpreferencessrhoverrideactivities = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionsofflineuser = null;
           				} else {
           			    	this.userpermissionsofflineuser = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowprofilepictoguestusers = null;
           				} else {
           			    	this.userpreferencesshowprofilepictoguestusers = dis.readBoolean();
           				}
					
					this.username = readString(dis);
					
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowcountrytoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowcountrytoexternalusers = dis.readBoolean();
           				}
					
					this.country = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.emailpreferencesstayintouchreminder = null;
           				} else {
           			    	this.emailpreferencesstayintouchreminder = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencescachediagnostics = null;
           				} else {
           			    	this.userpreferencescachediagnostics = dis.readBoolean();
           				}
					
					this.stayintouchsignature = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.emailpreferencesautobcc = null;
           				} else {
           			    	this.emailpreferencesautobcc = dis.readBoolean();
           				}
					
					this.communitynickname = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisprofpostcommentemail = null;
           				} else {
           			    	this.userpreferencesdisprofpostcommentemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowcountrytoguestusers = null;
           				} else {
           			    	this.userpreferencesshowcountrytoguestusers = dis.readBoolean();
           				}
					
					this.employeenumber = readString(dis);
					
					this.geocodeaccuracy = readString(dis);
					
					this.signature = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionssfcontentuser = null;
           				} else {
           			    	this.userpermissionssfcontentuser = dis.readBoolean();
           				}
					
					this.postalcode = readString(dis);
					
					this.title = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablementionspostemail = null;
           				} else {
           			    	this.userpreferencesdisablementionspostemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesapexpagesdevelopermode = null;
           				} else {
           			    	this.userpreferencesapexpagesdevelopermode = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablesharepostemail = null;
           				} else {
           			    	this.userpreferencesdisablesharepostemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.et4ae5__validexacttargetuser__c = null;
           				} else {
           			    	this.et4ae5__validexacttargetuser__c = dis.readBoolean();
           				}
					
					this.digestfrequency = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionsmarketinguser = null;
           				} else {
           			    	this.userpermissionsmarketinguser = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowtitletoguestusers = null;
           				} else {
           			    	this.userpreferencesshowtitletoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isprofilephotoactive = null;
           				} else {
           			    	this.isprofilephotoactive = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.et4ae5__exacttargetforappexchangeuser__c = null;
           				} else {
           			    	this.et4ae5__exacttargetforappexchangeuser__c = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isextindicatorvisible = null;
           				} else {
           			    	this.isextindicatorvisible = dis.readBoolean();
           				}
					
					this.createdbyid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidelightningmigrationmodal = null;
           				} else {
           			    	this.userpreferenceshidelightningmigrationmodal = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceslightningexperiencepreferred = null;
           				} else {
           			    	this.userpreferenceslightningexperiencepreferred = dis.readBoolean();
           				}
					
					this.firstname = readString(dis);
					
					this.contactid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowstatetoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowstatetoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowstreetaddresstoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowstreetaddresstoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidechatteronboardingsplash = null;
           				} else {
           			    	this.userpreferenceshidechatteronboardingsplash = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesglobalnavgridmenuwtshown = null;
           				} else {
           			    	this.userpreferencesglobalnavgridmenuwtshown = dis.readBoolean();
           				}
					
					this.email = readString(dis);
					
					this.userroleid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowemailtoguestusers = null;
           				} else {
           			    	this.userpreferencesshowemailtoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencespreviewcustomtheme = null;
           				} else {
           			    	this.userpreferencespreviewcustomtheme = dis.readBoolean();
           				}
					
					this.lastreferenceddate = readDate(dis);
					
					this.fax = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__default_owner__c = null;
           				} else {
           			    	this.noodlecrm__default_owner__c = dis.readBoolean();
           				}
					
					this.mediumbannerphotourl = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowworkphonetoguestusers = null;
           				} else {
           			    	this.userpreferencesshowworkphonetoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowfaxtoguestusers = null;
           				} else {
           			    	this.userpreferencesshowfaxtoguestusers = dis.readBoolean();
           				}
					
					this.extension = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesremindersoundoff = null;
           				} else {
           			    	this.userpreferencesremindersoundoff = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesrecordhomesectioncollapsewtshown = null;
           				} else {
           			    	this.userpreferencesrecordhomesectioncollapsewtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowmanagertoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowmanagertoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencessortfeedbycomment = null;
           				} else {
           			    	this.userpreferencessortfeedbycomment = dis.readBoolean();
           				}
					
					this.delegatedapproverid = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Boolean
				
						if(this.userpreferencesshowmobilephonetoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowmobilephonetoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowpostalcodetoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowpostalcodetoexternalusers);
		            	}
					
					// String
				
						writeString(this.sendername,dos);
					
					// Boolean
				
						if(this.userpreferencesreceivenotificationsasdelegatedapprover == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesreceivenotificationsasdelegatedapprover);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowcitytoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowcitytoguestusers);
		            	}
					
					// java.util.Date
				
						writeDate(this.lastlogindate,dos);
					
					// Boolean
				
						if(this.userpreferencesuserdebugmodepref == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesuserdebugmodepref);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidebiggerphotocallout == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidebiggerphotocallout);
		            	}
					
					// String
				
						writeString(this.lastname,dos);
					
					// Boolean
				
						if(this.userpermissionssupportuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionssupportuser);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshideenduseronboardingassistantmodal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshideenduseronboardingassistantmodal);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdisablefollowersemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablefollowersemail);
		            	}
					
					// String
				
						writeString(this.street,dos);
					
					// Boolean
				
						if(this.userpreferencessuppresstasksfxreminders == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencessuppresstasksfxreminders);
		            	}
					
					// Boolean
				
						if(this.userpermissionsinteractionuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionsinteractionuser);
		            	}
					
					// String
				
						writeString(this.profileid,dos);
					
					// Boolean
				
						if(this.receivesadmininfoemails == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.receivesadmininfoemails);
		            	}
					
					// String
				
						writeString(this.smallphotourl,dos);
					
					// String
				
						writeString(this.usertype,dos);
					
					// String
				
						writeString(this.aboutme,dos);
					
					// String
				
						writeString(this.et4ae5__default_mid__c,dos);
					
					// String
				
						writeString(this.outofofficemessage,dos);
					
					// Boolean
				
						if(this.userpermissionsmobileuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionsmobileuser);
		            	}
					
					// Boolean
				
						if(this.forecastenabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.forecastenabled);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshascelebrationbadge == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshascelebrationbadge);
		            	}
					
					// Integer
				
						writeInteger(this.numberoffailedlogins,dos);
					
					// String
				
						writeString(this.senderemail,dos);
					
					// Boolean
				
						if(this.userpreferencesactivityreminderspopup == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesactivityreminderspopup);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdiscommentafterlikeemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdiscommentafterlikeemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdismentionscommentemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdismentionscommentemail);
		            	}
					
					// String
				
						writeString(this.accountid,dos);
					
					// String
				
						writeString(this.companyname,dos);
					
					// String
				
						writeString(this.managerid,dos);
					
					// Boolean
				
						if(this.userpreferencesreceivenonotificationsasapprover == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesreceivenonotificationsasapprover);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidesecondchatteronboardingsplash == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidesecondchatteronboardingsplash);
		            	}
					
					// java.util.Date
				
						writeDate(this.lastvieweddate,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablechangecommentemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablechangecommentemail);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidecsngetchattermobiletask == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidecsngetchattermobiletask);
		            	}
					
					// String
				
						writeString(this.bannerphotourl,dos);
					
					// String
				
						writeString(this.et4ae5__exacttargetusername__c,dos);
					
					// Boolean
				
						if(this.userpreferencesdisableendorsementemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisableendorsementemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesfavoritesshowtopfavorites == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesfavoritesshowtopfavorites);
		            	}
					
					// java.util.Date
				
						writeDate(this.offlinepdatrialexpirationdate,dos);
					
					// String
				
						writeString(this.timezonesidkey,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablelikeemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablelikeemail);
		            	}
					
					// Boolean
				
						if(this.emailpreferencesautobccstayintouch == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.emailpreferencesautobccstayintouch);
		            	}
					
					// Boolean
				
						if(this.userpreferencesfavoriteswtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesfavoriteswtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferenceseventreminderscheckboxdefault == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceseventreminderscheckboxdefault);
		            	}
					
					// Boolean
				
						if(this.userpreferencespathassistantcollapsed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencespathassistantcollapsed);
		            	}
					
					// String
				
						writeString(this.stayintouchsubject,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.localesidkey,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablebookmarkemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablebookmarkemail);
		            	}
					
					// String
				
						writeString(this.federationidentifier,dos);
					
					// Double
				
						if(this.latitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.latitude);
		            	}
					
					// String
				
						writeString(this.fullphotourl,dos);
					
					// String
				
						writeString(this.mobilephone,dos);
					
					// Boolean
				
						if(this.userpreferencescreatelexappswtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencescreatelexappswtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferencesenableautosubforfeeds == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesenableautosubforfeeds);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowpostalcodetoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowpostalcodetoguestusers);
		            	}
					
					// String
				
						writeString(this.division,dos);
					
					// String
				
						writeString(this.languagelocalekey,dos);
					
					// Boolean
				
						if(this.userpreferencesshowmobilephonetoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowmobilephonetoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdisableallfeedsemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisableallfeedsemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowcitytoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowcitytoexternalusers);
		            	}
					
					// String
				
						writeString(this.et4ae5__exacttarget_oauth_token__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.callcenterid,dos);
					
					// Boolean
				
						if(this.userpreferencesshowmanagertoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowmanagertoguestusers);
		            	}
					
					// String
				
						writeString(this.phone,dos);
					
					// Boolean
				
						if(this.userpreferencesdisableprofilepostemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisableprofilepostemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdisablelatercommentemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablelatercommentemail);
		            	}
					
					// Boolean
				
						if(this.userpermissionscallcenterautologin == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionscallcenterautologin);
		            	}
					
					// String
				
						writeString(this.et4ae5__default_et_page__c,dos);
					
					// Boolean
				
						if(this.userpreferencespipelineviewhidehelppopover == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencespipelineviewhidehelppopover);
		            	}
					
					// Boolean
				
						if(this.userpreferencespreviewlightning == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencespreviewlightning);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowworkphonetoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowworkphonetoexternalusers);
		            	}
					
					// Double
				
						if(this.longitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.longitude);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowfaxtoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowfaxtoexternalusers);
		            	}
					
					// java.util.Date
				
						writeDate(this.lastpasswordchangedate,dos);
					
					// Boolean
				
						if(this.userpreferenceshides1browserui == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshides1browserui);
		            	}
					
					// Boolean
				
						if(this.userpreferencesrecordhomereservedwtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesrecordhomereservedwtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferencestaskreminderscheckboxdefault == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencestaskreminderscheckboxdefault);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowemailtoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowemailtoexternalusers);
		            	}
					
					// java.util.Date
				
						writeDate(this.offlinetrialexpirationdate,dos);
					
					// Boolean
				
						if(this.isactive == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isactive);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.smallbannerphotourl,dos);
					
					// String
				
						writeString(this.alias,dos);
					
					// String
				
						writeString(this.emailencodingkey,dos);
					
					// String
				
						writeString(this.badgetext,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablemessageemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablemessageemail);
		            	}
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablefilesharenotificationsforapi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablefilesharenotificationsforapi);
		            	}
					
					// String
				
						writeString(this.mediumphotourl,dos);
					
					// Boolean
				
						if(this.userpreferencesshowstreetaddresstoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowstreetaddresstoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowstatetoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowstatetoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidecsndesktoptask == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidecsndesktoptask);
		            	}
					
					// Boolean
				
						if(this.userpreferencesnewlightningreportrunpageenabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesnewlightningreportrunpageenabled);
		            	}
					
					// String
				
						writeString(this.department,dos);
					
					// Boolean
				
						if(this.userpreferencesexcludemailappattachments == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesexcludemailappattachments);
		            	}
					
					// String
				
						writeString(this.defaultgroupnotificationfrequency,dos);
					
					// Boolean
				
						if(this.et4ae5__exacttargetforappexchangeadmin__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.et4ae5__exacttargetforappexchangeadmin__c);
		            	}
					
					// String
				
						writeString(this.stayintouchnote,dos);
					
					// Boolean
				
						if(this.userpreferencesglobalnavbarwtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesglobalnavbarwtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidesfxwelcomemat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidesfxwelcomemat);
		            	}
					
					// Boolean
				
						if(this.et4ae5__validexacttargetadmin__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.et4ae5__validexacttargetadmin__c);
		            	}
					
					// String
				
						writeString(this.individualid,dos);
					
					// Boolean
				
						if(this.userpreferencesshowtitletoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowtitletoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencessuppresseventsfxreminders == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencessuppresseventsfxreminders);
		            	}
					
					// Boolean
				
						if(this.receivesinfoemails == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.receivesinfoemails);
		            	}
					
					// Boolean
				
						if(this.userpreferencessrhoverrideactivities == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencessrhoverrideactivities);
		            	}
					
					// Boolean
				
						if(this.userpermissionsofflineuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionsofflineuser);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowprofilepictoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowprofilepictoguestusers);
		            	}
					
					// String
				
						writeString(this.username,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.userpreferencesshowcountrytoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowcountrytoexternalusers);
		            	}
					
					// String
				
						writeString(this.country,dos);
					
					// Boolean
				
						if(this.emailpreferencesstayintouchreminder == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.emailpreferencesstayintouchreminder);
		            	}
					
					// Boolean
				
						if(this.userpreferencescachediagnostics == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencescachediagnostics);
		            	}
					
					// String
				
						writeString(this.stayintouchsignature,dos);
					
					// Boolean
				
						if(this.emailpreferencesautobcc == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.emailpreferencesautobcc);
		            	}
					
					// String
				
						writeString(this.communitynickname,dos);
					
					// Boolean
				
						if(this.userpreferencesdisprofpostcommentemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisprofpostcommentemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowcountrytoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowcountrytoguestusers);
		            	}
					
					// String
				
						writeString(this.employeenumber,dos);
					
					// String
				
						writeString(this.geocodeaccuracy,dos);
					
					// String
				
						writeString(this.signature,dos);
					
					// Boolean
				
						if(this.userpermissionssfcontentuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionssfcontentuser);
		            	}
					
					// String
				
						writeString(this.postalcode,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablementionspostemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablementionspostemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesapexpagesdevelopermode == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesapexpagesdevelopermode);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdisablesharepostemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablesharepostemail);
		            	}
					
					// Boolean
				
						if(this.et4ae5__validexacttargetuser__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.et4ae5__validexacttargetuser__c);
		            	}
					
					// String
				
						writeString(this.digestfrequency,dos);
					
					// Boolean
				
						if(this.userpermissionsmarketinguser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionsmarketinguser);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowtitletoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowtitletoguestusers);
		            	}
					
					// Boolean
				
						if(this.isprofilephotoactive == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isprofilephotoactive);
		            	}
					
					// Boolean
				
						if(this.et4ae5__exacttargetforappexchangeuser__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.et4ae5__exacttargetforappexchangeuser__c);
		            	}
					
					// Boolean
				
						if(this.isextindicatorvisible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isextindicatorvisible);
		            	}
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// Boolean
				
						if(this.userpreferenceshidelightningmigrationmodal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidelightningmigrationmodal);
		            	}
					
					// Boolean
				
						if(this.userpreferenceslightningexperiencepreferred == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceslightningexperiencepreferred);
		            	}
					
					// String
				
						writeString(this.firstname,dos);
					
					// String
				
						writeString(this.contactid,dos);
					
					// Boolean
				
						if(this.userpreferencesshowstatetoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowstatetoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowstreetaddresstoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowstreetaddresstoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidechatteronboardingsplash == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidechatteronboardingsplash);
		            	}
					
					// Boolean
				
						if(this.userpreferencesglobalnavgridmenuwtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesglobalnavgridmenuwtshown);
		            	}
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.userroleid,dos);
					
					// Boolean
				
						if(this.userpreferencesshowemailtoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowemailtoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencespreviewcustomtheme == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencespreviewcustomtheme);
		            	}
					
					// java.util.Date
				
						writeDate(this.lastreferenceddate,dos);
					
					// String
				
						writeString(this.fax,dos);
					
					// Boolean
				
						if(this.noodlecrm__default_owner__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__default_owner__c);
		            	}
					
					// String
				
						writeString(this.mediumbannerphotourl,dos);
					
					// Boolean
				
						if(this.userpreferencesshowworkphonetoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowworkphonetoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowfaxtoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowfaxtoguestusers);
		            	}
					
					// String
				
						writeString(this.extension,dos);
					
					// Boolean
				
						if(this.userpreferencesremindersoundoff == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesremindersoundoff);
		            	}
					
					// Boolean
				
						if(this.userpreferencesrecordhomesectioncollapsewtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesrecordhomesectioncollapsewtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowmanagertoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowmanagertoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencessortfeedbycomment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencessortfeedbycomment);
		            	}
					
					// String
				
						writeString(this.delegatedapproverid,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("userpreferencesshowmobilephonetoexternalusers="+String.valueOf(userpreferencesshowmobilephonetoexternalusers));
		sb.append(",userpreferencesshowpostalcodetoexternalusers="+String.valueOf(userpreferencesshowpostalcodetoexternalusers));
		sb.append(",sendername="+sendername);
		sb.append(",userpreferencesreceivenotificationsasdelegatedapprover="+String.valueOf(userpreferencesreceivenotificationsasdelegatedapprover));
		sb.append(",userpreferencesshowcitytoguestusers="+String.valueOf(userpreferencesshowcitytoguestusers));
		sb.append(",lastlogindate="+String.valueOf(lastlogindate));
		sb.append(",userpreferencesuserdebugmodepref="+String.valueOf(userpreferencesuserdebugmodepref));
		sb.append(",userpreferenceshidebiggerphotocallout="+String.valueOf(userpreferenceshidebiggerphotocallout));
		sb.append(",lastname="+lastname);
		sb.append(",userpermissionssupportuser="+String.valueOf(userpermissionssupportuser));
		sb.append(",userpreferenceshideenduseronboardingassistantmodal="+String.valueOf(userpreferenceshideenduseronboardingassistantmodal));
		sb.append(",userpreferencesdisablefollowersemail="+String.valueOf(userpreferencesdisablefollowersemail));
		sb.append(",street="+street);
		sb.append(",userpreferencessuppresstasksfxreminders="+String.valueOf(userpreferencessuppresstasksfxreminders));
		sb.append(",userpermissionsinteractionuser="+String.valueOf(userpermissionsinteractionuser));
		sb.append(",profileid="+profileid);
		sb.append(",receivesadmininfoemails="+String.valueOf(receivesadmininfoemails));
		sb.append(",smallphotourl="+smallphotourl);
		sb.append(",usertype="+usertype);
		sb.append(",aboutme="+aboutme);
		sb.append(",et4ae5__default_mid__c="+et4ae5__default_mid__c);
		sb.append(",outofofficemessage="+outofofficemessage);
		sb.append(",userpermissionsmobileuser="+String.valueOf(userpermissionsmobileuser));
		sb.append(",forecastenabled="+String.valueOf(forecastenabled));
		sb.append(",userpreferenceshascelebrationbadge="+String.valueOf(userpreferenceshascelebrationbadge));
		sb.append(",numberoffailedlogins="+String.valueOf(numberoffailedlogins));
		sb.append(",senderemail="+senderemail);
		sb.append(",userpreferencesactivityreminderspopup="+String.valueOf(userpreferencesactivityreminderspopup));
		sb.append(",userpreferencesdiscommentafterlikeemail="+String.valueOf(userpreferencesdiscommentafterlikeemail));
		sb.append(",userpreferencesdismentionscommentemail="+String.valueOf(userpreferencesdismentionscommentemail));
		sb.append(",accountid="+accountid);
		sb.append(",companyname="+companyname);
		sb.append(",managerid="+managerid);
		sb.append(",userpreferencesreceivenonotificationsasapprover="+String.valueOf(userpreferencesreceivenonotificationsasapprover));
		sb.append(",userpreferenceshidesecondchatteronboardingsplash="+String.valueOf(userpreferenceshidesecondchatteronboardingsplash));
		sb.append(",lastvieweddate="+String.valueOf(lastvieweddate));
		sb.append(",userpreferencesdisablechangecommentemail="+String.valueOf(userpreferencesdisablechangecommentemail));
		sb.append(",userpreferenceshidecsngetchattermobiletask="+String.valueOf(userpreferenceshidecsngetchattermobiletask));
		sb.append(",bannerphotourl="+bannerphotourl);
		sb.append(",et4ae5__exacttargetusername__c="+et4ae5__exacttargetusername__c);
		sb.append(",userpreferencesdisableendorsementemail="+String.valueOf(userpreferencesdisableendorsementemail));
		sb.append(",userpreferencesfavoritesshowtopfavorites="+String.valueOf(userpreferencesfavoritesshowtopfavorites));
		sb.append(",offlinepdatrialexpirationdate="+String.valueOf(offlinepdatrialexpirationdate));
		sb.append(",timezonesidkey="+timezonesidkey);
		sb.append(",userpreferencesdisablelikeemail="+String.valueOf(userpreferencesdisablelikeemail));
		sb.append(",emailpreferencesautobccstayintouch="+String.valueOf(emailpreferencesautobccstayintouch));
		sb.append(",userpreferencesfavoriteswtshown="+String.valueOf(userpreferencesfavoriteswtshown));
		sb.append(",userpreferenceseventreminderscheckboxdefault="+String.valueOf(userpreferenceseventreminderscheckboxdefault));
		sb.append(",userpreferencespathassistantcollapsed="+String.valueOf(userpreferencespathassistantcollapsed));
		sb.append(",stayintouchsubject="+stayintouchsubject);
		sb.append(",city="+city);
		sb.append(",localesidkey="+localesidkey);
		sb.append(",name="+name);
		sb.append(",userpreferencesdisablebookmarkemail="+String.valueOf(userpreferencesdisablebookmarkemail));
		sb.append(",federationidentifier="+federationidentifier);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",fullphotourl="+fullphotourl);
		sb.append(",mobilephone="+mobilephone);
		sb.append(",userpreferencescreatelexappswtshown="+String.valueOf(userpreferencescreatelexappswtshown));
		sb.append(",userpreferencesenableautosubforfeeds="+String.valueOf(userpreferencesenableautosubforfeeds));
		sb.append(",userpreferencesshowpostalcodetoguestusers="+String.valueOf(userpreferencesshowpostalcodetoguestusers));
		sb.append(",division="+division);
		sb.append(",languagelocalekey="+languagelocalekey);
		sb.append(",userpreferencesshowmobilephonetoguestusers="+String.valueOf(userpreferencesshowmobilephonetoguestusers));
		sb.append(",userpreferencesdisableallfeedsemail="+String.valueOf(userpreferencesdisableallfeedsemail));
		sb.append(",userpreferencesshowcitytoexternalusers="+String.valueOf(userpreferencesshowcitytoexternalusers));
		sb.append(",et4ae5__exacttarget_oauth_token__c="+et4ae5__exacttarget_oauth_token__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",callcenterid="+callcenterid);
		sb.append(",userpreferencesshowmanagertoguestusers="+String.valueOf(userpreferencesshowmanagertoguestusers));
		sb.append(",phone="+phone);
		sb.append(",userpreferencesdisableprofilepostemail="+String.valueOf(userpreferencesdisableprofilepostemail));
		sb.append(",userpreferencesdisablelatercommentemail="+String.valueOf(userpreferencesdisablelatercommentemail));
		sb.append(",userpermissionscallcenterautologin="+String.valueOf(userpermissionscallcenterautologin));
		sb.append(",et4ae5__default_et_page__c="+et4ae5__default_et_page__c);
		sb.append(",userpreferencespipelineviewhidehelppopover="+String.valueOf(userpreferencespipelineviewhidehelppopover));
		sb.append(",userpreferencespreviewlightning="+String.valueOf(userpreferencespreviewlightning));
		sb.append(",userpreferencesshowworkphonetoexternalusers="+String.valueOf(userpreferencesshowworkphonetoexternalusers));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",userpreferencesshowfaxtoexternalusers="+String.valueOf(userpreferencesshowfaxtoexternalusers));
		sb.append(",lastpasswordchangedate="+String.valueOf(lastpasswordchangedate));
		sb.append(",userpreferenceshides1browserui="+String.valueOf(userpreferenceshides1browserui));
		sb.append(",userpreferencesrecordhomereservedwtshown="+String.valueOf(userpreferencesrecordhomereservedwtshown));
		sb.append(",userpreferencestaskreminderscheckboxdefault="+String.valueOf(userpreferencestaskreminderscheckboxdefault));
		sb.append(",userpreferencesshowemailtoexternalusers="+String.valueOf(userpreferencesshowemailtoexternalusers));
		sb.append(",offlinetrialexpirationdate="+String.valueOf(offlinetrialexpirationdate));
		sb.append(",isactive="+String.valueOf(isactive));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",smallbannerphotourl="+smallbannerphotourl);
		sb.append(",alias="+alias);
		sb.append(",emailencodingkey="+emailencodingkey);
		sb.append(",badgetext="+badgetext);
		sb.append(",userpreferencesdisablemessageemail="+String.valueOf(userpreferencesdisablemessageemail));
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",state="+state);
		sb.append(",userpreferencesdisablefilesharenotificationsforapi="+String.valueOf(userpreferencesdisablefilesharenotificationsforapi));
		sb.append(",mediumphotourl="+mediumphotourl);
		sb.append(",userpreferencesshowstreetaddresstoguestusers="+String.valueOf(userpreferencesshowstreetaddresstoguestusers));
		sb.append(",userpreferencesshowstatetoguestusers="+String.valueOf(userpreferencesshowstatetoguestusers));
		sb.append(",userpreferenceshidecsndesktoptask="+String.valueOf(userpreferenceshidecsndesktoptask));
		sb.append(",userpreferencesnewlightningreportrunpageenabled="+String.valueOf(userpreferencesnewlightningreportrunpageenabled));
		sb.append(",department="+department);
		sb.append(",userpreferencesexcludemailappattachments="+String.valueOf(userpreferencesexcludemailappattachments));
		sb.append(",defaultgroupnotificationfrequency="+defaultgroupnotificationfrequency);
		sb.append(",et4ae5__exacttargetforappexchangeadmin__c="+String.valueOf(et4ae5__exacttargetforappexchangeadmin__c));
		sb.append(",stayintouchnote="+stayintouchnote);
		sb.append(",userpreferencesglobalnavbarwtshown="+String.valueOf(userpreferencesglobalnavbarwtshown));
		sb.append(",userpreferenceshidesfxwelcomemat="+String.valueOf(userpreferenceshidesfxwelcomemat));
		sb.append(",et4ae5__validexacttargetadmin__c="+String.valueOf(et4ae5__validexacttargetadmin__c));
		sb.append(",individualid="+individualid);
		sb.append(",userpreferencesshowtitletoexternalusers="+String.valueOf(userpreferencesshowtitletoexternalusers));
		sb.append(",userpreferencessuppresseventsfxreminders="+String.valueOf(userpreferencessuppresseventsfxreminders));
		sb.append(",receivesinfoemails="+String.valueOf(receivesinfoemails));
		sb.append(",userpreferencessrhoverrideactivities="+String.valueOf(userpreferencessrhoverrideactivities));
		sb.append(",userpermissionsofflineuser="+String.valueOf(userpermissionsofflineuser));
		sb.append(",userpreferencesshowprofilepictoguestusers="+String.valueOf(userpreferencesshowprofilepictoguestusers));
		sb.append(",username="+username);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",userpreferencesshowcountrytoexternalusers="+String.valueOf(userpreferencesshowcountrytoexternalusers));
		sb.append(",country="+country);
		sb.append(",emailpreferencesstayintouchreminder="+String.valueOf(emailpreferencesstayintouchreminder));
		sb.append(",userpreferencescachediagnostics="+String.valueOf(userpreferencescachediagnostics));
		sb.append(",stayintouchsignature="+stayintouchsignature);
		sb.append(",emailpreferencesautobcc="+String.valueOf(emailpreferencesautobcc));
		sb.append(",communitynickname="+communitynickname);
		sb.append(",userpreferencesdisprofpostcommentemail="+String.valueOf(userpreferencesdisprofpostcommentemail));
		sb.append(",userpreferencesshowcountrytoguestusers="+String.valueOf(userpreferencesshowcountrytoguestusers));
		sb.append(",employeenumber="+employeenumber);
		sb.append(",geocodeaccuracy="+geocodeaccuracy);
		sb.append(",signature="+signature);
		sb.append(",userpermissionssfcontentuser="+String.valueOf(userpermissionssfcontentuser));
		sb.append(",postalcode="+postalcode);
		sb.append(",title="+title);
		sb.append(",userpreferencesdisablementionspostemail="+String.valueOf(userpreferencesdisablementionspostemail));
		sb.append(",userpreferencesapexpagesdevelopermode="+String.valueOf(userpreferencesapexpagesdevelopermode));
		sb.append(",userpreferencesdisablesharepostemail="+String.valueOf(userpreferencesdisablesharepostemail));
		sb.append(",et4ae5__validexacttargetuser__c="+String.valueOf(et4ae5__validexacttargetuser__c));
		sb.append(",digestfrequency="+digestfrequency);
		sb.append(",userpermissionsmarketinguser="+String.valueOf(userpermissionsmarketinguser));
		sb.append(",userpreferencesshowtitletoguestusers="+String.valueOf(userpreferencesshowtitletoguestusers));
		sb.append(",isprofilephotoactive="+String.valueOf(isprofilephotoactive));
		sb.append(",et4ae5__exacttargetforappexchangeuser__c="+String.valueOf(et4ae5__exacttargetforappexchangeuser__c));
		sb.append(",isextindicatorvisible="+String.valueOf(isextindicatorvisible));
		sb.append(",createdbyid="+createdbyid);
		sb.append(",userpreferenceshidelightningmigrationmodal="+String.valueOf(userpreferenceshidelightningmigrationmodal));
		sb.append(",userpreferenceslightningexperiencepreferred="+String.valueOf(userpreferenceslightningexperiencepreferred));
		sb.append(",firstname="+firstname);
		sb.append(",contactid="+contactid);
		sb.append(",userpreferencesshowstatetoexternalusers="+String.valueOf(userpreferencesshowstatetoexternalusers));
		sb.append(",userpreferencesshowstreetaddresstoexternalusers="+String.valueOf(userpreferencesshowstreetaddresstoexternalusers));
		sb.append(",userpreferenceshidechatteronboardingsplash="+String.valueOf(userpreferenceshidechatteronboardingsplash));
		sb.append(",userpreferencesglobalnavgridmenuwtshown="+String.valueOf(userpreferencesglobalnavgridmenuwtshown));
		sb.append(",email="+email);
		sb.append(",userroleid="+userroleid);
		sb.append(",userpreferencesshowemailtoguestusers="+String.valueOf(userpreferencesshowemailtoguestusers));
		sb.append(",userpreferencespreviewcustomtheme="+String.valueOf(userpreferencespreviewcustomtheme));
		sb.append(",lastreferenceddate="+String.valueOf(lastreferenceddate));
		sb.append(",fax="+fax);
		sb.append(",noodlecrm__default_owner__c="+String.valueOf(noodlecrm__default_owner__c));
		sb.append(",mediumbannerphotourl="+mediumbannerphotourl);
		sb.append(",userpreferencesshowworkphonetoguestusers="+String.valueOf(userpreferencesshowworkphonetoguestusers));
		sb.append(",userpreferencesshowfaxtoguestusers="+String.valueOf(userpreferencesshowfaxtoguestusers));
		sb.append(",extension="+extension);
		sb.append(",userpreferencesremindersoundoff="+String.valueOf(userpreferencesremindersoundoff));
		sb.append(",userpreferencesrecordhomesectioncollapsewtshown="+String.valueOf(userpreferencesrecordhomesectioncollapsewtshown));
		sb.append(",userpreferencesshowmanagertoexternalusers="+String.valueOf(userpreferencesshowmanagertoexternalusers));
		sb.append(",userpreferencessortfeedbycomment="+String.valueOf(userpreferencessortfeedbycomment));
		sb.append(",delegatedapproverid="+delegatedapproverid);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out16Struct implements routines.system.IPersistableRow<out16Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Boolean userpreferencesshowmobilephonetoexternalusers;

				public Boolean getUserpreferencesshowmobilephonetoexternalusers () {
					return this.userpreferencesshowmobilephonetoexternalusers;
				}
				
			    public Boolean userpreferencesshowpostalcodetoexternalusers;

				public Boolean getUserpreferencesshowpostalcodetoexternalusers () {
					return this.userpreferencesshowpostalcodetoexternalusers;
				}
				
			    public String sendername;

				public String getSendername () {
					return this.sendername;
				}
				
			    public Boolean userpreferencesreceivenotificationsasdelegatedapprover;

				public Boolean getUserpreferencesreceivenotificationsasdelegatedapprover () {
					return this.userpreferencesreceivenotificationsasdelegatedapprover;
				}
				
			    public Boolean userpreferencesshowcitytoguestusers;

				public Boolean getUserpreferencesshowcitytoguestusers () {
					return this.userpreferencesshowcitytoguestusers;
				}
				
			    public java.util.Date lastlogindate;

				public java.util.Date getLastlogindate () {
					return this.lastlogindate;
				}
				
			    public Boolean userpreferencesuserdebugmodepref;

				public Boolean getUserpreferencesuserdebugmodepref () {
					return this.userpreferencesuserdebugmodepref;
				}
				
			    public Boolean userpreferenceshidebiggerphotocallout;

				public Boolean getUserpreferenceshidebiggerphotocallout () {
					return this.userpreferenceshidebiggerphotocallout;
				}
				
			    public String lastname;

				public String getLastname () {
					return this.lastname;
				}
				
			    public Boolean userpermissionssupportuser;

				public Boolean getUserpermissionssupportuser () {
					return this.userpermissionssupportuser;
				}
				
			    public Boolean userpreferenceshideenduseronboardingassistantmodal;

				public Boolean getUserpreferenceshideenduseronboardingassistantmodal () {
					return this.userpreferenceshideenduseronboardingassistantmodal;
				}
				
			    public Boolean userpreferencesdisablefollowersemail;

				public Boolean getUserpreferencesdisablefollowersemail () {
					return this.userpreferencesdisablefollowersemail;
				}
				
			    public String street;

				public String getStreet () {
					return this.street;
				}
				
			    public Boolean userpreferencessuppresstasksfxreminders;

				public Boolean getUserpreferencessuppresstasksfxreminders () {
					return this.userpreferencessuppresstasksfxreminders;
				}
				
			    public Boolean userpermissionsinteractionuser;

				public Boolean getUserpermissionsinteractionuser () {
					return this.userpermissionsinteractionuser;
				}
				
			    public String profileid;

				public String getProfileid () {
					return this.profileid;
				}
				
			    public Boolean receivesadmininfoemails;

				public Boolean getReceivesadmininfoemails () {
					return this.receivesadmininfoemails;
				}
				
			    public String smallphotourl;

				public String getSmallphotourl () {
					return this.smallphotourl;
				}
				
			    public String usertype;

				public String getUsertype () {
					return this.usertype;
				}
				
			    public String aboutme;

				public String getAboutme () {
					return this.aboutme;
				}
				
			    public String et4ae5__default_mid__c;

				public String getEt4ae5__default_mid__c () {
					return this.et4ae5__default_mid__c;
				}
				
			    public String outofofficemessage;

				public String getOutofofficemessage () {
					return this.outofofficemessage;
				}
				
			    public Boolean userpermissionsmobileuser;

				public Boolean getUserpermissionsmobileuser () {
					return this.userpermissionsmobileuser;
				}
				
			    public Boolean forecastenabled;

				public Boolean getForecastenabled () {
					return this.forecastenabled;
				}
				
			    public Boolean userpreferenceshascelebrationbadge;

				public Boolean getUserpreferenceshascelebrationbadge () {
					return this.userpreferenceshascelebrationbadge;
				}
				
			    public Integer numberoffailedlogins;

				public Integer getNumberoffailedlogins () {
					return this.numberoffailedlogins;
				}
				
			    public String senderemail;

				public String getSenderemail () {
					return this.senderemail;
				}
				
			    public Boolean userpreferencesactivityreminderspopup;

				public Boolean getUserpreferencesactivityreminderspopup () {
					return this.userpreferencesactivityreminderspopup;
				}
				
			    public Boolean userpreferencesdiscommentafterlikeemail;

				public Boolean getUserpreferencesdiscommentafterlikeemail () {
					return this.userpreferencesdiscommentafterlikeemail;
				}
				
			    public Boolean userpreferencesdismentionscommentemail;

				public Boolean getUserpreferencesdismentionscommentemail () {
					return this.userpreferencesdismentionscommentemail;
				}
				
			    public String accountid;

				public String getAccountid () {
					return this.accountid;
				}
				
			    public String companyname;

				public String getCompanyname () {
					return this.companyname;
				}
				
			    public String managerid;

				public String getManagerid () {
					return this.managerid;
				}
				
			    public Boolean userpreferencesreceivenonotificationsasapprover;

				public Boolean getUserpreferencesreceivenonotificationsasapprover () {
					return this.userpreferencesreceivenonotificationsasapprover;
				}
				
			    public Boolean userpreferenceshidesecondchatteronboardingsplash;

				public Boolean getUserpreferenceshidesecondchatteronboardingsplash () {
					return this.userpreferenceshidesecondchatteronboardingsplash;
				}
				
			    public java.util.Date lastvieweddate;

				public java.util.Date getLastvieweddate () {
					return this.lastvieweddate;
				}
				
			    public Boolean userpreferencesdisablechangecommentemail;

				public Boolean getUserpreferencesdisablechangecommentemail () {
					return this.userpreferencesdisablechangecommentemail;
				}
				
			    public Boolean userpreferenceshidecsngetchattermobiletask;

				public Boolean getUserpreferenceshidecsngetchattermobiletask () {
					return this.userpreferenceshidecsngetchattermobiletask;
				}
				
			    public String bannerphotourl;

				public String getBannerphotourl () {
					return this.bannerphotourl;
				}
				
			    public String et4ae5__exacttargetusername__c;

				public String getEt4ae5__exacttargetusername__c () {
					return this.et4ae5__exacttargetusername__c;
				}
				
			    public Boolean userpreferencesdisableendorsementemail;

				public Boolean getUserpreferencesdisableendorsementemail () {
					return this.userpreferencesdisableendorsementemail;
				}
				
			    public Boolean userpreferencesfavoritesshowtopfavorites;

				public Boolean getUserpreferencesfavoritesshowtopfavorites () {
					return this.userpreferencesfavoritesshowtopfavorites;
				}
				
			    public java.util.Date offlinepdatrialexpirationdate;

				public java.util.Date getOfflinepdatrialexpirationdate () {
					return this.offlinepdatrialexpirationdate;
				}
				
			    public String timezonesidkey;

				public String getTimezonesidkey () {
					return this.timezonesidkey;
				}
				
			    public Boolean userpreferencesdisablelikeemail;

				public Boolean getUserpreferencesdisablelikeemail () {
					return this.userpreferencesdisablelikeemail;
				}
				
			    public Boolean emailpreferencesautobccstayintouch;

				public Boolean getEmailpreferencesautobccstayintouch () {
					return this.emailpreferencesautobccstayintouch;
				}
				
			    public Boolean userpreferencesfavoriteswtshown;

				public Boolean getUserpreferencesfavoriteswtshown () {
					return this.userpreferencesfavoriteswtshown;
				}
				
			    public Boolean userpreferenceseventreminderscheckboxdefault;

				public Boolean getUserpreferenceseventreminderscheckboxdefault () {
					return this.userpreferenceseventreminderscheckboxdefault;
				}
				
			    public Boolean userpreferencespathassistantcollapsed;

				public Boolean getUserpreferencespathassistantcollapsed () {
					return this.userpreferencespathassistantcollapsed;
				}
				
			    public String stayintouchsubject;

				public String getStayintouchsubject () {
					return this.stayintouchsubject;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String localesidkey;

				public String getLocalesidkey () {
					return this.localesidkey;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Boolean userpreferencesdisablebookmarkemail;

				public Boolean getUserpreferencesdisablebookmarkemail () {
					return this.userpreferencesdisablebookmarkemail;
				}
				
			    public String federationidentifier;

				public String getFederationidentifier () {
					return this.federationidentifier;
				}
				
			    public Double latitude;

				public Double getLatitude () {
					return this.latitude;
				}
				
			    public String fullphotourl;

				public String getFullphotourl () {
					return this.fullphotourl;
				}
				
			    public String mobilephone;

				public String getMobilephone () {
					return this.mobilephone;
				}
				
			    public Boolean userpreferencescreatelexappswtshown;

				public Boolean getUserpreferencescreatelexappswtshown () {
					return this.userpreferencescreatelexappswtshown;
				}
				
			    public Boolean userpreferencesenableautosubforfeeds;

				public Boolean getUserpreferencesenableautosubforfeeds () {
					return this.userpreferencesenableautosubforfeeds;
				}
				
			    public Boolean userpreferencesshowpostalcodetoguestusers;

				public Boolean getUserpreferencesshowpostalcodetoguestusers () {
					return this.userpreferencesshowpostalcodetoguestusers;
				}
				
			    public String division;

				public String getDivision () {
					return this.division;
				}
				
			    public String languagelocalekey;

				public String getLanguagelocalekey () {
					return this.languagelocalekey;
				}
				
			    public Boolean userpreferencesshowmobilephonetoguestusers;

				public Boolean getUserpreferencesshowmobilephonetoguestusers () {
					return this.userpreferencesshowmobilephonetoguestusers;
				}
				
			    public Boolean userpreferencesdisableallfeedsemail;

				public Boolean getUserpreferencesdisableallfeedsemail () {
					return this.userpreferencesdisableallfeedsemail;
				}
				
			    public Boolean userpreferencesshowcitytoexternalusers;

				public Boolean getUserpreferencesshowcitytoexternalusers () {
					return this.userpreferencesshowcitytoexternalusers;
				}
				
			    public String et4ae5__exacttarget_oauth_token__c;

				public String getEt4ae5__exacttarget_oauth_token__c () {
					return this.et4ae5__exacttarget_oauth_token__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String callcenterid;

				public String getCallcenterid () {
					return this.callcenterid;
				}
				
			    public Boolean userpreferencesshowmanagertoguestusers;

				public Boolean getUserpreferencesshowmanagertoguestusers () {
					return this.userpreferencesshowmanagertoguestusers;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				
			    public Boolean userpreferencesdisableprofilepostemail;

				public Boolean getUserpreferencesdisableprofilepostemail () {
					return this.userpreferencesdisableprofilepostemail;
				}
				
			    public Boolean userpreferencesdisablelatercommentemail;

				public Boolean getUserpreferencesdisablelatercommentemail () {
					return this.userpreferencesdisablelatercommentemail;
				}
				
			    public Boolean userpermissionscallcenterautologin;

				public Boolean getUserpermissionscallcenterautologin () {
					return this.userpermissionscallcenterautologin;
				}
				
			    public String et4ae5__default_et_page__c;

				public String getEt4ae5__default_et_page__c () {
					return this.et4ae5__default_et_page__c;
				}
				
			    public Boolean userpreferencespipelineviewhidehelppopover;

				public Boolean getUserpreferencespipelineviewhidehelppopover () {
					return this.userpreferencespipelineviewhidehelppopover;
				}
				
			    public Boolean userpreferencespreviewlightning;

				public Boolean getUserpreferencespreviewlightning () {
					return this.userpreferencespreviewlightning;
				}
				
			    public Boolean userpreferencesshowworkphonetoexternalusers;

				public Boolean getUserpreferencesshowworkphonetoexternalusers () {
					return this.userpreferencesshowworkphonetoexternalusers;
				}
				
			    public Double longitude;

				public Double getLongitude () {
					return this.longitude;
				}
				
			    public Boolean userpreferencesshowfaxtoexternalusers;

				public Boolean getUserpreferencesshowfaxtoexternalusers () {
					return this.userpreferencesshowfaxtoexternalusers;
				}
				
			    public java.util.Date lastpasswordchangedate;

				public java.util.Date getLastpasswordchangedate () {
					return this.lastpasswordchangedate;
				}
				
			    public Boolean userpreferenceshides1browserui;

				public Boolean getUserpreferenceshides1browserui () {
					return this.userpreferenceshides1browserui;
				}
				
			    public Boolean userpreferencesrecordhomereservedwtshown;

				public Boolean getUserpreferencesrecordhomereservedwtshown () {
					return this.userpreferencesrecordhomereservedwtshown;
				}
				
			    public Boolean userpreferencestaskreminderscheckboxdefault;

				public Boolean getUserpreferencestaskreminderscheckboxdefault () {
					return this.userpreferencestaskreminderscheckboxdefault;
				}
				
			    public Boolean userpreferencesshowemailtoexternalusers;

				public Boolean getUserpreferencesshowemailtoexternalusers () {
					return this.userpreferencesshowemailtoexternalusers;
				}
				
			    public java.util.Date offlinetrialexpirationdate;

				public java.util.Date getOfflinetrialexpirationdate () {
					return this.offlinetrialexpirationdate;
				}
				
			    public Boolean isactive;

				public Boolean getIsactive () {
					return this.isactive;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String smallbannerphotourl;

				public String getSmallbannerphotourl () {
					return this.smallbannerphotourl;
				}
				
			    public String alias;

				public String getAlias () {
					return this.alias;
				}
				
			    public String emailencodingkey;

				public String getEmailencodingkey () {
					return this.emailencodingkey;
				}
				
			    public String badgetext;

				public String getBadgetext () {
					return this.badgetext;
				}
				
			    public Boolean userpreferencesdisablemessageemail;

				public Boolean getUserpreferencesdisablemessageemail () {
					return this.userpreferencesdisablemessageemail;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public Boolean userpreferencesdisablefilesharenotificationsforapi;

				public Boolean getUserpreferencesdisablefilesharenotificationsforapi () {
					return this.userpreferencesdisablefilesharenotificationsforapi;
				}
				
			    public String mediumphotourl;

				public String getMediumphotourl () {
					return this.mediumphotourl;
				}
				
			    public Boolean userpreferencesshowstreetaddresstoguestusers;

				public Boolean getUserpreferencesshowstreetaddresstoguestusers () {
					return this.userpreferencesshowstreetaddresstoguestusers;
				}
				
			    public Boolean userpreferencesshowstatetoguestusers;

				public Boolean getUserpreferencesshowstatetoguestusers () {
					return this.userpreferencesshowstatetoguestusers;
				}
				
			    public Boolean userpreferenceshidecsndesktoptask;

				public Boolean getUserpreferenceshidecsndesktoptask () {
					return this.userpreferenceshidecsndesktoptask;
				}
				
			    public Boolean userpreferencesnewlightningreportrunpageenabled;

				public Boolean getUserpreferencesnewlightningreportrunpageenabled () {
					return this.userpreferencesnewlightningreportrunpageenabled;
				}
				
			    public String department;

				public String getDepartment () {
					return this.department;
				}
				
			    public Boolean userpreferencesexcludemailappattachments;

				public Boolean getUserpreferencesexcludemailappattachments () {
					return this.userpreferencesexcludemailappattachments;
				}
				
			    public String defaultgroupnotificationfrequency;

				public String getDefaultgroupnotificationfrequency () {
					return this.defaultgroupnotificationfrequency;
				}
				
			    public Boolean et4ae5__exacttargetforappexchangeadmin__c;

				public Boolean getEt4ae5__exacttargetforappexchangeadmin__c () {
					return this.et4ae5__exacttargetforappexchangeadmin__c;
				}
				
			    public String stayintouchnote;

				public String getStayintouchnote () {
					return this.stayintouchnote;
				}
				
			    public Boolean userpreferencesglobalnavbarwtshown;

				public Boolean getUserpreferencesglobalnavbarwtshown () {
					return this.userpreferencesglobalnavbarwtshown;
				}
				
			    public Boolean userpreferenceshidesfxwelcomemat;

				public Boolean getUserpreferenceshidesfxwelcomemat () {
					return this.userpreferenceshidesfxwelcomemat;
				}
				
			    public Boolean et4ae5__validexacttargetadmin__c;

				public Boolean getEt4ae5__validexacttargetadmin__c () {
					return this.et4ae5__validexacttargetadmin__c;
				}
				
			    public String individualid;

				public String getIndividualid () {
					return this.individualid;
				}
				
			    public Boolean userpreferencesshowtitletoexternalusers;

				public Boolean getUserpreferencesshowtitletoexternalusers () {
					return this.userpreferencesshowtitletoexternalusers;
				}
				
			    public Boolean userpreferencessuppresseventsfxreminders;

				public Boolean getUserpreferencessuppresseventsfxreminders () {
					return this.userpreferencessuppresseventsfxreminders;
				}
				
			    public Boolean receivesinfoemails;

				public Boolean getReceivesinfoemails () {
					return this.receivesinfoemails;
				}
				
			    public Boolean userpreferencessrhoverrideactivities;

				public Boolean getUserpreferencessrhoverrideactivities () {
					return this.userpreferencessrhoverrideactivities;
				}
				
			    public Boolean userpermissionsofflineuser;

				public Boolean getUserpermissionsofflineuser () {
					return this.userpermissionsofflineuser;
				}
				
			    public Boolean userpreferencesshowprofilepictoguestusers;

				public Boolean getUserpreferencesshowprofilepictoguestusers () {
					return this.userpreferencesshowprofilepictoguestusers;
				}
				
			    public String username;

				public String getUsername () {
					return this.username;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean userpreferencesshowcountrytoexternalusers;

				public Boolean getUserpreferencesshowcountrytoexternalusers () {
					return this.userpreferencesshowcountrytoexternalusers;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public Boolean emailpreferencesstayintouchreminder;

				public Boolean getEmailpreferencesstayintouchreminder () {
					return this.emailpreferencesstayintouchreminder;
				}
				
			    public Boolean userpreferencescachediagnostics;

				public Boolean getUserpreferencescachediagnostics () {
					return this.userpreferencescachediagnostics;
				}
				
			    public String stayintouchsignature;

				public String getStayintouchsignature () {
					return this.stayintouchsignature;
				}
				
			    public Boolean emailpreferencesautobcc;

				public Boolean getEmailpreferencesautobcc () {
					return this.emailpreferencesautobcc;
				}
				
			    public String communitynickname;

				public String getCommunitynickname () {
					return this.communitynickname;
				}
				
			    public Boolean userpreferencesdisprofpostcommentemail;

				public Boolean getUserpreferencesdisprofpostcommentemail () {
					return this.userpreferencesdisprofpostcommentemail;
				}
				
			    public Boolean userpreferencesshowcountrytoguestusers;

				public Boolean getUserpreferencesshowcountrytoguestusers () {
					return this.userpreferencesshowcountrytoguestusers;
				}
				
			    public String employeenumber;

				public String getEmployeenumber () {
					return this.employeenumber;
				}
				
			    public String geocodeaccuracy;

				public String getGeocodeaccuracy () {
					return this.geocodeaccuracy;
				}
				
			    public String signature;

				public String getSignature () {
					return this.signature;
				}
				
			    public Boolean userpermissionssfcontentuser;

				public Boolean getUserpermissionssfcontentuser () {
					return this.userpermissionssfcontentuser;
				}
				
			    public String postalcode;

				public String getPostalcode () {
					return this.postalcode;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public Boolean userpreferencesdisablementionspostemail;

				public Boolean getUserpreferencesdisablementionspostemail () {
					return this.userpreferencesdisablementionspostemail;
				}
				
			    public Boolean userpreferencesapexpagesdevelopermode;

				public Boolean getUserpreferencesapexpagesdevelopermode () {
					return this.userpreferencesapexpagesdevelopermode;
				}
				
			    public Boolean userpreferencesdisablesharepostemail;

				public Boolean getUserpreferencesdisablesharepostemail () {
					return this.userpreferencesdisablesharepostemail;
				}
				
			    public Boolean et4ae5__validexacttargetuser__c;

				public Boolean getEt4ae5__validexacttargetuser__c () {
					return this.et4ae5__validexacttargetuser__c;
				}
				
			    public String digestfrequency;

				public String getDigestfrequency () {
					return this.digestfrequency;
				}
				
			    public Boolean userpermissionsmarketinguser;

				public Boolean getUserpermissionsmarketinguser () {
					return this.userpermissionsmarketinguser;
				}
				
			    public Boolean userpreferencesshowtitletoguestusers;

				public Boolean getUserpreferencesshowtitletoguestusers () {
					return this.userpreferencesshowtitletoguestusers;
				}
				
			    public Boolean isprofilephotoactive;

				public Boolean getIsprofilephotoactive () {
					return this.isprofilephotoactive;
				}
				
			    public Boolean et4ae5__exacttargetforappexchangeuser__c;

				public Boolean getEt4ae5__exacttargetforappexchangeuser__c () {
					return this.et4ae5__exacttargetforappexchangeuser__c;
				}
				
			    public Boolean isextindicatorvisible;

				public Boolean getIsextindicatorvisible () {
					return this.isextindicatorvisible;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public Boolean userpreferenceshidelightningmigrationmodal;

				public Boolean getUserpreferenceshidelightningmigrationmodal () {
					return this.userpreferenceshidelightningmigrationmodal;
				}
				
			    public Boolean userpreferenceslightningexperiencepreferred;

				public Boolean getUserpreferenceslightningexperiencepreferred () {
					return this.userpreferenceslightningexperiencepreferred;
				}
				
			    public String firstname;

				public String getFirstname () {
					return this.firstname;
				}
				
			    public String contactid;

				public String getContactid () {
					return this.contactid;
				}
				
			    public Boolean userpreferencesshowstatetoexternalusers;

				public Boolean getUserpreferencesshowstatetoexternalusers () {
					return this.userpreferencesshowstatetoexternalusers;
				}
				
			    public Boolean userpreferencesshowstreetaddresstoexternalusers;

				public Boolean getUserpreferencesshowstreetaddresstoexternalusers () {
					return this.userpreferencesshowstreetaddresstoexternalusers;
				}
				
			    public Boolean userpreferenceshidechatteronboardingsplash;

				public Boolean getUserpreferenceshidechatteronboardingsplash () {
					return this.userpreferenceshidechatteronboardingsplash;
				}
				
			    public Boolean userpreferencesglobalnavgridmenuwtshown;

				public Boolean getUserpreferencesglobalnavgridmenuwtshown () {
					return this.userpreferencesglobalnavgridmenuwtshown;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String userroleid;

				public String getUserroleid () {
					return this.userroleid;
				}
				
			    public Boolean userpreferencesshowemailtoguestusers;

				public Boolean getUserpreferencesshowemailtoguestusers () {
					return this.userpreferencesshowemailtoguestusers;
				}
				
			    public Boolean userpreferencespreviewcustomtheme;

				public Boolean getUserpreferencespreviewcustomtheme () {
					return this.userpreferencespreviewcustomtheme;
				}
				
			    public java.util.Date lastreferenceddate;

				public java.util.Date getLastreferenceddate () {
					return this.lastreferenceddate;
				}
				
			    public String fax;

				public String getFax () {
					return this.fax;
				}
				
			    public Boolean noodlecrm__default_owner__c;

				public Boolean getNoodlecrm__default_owner__c () {
					return this.noodlecrm__default_owner__c;
				}
				
			    public String mediumbannerphotourl;

				public String getMediumbannerphotourl () {
					return this.mediumbannerphotourl;
				}
				
			    public Boolean userpreferencesshowworkphonetoguestusers;

				public Boolean getUserpreferencesshowworkphonetoguestusers () {
					return this.userpreferencesshowworkphonetoguestusers;
				}
				
			    public Boolean userpreferencesshowfaxtoguestusers;

				public Boolean getUserpreferencesshowfaxtoguestusers () {
					return this.userpreferencesshowfaxtoguestusers;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public Boolean userpreferencesremindersoundoff;

				public Boolean getUserpreferencesremindersoundoff () {
					return this.userpreferencesremindersoundoff;
				}
				
			    public Boolean userpreferencesrecordhomesectioncollapsewtshown;

				public Boolean getUserpreferencesrecordhomesectioncollapsewtshown () {
					return this.userpreferencesrecordhomesectioncollapsewtshown;
				}
				
			    public Boolean userpreferencesshowmanagertoexternalusers;

				public Boolean getUserpreferencesshowmanagertoexternalusers () {
					return this.userpreferencesshowmanagertoexternalusers;
				}
				
			    public Boolean userpreferencessortfeedbycomment;

				public Boolean getUserpreferencessortfeedbycomment () {
					return this.userpreferencessortfeedbycomment;
				}
				
			    public String delegatedapproverid;

				public String getDelegatedapproverid () {
					return this.delegatedapproverid;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out16Struct other = (out16Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out16Struct other) {

		other.userpreferencesshowmobilephonetoexternalusers = this.userpreferencesshowmobilephonetoexternalusers;
	            other.userpreferencesshowpostalcodetoexternalusers = this.userpreferencesshowpostalcodetoexternalusers;
	            other.sendername = this.sendername;
	            other.userpreferencesreceivenotificationsasdelegatedapprover = this.userpreferencesreceivenotificationsasdelegatedapprover;
	            other.userpreferencesshowcitytoguestusers = this.userpreferencesshowcitytoguestusers;
	            other.lastlogindate = this.lastlogindate;
	            other.userpreferencesuserdebugmodepref = this.userpreferencesuserdebugmodepref;
	            other.userpreferenceshidebiggerphotocallout = this.userpreferenceshidebiggerphotocallout;
	            other.lastname = this.lastname;
	            other.userpermissionssupportuser = this.userpermissionssupportuser;
	            other.userpreferenceshideenduseronboardingassistantmodal = this.userpreferenceshideenduseronboardingassistantmodal;
	            other.userpreferencesdisablefollowersemail = this.userpreferencesdisablefollowersemail;
	            other.street = this.street;
	            other.userpreferencessuppresstasksfxreminders = this.userpreferencessuppresstasksfxreminders;
	            other.userpermissionsinteractionuser = this.userpermissionsinteractionuser;
	            other.profileid = this.profileid;
	            other.receivesadmininfoemails = this.receivesadmininfoemails;
	            other.smallphotourl = this.smallphotourl;
	            other.usertype = this.usertype;
	            other.aboutme = this.aboutme;
	            other.et4ae5__default_mid__c = this.et4ae5__default_mid__c;
	            other.outofofficemessage = this.outofofficemessage;
	            other.userpermissionsmobileuser = this.userpermissionsmobileuser;
	            other.forecastenabled = this.forecastenabled;
	            other.userpreferenceshascelebrationbadge = this.userpreferenceshascelebrationbadge;
	            other.numberoffailedlogins = this.numberoffailedlogins;
	            other.senderemail = this.senderemail;
	            other.userpreferencesactivityreminderspopup = this.userpreferencesactivityreminderspopup;
	            other.userpreferencesdiscommentafterlikeemail = this.userpreferencesdiscommentafterlikeemail;
	            other.userpreferencesdismentionscommentemail = this.userpreferencesdismentionscommentemail;
	            other.accountid = this.accountid;
	            other.companyname = this.companyname;
	            other.managerid = this.managerid;
	            other.userpreferencesreceivenonotificationsasapprover = this.userpreferencesreceivenonotificationsasapprover;
	            other.userpreferenceshidesecondchatteronboardingsplash = this.userpreferenceshidesecondchatteronboardingsplash;
	            other.lastvieweddate = this.lastvieweddate;
	            other.userpreferencesdisablechangecommentemail = this.userpreferencesdisablechangecommentemail;
	            other.userpreferenceshidecsngetchattermobiletask = this.userpreferenceshidecsngetchattermobiletask;
	            other.bannerphotourl = this.bannerphotourl;
	            other.et4ae5__exacttargetusername__c = this.et4ae5__exacttargetusername__c;
	            other.userpreferencesdisableendorsementemail = this.userpreferencesdisableendorsementemail;
	            other.userpreferencesfavoritesshowtopfavorites = this.userpreferencesfavoritesshowtopfavorites;
	            other.offlinepdatrialexpirationdate = this.offlinepdatrialexpirationdate;
	            other.timezonesidkey = this.timezonesidkey;
	            other.userpreferencesdisablelikeemail = this.userpreferencesdisablelikeemail;
	            other.emailpreferencesautobccstayintouch = this.emailpreferencesautobccstayintouch;
	            other.userpreferencesfavoriteswtshown = this.userpreferencesfavoriteswtshown;
	            other.userpreferenceseventreminderscheckboxdefault = this.userpreferenceseventreminderscheckboxdefault;
	            other.userpreferencespathassistantcollapsed = this.userpreferencespathassistantcollapsed;
	            other.stayintouchsubject = this.stayintouchsubject;
	            other.city = this.city;
	            other.localesidkey = this.localesidkey;
	            other.name = this.name;
	            other.userpreferencesdisablebookmarkemail = this.userpreferencesdisablebookmarkemail;
	            other.federationidentifier = this.federationidentifier;
	            other.latitude = this.latitude;
	            other.fullphotourl = this.fullphotourl;
	            other.mobilephone = this.mobilephone;
	            other.userpreferencescreatelexappswtshown = this.userpreferencescreatelexappswtshown;
	            other.userpreferencesenableautosubforfeeds = this.userpreferencesenableautosubforfeeds;
	            other.userpreferencesshowpostalcodetoguestusers = this.userpreferencesshowpostalcodetoguestusers;
	            other.division = this.division;
	            other.languagelocalekey = this.languagelocalekey;
	            other.userpreferencesshowmobilephonetoguestusers = this.userpreferencesshowmobilephonetoguestusers;
	            other.userpreferencesdisableallfeedsemail = this.userpreferencesdisableallfeedsemail;
	            other.userpreferencesshowcitytoexternalusers = this.userpreferencesshowcitytoexternalusers;
	            other.et4ae5__exacttarget_oauth_token__c = this.et4ae5__exacttarget_oauth_token__c;
	            other.lastmodifieddate = this.lastmodifieddate;
	            other.callcenterid = this.callcenterid;
	            other.userpreferencesshowmanagertoguestusers = this.userpreferencesshowmanagertoguestusers;
	            other.phone = this.phone;
	            other.userpreferencesdisableprofilepostemail = this.userpreferencesdisableprofilepostemail;
	            other.userpreferencesdisablelatercommentemail = this.userpreferencesdisablelatercommentemail;
	            other.userpermissionscallcenterautologin = this.userpermissionscallcenterautologin;
	            other.et4ae5__default_et_page__c = this.et4ae5__default_et_page__c;
	            other.userpreferencespipelineviewhidehelppopover = this.userpreferencespipelineviewhidehelppopover;
	            other.userpreferencespreviewlightning = this.userpreferencespreviewlightning;
	            other.userpreferencesshowworkphonetoexternalusers = this.userpreferencesshowworkphonetoexternalusers;
	            other.longitude = this.longitude;
	            other.userpreferencesshowfaxtoexternalusers = this.userpreferencesshowfaxtoexternalusers;
	            other.lastpasswordchangedate = this.lastpasswordchangedate;
	            other.userpreferenceshides1browserui = this.userpreferenceshides1browserui;
	            other.userpreferencesrecordhomereservedwtshown = this.userpreferencesrecordhomereservedwtshown;
	            other.userpreferencestaskreminderscheckboxdefault = this.userpreferencestaskreminderscheckboxdefault;
	            other.userpreferencesshowemailtoexternalusers = this.userpreferencesshowemailtoexternalusers;
	            other.offlinetrialexpirationdate = this.offlinetrialexpirationdate;
	            other.isactive = this.isactive;
	            other.systemmodstamp = this.systemmodstamp;
	            other.smallbannerphotourl = this.smallbannerphotourl;
	            other.alias = this.alias;
	            other.emailencodingkey = this.emailencodingkey;
	            other.badgetext = this.badgetext;
	            other.userpreferencesdisablemessageemail = this.userpreferencesdisablemessageemail;
	            other.lastmodifiedbyid = this.lastmodifiedbyid;
	            other.state = this.state;
	            other.userpreferencesdisablefilesharenotificationsforapi = this.userpreferencesdisablefilesharenotificationsforapi;
	            other.mediumphotourl = this.mediumphotourl;
	            other.userpreferencesshowstreetaddresstoguestusers = this.userpreferencesshowstreetaddresstoguestusers;
	            other.userpreferencesshowstatetoguestusers = this.userpreferencesshowstatetoguestusers;
	            other.userpreferenceshidecsndesktoptask = this.userpreferenceshidecsndesktoptask;
	            other.userpreferencesnewlightningreportrunpageenabled = this.userpreferencesnewlightningreportrunpageenabled;
	            other.department = this.department;
	            other.userpreferencesexcludemailappattachments = this.userpreferencesexcludemailappattachments;
	            other.defaultgroupnotificationfrequency = this.defaultgroupnotificationfrequency;
	            other.et4ae5__exacttargetforappexchangeadmin__c = this.et4ae5__exacttargetforappexchangeadmin__c;
	            other.stayintouchnote = this.stayintouchnote;
	            other.userpreferencesglobalnavbarwtshown = this.userpreferencesglobalnavbarwtshown;
	            other.userpreferenceshidesfxwelcomemat = this.userpreferenceshidesfxwelcomemat;
	            other.et4ae5__validexacttargetadmin__c = this.et4ae5__validexacttargetadmin__c;
	            other.individualid = this.individualid;
	            other.userpreferencesshowtitletoexternalusers = this.userpreferencesshowtitletoexternalusers;
	            other.userpreferencessuppresseventsfxreminders = this.userpreferencessuppresseventsfxreminders;
	            other.receivesinfoemails = this.receivesinfoemails;
	            other.userpreferencessrhoverrideactivities = this.userpreferencessrhoverrideactivities;
	            other.userpermissionsofflineuser = this.userpermissionsofflineuser;
	            other.userpreferencesshowprofilepictoguestusers = this.userpreferencesshowprofilepictoguestusers;
	            other.username = this.username;
	            other.createddate = this.createddate;
	            other.userpreferencesshowcountrytoexternalusers = this.userpreferencesshowcountrytoexternalusers;
	            other.country = this.country;
	            other.emailpreferencesstayintouchreminder = this.emailpreferencesstayintouchreminder;
	            other.userpreferencescachediagnostics = this.userpreferencescachediagnostics;
	            other.stayintouchsignature = this.stayintouchsignature;
	            other.emailpreferencesautobcc = this.emailpreferencesautobcc;
	            other.communitynickname = this.communitynickname;
	            other.userpreferencesdisprofpostcommentemail = this.userpreferencesdisprofpostcommentemail;
	            other.userpreferencesshowcountrytoguestusers = this.userpreferencesshowcountrytoguestusers;
	            other.employeenumber = this.employeenumber;
	            other.geocodeaccuracy = this.geocodeaccuracy;
	            other.signature = this.signature;
	            other.userpermissionssfcontentuser = this.userpermissionssfcontentuser;
	            other.postalcode = this.postalcode;
	            other.title = this.title;
	            other.userpreferencesdisablementionspostemail = this.userpreferencesdisablementionspostemail;
	            other.userpreferencesapexpagesdevelopermode = this.userpreferencesapexpagesdevelopermode;
	            other.userpreferencesdisablesharepostemail = this.userpreferencesdisablesharepostemail;
	            other.et4ae5__validexacttargetuser__c = this.et4ae5__validexacttargetuser__c;
	            other.digestfrequency = this.digestfrequency;
	            other.userpermissionsmarketinguser = this.userpermissionsmarketinguser;
	            other.userpreferencesshowtitletoguestusers = this.userpreferencesshowtitletoguestusers;
	            other.isprofilephotoactive = this.isprofilephotoactive;
	            other.et4ae5__exacttargetforappexchangeuser__c = this.et4ae5__exacttargetforappexchangeuser__c;
	            other.isextindicatorvisible = this.isextindicatorvisible;
	            other.createdbyid = this.createdbyid;
	            other.userpreferenceshidelightningmigrationmodal = this.userpreferenceshidelightningmigrationmodal;
	            other.userpreferenceslightningexperiencepreferred = this.userpreferenceslightningexperiencepreferred;
	            other.firstname = this.firstname;
	            other.contactid = this.contactid;
	            other.userpreferencesshowstatetoexternalusers = this.userpreferencesshowstatetoexternalusers;
	            other.userpreferencesshowstreetaddresstoexternalusers = this.userpreferencesshowstreetaddresstoexternalusers;
	            other.userpreferenceshidechatteronboardingsplash = this.userpreferenceshidechatteronboardingsplash;
	            other.userpreferencesglobalnavgridmenuwtshown = this.userpreferencesglobalnavgridmenuwtshown;
	            other.email = this.email;
	            other.userroleid = this.userroleid;
	            other.userpreferencesshowemailtoguestusers = this.userpreferencesshowemailtoguestusers;
	            other.userpreferencespreviewcustomtheme = this.userpreferencespreviewcustomtheme;
	            other.lastreferenceddate = this.lastreferenceddate;
	            other.fax = this.fax;
	            other.noodlecrm__default_owner__c = this.noodlecrm__default_owner__c;
	            other.mediumbannerphotourl = this.mediumbannerphotourl;
	            other.userpreferencesshowworkphonetoguestusers = this.userpreferencesshowworkphonetoguestusers;
	            other.userpreferencesshowfaxtoguestusers = this.userpreferencesshowfaxtoguestusers;
	            other.extension = this.extension;
	            other.userpreferencesremindersoundoff = this.userpreferencesremindersoundoff;
	            other.userpreferencesrecordhomesectioncollapsewtshown = this.userpreferencesrecordhomesectioncollapsewtshown;
	            other.userpreferencesshowmanagertoexternalusers = this.userpreferencesshowmanagertoexternalusers;
	            other.userpreferencessortfeedbycomment = this.userpreferencessortfeedbycomment;
	            other.delegatedapproverid = this.delegatedapproverid;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            
	}

	public void copyKeysDataTo(out16Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowmobilephonetoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowmobilephonetoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowpostalcodetoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowpostalcodetoexternalusers = dis.readBoolean();
           				}
					
					this.sendername = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesreceivenotificationsasdelegatedapprover = null;
           				} else {
           			    	this.userpreferencesreceivenotificationsasdelegatedapprover = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowcitytoguestusers = null;
           				} else {
           			    	this.userpreferencesshowcitytoguestusers = dis.readBoolean();
           				}
					
					this.lastlogindate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesuserdebugmodepref = null;
           				} else {
           			    	this.userpreferencesuserdebugmodepref = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidebiggerphotocallout = null;
           				} else {
           			    	this.userpreferenceshidebiggerphotocallout = dis.readBoolean();
           				}
					
					this.lastname = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionssupportuser = null;
           				} else {
           			    	this.userpermissionssupportuser = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshideenduseronboardingassistantmodal = null;
           				} else {
           			    	this.userpreferenceshideenduseronboardingassistantmodal = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablefollowersemail = null;
           				} else {
           			    	this.userpreferencesdisablefollowersemail = dis.readBoolean();
           				}
					
					this.street = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencessuppresstasksfxreminders = null;
           				} else {
           			    	this.userpreferencessuppresstasksfxreminders = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionsinteractionuser = null;
           				} else {
           			    	this.userpermissionsinteractionuser = dis.readBoolean();
           				}
					
					this.profileid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.receivesadmininfoemails = null;
           				} else {
           			    	this.receivesadmininfoemails = dis.readBoolean();
           				}
					
					this.smallphotourl = readString(dis);
					
					this.usertype = readString(dis);
					
					this.aboutme = readString(dis);
					
					this.et4ae5__default_mid__c = readString(dis);
					
					this.outofofficemessage = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionsmobileuser = null;
           				} else {
           			    	this.userpermissionsmobileuser = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.forecastenabled = null;
           				} else {
           			    	this.forecastenabled = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshascelebrationbadge = null;
           				} else {
           			    	this.userpreferenceshascelebrationbadge = dis.readBoolean();
           				}
					
						this.numberoffailedlogins = readInteger(dis);
					
					this.senderemail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesactivityreminderspopup = null;
           				} else {
           			    	this.userpreferencesactivityreminderspopup = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdiscommentafterlikeemail = null;
           				} else {
           			    	this.userpreferencesdiscommentafterlikeemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdismentionscommentemail = null;
           				} else {
           			    	this.userpreferencesdismentionscommentemail = dis.readBoolean();
           				}
					
					this.accountid = readString(dis);
					
					this.companyname = readString(dis);
					
					this.managerid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesreceivenonotificationsasapprover = null;
           				} else {
           			    	this.userpreferencesreceivenonotificationsasapprover = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidesecondchatteronboardingsplash = null;
           				} else {
           			    	this.userpreferenceshidesecondchatteronboardingsplash = dis.readBoolean();
           				}
					
					this.lastvieweddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablechangecommentemail = null;
           				} else {
           			    	this.userpreferencesdisablechangecommentemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidecsngetchattermobiletask = null;
           				} else {
           			    	this.userpreferenceshidecsngetchattermobiletask = dis.readBoolean();
           				}
					
					this.bannerphotourl = readString(dis);
					
					this.et4ae5__exacttargetusername__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisableendorsementemail = null;
           				} else {
           			    	this.userpreferencesdisableendorsementemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesfavoritesshowtopfavorites = null;
           				} else {
           			    	this.userpreferencesfavoritesshowtopfavorites = dis.readBoolean();
           				}
					
					this.offlinepdatrialexpirationdate = readDate(dis);
					
					this.timezonesidkey = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablelikeemail = null;
           				} else {
           			    	this.userpreferencesdisablelikeemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.emailpreferencesautobccstayintouch = null;
           				} else {
           			    	this.emailpreferencesautobccstayintouch = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesfavoriteswtshown = null;
           				} else {
           			    	this.userpreferencesfavoriteswtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceseventreminderscheckboxdefault = null;
           				} else {
           			    	this.userpreferenceseventreminderscheckboxdefault = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencespathassistantcollapsed = null;
           				} else {
           			    	this.userpreferencespathassistantcollapsed = dis.readBoolean();
           				}
					
					this.stayintouchsubject = readString(dis);
					
					this.city = readString(dis);
					
					this.localesidkey = readString(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablebookmarkemail = null;
           				} else {
           			    	this.userpreferencesdisablebookmarkemail = dis.readBoolean();
           				}
					
					this.federationidentifier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.latitude = null;
           				} else {
           			    	this.latitude = dis.readDouble();
           				}
					
					this.fullphotourl = readString(dis);
					
					this.mobilephone = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencescreatelexappswtshown = null;
           				} else {
           			    	this.userpreferencescreatelexappswtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesenableautosubforfeeds = null;
           				} else {
           			    	this.userpreferencesenableautosubforfeeds = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowpostalcodetoguestusers = null;
           				} else {
           			    	this.userpreferencesshowpostalcodetoguestusers = dis.readBoolean();
           				}
					
					this.division = readString(dis);
					
					this.languagelocalekey = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowmobilephonetoguestusers = null;
           				} else {
           			    	this.userpreferencesshowmobilephonetoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisableallfeedsemail = null;
           				} else {
           			    	this.userpreferencesdisableallfeedsemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowcitytoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowcitytoexternalusers = dis.readBoolean();
           				}
					
					this.et4ae5__exacttarget_oauth_token__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.callcenterid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowmanagertoguestusers = null;
           				} else {
           			    	this.userpreferencesshowmanagertoguestusers = dis.readBoolean();
           				}
					
					this.phone = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisableprofilepostemail = null;
           				} else {
           			    	this.userpreferencesdisableprofilepostemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablelatercommentemail = null;
           				} else {
           			    	this.userpreferencesdisablelatercommentemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionscallcenterautologin = null;
           				} else {
           			    	this.userpermissionscallcenterautologin = dis.readBoolean();
           				}
					
					this.et4ae5__default_et_page__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencespipelineviewhidehelppopover = null;
           				} else {
           			    	this.userpreferencespipelineviewhidehelppopover = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencespreviewlightning = null;
           				} else {
           			    	this.userpreferencespreviewlightning = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowworkphonetoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowworkphonetoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.longitude = null;
           				} else {
           			    	this.longitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowfaxtoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowfaxtoexternalusers = dis.readBoolean();
           				}
					
					this.lastpasswordchangedate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshides1browserui = null;
           				} else {
           			    	this.userpreferenceshides1browserui = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesrecordhomereservedwtshown = null;
           				} else {
           			    	this.userpreferencesrecordhomereservedwtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencestaskreminderscheckboxdefault = null;
           				} else {
           			    	this.userpreferencestaskreminderscheckboxdefault = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowemailtoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowemailtoexternalusers = dis.readBoolean();
           				}
					
					this.offlinetrialexpirationdate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isactive = null;
           				} else {
           			    	this.isactive = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.smallbannerphotourl = readString(dis);
					
					this.alias = readString(dis);
					
					this.emailencodingkey = readString(dis);
					
					this.badgetext = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablemessageemail = null;
           				} else {
           			    	this.userpreferencesdisablemessageemail = dis.readBoolean();
           				}
					
					this.lastmodifiedbyid = readString(dis);
					
					this.state = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablefilesharenotificationsforapi = null;
           				} else {
           			    	this.userpreferencesdisablefilesharenotificationsforapi = dis.readBoolean();
           				}
					
					this.mediumphotourl = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowstreetaddresstoguestusers = null;
           				} else {
           			    	this.userpreferencesshowstreetaddresstoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowstatetoguestusers = null;
           				} else {
           			    	this.userpreferencesshowstatetoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidecsndesktoptask = null;
           				} else {
           			    	this.userpreferenceshidecsndesktoptask = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesnewlightningreportrunpageenabled = null;
           				} else {
           			    	this.userpreferencesnewlightningreportrunpageenabled = dis.readBoolean();
           				}
					
					this.department = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesexcludemailappattachments = null;
           				} else {
           			    	this.userpreferencesexcludemailappattachments = dis.readBoolean();
           				}
					
					this.defaultgroupnotificationfrequency = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.et4ae5__exacttargetforappexchangeadmin__c = null;
           				} else {
           			    	this.et4ae5__exacttargetforappexchangeadmin__c = dis.readBoolean();
           				}
					
					this.stayintouchnote = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesglobalnavbarwtshown = null;
           				} else {
           			    	this.userpreferencesglobalnavbarwtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidesfxwelcomemat = null;
           				} else {
           			    	this.userpreferenceshidesfxwelcomemat = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.et4ae5__validexacttargetadmin__c = null;
           				} else {
           			    	this.et4ae5__validexacttargetadmin__c = dis.readBoolean();
           				}
					
					this.individualid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowtitletoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowtitletoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencessuppresseventsfxreminders = null;
           				} else {
           			    	this.userpreferencessuppresseventsfxreminders = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.receivesinfoemails = null;
           				} else {
           			    	this.receivesinfoemails = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencessrhoverrideactivities = null;
           				} else {
           			    	this.userpreferencessrhoverrideactivities = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionsofflineuser = null;
           				} else {
           			    	this.userpermissionsofflineuser = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowprofilepictoguestusers = null;
           				} else {
           			    	this.userpreferencesshowprofilepictoguestusers = dis.readBoolean();
           				}
					
					this.username = readString(dis);
					
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowcountrytoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowcountrytoexternalusers = dis.readBoolean();
           				}
					
					this.country = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.emailpreferencesstayintouchreminder = null;
           				} else {
           			    	this.emailpreferencesstayintouchreminder = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencescachediagnostics = null;
           				} else {
           			    	this.userpreferencescachediagnostics = dis.readBoolean();
           				}
					
					this.stayintouchsignature = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.emailpreferencesautobcc = null;
           				} else {
           			    	this.emailpreferencesautobcc = dis.readBoolean();
           				}
					
					this.communitynickname = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisprofpostcommentemail = null;
           				} else {
           			    	this.userpreferencesdisprofpostcommentemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowcountrytoguestusers = null;
           				} else {
           			    	this.userpreferencesshowcountrytoguestusers = dis.readBoolean();
           				}
					
					this.employeenumber = readString(dis);
					
					this.geocodeaccuracy = readString(dis);
					
					this.signature = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionssfcontentuser = null;
           				} else {
           			    	this.userpermissionssfcontentuser = dis.readBoolean();
           				}
					
					this.postalcode = readString(dis);
					
					this.title = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablementionspostemail = null;
           				} else {
           			    	this.userpreferencesdisablementionspostemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesapexpagesdevelopermode = null;
           				} else {
           			    	this.userpreferencesapexpagesdevelopermode = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablesharepostemail = null;
           				} else {
           			    	this.userpreferencesdisablesharepostemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.et4ae5__validexacttargetuser__c = null;
           				} else {
           			    	this.et4ae5__validexacttargetuser__c = dis.readBoolean();
           				}
					
					this.digestfrequency = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionsmarketinguser = null;
           				} else {
           			    	this.userpermissionsmarketinguser = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowtitletoguestusers = null;
           				} else {
           			    	this.userpreferencesshowtitletoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isprofilephotoactive = null;
           				} else {
           			    	this.isprofilephotoactive = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.et4ae5__exacttargetforappexchangeuser__c = null;
           				} else {
           			    	this.et4ae5__exacttargetforappexchangeuser__c = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isextindicatorvisible = null;
           				} else {
           			    	this.isextindicatorvisible = dis.readBoolean();
           				}
					
					this.createdbyid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidelightningmigrationmodal = null;
           				} else {
           			    	this.userpreferenceshidelightningmigrationmodal = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceslightningexperiencepreferred = null;
           				} else {
           			    	this.userpreferenceslightningexperiencepreferred = dis.readBoolean();
           				}
					
					this.firstname = readString(dis);
					
					this.contactid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowstatetoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowstatetoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowstreetaddresstoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowstreetaddresstoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidechatteronboardingsplash = null;
           				} else {
           			    	this.userpreferenceshidechatteronboardingsplash = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesglobalnavgridmenuwtshown = null;
           				} else {
           			    	this.userpreferencesglobalnavgridmenuwtshown = dis.readBoolean();
           				}
					
					this.email = readString(dis);
					
					this.userroleid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowemailtoguestusers = null;
           				} else {
           			    	this.userpreferencesshowemailtoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencespreviewcustomtheme = null;
           				} else {
           			    	this.userpreferencespreviewcustomtheme = dis.readBoolean();
           				}
					
					this.lastreferenceddate = readDate(dis);
					
					this.fax = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__default_owner__c = null;
           				} else {
           			    	this.noodlecrm__default_owner__c = dis.readBoolean();
           				}
					
					this.mediumbannerphotourl = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowworkphonetoguestusers = null;
           				} else {
           			    	this.userpreferencesshowworkphonetoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowfaxtoguestusers = null;
           				} else {
           			    	this.userpreferencesshowfaxtoguestusers = dis.readBoolean();
           				}
					
					this.extension = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesremindersoundoff = null;
           				} else {
           			    	this.userpreferencesremindersoundoff = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesrecordhomesectioncollapsewtshown = null;
           				} else {
           			    	this.userpreferencesrecordhomesectioncollapsewtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowmanagertoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowmanagertoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencessortfeedbycomment = null;
           				} else {
           			    	this.userpreferencessortfeedbycomment = dis.readBoolean();
           				}
					
					this.delegatedapproverid = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Boolean
				
						if(this.userpreferencesshowmobilephonetoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowmobilephonetoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowpostalcodetoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowpostalcodetoexternalusers);
		            	}
					
					// String
				
						writeString(this.sendername,dos);
					
					// Boolean
				
						if(this.userpreferencesreceivenotificationsasdelegatedapprover == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesreceivenotificationsasdelegatedapprover);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowcitytoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowcitytoguestusers);
		            	}
					
					// java.util.Date
				
						writeDate(this.lastlogindate,dos);
					
					// Boolean
				
						if(this.userpreferencesuserdebugmodepref == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesuserdebugmodepref);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidebiggerphotocallout == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidebiggerphotocallout);
		            	}
					
					// String
				
						writeString(this.lastname,dos);
					
					// Boolean
				
						if(this.userpermissionssupportuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionssupportuser);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshideenduseronboardingassistantmodal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshideenduseronboardingassistantmodal);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdisablefollowersemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablefollowersemail);
		            	}
					
					// String
				
						writeString(this.street,dos);
					
					// Boolean
				
						if(this.userpreferencessuppresstasksfxreminders == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencessuppresstasksfxreminders);
		            	}
					
					// Boolean
				
						if(this.userpermissionsinteractionuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionsinteractionuser);
		            	}
					
					// String
				
						writeString(this.profileid,dos);
					
					// Boolean
				
						if(this.receivesadmininfoemails == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.receivesadmininfoemails);
		            	}
					
					// String
				
						writeString(this.smallphotourl,dos);
					
					// String
				
						writeString(this.usertype,dos);
					
					// String
				
						writeString(this.aboutme,dos);
					
					// String
				
						writeString(this.et4ae5__default_mid__c,dos);
					
					// String
				
						writeString(this.outofofficemessage,dos);
					
					// Boolean
				
						if(this.userpermissionsmobileuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionsmobileuser);
		            	}
					
					// Boolean
				
						if(this.forecastenabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.forecastenabled);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshascelebrationbadge == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshascelebrationbadge);
		            	}
					
					// Integer
				
						writeInteger(this.numberoffailedlogins,dos);
					
					// String
				
						writeString(this.senderemail,dos);
					
					// Boolean
				
						if(this.userpreferencesactivityreminderspopup == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesactivityreminderspopup);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdiscommentafterlikeemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdiscommentafterlikeemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdismentionscommentemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdismentionscommentemail);
		            	}
					
					// String
				
						writeString(this.accountid,dos);
					
					// String
				
						writeString(this.companyname,dos);
					
					// String
				
						writeString(this.managerid,dos);
					
					// Boolean
				
						if(this.userpreferencesreceivenonotificationsasapprover == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesreceivenonotificationsasapprover);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidesecondchatteronboardingsplash == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidesecondchatteronboardingsplash);
		            	}
					
					// java.util.Date
				
						writeDate(this.lastvieweddate,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablechangecommentemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablechangecommentemail);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidecsngetchattermobiletask == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidecsngetchattermobiletask);
		            	}
					
					// String
				
						writeString(this.bannerphotourl,dos);
					
					// String
				
						writeString(this.et4ae5__exacttargetusername__c,dos);
					
					// Boolean
				
						if(this.userpreferencesdisableendorsementemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisableendorsementemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesfavoritesshowtopfavorites == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesfavoritesshowtopfavorites);
		            	}
					
					// java.util.Date
				
						writeDate(this.offlinepdatrialexpirationdate,dos);
					
					// String
				
						writeString(this.timezonesidkey,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablelikeemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablelikeemail);
		            	}
					
					// Boolean
				
						if(this.emailpreferencesautobccstayintouch == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.emailpreferencesautobccstayintouch);
		            	}
					
					// Boolean
				
						if(this.userpreferencesfavoriteswtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesfavoriteswtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferenceseventreminderscheckboxdefault == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceseventreminderscheckboxdefault);
		            	}
					
					// Boolean
				
						if(this.userpreferencespathassistantcollapsed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencespathassistantcollapsed);
		            	}
					
					// String
				
						writeString(this.stayintouchsubject,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.localesidkey,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablebookmarkemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablebookmarkemail);
		            	}
					
					// String
				
						writeString(this.federationidentifier,dos);
					
					// Double
				
						if(this.latitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.latitude);
		            	}
					
					// String
				
						writeString(this.fullphotourl,dos);
					
					// String
				
						writeString(this.mobilephone,dos);
					
					// Boolean
				
						if(this.userpreferencescreatelexappswtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencescreatelexappswtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferencesenableautosubforfeeds == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesenableautosubforfeeds);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowpostalcodetoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowpostalcodetoguestusers);
		            	}
					
					// String
				
						writeString(this.division,dos);
					
					// String
				
						writeString(this.languagelocalekey,dos);
					
					// Boolean
				
						if(this.userpreferencesshowmobilephonetoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowmobilephonetoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdisableallfeedsemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisableallfeedsemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowcitytoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowcitytoexternalusers);
		            	}
					
					// String
				
						writeString(this.et4ae5__exacttarget_oauth_token__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.callcenterid,dos);
					
					// Boolean
				
						if(this.userpreferencesshowmanagertoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowmanagertoguestusers);
		            	}
					
					// String
				
						writeString(this.phone,dos);
					
					// Boolean
				
						if(this.userpreferencesdisableprofilepostemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisableprofilepostemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdisablelatercommentemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablelatercommentemail);
		            	}
					
					// Boolean
				
						if(this.userpermissionscallcenterautologin == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionscallcenterautologin);
		            	}
					
					// String
				
						writeString(this.et4ae5__default_et_page__c,dos);
					
					// Boolean
				
						if(this.userpreferencespipelineviewhidehelppopover == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencespipelineviewhidehelppopover);
		            	}
					
					// Boolean
				
						if(this.userpreferencespreviewlightning == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencespreviewlightning);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowworkphonetoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowworkphonetoexternalusers);
		            	}
					
					// Double
				
						if(this.longitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.longitude);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowfaxtoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowfaxtoexternalusers);
		            	}
					
					// java.util.Date
				
						writeDate(this.lastpasswordchangedate,dos);
					
					// Boolean
				
						if(this.userpreferenceshides1browserui == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshides1browserui);
		            	}
					
					// Boolean
				
						if(this.userpreferencesrecordhomereservedwtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesrecordhomereservedwtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferencestaskreminderscheckboxdefault == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencestaskreminderscheckboxdefault);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowemailtoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowemailtoexternalusers);
		            	}
					
					// java.util.Date
				
						writeDate(this.offlinetrialexpirationdate,dos);
					
					// Boolean
				
						if(this.isactive == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isactive);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.smallbannerphotourl,dos);
					
					// String
				
						writeString(this.alias,dos);
					
					// String
				
						writeString(this.emailencodingkey,dos);
					
					// String
				
						writeString(this.badgetext,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablemessageemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablemessageemail);
		            	}
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablefilesharenotificationsforapi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablefilesharenotificationsforapi);
		            	}
					
					// String
				
						writeString(this.mediumphotourl,dos);
					
					// Boolean
				
						if(this.userpreferencesshowstreetaddresstoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowstreetaddresstoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowstatetoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowstatetoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidecsndesktoptask == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidecsndesktoptask);
		            	}
					
					// Boolean
				
						if(this.userpreferencesnewlightningreportrunpageenabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesnewlightningreportrunpageenabled);
		            	}
					
					// String
				
						writeString(this.department,dos);
					
					// Boolean
				
						if(this.userpreferencesexcludemailappattachments == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesexcludemailappattachments);
		            	}
					
					// String
				
						writeString(this.defaultgroupnotificationfrequency,dos);
					
					// Boolean
				
						if(this.et4ae5__exacttargetforappexchangeadmin__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.et4ae5__exacttargetforappexchangeadmin__c);
		            	}
					
					// String
				
						writeString(this.stayintouchnote,dos);
					
					// Boolean
				
						if(this.userpreferencesglobalnavbarwtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesglobalnavbarwtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidesfxwelcomemat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidesfxwelcomemat);
		            	}
					
					// Boolean
				
						if(this.et4ae5__validexacttargetadmin__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.et4ae5__validexacttargetadmin__c);
		            	}
					
					// String
				
						writeString(this.individualid,dos);
					
					// Boolean
				
						if(this.userpreferencesshowtitletoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowtitletoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencessuppresseventsfxreminders == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencessuppresseventsfxreminders);
		            	}
					
					// Boolean
				
						if(this.receivesinfoemails == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.receivesinfoemails);
		            	}
					
					// Boolean
				
						if(this.userpreferencessrhoverrideactivities == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencessrhoverrideactivities);
		            	}
					
					// Boolean
				
						if(this.userpermissionsofflineuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionsofflineuser);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowprofilepictoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowprofilepictoguestusers);
		            	}
					
					// String
				
						writeString(this.username,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.userpreferencesshowcountrytoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowcountrytoexternalusers);
		            	}
					
					// String
				
						writeString(this.country,dos);
					
					// Boolean
				
						if(this.emailpreferencesstayintouchreminder == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.emailpreferencesstayintouchreminder);
		            	}
					
					// Boolean
				
						if(this.userpreferencescachediagnostics == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencescachediagnostics);
		            	}
					
					// String
				
						writeString(this.stayintouchsignature,dos);
					
					// Boolean
				
						if(this.emailpreferencesautobcc == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.emailpreferencesautobcc);
		            	}
					
					// String
				
						writeString(this.communitynickname,dos);
					
					// Boolean
				
						if(this.userpreferencesdisprofpostcommentemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisprofpostcommentemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowcountrytoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowcountrytoguestusers);
		            	}
					
					// String
				
						writeString(this.employeenumber,dos);
					
					// String
				
						writeString(this.geocodeaccuracy,dos);
					
					// String
				
						writeString(this.signature,dos);
					
					// Boolean
				
						if(this.userpermissionssfcontentuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionssfcontentuser);
		            	}
					
					// String
				
						writeString(this.postalcode,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablementionspostemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablementionspostemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesapexpagesdevelopermode == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesapexpagesdevelopermode);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdisablesharepostemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablesharepostemail);
		            	}
					
					// Boolean
				
						if(this.et4ae5__validexacttargetuser__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.et4ae5__validexacttargetuser__c);
		            	}
					
					// String
				
						writeString(this.digestfrequency,dos);
					
					// Boolean
				
						if(this.userpermissionsmarketinguser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionsmarketinguser);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowtitletoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowtitletoguestusers);
		            	}
					
					// Boolean
				
						if(this.isprofilephotoactive == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isprofilephotoactive);
		            	}
					
					// Boolean
				
						if(this.et4ae5__exacttargetforappexchangeuser__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.et4ae5__exacttargetforappexchangeuser__c);
		            	}
					
					// Boolean
				
						if(this.isextindicatorvisible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isextindicatorvisible);
		            	}
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// Boolean
				
						if(this.userpreferenceshidelightningmigrationmodal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidelightningmigrationmodal);
		            	}
					
					// Boolean
				
						if(this.userpreferenceslightningexperiencepreferred == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceslightningexperiencepreferred);
		            	}
					
					// String
				
						writeString(this.firstname,dos);
					
					// String
				
						writeString(this.contactid,dos);
					
					// Boolean
				
						if(this.userpreferencesshowstatetoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowstatetoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowstreetaddresstoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowstreetaddresstoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidechatteronboardingsplash == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidechatteronboardingsplash);
		            	}
					
					// Boolean
				
						if(this.userpreferencesglobalnavgridmenuwtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesglobalnavgridmenuwtshown);
		            	}
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.userroleid,dos);
					
					// Boolean
				
						if(this.userpreferencesshowemailtoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowemailtoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencespreviewcustomtheme == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencespreviewcustomtheme);
		            	}
					
					// java.util.Date
				
						writeDate(this.lastreferenceddate,dos);
					
					// String
				
						writeString(this.fax,dos);
					
					// Boolean
				
						if(this.noodlecrm__default_owner__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__default_owner__c);
		            	}
					
					// String
				
						writeString(this.mediumbannerphotourl,dos);
					
					// Boolean
				
						if(this.userpreferencesshowworkphonetoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowworkphonetoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowfaxtoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowfaxtoguestusers);
		            	}
					
					// String
				
						writeString(this.extension,dos);
					
					// Boolean
				
						if(this.userpreferencesremindersoundoff == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesremindersoundoff);
		            	}
					
					// Boolean
				
						if(this.userpreferencesrecordhomesectioncollapsewtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesrecordhomesectioncollapsewtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowmanagertoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowmanagertoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencessortfeedbycomment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencessortfeedbycomment);
		            	}
					
					// String
				
						writeString(this.delegatedapproverid,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("userpreferencesshowmobilephonetoexternalusers="+String.valueOf(userpreferencesshowmobilephonetoexternalusers));
		sb.append(",userpreferencesshowpostalcodetoexternalusers="+String.valueOf(userpreferencesshowpostalcodetoexternalusers));
		sb.append(",sendername="+sendername);
		sb.append(",userpreferencesreceivenotificationsasdelegatedapprover="+String.valueOf(userpreferencesreceivenotificationsasdelegatedapprover));
		sb.append(",userpreferencesshowcitytoguestusers="+String.valueOf(userpreferencesshowcitytoguestusers));
		sb.append(",lastlogindate="+String.valueOf(lastlogindate));
		sb.append(",userpreferencesuserdebugmodepref="+String.valueOf(userpreferencesuserdebugmodepref));
		sb.append(",userpreferenceshidebiggerphotocallout="+String.valueOf(userpreferenceshidebiggerphotocallout));
		sb.append(",lastname="+lastname);
		sb.append(",userpermissionssupportuser="+String.valueOf(userpermissionssupportuser));
		sb.append(",userpreferenceshideenduseronboardingassistantmodal="+String.valueOf(userpreferenceshideenduseronboardingassistantmodal));
		sb.append(",userpreferencesdisablefollowersemail="+String.valueOf(userpreferencesdisablefollowersemail));
		sb.append(",street="+street);
		sb.append(",userpreferencessuppresstasksfxreminders="+String.valueOf(userpreferencessuppresstasksfxreminders));
		sb.append(",userpermissionsinteractionuser="+String.valueOf(userpermissionsinteractionuser));
		sb.append(",profileid="+profileid);
		sb.append(",receivesadmininfoemails="+String.valueOf(receivesadmininfoemails));
		sb.append(",smallphotourl="+smallphotourl);
		sb.append(",usertype="+usertype);
		sb.append(",aboutme="+aboutme);
		sb.append(",et4ae5__default_mid__c="+et4ae5__default_mid__c);
		sb.append(",outofofficemessage="+outofofficemessage);
		sb.append(",userpermissionsmobileuser="+String.valueOf(userpermissionsmobileuser));
		sb.append(",forecastenabled="+String.valueOf(forecastenabled));
		sb.append(",userpreferenceshascelebrationbadge="+String.valueOf(userpreferenceshascelebrationbadge));
		sb.append(",numberoffailedlogins="+String.valueOf(numberoffailedlogins));
		sb.append(",senderemail="+senderemail);
		sb.append(",userpreferencesactivityreminderspopup="+String.valueOf(userpreferencesactivityreminderspopup));
		sb.append(",userpreferencesdiscommentafterlikeemail="+String.valueOf(userpreferencesdiscommentafterlikeemail));
		sb.append(",userpreferencesdismentionscommentemail="+String.valueOf(userpreferencesdismentionscommentemail));
		sb.append(",accountid="+accountid);
		sb.append(",companyname="+companyname);
		sb.append(",managerid="+managerid);
		sb.append(",userpreferencesreceivenonotificationsasapprover="+String.valueOf(userpreferencesreceivenonotificationsasapprover));
		sb.append(",userpreferenceshidesecondchatteronboardingsplash="+String.valueOf(userpreferenceshidesecondchatteronboardingsplash));
		sb.append(",lastvieweddate="+String.valueOf(lastvieweddate));
		sb.append(",userpreferencesdisablechangecommentemail="+String.valueOf(userpreferencesdisablechangecommentemail));
		sb.append(",userpreferenceshidecsngetchattermobiletask="+String.valueOf(userpreferenceshidecsngetchattermobiletask));
		sb.append(",bannerphotourl="+bannerphotourl);
		sb.append(",et4ae5__exacttargetusername__c="+et4ae5__exacttargetusername__c);
		sb.append(",userpreferencesdisableendorsementemail="+String.valueOf(userpreferencesdisableendorsementemail));
		sb.append(",userpreferencesfavoritesshowtopfavorites="+String.valueOf(userpreferencesfavoritesshowtopfavorites));
		sb.append(",offlinepdatrialexpirationdate="+String.valueOf(offlinepdatrialexpirationdate));
		sb.append(",timezonesidkey="+timezonesidkey);
		sb.append(",userpreferencesdisablelikeemail="+String.valueOf(userpreferencesdisablelikeemail));
		sb.append(",emailpreferencesautobccstayintouch="+String.valueOf(emailpreferencesautobccstayintouch));
		sb.append(",userpreferencesfavoriteswtshown="+String.valueOf(userpreferencesfavoriteswtshown));
		sb.append(",userpreferenceseventreminderscheckboxdefault="+String.valueOf(userpreferenceseventreminderscheckboxdefault));
		sb.append(",userpreferencespathassistantcollapsed="+String.valueOf(userpreferencespathassistantcollapsed));
		sb.append(",stayintouchsubject="+stayintouchsubject);
		sb.append(",city="+city);
		sb.append(",localesidkey="+localesidkey);
		sb.append(",name="+name);
		sb.append(",userpreferencesdisablebookmarkemail="+String.valueOf(userpreferencesdisablebookmarkemail));
		sb.append(",federationidentifier="+federationidentifier);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",fullphotourl="+fullphotourl);
		sb.append(",mobilephone="+mobilephone);
		sb.append(",userpreferencescreatelexappswtshown="+String.valueOf(userpreferencescreatelexappswtshown));
		sb.append(",userpreferencesenableautosubforfeeds="+String.valueOf(userpreferencesenableautosubforfeeds));
		sb.append(",userpreferencesshowpostalcodetoguestusers="+String.valueOf(userpreferencesshowpostalcodetoguestusers));
		sb.append(",division="+division);
		sb.append(",languagelocalekey="+languagelocalekey);
		sb.append(",userpreferencesshowmobilephonetoguestusers="+String.valueOf(userpreferencesshowmobilephonetoguestusers));
		sb.append(",userpreferencesdisableallfeedsemail="+String.valueOf(userpreferencesdisableallfeedsemail));
		sb.append(",userpreferencesshowcitytoexternalusers="+String.valueOf(userpreferencesshowcitytoexternalusers));
		sb.append(",et4ae5__exacttarget_oauth_token__c="+et4ae5__exacttarget_oauth_token__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",callcenterid="+callcenterid);
		sb.append(",userpreferencesshowmanagertoguestusers="+String.valueOf(userpreferencesshowmanagertoguestusers));
		sb.append(",phone="+phone);
		sb.append(",userpreferencesdisableprofilepostemail="+String.valueOf(userpreferencesdisableprofilepostemail));
		sb.append(",userpreferencesdisablelatercommentemail="+String.valueOf(userpreferencesdisablelatercommentemail));
		sb.append(",userpermissionscallcenterautologin="+String.valueOf(userpermissionscallcenterautologin));
		sb.append(",et4ae5__default_et_page__c="+et4ae5__default_et_page__c);
		sb.append(",userpreferencespipelineviewhidehelppopover="+String.valueOf(userpreferencespipelineviewhidehelppopover));
		sb.append(",userpreferencespreviewlightning="+String.valueOf(userpreferencespreviewlightning));
		sb.append(",userpreferencesshowworkphonetoexternalusers="+String.valueOf(userpreferencesshowworkphonetoexternalusers));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",userpreferencesshowfaxtoexternalusers="+String.valueOf(userpreferencesshowfaxtoexternalusers));
		sb.append(",lastpasswordchangedate="+String.valueOf(lastpasswordchangedate));
		sb.append(",userpreferenceshides1browserui="+String.valueOf(userpreferenceshides1browserui));
		sb.append(",userpreferencesrecordhomereservedwtshown="+String.valueOf(userpreferencesrecordhomereservedwtshown));
		sb.append(",userpreferencestaskreminderscheckboxdefault="+String.valueOf(userpreferencestaskreminderscheckboxdefault));
		sb.append(",userpreferencesshowemailtoexternalusers="+String.valueOf(userpreferencesshowemailtoexternalusers));
		sb.append(",offlinetrialexpirationdate="+String.valueOf(offlinetrialexpirationdate));
		sb.append(",isactive="+String.valueOf(isactive));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",smallbannerphotourl="+smallbannerphotourl);
		sb.append(",alias="+alias);
		sb.append(",emailencodingkey="+emailencodingkey);
		sb.append(",badgetext="+badgetext);
		sb.append(",userpreferencesdisablemessageemail="+String.valueOf(userpreferencesdisablemessageemail));
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",state="+state);
		sb.append(",userpreferencesdisablefilesharenotificationsforapi="+String.valueOf(userpreferencesdisablefilesharenotificationsforapi));
		sb.append(",mediumphotourl="+mediumphotourl);
		sb.append(",userpreferencesshowstreetaddresstoguestusers="+String.valueOf(userpreferencesshowstreetaddresstoguestusers));
		sb.append(",userpreferencesshowstatetoguestusers="+String.valueOf(userpreferencesshowstatetoguestusers));
		sb.append(",userpreferenceshidecsndesktoptask="+String.valueOf(userpreferenceshidecsndesktoptask));
		sb.append(",userpreferencesnewlightningreportrunpageenabled="+String.valueOf(userpreferencesnewlightningreportrunpageenabled));
		sb.append(",department="+department);
		sb.append(",userpreferencesexcludemailappattachments="+String.valueOf(userpreferencesexcludemailappattachments));
		sb.append(",defaultgroupnotificationfrequency="+defaultgroupnotificationfrequency);
		sb.append(",et4ae5__exacttargetforappexchangeadmin__c="+String.valueOf(et4ae5__exacttargetforappexchangeadmin__c));
		sb.append(",stayintouchnote="+stayintouchnote);
		sb.append(",userpreferencesglobalnavbarwtshown="+String.valueOf(userpreferencesglobalnavbarwtshown));
		sb.append(",userpreferenceshidesfxwelcomemat="+String.valueOf(userpreferenceshidesfxwelcomemat));
		sb.append(",et4ae5__validexacttargetadmin__c="+String.valueOf(et4ae5__validexacttargetadmin__c));
		sb.append(",individualid="+individualid);
		sb.append(",userpreferencesshowtitletoexternalusers="+String.valueOf(userpreferencesshowtitletoexternalusers));
		sb.append(",userpreferencessuppresseventsfxreminders="+String.valueOf(userpreferencessuppresseventsfxreminders));
		sb.append(",receivesinfoemails="+String.valueOf(receivesinfoemails));
		sb.append(",userpreferencessrhoverrideactivities="+String.valueOf(userpreferencessrhoverrideactivities));
		sb.append(",userpermissionsofflineuser="+String.valueOf(userpermissionsofflineuser));
		sb.append(",userpreferencesshowprofilepictoguestusers="+String.valueOf(userpreferencesshowprofilepictoguestusers));
		sb.append(",username="+username);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",userpreferencesshowcountrytoexternalusers="+String.valueOf(userpreferencesshowcountrytoexternalusers));
		sb.append(",country="+country);
		sb.append(",emailpreferencesstayintouchreminder="+String.valueOf(emailpreferencesstayintouchreminder));
		sb.append(",userpreferencescachediagnostics="+String.valueOf(userpreferencescachediagnostics));
		sb.append(",stayintouchsignature="+stayintouchsignature);
		sb.append(",emailpreferencesautobcc="+String.valueOf(emailpreferencesautobcc));
		sb.append(",communitynickname="+communitynickname);
		sb.append(",userpreferencesdisprofpostcommentemail="+String.valueOf(userpreferencesdisprofpostcommentemail));
		sb.append(",userpreferencesshowcountrytoguestusers="+String.valueOf(userpreferencesshowcountrytoguestusers));
		sb.append(",employeenumber="+employeenumber);
		sb.append(",geocodeaccuracy="+geocodeaccuracy);
		sb.append(",signature="+signature);
		sb.append(",userpermissionssfcontentuser="+String.valueOf(userpermissionssfcontentuser));
		sb.append(",postalcode="+postalcode);
		sb.append(",title="+title);
		sb.append(",userpreferencesdisablementionspostemail="+String.valueOf(userpreferencesdisablementionspostemail));
		sb.append(",userpreferencesapexpagesdevelopermode="+String.valueOf(userpreferencesapexpagesdevelopermode));
		sb.append(",userpreferencesdisablesharepostemail="+String.valueOf(userpreferencesdisablesharepostemail));
		sb.append(",et4ae5__validexacttargetuser__c="+String.valueOf(et4ae5__validexacttargetuser__c));
		sb.append(",digestfrequency="+digestfrequency);
		sb.append(",userpermissionsmarketinguser="+String.valueOf(userpermissionsmarketinguser));
		sb.append(",userpreferencesshowtitletoguestusers="+String.valueOf(userpreferencesshowtitletoguestusers));
		sb.append(",isprofilephotoactive="+String.valueOf(isprofilephotoactive));
		sb.append(",et4ae5__exacttargetforappexchangeuser__c="+String.valueOf(et4ae5__exacttargetforappexchangeuser__c));
		sb.append(",isextindicatorvisible="+String.valueOf(isextindicatorvisible));
		sb.append(",createdbyid="+createdbyid);
		sb.append(",userpreferenceshidelightningmigrationmodal="+String.valueOf(userpreferenceshidelightningmigrationmodal));
		sb.append(",userpreferenceslightningexperiencepreferred="+String.valueOf(userpreferenceslightningexperiencepreferred));
		sb.append(",firstname="+firstname);
		sb.append(",contactid="+contactid);
		sb.append(",userpreferencesshowstatetoexternalusers="+String.valueOf(userpreferencesshowstatetoexternalusers));
		sb.append(",userpreferencesshowstreetaddresstoexternalusers="+String.valueOf(userpreferencesshowstreetaddresstoexternalusers));
		sb.append(",userpreferenceshidechatteronboardingsplash="+String.valueOf(userpreferenceshidechatteronboardingsplash));
		sb.append(",userpreferencesglobalnavgridmenuwtshown="+String.valueOf(userpreferencesglobalnavgridmenuwtshown));
		sb.append(",email="+email);
		sb.append(",userroleid="+userroleid);
		sb.append(",userpreferencesshowemailtoguestusers="+String.valueOf(userpreferencesshowemailtoguestusers));
		sb.append(",userpreferencespreviewcustomtheme="+String.valueOf(userpreferencespreviewcustomtheme));
		sb.append(",lastreferenceddate="+String.valueOf(lastreferenceddate));
		sb.append(",fax="+fax);
		sb.append(",noodlecrm__default_owner__c="+String.valueOf(noodlecrm__default_owner__c));
		sb.append(",mediumbannerphotourl="+mediumbannerphotourl);
		sb.append(",userpreferencesshowworkphonetoguestusers="+String.valueOf(userpreferencesshowworkphonetoguestusers));
		sb.append(",userpreferencesshowfaxtoguestusers="+String.valueOf(userpreferencesshowfaxtoguestusers));
		sb.append(",extension="+extension);
		sb.append(",userpreferencesremindersoundoff="+String.valueOf(userpreferencesremindersoundoff));
		sb.append(",userpreferencesrecordhomesectioncollapsewtshown="+String.valueOf(userpreferencesrecordhomesectioncollapsewtshown));
		sb.append(",userpreferencesshowmanagertoexternalusers="+String.valueOf(userpreferencesshowmanagertoexternalusers));
		sb.append(",userpreferencessortfeedbycomment="+String.valueOf(userpreferencessortfeedbycomment));
		sb.append(",delegatedapproverid="+delegatedapproverid);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public Boolean userpreferencesshowmobilephonetoexternalusers;

				public Boolean getUserpreferencesshowmobilephonetoexternalusers () {
					return this.userpreferencesshowmobilephonetoexternalusers;
				}
				
			    public Boolean userpreferencesshowpostalcodetoexternalusers;

				public Boolean getUserpreferencesshowpostalcodetoexternalusers () {
					return this.userpreferencesshowpostalcodetoexternalusers;
				}
				
			    public String sendername;

				public String getSendername () {
					return this.sendername;
				}
				
			    public Boolean userpreferencesreceivenotificationsasdelegatedapprover;

				public Boolean getUserpreferencesreceivenotificationsasdelegatedapprover () {
					return this.userpreferencesreceivenotificationsasdelegatedapprover;
				}
				
			    public Boolean userpreferencesshowcitytoguestusers;

				public Boolean getUserpreferencesshowcitytoguestusers () {
					return this.userpreferencesshowcitytoguestusers;
				}
				
			    public java.util.Date lastlogindate;

				public java.util.Date getLastlogindate () {
					return this.lastlogindate;
				}
				
			    public Boolean userpreferencesuserdebugmodepref;

				public Boolean getUserpreferencesuserdebugmodepref () {
					return this.userpreferencesuserdebugmodepref;
				}
				
			    public Boolean userpreferenceshidebiggerphotocallout;

				public Boolean getUserpreferenceshidebiggerphotocallout () {
					return this.userpreferenceshidebiggerphotocallout;
				}
				
			    public String lastname;

				public String getLastname () {
					return this.lastname;
				}
				
			    public Boolean userpermissionssupportuser;

				public Boolean getUserpermissionssupportuser () {
					return this.userpermissionssupportuser;
				}
				
			    public Boolean userpreferenceshideenduseronboardingassistantmodal;

				public Boolean getUserpreferenceshideenduseronboardingassistantmodal () {
					return this.userpreferenceshideenduseronboardingassistantmodal;
				}
				
			    public Boolean userpreferencesdisablefollowersemail;

				public Boolean getUserpreferencesdisablefollowersemail () {
					return this.userpreferencesdisablefollowersemail;
				}
				
			    public String street;

				public String getStreet () {
					return this.street;
				}
				
			    public Boolean userpreferencessuppresstasksfxreminders;

				public Boolean getUserpreferencessuppresstasksfxreminders () {
					return this.userpreferencessuppresstasksfxreminders;
				}
				
			    public Boolean userpermissionsinteractionuser;

				public Boolean getUserpermissionsinteractionuser () {
					return this.userpermissionsinteractionuser;
				}
				
			    public String profileid;

				public String getProfileid () {
					return this.profileid;
				}
				
			    public Boolean receivesadmininfoemails;

				public Boolean getReceivesadmininfoemails () {
					return this.receivesadmininfoemails;
				}
				
			    public String smallphotourl;

				public String getSmallphotourl () {
					return this.smallphotourl;
				}
				
			    public String usertype;

				public String getUsertype () {
					return this.usertype;
				}
				
			    public String aboutme;

				public String getAboutme () {
					return this.aboutme;
				}
				
			    public String et4ae5__default_mid__c;

				public String getEt4ae5__default_mid__c () {
					return this.et4ae5__default_mid__c;
				}
				
			    public String outofofficemessage;

				public String getOutofofficemessage () {
					return this.outofofficemessage;
				}
				
			    public Boolean userpermissionsmobileuser;

				public Boolean getUserpermissionsmobileuser () {
					return this.userpermissionsmobileuser;
				}
				
			    public Boolean forecastenabled;

				public Boolean getForecastenabled () {
					return this.forecastenabled;
				}
				
			    public Boolean userpreferenceshascelebrationbadge;

				public Boolean getUserpreferenceshascelebrationbadge () {
					return this.userpreferenceshascelebrationbadge;
				}
				
			    public Integer numberoffailedlogins;

				public Integer getNumberoffailedlogins () {
					return this.numberoffailedlogins;
				}
				
			    public String senderemail;

				public String getSenderemail () {
					return this.senderemail;
				}
				
			    public Boolean userpreferencesactivityreminderspopup;

				public Boolean getUserpreferencesactivityreminderspopup () {
					return this.userpreferencesactivityreminderspopup;
				}
				
			    public Boolean userpreferencesdiscommentafterlikeemail;

				public Boolean getUserpreferencesdiscommentafterlikeemail () {
					return this.userpreferencesdiscommentafterlikeemail;
				}
				
			    public Boolean userpreferencesdismentionscommentemail;

				public Boolean getUserpreferencesdismentionscommentemail () {
					return this.userpreferencesdismentionscommentemail;
				}
				
			    public String accountid;

				public String getAccountid () {
					return this.accountid;
				}
				
			    public String companyname;

				public String getCompanyname () {
					return this.companyname;
				}
				
			    public String managerid;

				public String getManagerid () {
					return this.managerid;
				}
				
			    public Boolean userpreferencesreceivenonotificationsasapprover;

				public Boolean getUserpreferencesreceivenonotificationsasapprover () {
					return this.userpreferencesreceivenonotificationsasapprover;
				}
				
			    public Boolean userpreferenceshidesecondchatteronboardingsplash;

				public Boolean getUserpreferenceshidesecondchatteronboardingsplash () {
					return this.userpreferenceshidesecondchatteronboardingsplash;
				}
				
			    public java.util.Date lastvieweddate;

				public java.util.Date getLastvieweddate () {
					return this.lastvieweddate;
				}
				
			    public Boolean userpreferencesdisablechangecommentemail;

				public Boolean getUserpreferencesdisablechangecommentemail () {
					return this.userpreferencesdisablechangecommentemail;
				}
				
			    public Boolean userpreferenceshidecsngetchattermobiletask;

				public Boolean getUserpreferenceshidecsngetchattermobiletask () {
					return this.userpreferenceshidecsngetchattermobiletask;
				}
				
			    public String bannerphotourl;

				public String getBannerphotourl () {
					return this.bannerphotourl;
				}
				
			    public String et4ae5__exacttargetusername__c;

				public String getEt4ae5__exacttargetusername__c () {
					return this.et4ae5__exacttargetusername__c;
				}
				
			    public Boolean userpreferencesdisableendorsementemail;

				public Boolean getUserpreferencesdisableendorsementemail () {
					return this.userpreferencesdisableendorsementemail;
				}
				
			    public Boolean userpreferencesfavoritesshowtopfavorites;

				public Boolean getUserpreferencesfavoritesshowtopfavorites () {
					return this.userpreferencesfavoritesshowtopfavorites;
				}
				
			    public java.util.Date offlinepdatrialexpirationdate;

				public java.util.Date getOfflinepdatrialexpirationdate () {
					return this.offlinepdatrialexpirationdate;
				}
				
			    public String timezonesidkey;

				public String getTimezonesidkey () {
					return this.timezonesidkey;
				}
				
			    public Boolean userpreferencesdisablelikeemail;

				public Boolean getUserpreferencesdisablelikeemail () {
					return this.userpreferencesdisablelikeemail;
				}
				
			    public Boolean emailpreferencesautobccstayintouch;

				public Boolean getEmailpreferencesautobccstayintouch () {
					return this.emailpreferencesautobccstayintouch;
				}
				
			    public Boolean userpreferencesfavoriteswtshown;

				public Boolean getUserpreferencesfavoriteswtshown () {
					return this.userpreferencesfavoriteswtshown;
				}
				
			    public Boolean userpreferenceseventreminderscheckboxdefault;

				public Boolean getUserpreferenceseventreminderscheckboxdefault () {
					return this.userpreferenceseventreminderscheckboxdefault;
				}
				
			    public Boolean userpreferencespathassistantcollapsed;

				public Boolean getUserpreferencespathassistantcollapsed () {
					return this.userpreferencespathassistantcollapsed;
				}
				
			    public String stayintouchsubject;

				public String getStayintouchsubject () {
					return this.stayintouchsubject;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String localesidkey;

				public String getLocalesidkey () {
					return this.localesidkey;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public Boolean userpreferencesdisablebookmarkemail;

				public Boolean getUserpreferencesdisablebookmarkemail () {
					return this.userpreferencesdisablebookmarkemail;
				}
				
			    public String federationidentifier;

				public String getFederationidentifier () {
					return this.federationidentifier;
				}
				
			    public Double latitude;

				public Double getLatitude () {
					return this.latitude;
				}
				
			    public String fullphotourl;

				public String getFullphotourl () {
					return this.fullphotourl;
				}
				
			    public String mobilephone;

				public String getMobilephone () {
					return this.mobilephone;
				}
				
			    public Boolean userpreferencescreatelexappswtshown;

				public Boolean getUserpreferencescreatelexappswtshown () {
					return this.userpreferencescreatelexappswtshown;
				}
				
			    public Boolean userpreferencesenableautosubforfeeds;

				public Boolean getUserpreferencesenableautosubforfeeds () {
					return this.userpreferencesenableautosubforfeeds;
				}
				
			    public Boolean userpreferencesshowpostalcodetoguestusers;

				public Boolean getUserpreferencesshowpostalcodetoguestusers () {
					return this.userpreferencesshowpostalcodetoguestusers;
				}
				
			    public String division;

				public String getDivision () {
					return this.division;
				}
				
			    public String languagelocalekey;

				public String getLanguagelocalekey () {
					return this.languagelocalekey;
				}
				
			    public Boolean userpreferencesshowmobilephonetoguestusers;

				public Boolean getUserpreferencesshowmobilephonetoguestusers () {
					return this.userpreferencesshowmobilephonetoguestusers;
				}
				
			    public Boolean userpreferencesdisableallfeedsemail;

				public Boolean getUserpreferencesdisableallfeedsemail () {
					return this.userpreferencesdisableallfeedsemail;
				}
				
			    public Boolean userpreferencesshowcitytoexternalusers;

				public Boolean getUserpreferencesshowcitytoexternalusers () {
					return this.userpreferencesshowcitytoexternalusers;
				}
				
			    public String et4ae5__exacttarget_oauth_token__c;

				public String getEt4ae5__exacttarget_oauth_token__c () {
					return this.et4ae5__exacttarget_oauth_token__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String callcenterid;

				public String getCallcenterid () {
					return this.callcenterid;
				}
				
			    public Boolean userpreferencesshowmanagertoguestusers;

				public Boolean getUserpreferencesshowmanagertoguestusers () {
					return this.userpreferencesshowmanagertoguestusers;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				
			    public Boolean userpreferencesdisableprofilepostemail;

				public Boolean getUserpreferencesdisableprofilepostemail () {
					return this.userpreferencesdisableprofilepostemail;
				}
				
			    public Boolean userpreferencesdisablelatercommentemail;

				public Boolean getUserpreferencesdisablelatercommentemail () {
					return this.userpreferencesdisablelatercommentemail;
				}
				
			    public Boolean userpermissionscallcenterautologin;

				public Boolean getUserpermissionscallcenterautologin () {
					return this.userpermissionscallcenterautologin;
				}
				
			    public String et4ae5__default_et_page__c;

				public String getEt4ae5__default_et_page__c () {
					return this.et4ae5__default_et_page__c;
				}
				
			    public Boolean userpreferencespipelineviewhidehelppopover;

				public Boolean getUserpreferencespipelineviewhidehelppopover () {
					return this.userpreferencespipelineviewhidehelppopover;
				}
				
			    public Boolean userpreferencespreviewlightning;

				public Boolean getUserpreferencespreviewlightning () {
					return this.userpreferencespreviewlightning;
				}
				
			    public Boolean userpreferencesshowworkphonetoexternalusers;

				public Boolean getUserpreferencesshowworkphonetoexternalusers () {
					return this.userpreferencesshowworkphonetoexternalusers;
				}
				
			    public Double longitude;

				public Double getLongitude () {
					return this.longitude;
				}
				
			    public Boolean userpreferencesshowfaxtoexternalusers;

				public Boolean getUserpreferencesshowfaxtoexternalusers () {
					return this.userpreferencesshowfaxtoexternalusers;
				}
				
			    public java.util.Date lastpasswordchangedate;

				public java.util.Date getLastpasswordchangedate () {
					return this.lastpasswordchangedate;
				}
				
			    public Boolean userpreferenceshides1browserui;

				public Boolean getUserpreferenceshides1browserui () {
					return this.userpreferenceshides1browserui;
				}
				
			    public Boolean userpreferencesrecordhomereservedwtshown;

				public Boolean getUserpreferencesrecordhomereservedwtshown () {
					return this.userpreferencesrecordhomereservedwtshown;
				}
				
			    public Boolean userpreferencestaskreminderscheckboxdefault;

				public Boolean getUserpreferencestaskreminderscheckboxdefault () {
					return this.userpreferencestaskreminderscheckboxdefault;
				}
				
			    public Boolean userpreferencesshowemailtoexternalusers;

				public Boolean getUserpreferencesshowemailtoexternalusers () {
					return this.userpreferencesshowemailtoexternalusers;
				}
				
			    public java.util.Date offlinetrialexpirationdate;

				public java.util.Date getOfflinetrialexpirationdate () {
					return this.offlinetrialexpirationdate;
				}
				
			    public Boolean isactive;

				public Boolean getIsactive () {
					return this.isactive;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String smallbannerphotourl;

				public String getSmallbannerphotourl () {
					return this.smallbannerphotourl;
				}
				
			    public String alias;

				public String getAlias () {
					return this.alias;
				}
				
			    public String emailencodingkey;

				public String getEmailencodingkey () {
					return this.emailencodingkey;
				}
				
			    public String badgetext;

				public String getBadgetext () {
					return this.badgetext;
				}
				
			    public Boolean userpreferencesdisablemessageemail;

				public Boolean getUserpreferencesdisablemessageemail () {
					return this.userpreferencesdisablemessageemail;
				}
				
			    public String lastmodifiedbyid;

				public String getLastmodifiedbyid () {
					return this.lastmodifiedbyid;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public Boolean userpreferencesdisablefilesharenotificationsforapi;

				public Boolean getUserpreferencesdisablefilesharenotificationsforapi () {
					return this.userpreferencesdisablefilesharenotificationsforapi;
				}
				
			    public String mediumphotourl;

				public String getMediumphotourl () {
					return this.mediumphotourl;
				}
				
			    public Boolean userpreferencesshowstreetaddresstoguestusers;

				public Boolean getUserpreferencesshowstreetaddresstoguestusers () {
					return this.userpreferencesshowstreetaddresstoguestusers;
				}
				
			    public Boolean userpreferencesshowstatetoguestusers;

				public Boolean getUserpreferencesshowstatetoguestusers () {
					return this.userpreferencesshowstatetoguestusers;
				}
				
			    public Boolean userpreferenceshidecsndesktoptask;

				public Boolean getUserpreferenceshidecsndesktoptask () {
					return this.userpreferenceshidecsndesktoptask;
				}
				
			    public Boolean userpreferencesnewlightningreportrunpageenabled;

				public Boolean getUserpreferencesnewlightningreportrunpageenabled () {
					return this.userpreferencesnewlightningreportrunpageenabled;
				}
				
			    public String department;

				public String getDepartment () {
					return this.department;
				}
				
			    public Boolean userpreferencesexcludemailappattachments;

				public Boolean getUserpreferencesexcludemailappattachments () {
					return this.userpreferencesexcludemailappattachments;
				}
				
			    public String defaultgroupnotificationfrequency;

				public String getDefaultgroupnotificationfrequency () {
					return this.defaultgroupnotificationfrequency;
				}
				
			    public Boolean et4ae5__exacttargetforappexchangeadmin__c;

				public Boolean getEt4ae5__exacttargetforappexchangeadmin__c () {
					return this.et4ae5__exacttargetforappexchangeadmin__c;
				}
				
			    public String stayintouchnote;

				public String getStayintouchnote () {
					return this.stayintouchnote;
				}
				
			    public Boolean userpreferencesglobalnavbarwtshown;

				public Boolean getUserpreferencesglobalnavbarwtshown () {
					return this.userpreferencesglobalnavbarwtshown;
				}
				
			    public Boolean userpreferenceshidesfxwelcomemat;

				public Boolean getUserpreferenceshidesfxwelcomemat () {
					return this.userpreferenceshidesfxwelcomemat;
				}
				
			    public Boolean et4ae5__validexacttargetadmin__c;

				public Boolean getEt4ae5__validexacttargetadmin__c () {
					return this.et4ae5__validexacttargetadmin__c;
				}
				
			    public String individualid;

				public String getIndividualid () {
					return this.individualid;
				}
				
			    public Boolean userpreferencesshowtitletoexternalusers;

				public Boolean getUserpreferencesshowtitletoexternalusers () {
					return this.userpreferencesshowtitletoexternalusers;
				}
				
			    public Boolean userpreferencessuppresseventsfxreminders;

				public Boolean getUserpreferencessuppresseventsfxreminders () {
					return this.userpreferencessuppresseventsfxreminders;
				}
				
			    public Boolean receivesinfoemails;

				public Boolean getReceivesinfoemails () {
					return this.receivesinfoemails;
				}
				
			    public Boolean userpreferencessrhoverrideactivities;

				public Boolean getUserpreferencessrhoverrideactivities () {
					return this.userpreferencessrhoverrideactivities;
				}
				
			    public Boolean userpermissionsofflineuser;

				public Boolean getUserpermissionsofflineuser () {
					return this.userpermissionsofflineuser;
				}
				
			    public Boolean userpreferencesshowprofilepictoguestusers;

				public Boolean getUserpreferencesshowprofilepictoguestusers () {
					return this.userpreferencesshowprofilepictoguestusers;
				}
				
			    public String username;

				public String getUsername () {
					return this.username;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean userpreferencesshowcountrytoexternalusers;

				public Boolean getUserpreferencesshowcountrytoexternalusers () {
					return this.userpreferencesshowcountrytoexternalusers;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public Boolean emailpreferencesstayintouchreminder;

				public Boolean getEmailpreferencesstayintouchreminder () {
					return this.emailpreferencesstayintouchreminder;
				}
				
			    public Boolean userpreferencescachediagnostics;

				public Boolean getUserpreferencescachediagnostics () {
					return this.userpreferencescachediagnostics;
				}
				
			    public String stayintouchsignature;

				public String getStayintouchsignature () {
					return this.stayintouchsignature;
				}
				
			    public Boolean emailpreferencesautobcc;

				public Boolean getEmailpreferencesautobcc () {
					return this.emailpreferencesautobcc;
				}
				
			    public String communitynickname;

				public String getCommunitynickname () {
					return this.communitynickname;
				}
				
			    public Boolean userpreferencesdisprofpostcommentemail;

				public Boolean getUserpreferencesdisprofpostcommentemail () {
					return this.userpreferencesdisprofpostcommentemail;
				}
				
			    public Boolean userpreferencesshowcountrytoguestusers;

				public Boolean getUserpreferencesshowcountrytoguestusers () {
					return this.userpreferencesshowcountrytoguestusers;
				}
				
			    public String employeenumber;

				public String getEmployeenumber () {
					return this.employeenumber;
				}
				
			    public String geocodeaccuracy;

				public String getGeocodeaccuracy () {
					return this.geocodeaccuracy;
				}
				
			    public String signature;

				public String getSignature () {
					return this.signature;
				}
				
			    public Boolean userpermissionssfcontentuser;

				public Boolean getUserpermissionssfcontentuser () {
					return this.userpermissionssfcontentuser;
				}
				
			    public String postalcode;

				public String getPostalcode () {
					return this.postalcode;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public Boolean userpreferencesdisablementionspostemail;

				public Boolean getUserpreferencesdisablementionspostemail () {
					return this.userpreferencesdisablementionspostemail;
				}
				
			    public Boolean userpreferencesapexpagesdevelopermode;

				public Boolean getUserpreferencesapexpagesdevelopermode () {
					return this.userpreferencesapexpagesdevelopermode;
				}
				
			    public Boolean userpreferencesdisablesharepostemail;

				public Boolean getUserpreferencesdisablesharepostemail () {
					return this.userpreferencesdisablesharepostemail;
				}
				
			    public Boolean et4ae5__validexacttargetuser__c;

				public Boolean getEt4ae5__validexacttargetuser__c () {
					return this.et4ae5__validexacttargetuser__c;
				}
				
			    public String digestfrequency;

				public String getDigestfrequency () {
					return this.digestfrequency;
				}
				
			    public Boolean userpermissionsmarketinguser;

				public Boolean getUserpermissionsmarketinguser () {
					return this.userpermissionsmarketinguser;
				}
				
			    public Boolean userpreferencesshowtitletoguestusers;

				public Boolean getUserpreferencesshowtitletoguestusers () {
					return this.userpreferencesshowtitletoguestusers;
				}
				
			    public Boolean isprofilephotoactive;

				public Boolean getIsprofilephotoactive () {
					return this.isprofilephotoactive;
				}
				
			    public Boolean et4ae5__exacttargetforappexchangeuser__c;

				public Boolean getEt4ae5__exacttargetforappexchangeuser__c () {
					return this.et4ae5__exacttargetforappexchangeuser__c;
				}
				
			    public Boolean isextindicatorvisible;

				public Boolean getIsextindicatorvisible () {
					return this.isextindicatorvisible;
				}
				
			    public String createdbyid;

				public String getCreatedbyid () {
					return this.createdbyid;
				}
				
			    public Boolean userpreferenceshidelightningmigrationmodal;

				public Boolean getUserpreferenceshidelightningmigrationmodal () {
					return this.userpreferenceshidelightningmigrationmodal;
				}
				
			    public Boolean userpreferenceslightningexperiencepreferred;

				public Boolean getUserpreferenceslightningexperiencepreferred () {
					return this.userpreferenceslightningexperiencepreferred;
				}
				
			    public String firstname;

				public String getFirstname () {
					return this.firstname;
				}
				
			    public String contactid;

				public String getContactid () {
					return this.contactid;
				}
				
			    public Boolean userpreferencesshowstatetoexternalusers;

				public Boolean getUserpreferencesshowstatetoexternalusers () {
					return this.userpreferencesshowstatetoexternalusers;
				}
				
			    public Boolean userpreferencesshowstreetaddresstoexternalusers;

				public Boolean getUserpreferencesshowstreetaddresstoexternalusers () {
					return this.userpreferencesshowstreetaddresstoexternalusers;
				}
				
			    public Boolean userpreferenceshidechatteronboardingsplash;

				public Boolean getUserpreferenceshidechatteronboardingsplash () {
					return this.userpreferenceshidechatteronboardingsplash;
				}
				
			    public Boolean userpreferencesglobalnavgridmenuwtshown;

				public Boolean getUserpreferencesglobalnavgridmenuwtshown () {
					return this.userpreferencesglobalnavgridmenuwtshown;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String userroleid;

				public String getUserroleid () {
					return this.userroleid;
				}
				
			    public Boolean userpreferencesshowemailtoguestusers;

				public Boolean getUserpreferencesshowemailtoguestusers () {
					return this.userpreferencesshowemailtoguestusers;
				}
				
			    public Boolean userpreferencespreviewcustomtheme;

				public Boolean getUserpreferencespreviewcustomtheme () {
					return this.userpreferencespreviewcustomtheme;
				}
				
			    public java.util.Date lastreferenceddate;

				public java.util.Date getLastreferenceddate () {
					return this.lastreferenceddate;
				}
				
			    public String fax;

				public String getFax () {
					return this.fax;
				}
				
			    public Boolean noodlecrm__default_owner__c;

				public Boolean getNoodlecrm__default_owner__c () {
					return this.noodlecrm__default_owner__c;
				}
				
			    public String mediumbannerphotourl;

				public String getMediumbannerphotourl () {
					return this.mediumbannerphotourl;
				}
				
			    public Boolean userpreferencesshowworkphonetoguestusers;

				public Boolean getUserpreferencesshowworkphonetoguestusers () {
					return this.userpreferencesshowworkphonetoguestusers;
				}
				
			    public Boolean userpreferencesshowfaxtoguestusers;

				public Boolean getUserpreferencesshowfaxtoguestusers () {
					return this.userpreferencesshowfaxtoguestusers;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public Boolean userpreferencesremindersoundoff;

				public Boolean getUserpreferencesremindersoundoff () {
					return this.userpreferencesremindersoundoff;
				}
				
			    public Boolean userpreferencesrecordhomesectioncollapsewtshown;

				public Boolean getUserpreferencesrecordhomesectioncollapsewtshown () {
					return this.userpreferencesrecordhomesectioncollapsewtshown;
				}
				
			    public Boolean userpreferencesshowmanagertoexternalusers;

				public Boolean getUserpreferencesshowmanagertoexternalusers () {
					return this.userpreferencesshowmanagertoexternalusers;
				}
				
			    public Boolean userpreferencessortfeedbycomment;

				public Boolean getUserpreferencessortfeedbycomment () {
					return this.userpreferencessortfeedbycomment;
				}
				
			    public String delegatedapproverid;

				public String getDelegatedapproverid () {
					return this.delegatedapproverid;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowmobilephonetoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowmobilephonetoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowpostalcodetoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowpostalcodetoexternalusers = dis.readBoolean();
           				}
					
					this.sendername = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesreceivenotificationsasdelegatedapprover = null;
           				} else {
           			    	this.userpreferencesreceivenotificationsasdelegatedapprover = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowcitytoguestusers = null;
           				} else {
           			    	this.userpreferencesshowcitytoguestusers = dis.readBoolean();
           				}
					
					this.lastlogindate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesuserdebugmodepref = null;
           				} else {
           			    	this.userpreferencesuserdebugmodepref = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidebiggerphotocallout = null;
           				} else {
           			    	this.userpreferenceshidebiggerphotocallout = dis.readBoolean();
           				}
					
					this.lastname = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionssupportuser = null;
           				} else {
           			    	this.userpermissionssupportuser = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshideenduseronboardingassistantmodal = null;
           				} else {
           			    	this.userpreferenceshideenduseronboardingassistantmodal = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablefollowersemail = null;
           				} else {
           			    	this.userpreferencesdisablefollowersemail = dis.readBoolean();
           				}
					
					this.street = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencessuppresstasksfxreminders = null;
           				} else {
           			    	this.userpreferencessuppresstasksfxreminders = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionsinteractionuser = null;
           				} else {
           			    	this.userpermissionsinteractionuser = dis.readBoolean();
           				}
					
					this.profileid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.receivesadmininfoemails = null;
           				} else {
           			    	this.receivesadmininfoemails = dis.readBoolean();
           				}
					
					this.smallphotourl = readString(dis);
					
					this.usertype = readString(dis);
					
					this.aboutme = readString(dis);
					
					this.et4ae5__default_mid__c = readString(dis);
					
					this.outofofficemessage = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionsmobileuser = null;
           				} else {
           			    	this.userpermissionsmobileuser = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.forecastenabled = null;
           				} else {
           			    	this.forecastenabled = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshascelebrationbadge = null;
           				} else {
           			    	this.userpreferenceshascelebrationbadge = dis.readBoolean();
           				}
					
						this.numberoffailedlogins = readInteger(dis);
					
					this.senderemail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesactivityreminderspopup = null;
           				} else {
           			    	this.userpreferencesactivityreminderspopup = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdiscommentafterlikeemail = null;
           				} else {
           			    	this.userpreferencesdiscommentafterlikeemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdismentionscommentemail = null;
           				} else {
           			    	this.userpreferencesdismentionscommentemail = dis.readBoolean();
           				}
					
					this.accountid = readString(dis);
					
					this.companyname = readString(dis);
					
					this.managerid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesreceivenonotificationsasapprover = null;
           				} else {
           			    	this.userpreferencesreceivenonotificationsasapprover = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidesecondchatteronboardingsplash = null;
           				} else {
           			    	this.userpreferenceshidesecondchatteronboardingsplash = dis.readBoolean();
           				}
					
					this.lastvieweddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablechangecommentemail = null;
           				} else {
           			    	this.userpreferencesdisablechangecommentemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidecsngetchattermobiletask = null;
           				} else {
           			    	this.userpreferenceshidecsngetchattermobiletask = dis.readBoolean();
           				}
					
					this.bannerphotourl = readString(dis);
					
					this.et4ae5__exacttargetusername__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisableendorsementemail = null;
           				} else {
           			    	this.userpreferencesdisableendorsementemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesfavoritesshowtopfavorites = null;
           				} else {
           			    	this.userpreferencesfavoritesshowtopfavorites = dis.readBoolean();
           				}
					
					this.offlinepdatrialexpirationdate = readDate(dis);
					
					this.timezonesidkey = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablelikeemail = null;
           				} else {
           			    	this.userpreferencesdisablelikeemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.emailpreferencesautobccstayintouch = null;
           				} else {
           			    	this.emailpreferencesautobccstayintouch = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesfavoriteswtshown = null;
           				} else {
           			    	this.userpreferencesfavoriteswtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceseventreminderscheckboxdefault = null;
           				} else {
           			    	this.userpreferenceseventreminderscheckboxdefault = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencespathassistantcollapsed = null;
           				} else {
           			    	this.userpreferencespathassistantcollapsed = dis.readBoolean();
           				}
					
					this.stayintouchsubject = readString(dis);
					
					this.city = readString(dis);
					
					this.localesidkey = readString(dis);
					
					this.name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablebookmarkemail = null;
           				} else {
           			    	this.userpreferencesdisablebookmarkemail = dis.readBoolean();
           				}
					
					this.federationidentifier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.latitude = null;
           				} else {
           			    	this.latitude = dis.readDouble();
           				}
					
					this.fullphotourl = readString(dis);
					
					this.mobilephone = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencescreatelexappswtshown = null;
           				} else {
           			    	this.userpreferencescreatelexappswtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesenableautosubforfeeds = null;
           				} else {
           			    	this.userpreferencesenableautosubforfeeds = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowpostalcodetoguestusers = null;
           				} else {
           			    	this.userpreferencesshowpostalcodetoguestusers = dis.readBoolean();
           				}
					
					this.division = readString(dis);
					
					this.languagelocalekey = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowmobilephonetoguestusers = null;
           				} else {
           			    	this.userpreferencesshowmobilephonetoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisableallfeedsemail = null;
           				} else {
           			    	this.userpreferencesdisableallfeedsemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowcitytoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowcitytoexternalusers = dis.readBoolean();
           				}
					
					this.et4ae5__exacttarget_oauth_token__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.callcenterid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowmanagertoguestusers = null;
           				} else {
           			    	this.userpreferencesshowmanagertoguestusers = dis.readBoolean();
           				}
					
					this.phone = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisableprofilepostemail = null;
           				} else {
           			    	this.userpreferencesdisableprofilepostemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablelatercommentemail = null;
           				} else {
           			    	this.userpreferencesdisablelatercommentemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionscallcenterautologin = null;
           				} else {
           			    	this.userpermissionscallcenterautologin = dis.readBoolean();
           				}
					
					this.et4ae5__default_et_page__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencespipelineviewhidehelppopover = null;
           				} else {
           			    	this.userpreferencespipelineviewhidehelppopover = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencespreviewlightning = null;
           				} else {
           			    	this.userpreferencespreviewlightning = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowworkphonetoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowworkphonetoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.longitude = null;
           				} else {
           			    	this.longitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowfaxtoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowfaxtoexternalusers = dis.readBoolean();
           				}
					
					this.lastpasswordchangedate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshides1browserui = null;
           				} else {
           			    	this.userpreferenceshides1browserui = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesrecordhomereservedwtshown = null;
           				} else {
           			    	this.userpreferencesrecordhomereservedwtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencestaskreminderscheckboxdefault = null;
           				} else {
           			    	this.userpreferencestaskreminderscheckboxdefault = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowemailtoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowemailtoexternalusers = dis.readBoolean();
           				}
					
					this.offlinetrialexpirationdate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isactive = null;
           				} else {
           			    	this.isactive = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.smallbannerphotourl = readString(dis);
					
					this.alias = readString(dis);
					
					this.emailencodingkey = readString(dis);
					
					this.badgetext = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablemessageemail = null;
           				} else {
           			    	this.userpreferencesdisablemessageemail = dis.readBoolean();
           				}
					
					this.lastmodifiedbyid = readString(dis);
					
					this.state = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablefilesharenotificationsforapi = null;
           				} else {
           			    	this.userpreferencesdisablefilesharenotificationsforapi = dis.readBoolean();
           				}
					
					this.mediumphotourl = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowstreetaddresstoguestusers = null;
           				} else {
           			    	this.userpreferencesshowstreetaddresstoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowstatetoguestusers = null;
           				} else {
           			    	this.userpreferencesshowstatetoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidecsndesktoptask = null;
           				} else {
           			    	this.userpreferenceshidecsndesktoptask = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesnewlightningreportrunpageenabled = null;
           				} else {
           			    	this.userpreferencesnewlightningreportrunpageenabled = dis.readBoolean();
           				}
					
					this.department = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesexcludemailappattachments = null;
           				} else {
           			    	this.userpreferencesexcludemailappattachments = dis.readBoolean();
           				}
					
					this.defaultgroupnotificationfrequency = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.et4ae5__exacttargetforappexchangeadmin__c = null;
           				} else {
           			    	this.et4ae5__exacttargetforappexchangeadmin__c = dis.readBoolean();
           				}
					
					this.stayintouchnote = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesglobalnavbarwtshown = null;
           				} else {
           			    	this.userpreferencesglobalnavbarwtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidesfxwelcomemat = null;
           				} else {
           			    	this.userpreferenceshidesfxwelcomemat = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.et4ae5__validexacttargetadmin__c = null;
           				} else {
           			    	this.et4ae5__validexacttargetadmin__c = dis.readBoolean();
           				}
					
					this.individualid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowtitletoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowtitletoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencessuppresseventsfxreminders = null;
           				} else {
           			    	this.userpreferencessuppresseventsfxreminders = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.receivesinfoemails = null;
           				} else {
           			    	this.receivesinfoemails = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencessrhoverrideactivities = null;
           				} else {
           			    	this.userpreferencessrhoverrideactivities = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionsofflineuser = null;
           				} else {
           			    	this.userpermissionsofflineuser = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowprofilepictoguestusers = null;
           				} else {
           			    	this.userpreferencesshowprofilepictoguestusers = dis.readBoolean();
           				}
					
					this.username = readString(dis);
					
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowcountrytoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowcountrytoexternalusers = dis.readBoolean();
           				}
					
					this.country = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.emailpreferencesstayintouchreminder = null;
           				} else {
           			    	this.emailpreferencesstayintouchreminder = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencescachediagnostics = null;
           				} else {
           			    	this.userpreferencescachediagnostics = dis.readBoolean();
           				}
					
					this.stayintouchsignature = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.emailpreferencesautobcc = null;
           				} else {
           			    	this.emailpreferencesautobcc = dis.readBoolean();
           				}
					
					this.communitynickname = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisprofpostcommentemail = null;
           				} else {
           			    	this.userpreferencesdisprofpostcommentemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowcountrytoguestusers = null;
           				} else {
           			    	this.userpreferencesshowcountrytoguestusers = dis.readBoolean();
           				}
					
					this.employeenumber = readString(dis);
					
					this.geocodeaccuracy = readString(dis);
					
					this.signature = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionssfcontentuser = null;
           				} else {
           			    	this.userpermissionssfcontentuser = dis.readBoolean();
           				}
					
					this.postalcode = readString(dis);
					
					this.title = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablementionspostemail = null;
           				} else {
           			    	this.userpreferencesdisablementionspostemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesapexpagesdevelopermode = null;
           				} else {
           			    	this.userpreferencesapexpagesdevelopermode = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesdisablesharepostemail = null;
           				} else {
           			    	this.userpreferencesdisablesharepostemail = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.et4ae5__validexacttargetuser__c = null;
           				} else {
           			    	this.et4ae5__validexacttargetuser__c = dis.readBoolean();
           				}
					
					this.digestfrequency = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpermissionsmarketinguser = null;
           				} else {
           			    	this.userpermissionsmarketinguser = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowtitletoguestusers = null;
           				} else {
           			    	this.userpreferencesshowtitletoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isprofilephotoactive = null;
           				} else {
           			    	this.isprofilephotoactive = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.et4ae5__exacttargetforappexchangeuser__c = null;
           				} else {
           			    	this.et4ae5__exacttargetforappexchangeuser__c = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isextindicatorvisible = null;
           				} else {
           			    	this.isextindicatorvisible = dis.readBoolean();
           				}
					
					this.createdbyid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidelightningmigrationmodal = null;
           				} else {
           			    	this.userpreferenceshidelightningmigrationmodal = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceslightningexperiencepreferred = null;
           				} else {
           			    	this.userpreferenceslightningexperiencepreferred = dis.readBoolean();
           				}
					
					this.firstname = readString(dis);
					
					this.contactid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowstatetoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowstatetoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowstreetaddresstoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowstreetaddresstoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferenceshidechatteronboardingsplash = null;
           				} else {
           			    	this.userpreferenceshidechatteronboardingsplash = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesglobalnavgridmenuwtshown = null;
           				} else {
           			    	this.userpreferencesglobalnavgridmenuwtshown = dis.readBoolean();
           				}
					
					this.email = readString(dis);
					
					this.userroleid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowemailtoguestusers = null;
           				} else {
           			    	this.userpreferencesshowemailtoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencespreviewcustomtheme = null;
           				} else {
           			    	this.userpreferencespreviewcustomtheme = dis.readBoolean();
           				}
					
					this.lastreferenceddate = readDate(dis);
					
					this.fax = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.noodlecrm__default_owner__c = null;
           				} else {
           			    	this.noodlecrm__default_owner__c = dis.readBoolean();
           				}
					
					this.mediumbannerphotourl = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowworkphonetoguestusers = null;
           				} else {
           			    	this.userpreferencesshowworkphonetoguestusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowfaxtoguestusers = null;
           				} else {
           			    	this.userpreferencesshowfaxtoguestusers = dis.readBoolean();
           				}
					
					this.extension = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesremindersoundoff = null;
           				} else {
           			    	this.userpreferencesremindersoundoff = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesrecordhomesectioncollapsewtshown = null;
           				} else {
           			    	this.userpreferencesrecordhomesectioncollapsewtshown = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencesshowmanagertoexternalusers = null;
           				} else {
           			    	this.userpreferencesshowmanagertoexternalusers = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.userpreferencessortfeedbycomment = null;
           				} else {
           			    	this.userpreferencessortfeedbycomment = dis.readBoolean();
           				}
					
					this.delegatedapproverid = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Boolean
				
						if(this.userpreferencesshowmobilephonetoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowmobilephonetoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowpostalcodetoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowpostalcodetoexternalusers);
		            	}
					
					// String
				
						writeString(this.sendername,dos);
					
					// Boolean
				
						if(this.userpreferencesreceivenotificationsasdelegatedapprover == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesreceivenotificationsasdelegatedapprover);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowcitytoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowcitytoguestusers);
		            	}
					
					// java.util.Date
				
						writeDate(this.lastlogindate,dos);
					
					// Boolean
				
						if(this.userpreferencesuserdebugmodepref == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesuserdebugmodepref);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidebiggerphotocallout == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidebiggerphotocallout);
		            	}
					
					// String
				
						writeString(this.lastname,dos);
					
					// Boolean
				
						if(this.userpermissionssupportuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionssupportuser);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshideenduseronboardingassistantmodal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshideenduseronboardingassistantmodal);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdisablefollowersemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablefollowersemail);
		            	}
					
					// String
				
						writeString(this.street,dos);
					
					// Boolean
				
						if(this.userpreferencessuppresstasksfxreminders == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencessuppresstasksfxreminders);
		            	}
					
					// Boolean
				
						if(this.userpermissionsinteractionuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionsinteractionuser);
		            	}
					
					// String
				
						writeString(this.profileid,dos);
					
					// Boolean
				
						if(this.receivesadmininfoemails == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.receivesadmininfoemails);
		            	}
					
					// String
				
						writeString(this.smallphotourl,dos);
					
					// String
				
						writeString(this.usertype,dos);
					
					// String
				
						writeString(this.aboutme,dos);
					
					// String
				
						writeString(this.et4ae5__default_mid__c,dos);
					
					// String
				
						writeString(this.outofofficemessage,dos);
					
					// Boolean
				
						if(this.userpermissionsmobileuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionsmobileuser);
		            	}
					
					// Boolean
				
						if(this.forecastenabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.forecastenabled);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshascelebrationbadge == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshascelebrationbadge);
		            	}
					
					// Integer
				
						writeInteger(this.numberoffailedlogins,dos);
					
					// String
				
						writeString(this.senderemail,dos);
					
					// Boolean
				
						if(this.userpreferencesactivityreminderspopup == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesactivityreminderspopup);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdiscommentafterlikeemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdiscommentafterlikeemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdismentionscommentemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdismentionscommentemail);
		            	}
					
					// String
				
						writeString(this.accountid,dos);
					
					// String
				
						writeString(this.companyname,dos);
					
					// String
				
						writeString(this.managerid,dos);
					
					// Boolean
				
						if(this.userpreferencesreceivenonotificationsasapprover == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesreceivenonotificationsasapprover);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidesecondchatteronboardingsplash == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidesecondchatteronboardingsplash);
		            	}
					
					// java.util.Date
				
						writeDate(this.lastvieweddate,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablechangecommentemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablechangecommentemail);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidecsngetchattermobiletask == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidecsngetchattermobiletask);
		            	}
					
					// String
				
						writeString(this.bannerphotourl,dos);
					
					// String
				
						writeString(this.et4ae5__exacttargetusername__c,dos);
					
					// Boolean
				
						if(this.userpreferencesdisableendorsementemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisableendorsementemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesfavoritesshowtopfavorites == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesfavoritesshowtopfavorites);
		            	}
					
					// java.util.Date
				
						writeDate(this.offlinepdatrialexpirationdate,dos);
					
					// String
				
						writeString(this.timezonesidkey,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablelikeemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablelikeemail);
		            	}
					
					// Boolean
				
						if(this.emailpreferencesautobccstayintouch == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.emailpreferencesautobccstayintouch);
		            	}
					
					// Boolean
				
						if(this.userpreferencesfavoriteswtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesfavoriteswtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferenceseventreminderscheckboxdefault == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceseventreminderscheckboxdefault);
		            	}
					
					// Boolean
				
						if(this.userpreferencespathassistantcollapsed == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencespathassistantcollapsed);
		            	}
					
					// String
				
						writeString(this.stayintouchsubject,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.localesidkey,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablebookmarkemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablebookmarkemail);
		            	}
					
					// String
				
						writeString(this.federationidentifier,dos);
					
					// Double
				
						if(this.latitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.latitude);
		            	}
					
					// String
				
						writeString(this.fullphotourl,dos);
					
					// String
				
						writeString(this.mobilephone,dos);
					
					// Boolean
				
						if(this.userpreferencescreatelexappswtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencescreatelexappswtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferencesenableautosubforfeeds == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesenableautosubforfeeds);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowpostalcodetoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowpostalcodetoguestusers);
		            	}
					
					// String
				
						writeString(this.division,dos);
					
					// String
				
						writeString(this.languagelocalekey,dos);
					
					// Boolean
				
						if(this.userpreferencesshowmobilephonetoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowmobilephonetoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdisableallfeedsemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisableallfeedsemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowcitytoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowcitytoexternalusers);
		            	}
					
					// String
				
						writeString(this.et4ae5__exacttarget_oauth_token__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.callcenterid,dos);
					
					// Boolean
				
						if(this.userpreferencesshowmanagertoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowmanagertoguestusers);
		            	}
					
					// String
				
						writeString(this.phone,dos);
					
					// Boolean
				
						if(this.userpreferencesdisableprofilepostemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisableprofilepostemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdisablelatercommentemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablelatercommentemail);
		            	}
					
					// Boolean
				
						if(this.userpermissionscallcenterautologin == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionscallcenterautologin);
		            	}
					
					// String
				
						writeString(this.et4ae5__default_et_page__c,dos);
					
					// Boolean
				
						if(this.userpreferencespipelineviewhidehelppopover == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencespipelineviewhidehelppopover);
		            	}
					
					// Boolean
				
						if(this.userpreferencespreviewlightning == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencespreviewlightning);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowworkphonetoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowworkphonetoexternalusers);
		            	}
					
					// Double
				
						if(this.longitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.longitude);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowfaxtoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowfaxtoexternalusers);
		            	}
					
					// java.util.Date
				
						writeDate(this.lastpasswordchangedate,dos);
					
					// Boolean
				
						if(this.userpreferenceshides1browserui == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshides1browserui);
		            	}
					
					// Boolean
				
						if(this.userpreferencesrecordhomereservedwtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesrecordhomereservedwtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferencestaskreminderscheckboxdefault == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencestaskreminderscheckboxdefault);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowemailtoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowemailtoexternalusers);
		            	}
					
					// java.util.Date
				
						writeDate(this.offlinetrialexpirationdate,dos);
					
					// Boolean
				
						if(this.isactive == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isactive);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.smallbannerphotourl,dos);
					
					// String
				
						writeString(this.alias,dos);
					
					// String
				
						writeString(this.emailencodingkey,dos);
					
					// String
				
						writeString(this.badgetext,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablemessageemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablemessageemail);
		            	}
					
					// String
				
						writeString(this.lastmodifiedbyid,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablefilesharenotificationsforapi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablefilesharenotificationsforapi);
		            	}
					
					// String
				
						writeString(this.mediumphotourl,dos);
					
					// Boolean
				
						if(this.userpreferencesshowstreetaddresstoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowstreetaddresstoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowstatetoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowstatetoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidecsndesktoptask == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidecsndesktoptask);
		            	}
					
					// Boolean
				
						if(this.userpreferencesnewlightningreportrunpageenabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesnewlightningreportrunpageenabled);
		            	}
					
					// String
				
						writeString(this.department,dos);
					
					// Boolean
				
						if(this.userpreferencesexcludemailappattachments == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesexcludemailappattachments);
		            	}
					
					// String
				
						writeString(this.defaultgroupnotificationfrequency,dos);
					
					// Boolean
				
						if(this.et4ae5__exacttargetforappexchangeadmin__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.et4ae5__exacttargetforappexchangeadmin__c);
		            	}
					
					// String
				
						writeString(this.stayintouchnote,dos);
					
					// Boolean
				
						if(this.userpreferencesglobalnavbarwtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesglobalnavbarwtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidesfxwelcomemat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidesfxwelcomemat);
		            	}
					
					// Boolean
				
						if(this.et4ae5__validexacttargetadmin__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.et4ae5__validexacttargetadmin__c);
		            	}
					
					// String
				
						writeString(this.individualid,dos);
					
					// Boolean
				
						if(this.userpreferencesshowtitletoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowtitletoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencessuppresseventsfxreminders == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencessuppresseventsfxreminders);
		            	}
					
					// Boolean
				
						if(this.receivesinfoemails == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.receivesinfoemails);
		            	}
					
					// Boolean
				
						if(this.userpreferencessrhoverrideactivities == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencessrhoverrideactivities);
		            	}
					
					// Boolean
				
						if(this.userpermissionsofflineuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionsofflineuser);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowprofilepictoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowprofilepictoguestusers);
		            	}
					
					// String
				
						writeString(this.username,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.userpreferencesshowcountrytoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowcountrytoexternalusers);
		            	}
					
					// String
				
						writeString(this.country,dos);
					
					// Boolean
				
						if(this.emailpreferencesstayintouchreminder == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.emailpreferencesstayintouchreminder);
		            	}
					
					// Boolean
				
						if(this.userpreferencescachediagnostics == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencescachediagnostics);
		            	}
					
					// String
				
						writeString(this.stayintouchsignature,dos);
					
					// Boolean
				
						if(this.emailpreferencesautobcc == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.emailpreferencesautobcc);
		            	}
					
					// String
				
						writeString(this.communitynickname,dos);
					
					// Boolean
				
						if(this.userpreferencesdisprofpostcommentemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisprofpostcommentemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowcountrytoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowcountrytoguestusers);
		            	}
					
					// String
				
						writeString(this.employeenumber,dos);
					
					// String
				
						writeString(this.geocodeaccuracy,dos);
					
					// String
				
						writeString(this.signature,dos);
					
					// Boolean
				
						if(this.userpermissionssfcontentuser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionssfcontentuser);
		            	}
					
					// String
				
						writeString(this.postalcode,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// Boolean
				
						if(this.userpreferencesdisablementionspostemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablementionspostemail);
		            	}
					
					// Boolean
				
						if(this.userpreferencesapexpagesdevelopermode == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesapexpagesdevelopermode);
		            	}
					
					// Boolean
				
						if(this.userpreferencesdisablesharepostemail == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesdisablesharepostemail);
		            	}
					
					// Boolean
				
						if(this.et4ae5__validexacttargetuser__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.et4ae5__validexacttargetuser__c);
		            	}
					
					// String
				
						writeString(this.digestfrequency,dos);
					
					// Boolean
				
						if(this.userpermissionsmarketinguser == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpermissionsmarketinguser);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowtitletoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowtitletoguestusers);
		            	}
					
					// Boolean
				
						if(this.isprofilephotoactive == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isprofilephotoactive);
		            	}
					
					// Boolean
				
						if(this.et4ae5__exacttargetforappexchangeuser__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.et4ae5__exacttargetforappexchangeuser__c);
		            	}
					
					// Boolean
				
						if(this.isextindicatorvisible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isextindicatorvisible);
		            	}
					
					// String
				
						writeString(this.createdbyid,dos);
					
					// Boolean
				
						if(this.userpreferenceshidelightningmigrationmodal == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidelightningmigrationmodal);
		            	}
					
					// Boolean
				
						if(this.userpreferenceslightningexperiencepreferred == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceslightningexperiencepreferred);
		            	}
					
					// String
				
						writeString(this.firstname,dos);
					
					// String
				
						writeString(this.contactid,dos);
					
					// Boolean
				
						if(this.userpreferencesshowstatetoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowstatetoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowstreetaddresstoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowstreetaddresstoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferenceshidechatteronboardingsplash == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferenceshidechatteronboardingsplash);
		            	}
					
					// Boolean
				
						if(this.userpreferencesglobalnavgridmenuwtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesglobalnavgridmenuwtshown);
		            	}
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.userroleid,dos);
					
					// Boolean
				
						if(this.userpreferencesshowemailtoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowemailtoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencespreviewcustomtheme == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencespreviewcustomtheme);
		            	}
					
					// java.util.Date
				
						writeDate(this.lastreferenceddate,dos);
					
					// String
				
						writeString(this.fax,dos);
					
					// Boolean
				
						if(this.noodlecrm__default_owner__c == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.noodlecrm__default_owner__c);
		            	}
					
					// String
				
						writeString(this.mediumbannerphotourl,dos);
					
					// Boolean
				
						if(this.userpreferencesshowworkphonetoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowworkphonetoguestusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowfaxtoguestusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowfaxtoguestusers);
		            	}
					
					// String
				
						writeString(this.extension,dos);
					
					// Boolean
				
						if(this.userpreferencesremindersoundoff == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesremindersoundoff);
		            	}
					
					// Boolean
				
						if(this.userpreferencesrecordhomesectioncollapsewtshown == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesrecordhomesectioncollapsewtshown);
		            	}
					
					// Boolean
				
						if(this.userpreferencesshowmanagertoexternalusers == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencesshowmanagertoexternalusers);
		            	}
					
					// Boolean
				
						if(this.userpreferencessortfeedbycomment == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.userpreferencessortfeedbycomment);
		            	}
					
					// String
				
						writeString(this.delegatedapproverid,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("userpreferencesshowmobilephonetoexternalusers="+String.valueOf(userpreferencesshowmobilephonetoexternalusers));
		sb.append(",userpreferencesshowpostalcodetoexternalusers="+String.valueOf(userpreferencesshowpostalcodetoexternalusers));
		sb.append(",sendername="+sendername);
		sb.append(",userpreferencesreceivenotificationsasdelegatedapprover="+String.valueOf(userpreferencesreceivenotificationsasdelegatedapprover));
		sb.append(",userpreferencesshowcitytoguestusers="+String.valueOf(userpreferencesshowcitytoguestusers));
		sb.append(",lastlogindate="+String.valueOf(lastlogindate));
		sb.append(",userpreferencesuserdebugmodepref="+String.valueOf(userpreferencesuserdebugmodepref));
		sb.append(",userpreferenceshidebiggerphotocallout="+String.valueOf(userpreferenceshidebiggerphotocallout));
		sb.append(",lastname="+lastname);
		sb.append(",userpermissionssupportuser="+String.valueOf(userpermissionssupportuser));
		sb.append(",userpreferenceshideenduseronboardingassistantmodal="+String.valueOf(userpreferenceshideenduseronboardingassistantmodal));
		sb.append(",userpreferencesdisablefollowersemail="+String.valueOf(userpreferencesdisablefollowersemail));
		sb.append(",street="+street);
		sb.append(",userpreferencessuppresstasksfxreminders="+String.valueOf(userpreferencessuppresstasksfxreminders));
		sb.append(",userpermissionsinteractionuser="+String.valueOf(userpermissionsinteractionuser));
		sb.append(",profileid="+profileid);
		sb.append(",receivesadmininfoemails="+String.valueOf(receivesadmininfoemails));
		sb.append(",smallphotourl="+smallphotourl);
		sb.append(",usertype="+usertype);
		sb.append(",aboutme="+aboutme);
		sb.append(",et4ae5__default_mid__c="+et4ae5__default_mid__c);
		sb.append(",outofofficemessage="+outofofficemessage);
		sb.append(",userpermissionsmobileuser="+String.valueOf(userpermissionsmobileuser));
		sb.append(",forecastenabled="+String.valueOf(forecastenabled));
		sb.append(",userpreferenceshascelebrationbadge="+String.valueOf(userpreferenceshascelebrationbadge));
		sb.append(",numberoffailedlogins="+String.valueOf(numberoffailedlogins));
		sb.append(",senderemail="+senderemail);
		sb.append(",userpreferencesactivityreminderspopup="+String.valueOf(userpreferencesactivityreminderspopup));
		sb.append(",userpreferencesdiscommentafterlikeemail="+String.valueOf(userpreferencesdiscommentafterlikeemail));
		sb.append(",userpreferencesdismentionscommentemail="+String.valueOf(userpreferencesdismentionscommentemail));
		sb.append(",accountid="+accountid);
		sb.append(",companyname="+companyname);
		sb.append(",managerid="+managerid);
		sb.append(",userpreferencesreceivenonotificationsasapprover="+String.valueOf(userpreferencesreceivenonotificationsasapprover));
		sb.append(",userpreferenceshidesecondchatteronboardingsplash="+String.valueOf(userpreferenceshidesecondchatteronboardingsplash));
		sb.append(",lastvieweddate="+String.valueOf(lastvieweddate));
		sb.append(",userpreferencesdisablechangecommentemail="+String.valueOf(userpreferencesdisablechangecommentemail));
		sb.append(",userpreferenceshidecsngetchattermobiletask="+String.valueOf(userpreferenceshidecsngetchattermobiletask));
		sb.append(",bannerphotourl="+bannerphotourl);
		sb.append(",et4ae5__exacttargetusername__c="+et4ae5__exacttargetusername__c);
		sb.append(",userpreferencesdisableendorsementemail="+String.valueOf(userpreferencesdisableendorsementemail));
		sb.append(",userpreferencesfavoritesshowtopfavorites="+String.valueOf(userpreferencesfavoritesshowtopfavorites));
		sb.append(",offlinepdatrialexpirationdate="+String.valueOf(offlinepdatrialexpirationdate));
		sb.append(",timezonesidkey="+timezonesidkey);
		sb.append(",userpreferencesdisablelikeemail="+String.valueOf(userpreferencesdisablelikeemail));
		sb.append(",emailpreferencesautobccstayintouch="+String.valueOf(emailpreferencesautobccstayintouch));
		sb.append(",userpreferencesfavoriteswtshown="+String.valueOf(userpreferencesfavoriteswtshown));
		sb.append(",userpreferenceseventreminderscheckboxdefault="+String.valueOf(userpreferenceseventreminderscheckboxdefault));
		sb.append(",userpreferencespathassistantcollapsed="+String.valueOf(userpreferencespathassistantcollapsed));
		sb.append(",stayintouchsubject="+stayintouchsubject);
		sb.append(",city="+city);
		sb.append(",localesidkey="+localesidkey);
		sb.append(",name="+name);
		sb.append(",userpreferencesdisablebookmarkemail="+String.valueOf(userpreferencesdisablebookmarkemail));
		sb.append(",federationidentifier="+federationidentifier);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",fullphotourl="+fullphotourl);
		sb.append(",mobilephone="+mobilephone);
		sb.append(",userpreferencescreatelexappswtshown="+String.valueOf(userpreferencescreatelexappswtshown));
		sb.append(",userpreferencesenableautosubforfeeds="+String.valueOf(userpreferencesenableautosubforfeeds));
		sb.append(",userpreferencesshowpostalcodetoguestusers="+String.valueOf(userpreferencesshowpostalcodetoguestusers));
		sb.append(",division="+division);
		sb.append(",languagelocalekey="+languagelocalekey);
		sb.append(",userpreferencesshowmobilephonetoguestusers="+String.valueOf(userpreferencesshowmobilephonetoguestusers));
		sb.append(",userpreferencesdisableallfeedsemail="+String.valueOf(userpreferencesdisableallfeedsemail));
		sb.append(",userpreferencesshowcitytoexternalusers="+String.valueOf(userpreferencesshowcitytoexternalusers));
		sb.append(",et4ae5__exacttarget_oauth_token__c="+et4ae5__exacttarget_oauth_token__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",callcenterid="+callcenterid);
		sb.append(",userpreferencesshowmanagertoguestusers="+String.valueOf(userpreferencesshowmanagertoguestusers));
		sb.append(",phone="+phone);
		sb.append(",userpreferencesdisableprofilepostemail="+String.valueOf(userpreferencesdisableprofilepostemail));
		sb.append(",userpreferencesdisablelatercommentemail="+String.valueOf(userpreferencesdisablelatercommentemail));
		sb.append(",userpermissionscallcenterautologin="+String.valueOf(userpermissionscallcenterautologin));
		sb.append(",et4ae5__default_et_page__c="+et4ae5__default_et_page__c);
		sb.append(",userpreferencespipelineviewhidehelppopover="+String.valueOf(userpreferencespipelineviewhidehelppopover));
		sb.append(",userpreferencespreviewlightning="+String.valueOf(userpreferencespreviewlightning));
		sb.append(",userpreferencesshowworkphonetoexternalusers="+String.valueOf(userpreferencesshowworkphonetoexternalusers));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",userpreferencesshowfaxtoexternalusers="+String.valueOf(userpreferencesshowfaxtoexternalusers));
		sb.append(",lastpasswordchangedate="+String.valueOf(lastpasswordchangedate));
		sb.append(",userpreferenceshides1browserui="+String.valueOf(userpreferenceshides1browserui));
		sb.append(",userpreferencesrecordhomereservedwtshown="+String.valueOf(userpreferencesrecordhomereservedwtshown));
		sb.append(",userpreferencestaskreminderscheckboxdefault="+String.valueOf(userpreferencestaskreminderscheckboxdefault));
		sb.append(",userpreferencesshowemailtoexternalusers="+String.valueOf(userpreferencesshowemailtoexternalusers));
		sb.append(",offlinetrialexpirationdate="+String.valueOf(offlinetrialexpirationdate));
		sb.append(",isactive="+String.valueOf(isactive));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",smallbannerphotourl="+smallbannerphotourl);
		sb.append(",alias="+alias);
		sb.append(",emailencodingkey="+emailencodingkey);
		sb.append(",badgetext="+badgetext);
		sb.append(",userpreferencesdisablemessageemail="+String.valueOf(userpreferencesdisablemessageemail));
		sb.append(",lastmodifiedbyid="+lastmodifiedbyid);
		sb.append(",state="+state);
		sb.append(",userpreferencesdisablefilesharenotificationsforapi="+String.valueOf(userpreferencesdisablefilesharenotificationsforapi));
		sb.append(",mediumphotourl="+mediumphotourl);
		sb.append(",userpreferencesshowstreetaddresstoguestusers="+String.valueOf(userpreferencesshowstreetaddresstoguestusers));
		sb.append(",userpreferencesshowstatetoguestusers="+String.valueOf(userpreferencesshowstatetoguestusers));
		sb.append(",userpreferenceshidecsndesktoptask="+String.valueOf(userpreferenceshidecsndesktoptask));
		sb.append(",userpreferencesnewlightningreportrunpageenabled="+String.valueOf(userpreferencesnewlightningreportrunpageenabled));
		sb.append(",department="+department);
		sb.append(",userpreferencesexcludemailappattachments="+String.valueOf(userpreferencesexcludemailappattachments));
		sb.append(",defaultgroupnotificationfrequency="+defaultgroupnotificationfrequency);
		sb.append(",et4ae5__exacttargetforappexchangeadmin__c="+String.valueOf(et4ae5__exacttargetforappexchangeadmin__c));
		sb.append(",stayintouchnote="+stayintouchnote);
		sb.append(",userpreferencesglobalnavbarwtshown="+String.valueOf(userpreferencesglobalnavbarwtshown));
		sb.append(",userpreferenceshidesfxwelcomemat="+String.valueOf(userpreferenceshidesfxwelcomemat));
		sb.append(",et4ae5__validexacttargetadmin__c="+String.valueOf(et4ae5__validexacttargetadmin__c));
		sb.append(",individualid="+individualid);
		sb.append(",userpreferencesshowtitletoexternalusers="+String.valueOf(userpreferencesshowtitletoexternalusers));
		sb.append(",userpreferencessuppresseventsfxreminders="+String.valueOf(userpreferencessuppresseventsfxreminders));
		sb.append(",receivesinfoemails="+String.valueOf(receivesinfoemails));
		sb.append(",userpreferencessrhoverrideactivities="+String.valueOf(userpreferencessrhoverrideactivities));
		sb.append(",userpermissionsofflineuser="+String.valueOf(userpermissionsofflineuser));
		sb.append(",userpreferencesshowprofilepictoguestusers="+String.valueOf(userpreferencesshowprofilepictoguestusers));
		sb.append(",username="+username);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",userpreferencesshowcountrytoexternalusers="+String.valueOf(userpreferencesshowcountrytoexternalusers));
		sb.append(",country="+country);
		sb.append(",emailpreferencesstayintouchreminder="+String.valueOf(emailpreferencesstayintouchreminder));
		sb.append(",userpreferencescachediagnostics="+String.valueOf(userpreferencescachediagnostics));
		sb.append(",stayintouchsignature="+stayintouchsignature);
		sb.append(",emailpreferencesautobcc="+String.valueOf(emailpreferencesautobcc));
		sb.append(",communitynickname="+communitynickname);
		sb.append(",userpreferencesdisprofpostcommentemail="+String.valueOf(userpreferencesdisprofpostcommentemail));
		sb.append(",userpreferencesshowcountrytoguestusers="+String.valueOf(userpreferencesshowcountrytoguestusers));
		sb.append(",employeenumber="+employeenumber);
		sb.append(",geocodeaccuracy="+geocodeaccuracy);
		sb.append(",signature="+signature);
		sb.append(",userpermissionssfcontentuser="+String.valueOf(userpermissionssfcontentuser));
		sb.append(",postalcode="+postalcode);
		sb.append(",title="+title);
		sb.append(",userpreferencesdisablementionspostemail="+String.valueOf(userpreferencesdisablementionspostemail));
		sb.append(",userpreferencesapexpagesdevelopermode="+String.valueOf(userpreferencesapexpagesdevelopermode));
		sb.append(",userpreferencesdisablesharepostemail="+String.valueOf(userpreferencesdisablesharepostemail));
		sb.append(",et4ae5__validexacttargetuser__c="+String.valueOf(et4ae5__validexacttargetuser__c));
		sb.append(",digestfrequency="+digestfrequency);
		sb.append(",userpermissionsmarketinguser="+String.valueOf(userpermissionsmarketinguser));
		sb.append(",userpreferencesshowtitletoguestusers="+String.valueOf(userpreferencesshowtitletoguestusers));
		sb.append(",isprofilephotoactive="+String.valueOf(isprofilephotoactive));
		sb.append(",et4ae5__exacttargetforappexchangeuser__c="+String.valueOf(et4ae5__exacttargetforappexchangeuser__c));
		sb.append(",isextindicatorvisible="+String.valueOf(isextindicatorvisible));
		sb.append(",createdbyid="+createdbyid);
		sb.append(",userpreferenceshidelightningmigrationmodal="+String.valueOf(userpreferenceshidelightningmigrationmodal));
		sb.append(",userpreferenceslightningexperiencepreferred="+String.valueOf(userpreferenceslightningexperiencepreferred));
		sb.append(",firstname="+firstname);
		sb.append(",contactid="+contactid);
		sb.append(",userpreferencesshowstatetoexternalusers="+String.valueOf(userpreferencesshowstatetoexternalusers));
		sb.append(",userpreferencesshowstreetaddresstoexternalusers="+String.valueOf(userpreferencesshowstreetaddresstoexternalusers));
		sb.append(",userpreferenceshidechatteronboardingsplash="+String.valueOf(userpreferenceshidechatteronboardingsplash));
		sb.append(",userpreferencesglobalnavgridmenuwtshown="+String.valueOf(userpreferencesglobalnavgridmenuwtshown));
		sb.append(",email="+email);
		sb.append(",userroleid="+userroleid);
		sb.append(",userpreferencesshowemailtoguestusers="+String.valueOf(userpreferencesshowemailtoguestusers));
		sb.append(",userpreferencespreviewcustomtheme="+String.valueOf(userpreferencespreviewcustomtheme));
		sb.append(",lastreferenceddate="+String.valueOf(lastreferenceddate));
		sb.append(",fax="+fax);
		sb.append(",noodlecrm__default_owner__c="+String.valueOf(noodlecrm__default_owner__c));
		sb.append(",mediumbannerphotourl="+mediumbannerphotourl);
		sb.append(",userpreferencesshowworkphonetoguestusers="+String.valueOf(userpreferencesshowworkphonetoguestusers));
		sb.append(",userpreferencesshowfaxtoguestusers="+String.valueOf(userpreferencesshowfaxtoguestusers));
		sb.append(",extension="+extension);
		sb.append(",userpreferencesremindersoundoff="+String.valueOf(userpreferencesremindersoundoff));
		sb.append(",userpreferencesrecordhomesectioncollapsewtshown="+String.valueOf(userpreferencesrecordhomesectioncollapsewtshown));
		sb.append(",userpreferencesshowmanagertoexternalusers="+String.valueOf(userpreferencesshowmanagertoexternalusers));
		sb.append(",userpreferencessortfeedbycomment="+String.valueOf(userpreferencessortfeedbycomment));
		sb.append(",delegatedapproverid="+delegatedapproverid);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
out15Struct out15 = new out15Struct();
out16Struct out16 = new out16Struct();





	
	/**
	 * [tFileOutputDelimited_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_8", false);
		start_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out15");
					}
				
		int tos_count_tFileOutputDelimited_8 = 0;
		

String fileName_tFileOutputDelimited_8 = "";
                class FileOutputDelimitedUtil_tFileOutputDelimited_8{
                                    public void putHeaderValue_0(String[] headColutFileOutputDelimited_8)throws java.lang.Exception{
                                        headColutFileOutputDelimited_8[0]="userpreferencesshowmobilephonetoexternalusers";
                                        headColutFileOutputDelimited_8[1]="userpreferencesshowpostalcodetoexternalusers";
                                        headColutFileOutputDelimited_8[2]="sendername";
                                        headColutFileOutputDelimited_8[3]="userpreferencesreceivenotificationsasdelegatedapprover";
                                        headColutFileOutputDelimited_8[4]="userpreferencesshowcitytoguestusers";
                                        headColutFileOutputDelimited_8[5]="lastlogindate";
                                        headColutFileOutputDelimited_8[6]="userpreferencesuserdebugmodepref";
                                        headColutFileOutputDelimited_8[7]="userpreferenceshidebiggerphotocallout";
                                        headColutFileOutputDelimited_8[8]="lastname";
                                        headColutFileOutputDelimited_8[9]="userpermissionssupportuser";
                                        headColutFileOutputDelimited_8[10]="userpreferenceshideenduseronboardingassistantmodal";
                                        headColutFileOutputDelimited_8[11]="userpreferencesdisablefollowersemail";
                                        headColutFileOutputDelimited_8[12]="street";
                                        headColutFileOutputDelimited_8[13]="userpreferencessuppresstasksfxreminders";
                                        headColutFileOutputDelimited_8[14]="userpermissionsinteractionuser";
                                        headColutFileOutputDelimited_8[15]="profileid";
                                        headColutFileOutputDelimited_8[16]="receivesadmininfoemails";
                                        headColutFileOutputDelimited_8[17]="smallphotourl";
                                        headColutFileOutputDelimited_8[18]="usertype";
                                        headColutFileOutputDelimited_8[19]="aboutme";
                                        headColutFileOutputDelimited_8[20]="et4ae5__default_mid__c";
                                        headColutFileOutputDelimited_8[21]="outofofficemessage";
                                        headColutFileOutputDelimited_8[22]="userpermissionsmobileuser";
                                        headColutFileOutputDelimited_8[23]="forecastenabled";
                                        headColutFileOutputDelimited_8[24]="userpreferenceshascelebrationbadge";
                                        headColutFileOutputDelimited_8[25]="numberoffailedlogins";
                                        headColutFileOutputDelimited_8[26]="senderemail";
                                        headColutFileOutputDelimited_8[27]="userpreferencesactivityreminderspopup";
                                        headColutFileOutputDelimited_8[28]="userpreferencesdiscommentafterlikeemail";
                                        headColutFileOutputDelimited_8[29]="userpreferencesdismentionscommentemail";
                                        headColutFileOutputDelimited_8[30]="accountid";
                                        headColutFileOutputDelimited_8[31]="companyname";
                                        headColutFileOutputDelimited_8[32]="managerid";
                                        headColutFileOutputDelimited_8[33]="userpreferencesreceivenonotificationsasapprover";
                                        headColutFileOutputDelimited_8[34]="userpreferenceshidesecondchatteronboardingsplash";
                                        headColutFileOutputDelimited_8[35]="lastvieweddate";
                                        headColutFileOutputDelimited_8[36]="userpreferencesdisablechangecommentemail";
                                        headColutFileOutputDelimited_8[37]="userpreferenceshidecsngetchattermobiletask";
                                        headColutFileOutputDelimited_8[38]="bannerphotourl";
                                        headColutFileOutputDelimited_8[39]="et4ae5__exacttargetusername__c";
                                        headColutFileOutputDelimited_8[40]="userpreferencesdisableendorsementemail";
                                        headColutFileOutputDelimited_8[41]="userpreferencesfavoritesshowtopfavorites";
                                        headColutFileOutputDelimited_8[42]="offlinepdatrialexpirationdate";
                                        headColutFileOutputDelimited_8[43]="timezonesidkey";
                                        headColutFileOutputDelimited_8[44]="userpreferencesdisablelikeemail";
                                        headColutFileOutputDelimited_8[45]="emailpreferencesautobccstayintouch";
                                        headColutFileOutputDelimited_8[46]="userpreferencesfavoriteswtshown";
                                        headColutFileOutputDelimited_8[47]="userpreferenceseventreminderscheckboxdefault";
                                        headColutFileOutputDelimited_8[48]="userpreferencespathassistantcollapsed";
                                        headColutFileOutputDelimited_8[49]="stayintouchsubject";
                                        headColutFileOutputDelimited_8[50]="city";
                                        headColutFileOutputDelimited_8[51]="localesidkey";
                                        headColutFileOutputDelimited_8[52]="name";
                                        headColutFileOutputDelimited_8[53]="userpreferencesdisablebookmarkemail";
                                        headColutFileOutputDelimited_8[54]="federationidentifier";
                                        headColutFileOutputDelimited_8[55]="latitude";
                                        headColutFileOutputDelimited_8[56]="fullphotourl";
                                        headColutFileOutputDelimited_8[57]="mobilephone";
                                        headColutFileOutputDelimited_8[58]="userpreferencescreatelexappswtshown";
                                        headColutFileOutputDelimited_8[59]="userpreferencesenableautosubforfeeds";
                                        headColutFileOutputDelimited_8[60]="userpreferencesshowpostalcodetoguestusers";
                                        headColutFileOutputDelimited_8[61]="division";
                                        headColutFileOutputDelimited_8[62]="languagelocalekey";
                                        headColutFileOutputDelimited_8[63]="userpreferencesshowmobilephonetoguestusers";
                                        headColutFileOutputDelimited_8[64]="userpreferencesdisableallfeedsemail";
                                        headColutFileOutputDelimited_8[65]="userpreferencesshowcitytoexternalusers";
                                        headColutFileOutputDelimited_8[66]="et4ae5__exacttarget_oauth_token__c";
                                        headColutFileOutputDelimited_8[67]="lastmodifieddate";
                                        headColutFileOutputDelimited_8[68]="callcenterid";
                                        headColutFileOutputDelimited_8[69]="userpreferencesshowmanagertoguestusers";
                                        headColutFileOutputDelimited_8[70]="phone";
                                        headColutFileOutputDelimited_8[71]="userpreferencesdisableprofilepostemail";
                                        headColutFileOutputDelimited_8[72]="userpreferencesdisablelatercommentemail";
                                        headColutFileOutputDelimited_8[73]="userpermissionscallcenterautologin";
                                        headColutFileOutputDelimited_8[74]="et4ae5__default_et_page__c";
                                        headColutFileOutputDelimited_8[75]="userpreferencespipelineviewhidehelppopover";
                                        headColutFileOutputDelimited_8[76]="userpreferencespreviewlightning";
                                        headColutFileOutputDelimited_8[77]="userpreferencesshowworkphonetoexternalusers";
                                        headColutFileOutputDelimited_8[78]="longitude";
                                        headColutFileOutputDelimited_8[79]="userpreferencesshowfaxtoexternalusers";
                                        headColutFileOutputDelimited_8[80]="lastpasswordchangedate";
                                        headColutFileOutputDelimited_8[81]="userpreferenceshides1browserui";
                                        headColutFileOutputDelimited_8[82]="userpreferencesrecordhomereservedwtshown";
                                        headColutFileOutputDelimited_8[83]="userpreferencestaskreminderscheckboxdefault";
                                        headColutFileOutputDelimited_8[84]="userpreferencesshowemailtoexternalusers";
                                        headColutFileOutputDelimited_8[85]="offlinetrialexpirationdate";
                                        headColutFileOutputDelimited_8[86]="isactive";
                                        headColutFileOutputDelimited_8[87]="systemmodstamp";
                                        headColutFileOutputDelimited_8[88]="smallbannerphotourl";
                                        headColutFileOutputDelimited_8[89]="alias";
                                    }
                                    public void putHeaderValue_1(String[] headColutFileOutputDelimited_8)throws java.lang.Exception{
                                        headColutFileOutputDelimited_8[90]="emailencodingkey";
                                        headColutFileOutputDelimited_8[91]="badgetext";
                                        headColutFileOutputDelimited_8[92]="userpreferencesdisablemessageemail";
                                        headColutFileOutputDelimited_8[93]="lastmodifiedbyid";
                                        headColutFileOutputDelimited_8[94]="state";
                                        headColutFileOutputDelimited_8[95]="userpreferencesdisablefilesharenotificationsforapi";
                                        headColutFileOutputDelimited_8[96]="mediumphotourl";
                                        headColutFileOutputDelimited_8[97]="userpreferencesshowstreetaddresstoguestusers";
                                        headColutFileOutputDelimited_8[98]="userpreferencesshowstatetoguestusers";
                                        headColutFileOutputDelimited_8[99]="userpreferenceshidecsndesktoptask";
                                        headColutFileOutputDelimited_8[100]="userpreferencesnewlightningreportrunpageenabled";
                                        headColutFileOutputDelimited_8[101]="department";
                                        headColutFileOutputDelimited_8[102]="userpreferencesexcludemailappattachments";
                                        headColutFileOutputDelimited_8[103]="defaultgroupnotificationfrequency";
                                        headColutFileOutputDelimited_8[104]="et4ae5__exacttargetforappexchangeadmin__c";
                                        headColutFileOutputDelimited_8[105]="stayintouchnote";
                                        headColutFileOutputDelimited_8[106]="userpreferencesglobalnavbarwtshown";
                                        headColutFileOutputDelimited_8[107]="userpreferenceshidesfxwelcomemat";
                                        headColutFileOutputDelimited_8[108]="et4ae5__validexacttargetadmin__c";
                                        headColutFileOutputDelimited_8[109]="individualid";
                                        headColutFileOutputDelimited_8[110]="userpreferencesshowtitletoexternalusers";
                                        headColutFileOutputDelimited_8[111]="userpreferencessuppresseventsfxreminders";
                                        headColutFileOutputDelimited_8[112]="receivesinfoemails";
                                        headColutFileOutputDelimited_8[113]="userpreferencessrhoverrideactivities";
                                        headColutFileOutputDelimited_8[114]="userpermissionsofflineuser";
                                        headColutFileOutputDelimited_8[115]="userpreferencesshowprofilepictoguestusers";
                                        headColutFileOutputDelimited_8[116]="username";
                                        headColutFileOutputDelimited_8[117]="createddate";
                                        headColutFileOutputDelimited_8[118]="userpreferencesshowcountrytoexternalusers";
                                        headColutFileOutputDelimited_8[119]="country";
                                        headColutFileOutputDelimited_8[120]="emailpreferencesstayintouchreminder";
                                        headColutFileOutputDelimited_8[121]="userpreferencescachediagnostics";
                                        headColutFileOutputDelimited_8[122]="stayintouchsignature";
                                        headColutFileOutputDelimited_8[123]="emailpreferencesautobcc";
                                        headColutFileOutputDelimited_8[124]="communitynickname";
                                        headColutFileOutputDelimited_8[125]="userpreferencesdisprofpostcommentemail";
                                        headColutFileOutputDelimited_8[126]="userpreferencesshowcountrytoguestusers";
                                        headColutFileOutputDelimited_8[127]="employeenumber";
                                        headColutFileOutputDelimited_8[128]="geocodeaccuracy";
                                        headColutFileOutputDelimited_8[129]="signature";
                                        headColutFileOutputDelimited_8[130]="userpermissionssfcontentuser";
                                        headColutFileOutputDelimited_8[131]="postalcode";
                                        headColutFileOutputDelimited_8[132]="title";
                                        headColutFileOutputDelimited_8[133]="userpreferencesdisablementionspostemail";
                                        headColutFileOutputDelimited_8[134]="userpreferencesapexpagesdevelopermode";
                                        headColutFileOutputDelimited_8[135]="userpreferencesdisablesharepostemail";
                                        headColutFileOutputDelimited_8[136]="et4ae5__validexacttargetuser__c";
                                        headColutFileOutputDelimited_8[137]="digestfrequency";
                                        headColutFileOutputDelimited_8[138]="userpermissionsmarketinguser";
                                        headColutFileOutputDelimited_8[139]="userpreferencesshowtitletoguestusers";
                                        headColutFileOutputDelimited_8[140]="isprofilephotoactive";
                                        headColutFileOutputDelimited_8[141]="et4ae5__exacttargetforappexchangeuser__c";
                                        headColutFileOutputDelimited_8[142]="isextindicatorvisible";
                                        headColutFileOutputDelimited_8[143]="createdbyid";
                                        headColutFileOutputDelimited_8[144]="userpreferenceshidelightningmigrationmodal";
                                        headColutFileOutputDelimited_8[145]="userpreferenceslightningexperiencepreferred";
                                        headColutFileOutputDelimited_8[146]="firstname";
                                        headColutFileOutputDelimited_8[147]="contactid";
                                        headColutFileOutputDelimited_8[148]="userpreferencesshowstatetoexternalusers";
                                        headColutFileOutputDelimited_8[149]="userpreferencesshowstreetaddresstoexternalusers";
                                        headColutFileOutputDelimited_8[150]="userpreferenceshidechatteronboardingsplash";
                                        headColutFileOutputDelimited_8[151]="userpreferencesglobalnavgridmenuwtshown";
                                        headColutFileOutputDelimited_8[152]="email";
                                        headColutFileOutputDelimited_8[153]="userroleid";
                                        headColutFileOutputDelimited_8[154]="userpreferencesshowemailtoguestusers";
                                        headColutFileOutputDelimited_8[155]="userpreferencespreviewcustomtheme";
                                        headColutFileOutputDelimited_8[156]="lastreferenceddate";
                                        headColutFileOutputDelimited_8[157]="fax";
                                        headColutFileOutputDelimited_8[158]="noodlecrm__default_owner__c";
                                        headColutFileOutputDelimited_8[159]="mediumbannerphotourl";
                                        headColutFileOutputDelimited_8[160]="userpreferencesshowworkphonetoguestusers";
                                        headColutFileOutputDelimited_8[161]="userpreferencesshowfaxtoguestusers";
                                        headColutFileOutputDelimited_8[162]="extension";
                                        headColutFileOutputDelimited_8[163]="userpreferencesremindersoundoff";
                                        headColutFileOutputDelimited_8[164]="userpreferencesrecordhomesectioncollapsewtshown";
                                        headColutFileOutputDelimited_8[165]="userpreferencesshowmanagertoexternalusers";
                                        headColutFileOutputDelimited_8[166]="userpreferencessortfeedbycomment";
                                        headColutFileOutputDelimited_8[167]="delegatedapproverid";
                                        headColutFileOutputDelimited_8[168]="sfid";
                                        headColutFileOutputDelimited_8[169]="id";
                                }
                                public void putValue_0(final out15Struct out15,String[] rowtFileOutputDelimited_8){
                                    rowtFileOutputDelimited_8[0]=out15.userpreferencesshowmobilephonetoexternalusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowmobilephonetoexternalusers);
                                    rowtFileOutputDelimited_8[1]=out15.userpreferencesshowpostalcodetoexternalusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowpostalcodetoexternalusers);
                                    rowtFileOutputDelimited_8[2]=out15.sendername == null ? null : 
                                    out15.sendername;
                                    rowtFileOutputDelimited_8[3]=out15.userpreferencesreceivenotificationsasdelegatedapprover == null ? null : 
                                    String.valueOf(out15.userpreferencesreceivenotificationsasdelegatedapprover);
                                    rowtFileOutputDelimited_8[4]=out15.userpreferencesshowcitytoguestusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowcitytoguestusers);
                                    rowtFileOutputDelimited_8[5]=out15.lastlogindate == null ? null : 
                                    FormatterUtils.format_Date(out15.lastlogindate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_8[6]=out15.userpreferencesuserdebugmodepref == null ? null : 
                                    String.valueOf(out15.userpreferencesuserdebugmodepref);
                                    rowtFileOutputDelimited_8[7]=out15.userpreferenceshidebiggerphotocallout == null ? null : 
                                    String.valueOf(out15.userpreferenceshidebiggerphotocallout);
                                    rowtFileOutputDelimited_8[8]=out15.lastname == null ? null : 
                                    out15.lastname;
                                    rowtFileOutputDelimited_8[9]=out15.userpermissionssupportuser == null ? null : 
                                    String.valueOf(out15.userpermissionssupportuser);
                                    rowtFileOutputDelimited_8[10]=out15.userpreferenceshideenduseronboardingassistantmodal == null ? null : 
                                    String.valueOf(out15.userpreferenceshideenduseronboardingassistantmodal);
                                    rowtFileOutputDelimited_8[11]=out15.userpreferencesdisablefollowersemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdisablefollowersemail);
                                    rowtFileOutputDelimited_8[12]=out15.street == null ? null : 
                                    out15.street;
                                    rowtFileOutputDelimited_8[13]=out15.userpreferencessuppresstasksfxreminders == null ? null : 
                                    String.valueOf(out15.userpreferencessuppresstasksfxreminders);
                                    rowtFileOutputDelimited_8[14]=out15.userpermissionsinteractionuser == null ? null : 
                                    String.valueOf(out15.userpermissionsinteractionuser);
                                    rowtFileOutputDelimited_8[15]=out15.profileid == null ? null : 
                                    out15.profileid;
                                    rowtFileOutputDelimited_8[16]=out15.receivesadmininfoemails == null ? null : 
                                    String.valueOf(out15.receivesadmininfoemails);
                                    rowtFileOutputDelimited_8[17]=out15.smallphotourl == null ? null : 
                                    out15.smallphotourl;
                                    rowtFileOutputDelimited_8[18]=out15.usertype == null ? null : 
                                    out15.usertype;
                                    rowtFileOutputDelimited_8[19]=out15.aboutme == null ? null : 
                                    out15.aboutme;
                                    rowtFileOutputDelimited_8[20]=out15.et4ae5__default_mid__c == null ? null : 
                                    out15.et4ae5__default_mid__c;
                                    rowtFileOutputDelimited_8[21]=out15.outofofficemessage == null ? null : 
                                    out15.outofofficemessage;
                                    rowtFileOutputDelimited_8[22]=out15.userpermissionsmobileuser == null ? null : 
                                    String.valueOf(out15.userpermissionsmobileuser);
                                    rowtFileOutputDelimited_8[23]=out15.forecastenabled == null ? null : 
                                    String.valueOf(out15.forecastenabled);
                                    rowtFileOutputDelimited_8[24]=out15.userpreferenceshascelebrationbadge == null ? null : 
                                    String.valueOf(out15.userpreferenceshascelebrationbadge);
                                    rowtFileOutputDelimited_8[25]=out15.numberoffailedlogins == null ? null : 
                                    String.valueOf(out15.numberoffailedlogins);
                                    rowtFileOutputDelimited_8[26]=out15.senderemail == null ? null : 
                                    out15.senderemail;
                                    rowtFileOutputDelimited_8[27]=out15.userpreferencesactivityreminderspopup == null ? null : 
                                    String.valueOf(out15.userpreferencesactivityreminderspopup);
                                    rowtFileOutputDelimited_8[28]=out15.userpreferencesdiscommentafterlikeemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdiscommentafterlikeemail);
                                    rowtFileOutputDelimited_8[29]=out15.userpreferencesdismentionscommentemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdismentionscommentemail);
                                    rowtFileOutputDelimited_8[30]=out15.accountid == null ? null : 
                                    out15.accountid;
                                    rowtFileOutputDelimited_8[31]=out15.companyname == null ? null : 
                                    out15.companyname;
                                    rowtFileOutputDelimited_8[32]=out15.managerid == null ? null : 
                                    out15.managerid;
                                    rowtFileOutputDelimited_8[33]=out15.userpreferencesreceivenonotificationsasapprover == null ? null : 
                                    String.valueOf(out15.userpreferencesreceivenonotificationsasapprover);
                                    rowtFileOutputDelimited_8[34]=out15.userpreferenceshidesecondchatteronboardingsplash == null ? null : 
                                    String.valueOf(out15.userpreferenceshidesecondchatteronboardingsplash);
                                    rowtFileOutputDelimited_8[35]=out15.lastvieweddate == null ? null : 
                                    FormatterUtils.format_Date(out15.lastvieweddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_8[36]=out15.userpreferencesdisablechangecommentemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdisablechangecommentemail);
                                    rowtFileOutputDelimited_8[37]=out15.userpreferenceshidecsngetchattermobiletask == null ? null : 
                                    String.valueOf(out15.userpreferenceshidecsngetchattermobiletask);
                                    rowtFileOutputDelimited_8[38]=out15.bannerphotourl == null ? null : 
                                    out15.bannerphotourl;
                                    rowtFileOutputDelimited_8[39]=out15.et4ae5__exacttargetusername__c == null ? null : 
                                    out15.et4ae5__exacttargetusername__c;
                                    rowtFileOutputDelimited_8[40]=out15.userpreferencesdisableendorsementemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdisableendorsementemail);
                                    rowtFileOutputDelimited_8[41]=out15.userpreferencesfavoritesshowtopfavorites == null ? null : 
                                    String.valueOf(out15.userpreferencesfavoritesshowtopfavorites);
                                    rowtFileOutputDelimited_8[42]=out15.offlinepdatrialexpirationdate == null ? null : 
                                    FormatterUtils.format_Date(out15.offlinepdatrialexpirationdate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_8[43]=out15.timezonesidkey == null ? null : 
                                    out15.timezonesidkey;
                                    rowtFileOutputDelimited_8[44]=out15.userpreferencesdisablelikeemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdisablelikeemail);
                                    rowtFileOutputDelimited_8[45]=out15.emailpreferencesautobccstayintouch == null ? null : 
                                    String.valueOf(out15.emailpreferencesautobccstayintouch);
                                    rowtFileOutputDelimited_8[46]=out15.userpreferencesfavoriteswtshown == null ? null : 
                                    String.valueOf(out15.userpreferencesfavoriteswtshown);
                                    rowtFileOutputDelimited_8[47]=out15.userpreferenceseventreminderscheckboxdefault == null ? null : 
                                    String.valueOf(out15.userpreferenceseventreminderscheckboxdefault);
                                    rowtFileOutputDelimited_8[48]=out15.userpreferencespathassistantcollapsed == null ? null : 
                                    String.valueOf(out15.userpreferencespathassistantcollapsed);
                                    rowtFileOutputDelimited_8[49]=out15.stayintouchsubject == null ? null : 
                                    out15.stayintouchsubject;
                                    rowtFileOutputDelimited_8[50]=out15.city == null ? null : 
                                    out15.city;
                                    rowtFileOutputDelimited_8[51]=out15.localesidkey == null ? null : 
                                    out15.localesidkey;
                                    rowtFileOutputDelimited_8[52]=out15.name == null ? null : 
                                    out15.name;
                                    rowtFileOutputDelimited_8[53]=out15.userpreferencesdisablebookmarkemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdisablebookmarkemail);
                                    rowtFileOutputDelimited_8[54]=out15.federationidentifier == null ? null : 
                                    out15.federationidentifier;
                                    rowtFileOutputDelimited_8[55]=out15.latitude == null ? null : 
                                    String.valueOf(out15.latitude);
                                    rowtFileOutputDelimited_8[56]=out15.fullphotourl == null ? null : 
                                    out15.fullphotourl;
                                    rowtFileOutputDelimited_8[57]=out15.mobilephone == null ? null : 
                                    out15.mobilephone;
                                    rowtFileOutputDelimited_8[58]=out15.userpreferencescreatelexappswtshown == null ? null : 
                                    String.valueOf(out15.userpreferencescreatelexappswtshown);
                                    rowtFileOutputDelimited_8[59]=out15.userpreferencesenableautosubforfeeds == null ? null : 
                                    String.valueOf(out15.userpreferencesenableautosubforfeeds);
                                    rowtFileOutputDelimited_8[60]=out15.userpreferencesshowpostalcodetoguestusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowpostalcodetoguestusers);
                                    rowtFileOutputDelimited_8[61]=out15.division == null ? null : 
                                    out15.division;
                                    rowtFileOutputDelimited_8[62]=out15.languagelocalekey == null ? null : 
                                    out15.languagelocalekey;
                                    rowtFileOutputDelimited_8[63]=out15.userpreferencesshowmobilephonetoguestusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowmobilephonetoguestusers);
                                    rowtFileOutputDelimited_8[64]=out15.userpreferencesdisableallfeedsemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdisableallfeedsemail);
                                    rowtFileOutputDelimited_8[65]=out15.userpreferencesshowcitytoexternalusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowcitytoexternalusers);
                                    rowtFileOutputDelimited_8[66]=out15.et4ae5__exacttarget_oauth_token__c == null ? null : 
                                    out15.et4ae5__exacttarget_oauth_token__c;
                                    rowtFileOutputDelimited_8[67]=out15.lastmodifieddate == null ? null : 
                                    FormatterUtils.format_Date(out15.lastmodifieddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_8[68]=out15.callcenterid == null ? null : 
                                    out15.callcenterid;
                                    rowtFileOutputDelimited_8[69]=out15.userpreferencesshowmanagertoguestusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowmanagertoguestusers);
                                    rowtFileOutputDelimited_8[70]=out15.phone == null ? null : 
                                    out15.phone;
                                    rowtFileOutputDelimited_8[71]=out15.userpreferencesdisableprofilepostemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdisableprofilepostemail);
                                    rowtFileOutputDelimited_8[72]=out15.userpreferencesdisablelatercommentemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdisablelatercommentemail);
                                    rowtFileOutputDelimited_8[73]=out15.userpermissionscallcenterautologin == null ? null : 
                                    String.valueOf(out15.userpermissionscallcenterautologin);
                                    rowtFileOutputDelimited_8[74]=out15.et4ae5__default_et_page__c == null ? null : 
                                    out15.et4ae5__default_et_page__c;
                                    rowtFileOutputDelimited_8[75]=out15.userpreferencespipelineviewhidehelppopover == null ? null : 
                                    String.valueOf(out15.userpreferencespipelineviewhidehelppopover);
                                    rowtFileOutputDelimited_8[76]=out15.userpreferencespreviewlightning == null ? null : 
                                    String.valueOf(out15.userpreferencespreviewlightning);
                                    rowtFileOutputDelimited_8[77]=out15.userpreferencesshowworkphonetoexternalusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowworkphonetoexternalusers);
                                    rowtFileOutputDelimited_8[78]=out15.longitude == null ? null : 
                                    String.valueOf(out15.longitude);
                                    rowtFileOutputDelimited_8[79]=out15.userpreferencesshowfaxtoexternalusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowfaxtoexternalusers);
                                    rowtFileOutputDelimited_8[80]=out15.lastpasswordchangedate == null ? null : 
                                    FormatterUtils.format_Date(out15.lastpasswordchangedate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_8[81]=out15.userpreferenceshides1browserui == null ? null : 
                                    String.valueOf(out15.userpreferenceshides1browserui);
                                    rowtFileOutputDelimited_8[82]=out15.userpreferencesrecordhomereservedwtshown == null ? null : 
                                    String.valueOf(out15.userpreferencesrecordhomereservedwtshown);
                                    rowtFileOutputDelimited_8[83]=out15.userpreferencestaskreminderscheckboxdefault == null ? null : 
                                    String.valueOf(out15.userpreferencestaskreminderscheckboxdefault);
                                    rowtFileOutputDelimited_8[84]=out15.userpreferencesshowemailtoexternalusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowemailtoexternalusers);
                                    rowtFileOutputDelimited_8[85]=out15.offlinetrialexpirationdate == null ? null : 
                                    FormatterUtils.format_Date(out15.offlinetrialexpirationdate, "dd-MM-yyyy");
                                    rowtFileOutputDelimited_8[86]=out15.isactive == null ? null : 
                                    String.valueOf(out15.isactive);
                                    rowtFileOutputDelimited_8[87]=out15.systemmodstamp == null ? null : 
                                    FormatterUtils.format_Date(out15.systemmodstamp, "dd-MM-yyyy");
                                    rowtFileOutputDelimited_8[88]=out15.smallbannerphotourl == null ? null : 
                                    out15.smallbannerphotourl;
                                    rowtFileOutputDelimited_8[89]=out15.alias == null ? null : 
                                    out15.alias;
                                }
                                public void putValue_1(final out15Struct out15,String[] rowtFileOutputDelimited_8){
                                    rowtFileOutputDelimited_8[90]=out15.emailencodingkey == null ? null : 
                                    out15.emailencodingkey;
                                    rowtFileOutputDelimited_8[91]=out15.badgetext == null ? null : 
                                    out15.badgetext;
                                    rowtFileOutputDelimited_8[92]=out15.userpreferencesdisablemessageemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdisablemessageemail);
                                    rowtFileOutputDelimited_8[93]=out15.lastmodifiedbyid == null ? null : 
                                    out15.lastmodifiedbyid;
                                    rowtFileOutputDelimited_8[94]=out15.state == null ? null : 
                                    out15.state;
                                    rowtFileOutputDelimited_8[95]=out15.userpreferencesdisablefilesharenotificationsforapi == null ? null : 
                                    String.valueOf(out15.userpreferencesdisablefilesharenotificationsforapi);
                                    rowtFileOutputDelimited_8[96]=out15.mediumphotourl == null ? null : 
                                    out15.mediumphotourl;
                                    rowtFileOutputDelimited_8[97]=out15.userpreferencesshowstreetaddresstoguestusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowstreetaddresstoguestusers);
                                    rowtFileOutputDelimited_8[98]=out15.userpreferencesshowstatetoguestusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowstatetoguestusers);
                                    rowtFileOutputDelimited_8[99]=out15.userpreferenceshidecsndesktoptask == null ? null : 
                                    String.valueOf(out15.userpreferenceshidecsndesktoptask);
                                    rowtFileOutputDelimited_8[100]=out15.userpreferencesnewlightningreportrunpageenabled == null ? null : 
                                    String.valueOf(out15.userpreferencesnewlightningreportrunpageenabled);
                                    rowtFileOutputDelimited_8[101]=out15.department == null ? null : 
                                    out15.department;
                                    rowtFileOutputDelimited_8[102]=out15.userpreferencesexcludemailappattachments == null ? null : 
                                    String.valueOf(out15.userpreferencesexcludemailappattachments);
                                    rowtFileOutputDelimited_8[103]=out15.defaultgroupnotificationfrequency == null ? null : 
                                    out15.defaultgroupnotificationfrequency;
                                    rowtFileOutputDelimited_8[104]=out15.et4ae5__exacttargetforappexchangeadmin__c == null ? null : 
                                    String.valueOf(out15.et4ae5__exacttargetforappexchangeadmin__c);
                                    rowtFileOutputDelimited_8[105]=out15.stayintouchnote == null ? null : 
                                    out15.stayintouchnote;
                                    rowtFileOutputDelimited_8[106]=out15.userpreferencesglobalnavbarwtshown == null ? null : 
                                    String.valueOf(out15.userpreferencesglobalnavbarwtshown);
                                    rowtFileOutputDelimited_8[107]=out15.userpreferenceshidesfxwelcomemat == null ? null : 
                                    String.valueOf(out15.userpreferenceshidesfxwelcomemat);
                                    rowtFileOutputDelimited_8[108]=out15.et4ae5__validexacttargetadmin__c == null ? null : 
                                    String.valueOf(out15.et4ae5__validexacttargetadmin__c);
                                    rowtFileOutputDelimited_8[109]=out15.individualid == null ? null : 
                                    out15.individualid;
                                    rowtFileOutputDelimited_8[110]=out15.userpreferencesshowtitletoexternalusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowtitletoexternalusers);
                                    rowtFileOutputDelimited_8[111]=out15.userpreferencessuppresseventsfxreminders == null ? null : 
                                    String.valueOf(out15.userpreferencessuppresseventsfxreminders);
                                    rowtFileOutputDelimited_8[112]=out15.receivesinfoemails == null ? null : 
                                    String.valueOf(out15.receivesinfoemails);
                                    rowtFileOutputDelimited_8[113]=out15.userpreferencessrhoverrideactivities == null ? null : 
                                    String.valueOf(out15.userpreferencessrhoverrideactivities);
                                    rowtFileOutputDelimited_8[114]=out15.userpermissionsofflineuser == null ? null : 
                                    String.valueOf(out15.userpermissionsofflineuser);
                                    rowtFileOutputDelimited_8[115]=out15.userpreferencesshowprofilepictoguestusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowprofilepictoguestusers);
                                    rowtFileOutputDelimited_8[116]=out15.username == null ? null : 
                                    out15.username;
                                    rowtFileOutputDelimited_8[117]=out15.createddate == null ? null : 
                                    FormatterUtils.format_Date(out15.createddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_8[118]=out15.userpreferencesshowcountrytoexternalusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowcountrytoexternalusers);
                                    rowtFileOutputDelimited_8[119]=out15.country == null ? null : 
                                    out15.country;
                                    rowtFileOutputDelimited_8[120]=out15.emailpreferencesstayintouchreminder == null ? null : 
                                    String.valueOf(out15.emailpreferencesstayintouchreminder);
                                    rowtFileOutputDelimited_8[121]=out15.userpreferencescachediagnostics == null ? null : 
                                    String.valueOf(out15.userpreferencescachediagnostics);
                                    rowtFileOutputDelimited_8[122]=out15.stayintouchsignature == null ? null : 
                                    out15.stayintouchsignature;
                                    rowtFileOutputDelimited_8[123]=out15.emailpreferencesautobcc == null ? null : 
                                    String.valueOf(out15.emailpreferencesautobcc);
                                    rowtFileOutputDelimited_8[124]=out15.communitynickname == null ? null : 
                                    out15.communitynickname;
                                    rowtFileOutputDelimited_8[125]=out15.userpreferencesdisprofpostcommentemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdisprofpostcommentemail);
                                    rowtFileOutputDelimited_8[126]=out15.userpreferencesshowcountrytoguestusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowcountrytoguestusers);
                                    rowtFileOutputDelimited_8[127]=out15.employeenumber == null ? null : 
                                    out15.employeenumber;
                                    rowtFileOutputDelimited_8[128]=out15.geocodeaccuracy == null ? null : 
                                    out15.geocodeaccuracy;
                                    rowtFileOutputDelimited_8[129]=out15.signature == null ? null : 
                                    out15.signature;
                                    rowtFileOutputDelimited_8[130]=out15.userpermissionssfcontentuser == null ? null : 
                                    String.valueOf(out15.userpermissionssfcontentuser);
                                    rowtFileOutputDelimited_8[131]=out15.postalcode == null ? null : 
                                    out15.postalcode;
                                    rowtFileOutputDelimited_8[132]=out15.title == null ? null : 
                                    out15.title;
                                    rowtFileOutputDelimited_8[133]=out15.userpreferencesdisablementionspostemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdisablementionspostemail);
                                    rowtFileOutputDelimited_8[134]=out15.userpreferencesapexpagesdevelopermode == null ? null : 
                                    String.valueOf(out15.userpreferencesapexpagesdevelopermode);
                                    rowtFileOutputDelimited_8[135]=out15.userpreferencesdisablesharepostemail == null ? null : 
                                    String.valueOf(out15.userpreferencesdisablesharepostemail);
                                    rowtFileOutputDelimited_8[136]=out15.et4ae5__validexacttargetuser__c == null ? null : 
                                    String.valueOf(out15.et4ae5__validexacttargetuser__c);
                                    rowtFileOutputDelimited_8[137]=out15.digestfrequency == null ? null : 
                                    out15.digestfrequency;
                                    rowtFileOutputDelimited_8[138]=out15.userpermissionsmarketinguser == null ? null : 
                                    String.valueOf(out15.userpermissionsmarketinguser);
                                    rowtFileOutputDelimited_8[139]=out15.userpreferencesshowtitletoguestusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowtitletoguestusers);
                                    rowtFileOutputDelimited_8[140]=out15.isprofilephotoactive == null ? null : 
                                    String.valueOf(out15.isprofilephotoactive);
                                    rowtFileOutputDelimited_8[141]=out15.et4ae5__exacttargetforappexchangeuser__c == null ? null : 
                                    String.valueOf(out15.et4ae5__exacttargetforappexchangeuser__c);
                                    rowtFileOutputDelimited_8[142]=out15.isextindicatorvisible == null ? null : 
                                    String.valueOf(out15.isextindicatorvisible);
                                    rowtFileOutputDelimited_8[143]=out15.createdbyid == null ? null : 
                                    out15.createdbyid;
                                    rowtFileOutputDelimited_8[144]=out15.userpreferenceshidelightningmigrationmodal == null ? null : 
                                    String.valueOf(out15.userpreferenceshidelightningmigrationmodal);
                                    rowtFileOutputDelimited_8[145]=out15.userpreferenceslightningexperiencepreferred == null ? null : 
                                    String.valueOf(out15.userpreferenceslightningexperiencepreferred);
                                    rowtFileOutputDelimited_8[146]=out15.firstname == null ? null : 
                                    out15.firstname;
                                    rowtFileOutputDelimited_8[147]=out15.contactid == null ? null : 
                                    out15.contactid;
                                    rowtFileOutputDelimited_8[148]=out15.userpreferencesshowstatetoexternalusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowstatetoexternalusers);
                                    rowtFileOutputDelimited_8[149]=out15.userpreferencesshowstreetaddresstoexternalusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowstreetaddresstoexternalusers);
                                    rowtFileOutputDelimited_8[150]=out15.userpreferenceshidechatteronboardingsplash == null ? null : 
                                    String.valueOf(out15.userpreferenceshidechatteronboardingsplash);
                                    rowtFileOutputDelimited_8[151]=out15.userpreferencesglobalnavgridmenuwtshown == null ? null : 
                                    String.valueOf(out15.userpreferencesglobalnavgridmenuwtshown);
                                    rowtFileOutputDelimited_8[152]=out15.email == null ? null : 
                                    out15.email;
                                    rowtFileOutputDelimited_8[153]=out15.userroleid == null ? null : 
                                    out15.userroleid;
                                    rowtFileOutputDelimited_8[154]=out15.userpreferencesshowemailtoguestusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowemailtoguestusers);
                                    rowtFileOutputDelimited_8[155]=out15.userpreferencespreviewcustomtheme == null ? null : 
                                    String.valueOf(out15.userpreferencespreviewcustomtheme);
                                    rowtFileOutputDelimited_8[156]=out15.lastreferenceddate == null ? null : 
                                    FormatterUtils.format_Date(out15.lastreferenceddate, "yyyy-MM-dd HH:mm:ss");
                                    rowtFileOutputDelimited_8[157]=out15.fax == null ? null : 
                                    out15.fax;
                                    rowtFileOutputDelimited_8[158]=out15.noodlecrm__default_owner__c == null ? null : 
                                    String.valueOf(out15.noodlecrm__default_owner__c);
                                    rowtFileOutputDelimited_8[159]=out15.mediumbannerphotourl == null ? null : 
                                    out15.mediumbannerphotourl;
                                    rowtFileOutputDelimited_8[160]=out15.userpreferencesshowworkphonetoguestusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowworkphonetoguestusers);
                                    rowtFileOutputDelimited_8[161]=out15.userpreferencesshowfaxtoguestusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowfaxtoguestusers);
                                    rowtFileOutputDelimited_8[162]=out15.extension == null ? null : 
                                    out15.extension;
                                    rowtFileOutputDelimited_8[163]=out15.userpreferencesremindersoundoff == null ? null : 
                                    String.valueOf(out15.userpreferencesremindersoundoff);
                                    rowtFileOutputDelimited_8[164]=out15.userpreferencesrecordhomesectioncollapsewtshown == null ? null : 
                                    String.valueOf(out15.userpreferencesrecordhomesectioncollapsewtshown);
                                    rowtFileOutputDelimited_8[165]=out15.userpreferencesshowmanagertoexternalusers == null ? null : 
                                    String.valueOf(out15.userpreferencesshowmanagertoexternalusers);
                                    rowtFileOutputDelimited_8[166]=out15.userpreferencessortfeedbycomment == null ? null : 
                                    String.valueOf(out15.userpreferencessortfeedbycomment);
                                    rowtFileOutputDelimited_8[167]=out15.delegatedapproverid == null ? null : 
                                    out15.delegatedapproverid;
                                    rowtFileOutputDelimited_8[168]=out15.sfid == null ? null : 
                                    out15.sfid;
                                    rowtFileOutputDelimited_8[169]=
                                    String.valueOf(out15.id);
                            }
                }
                FileOutputDelimitedUtil_tFileOutputDelimited_8 fileOutputDelimitedUtil_tFileOutputDelimited_8=new FileOutputDelimitedUtil_tFileOutputDelimited_8();
    fileName_tFileOutputDelimited_8 = (new java.io.File(context.staging_S3_dir + "user.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_8 = null;
    String extension_tFileOutputDelimited_8 = null;
    String directory_tFileOutputDelimited_8 = null;
    if((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
            extension_tFileOutputDelimited_8 = "";
        } else {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("."));
            extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("."));
            extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
            extension_tFileOutputDelimited_8 = "";
        }
        directory_tFileOutputDelimited_8 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_8 = true;
    java.io.File filetFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
    globalMap.put("tFileOutputDelimited_8_FILE_NAME",fileName_tFileOutputDelimited_8);
                String[] headColutFileOutputDelimited_8=new String[170];
            class CSVBasicSet_tFileOutputDelimited_8{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_8[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_8 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_8[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_8[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_8 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_8[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_8[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_8 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_8[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_8 = 0;
            int splitedFileNo_tFileOutputDelimited_8 =0;
            int currentRow_tFileOutputDelimited_8 = 0;


            CSVBasicSet_tFileOutputDelimited_8 csvSettings_tFileOutputDelimited_8 = new CSVBasicSet_tFileOutputDelimited_8();
            csvSettings_tFileOutputDelimited_8.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_8.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_8.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_8 != null && directory_tFileOutputDelimited_8.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_8 = new java.io.File(directory_tFileOutputDelimited_8);
                        if(!dir_tFileOutputDelimited_8.exists()) {
                            dir_tFileOutputDelimited_8.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_8 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
                            if(fileToDelete_tFileOutputDelimited_8.exists()) {
                                fileToDelete_tFileOutputDelimited_8.delete();
                            }
                            CsvWritertFileOutputDelimited_8 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_8, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_8.setSeparator(csvSettings_tFileOutputDelimited_8.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_8.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_8.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_8.setLineEnd(""+csvSettings_tFileOutputDelimited_8.getRowDelim());
                    }
                        if(filetFileOutputDelimited_8.length()==0){
                                        fileOutputDelimitedUtil_tFileOutputDelimited_8.putHeaderValue_0(headColutFileOutputDelimited_8);
                                        fileOutputDelimitedUtil_tFileOutputDelimited_8.putHeaderValue_1(headColutFileOutputDelimited_8);
                            CsvWritertFileOutputDelimited_8.writeNext(headColutFileOutputDelimited_8);
                            CsvWritertFileOutputDelimited_8.flush();
                        }
                CsvWritertFileOutputDelimited_8.setEscapeChar(csvSettings_tFileOutputDelimited_8.getEscapeChar());
                CsvWritertFileOutputDelimited_8.setQuoteChar(csvSettings_tFileOutputDelimited_8.getTextEnclosure());
                CsvWritertFileOutputDelimited_8.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_8", CsvWritertFileOutputDelimited_8);
resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

 



/**
 * [tFileOutputDelimited_8 begin ] stop
 */




	
	/**
	 * [tDBOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_8", false);
		start_Hash.put("tDBOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out16");
					}
				
		int tos_count_tDBOutput_8 = 0;
		





String dbschema_tDBOutput_8 = null;
	dbschema_tDBOutput_8 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_8 = null;
if(dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
	tableName_tDBOutput_8 = ("user");
} else {
	tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "\".\"" + ("user");
}

int nb_line_tDBOutput_8 = 0;
int nb_line_update_tDBOutput_8 = 0;
int nb_line_inserted_tDBOutput_8 = 0;
int nb_line_deleted_tDBOutput_8 = 0;
int nb_line_rejected_tDBOutput_8 = 0;

int deletedCount_tDBOutput_8=0;
int updatedCount_tDBOutput_8=0;
int insertedCount_tDBOutput_8=0;
int rejectedCount_tDBOutput_8=0;

boolean whetherReject_tDBOutput_8 = false;

java.sql.Connection conn_tDBOutput_8 = null;
String dbUser_tDBOutput_8 = null;

	conn_tDBOutput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_8 = 100000;
   int batchSizeCounter_tDBOutput_8=0;

int count_tDBOutput_8=0;
            try (java.sql.Statement stmtClear_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                stmtClear_tDBOutput_8.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_8 + "\"");
            }
	    String insert_tDBOutput_8 = "INSERT INTO \"" + tableName_tDBOutput_8 + "\" (\"userpreferencesshowmobilephonetoexternalusers\",\"userpreferencesshowpostalcodetoexternalusers\",\"sendername\",\"userpreferencesreceivenotificationsasdelegatedapprover\",\"userpreferencesshowcitytoguestusers\",\"lastlogindate\",\"userpreferencesuserdebugmodepref\",\"userpreferenceshidebiggerphotocallout\",\"lastname\",\"userpermissionssupportuser\",\"userpreferenceshideenduseronboardingassistantmodal\",\"userpreferencesdisablefollowersemail\",\"street\",\"userpreferencessuppresstasksfxreminders\",\"userpermissionsinteractionuser\",\"profileid\",\"receivesadmininfoemails\",\"smallphotourl\",\"usertype\",\"aboutme\",\"et4ae5__default_mid__c\",\"outofofficemessage\",\"userpermissionsmobileuser\",\"forecastenabled\",\"userpreferenceshascelebrationbadge\",\"numberoffailedlogins\",\"senderemail\",\"userpreferencesactivityreminderspopup\",\"userpreferencesdiscommentafterlikeemail\",\"userpreferencesdismentionscommentemail\",\"accountid\",\"companyname\",\"managerid\",\"userpreferencesreceivenonotificationsasapprover\",\"userpreferenceshidesecondchatteronboardingsplash\",\"lastvieweddate\",\"userpreferencesdisablechangecommentemail\",\"userpreferenceshidecsngetchattermobiletask\",\"bannerphotourl\",\"et4ae5__exacttargetusername__c\",\"userpreferencesdisableendorsementemail\",\"userpreferencesfavoritesshowtopfavorites\",\"offlinepdatrialexpirationdate\",\"timezonesidkey\",\"userpreferencesdisablelikeemail\",\"emailpreferencesautobccstayintouch\",\"userpreferencesfavoriteswtshown\",\"userpreferenceseventreminderscheckboxdefault\",\"userpreferencespathassistantcollapsed\",\"stayintouchsubject\",\"city\",\"localesidkey\",\"name\",\"userpreferencesdisablebookmarkemail\",\"federationidentifier\",\"latitude\",\"fullphotourl\",\"mobilephone\",\"userpreferencescreatelexappswtshown\",\"userpreferencesenableautosubforfeeds\",\"userpreferencesshowpostalcodetoguestusers\",\"division\",\"languagelocalekey\",\"userpreferencesshowmobilephonetoguestusers\",\"userpreferencesdisableallfeedsemail\",\"userpreferencesshowcitytoexternalusers\",\"et4ae5__exacttarget_oauth_token__c\",\"lastmodifieddate\",\"callcenterid\",\"userpreferencesshowmanagertoguestusers\",\"phone\",\"userpreferencesdisableprofilepostemail\",\"userpreferencesdisablelatercommentemail\",\"userpermissionscallcenterautologin\",\"et4ae5__default_et_page__c\",\"userpreferencespipelineviewhidehelppopover\",\"userpreferencespreviewlightning\",\"userpreferencesshowworkphonetoexternalusers\",\"longitude\",\"userpreferencesshowfaxtoexternalusers\",\"lastpasswordchangedate\",\"userpreferenceshides1browserui\",\"userpreferencesrecordhomereservedwtshown\",\"userpreferencestaskreminderscheckboxdefault\",\"userpreferencesshowemailtoexternalusers\",\"offlinetrialexpirationdate\",\"isactive\",\"systemmodstamp\",\"smallbannerphotourl\",\"alias\",\"emailencodingkey\",\"badgetext\",\"userpreferencesdisablemessageemail\",\"lastmodifiedbyid\",\"state\",\"userpreferencesdisablefilesharenotificationsforapi\",\"mediumphotourl\",\"userpreferencesshowstreetaddresstoguestusers\",\"userpreferencesshowstatetoguestusers\",\"userpreferenceshidecsndesktoptask\",\"userpreferencesnewlightningreportrunpageenabled\",\"department\",\"userpreferencesexcludemailappattachments\",\"defaultgroupnotificationfrequency\",\"et4ae5__exacttargetforappexchangeadmin__c\",\"stayintouchnote\",\"userpreferencesglobalnavbarwtshown\",\"userpreferenceshidesfxwelcomemat\",\"et4ae5__validexacttargetadmin__c\",\"individualid\",\"userpreferencesshowtitletoexternalusers\",\"userpreferencessuppresseventsfxreminders\",\"receivesinfoemails\",\"userpreferencessrhoverrideactivities\",\"userpermissionsofflineuser\",\"userpreferencesshowprofilepictoguestusers\",\"username\",\"createddate\",\"userpreferencesshowcountrytoexternalusers\",\"country\",\"emailpreferencesstayintouchreminder\",\"userpreferencescachediagnostics\",\"stayintouchsignature\",\"emailpreferencesautobcc\",\"communitynickname\",\"userpreferencesdisprofpostcommentemail\",\"userpreferencesshowcountrytoguestusers\",\"employeenumber\",\"geocodeaccuracy\",\"signature\",\"userpermissionssfcontentuser\",\"postalcode\",\"title\",\"userpreferencesdisablementionspostemail\",\"userpreferencesapexpagesdevelopermode\",\"userpreferencesdisablesharepostemail\",\"et4ae5__validexacttargetuser__c\",\"digestfrequency\",\"userpermissionsmarketinguser\",\"userpreferencesshowtitletoguestusers\",\"isprofilephotoactive\",\"et4ae5__exacttargetforappexchangeuser__c\",\"isextindicatorvisible\",\"createdbyid\",\"userpreferenceshidelightningmigrationmodal\",\"userpreferenceslightningexperiencepreferred\",\"firstname\",\"contactid\",\"userpreferencesshowstatetoexternalusers\",\"userpreferencesshowstreetaddresstoexternalusers\",\"userpreferenceshidechatteronboardingsplash\",\"userpreferencesglobalnavgridmenuwtshown\",\"email\",\"userroleid\",\"userpreferencesshowemailtoguestusers\",\"userpreferencespreviewcustomtheme\",\"lastreferenceddate\",\"fax\",\"noodlecrm__default_owner__c\",\"mediumbannerphotourl\",\"userpreferencesshowworkphonetoguestusers\",\"userpreferencesshowfaxtoguestusers\",\"extension\",\"userpreferencesremindersoundoff\",\"userpreferencesrecordhomesectioncollapsewtshown\",\"userpreferencesshowmanagertoexternalusers\",\"userpreferencessortfeedbycomment\",\"delegatedapproverid\",\"sfid\",\"id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
	    resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);
	    

 



/**
 * [tDBOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
out15Struct out15_tmp = new out15Struct();
out16Struct out16_tmp = new out16Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				conn_tDBInput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT \n  userpreferencesshowmobilephonetoexternalusers, \n  userpreferencesshowpostalcodetoexternalusers, \n  sendern"
+"ame, \n  userpreferencesreceivenotificationsasdelegatedapprover, \n  userpreferencesshowcitytoguestusers, \n  lastlogind"
+"ate, \n  userpreferencesuserdebugmodepref, \n  userpreferenceshidebiggerphotocallout, \n  lastname, \n  userpermissionss"
+"upportuser, \n  userpreferenceshideenduseronboardingassistantmodal, \n  userpreferencesdisablefollowersemail, \n  street"
+", \n  userpreferencessuppresstasksfxreminders, \n  userpermissionsinteractionuser, \n  profileid, \n  receivesadmininfoe"
+"mails, \n  smallphotourl, \n  usertype, \n  aboutme, \n  et4ae5__default_mid__c, \n  outofofficemessage, \n  userpermiss"
+"ionsmobileuser, \n  forecastenabled, \n  userpreferenceshascelebrationbadge, \n  numberoffailedlogins, \n  senderemail, "
+"\n  userpreferencesactivityreminderspopup, \n  userpreferencesdiscommentafterlikeemail, \n  userpreferencesdismentionsco"
+"mmentemail, \n  accountid, \n  companyname, \n  managerid, \n  userpreferencesreceivenonotificationsasapprover, \n  user"
+"preferenceshidesecondchatteronboardingsplash, \n  lastvieweddate, \n  userpreferencesdisablechangecommentemail, \n  user"
+"preferenceshidecsngetchattermobiletask, \n  bannerphotourl, \n  et4ae5__exacttargetusername__c, \n  userpreferencesdisab"
+"leendorsementemail, \n  userpreferencesfavoritesshowtopfavorites, \n  offlinepdatrialexpirationdate, \n  timezonesidkey,"
+" \n  userpreferencesdisablelikeemail, \n  emailpreferencesautobccstayintouch, \n  userpreferencesfavoriteswtshown, \n  u"
+"serpreferenceseventreminderscheckboxdefault, \n  userpreferencespathassistantcollapsed, \n  stayintouchsubject, \n  city"
+", \n  localesidkey, \n  name, \n  userpreferencesdisablebookmarkemail, \n  federationidentifier, \n  latitude, \n  fullp"
+"hotourl, \n  mobilephone, \n  userpreferencescreatelexappswtshown, \n  userpreferencesenableautosubforfeeds, \n  userpre"
+"ferencesshowpostalcodetoguestusers, \n  division, \n  languagelocalekey, \n  userpreferencesshowmobilephonetoguestusers,"
+" \n  userpreferencesdisableallfeedsemail, \n  userpreferencesshowcitytoexternalusers, \n  et4ae5__exacttarget_oauth_toke"
+"n__c, \n  lastmodifieddate, \n  callcenterid, \n  userpreferencesshowmanagertoguestusers, \n  phone, \n  userpreferences"
+"disableprofilepostemail, \n  userpreferencesdisablelatercommentemail, \n  userpermissionscallcenterautologin, \n  et4ae5"
+"__default_et_page__c, \n  userpreferencespipelineviewhidehelppopover, \n  userpreferencespreviewlightning, \n  userprefe"
+"rencesshowworkphonetoexternalusers, \n  longitude, \n  userpreferencesshowfaxtoexternalusers, \n  lastpasswordchangedate"
+", \n  userpreferenceshides1browserui, \n  userpreferencesrecordhomereservedwtshown, \n  userpreferencestaskreminderschec"
+"kboxdefault, \n  userpreferencesshowemailtoexternalusers, \n  offlinetrialexpirationdate, \n  isactive, \n  systemmodsta"
+"mp, \n  smallbannerphotourl, \n  alias, \n  emailencodingkey, \n  badgetext, \n  userpreferencesdisablemessageemail, \n "
+" lastmodifiedbyid, \n  state, \n  userpreferencesdisablefilesharenotificationsforapi, \n  mediumphotourl, \n  userprefer"
+"encesshowstreetaddresstoguestusers, \n  userpreferencesshowstatetoguestusers, \n  userpreferenceshidecsndesktoptask, \n "
+" userpreferencesnewlightningreportrunpageenabled, \n  department, \n  userpreferencesexcludemailappattachments, \n  defa"
+"ultgroupnotificationfrequency, \n  et4ae5__exacttargetforappexchangeadmin__c, \n  stayintouchnote, \n  userpreferencesgl"
+"obalnavbarwtshown, \n  userpreferenceshidesfxwelcomemat, \n  et4ae5__validexacttargetadmin__c, \n  individualid, \n  use"
+"rpreferencesshowtitletoexternalusers, \n  userpreferencessuppresseventsfxreminders, \n  receivesinfoemails, \n  userpref"
+"erencessrhoverrideactivities, \n  userpermissionsofflineuser, \n  userpreferencesshowprofilepictoguestusers, \n  usernam"
+"e, \n  createddate, \n  userpreferencesshowcountrytoexternalusers, \n  country, \n  emailpreferencesstayintouchreminder,"
+" \n  userpreferencescachediagnostics, \n  stayintouchsignature, \n  emailpreferencesautobcc, \n  communitynickname, \n  "
+"userpreferencesdisprofpostcommentemail, \n  userpreferencesshowcountrytoguestusers, \n  employeenumber, \n  geocodeaccur"
+"acy, \n  signature, \n  userpermissionssfcontentuser, \n  postalcode, \n  title, \n  userpreferencesdisablementionsposte"
+"mail, \n  userpreferencesapexpagesdevelopermode, \n  userpreferencesdisablesharepostemail, \n  et4ae5__validexacttargetu"
+"ser__c, \n  digestfrequency, \n  userpermissionsmarketinguser, \n  userpreferencesshowtitletoguestusers, \n  isprofileph"
+"otoactive, \n  et4ae5__exacttargetforappexchangeuser__c, \n  isextindicatorvisible, \n  createdbyid, \n  userpreferences"
+"hidelightningmigrationmodal, \n  userpreferenceslightningexperiencepreferred, \n  firstname, \n  contactid, \n  userpref"
+"erencesshowstatetoexternalusers, \n  userpreferencesshowstreetaddresstoexternalusers, \n  userpreferenceshidechatteronbo"
+"ardingsplash, \n  userpreferencesglobalnavgridmenuwtshown, \n  email, \n  userroleid, \n  userpreferencesshowemailtogues"
+"tusers, \n  userpreferencespreviewcustomtheme, \n  lastreferenceddate, \n  fax, \n  noodlecrm__default_owner__c, \n  med"
+"iumbannerphotourl, \n  userpreferencesshowworkphonetoguestusers, \n  userpreferencesshowfaxtoguestusers, \n  extension, "
+"\n  userpreferencesremindersoundoff, \n  userpreferencesrecordhomesectioncollapsewtshown, \n  userpreferencesshowmanager"
+"toexternalusers, \n  userpreferencessortfeedbycomment, \n  delegatedapproverid, \n  sfid, \n  id\nFROM "+context.university_code+".user ";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row8.userpreferencesshowmobilephonetoexternalusers = null;
							} else {
	                         		
            row8.userpreferencesshowmobilephonetoexternalusers = rs_tDBInput_8.getBoolean(1);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowmobilephonetoexternalusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row8.userpreferencesshowpostalcodetoexternalusers = null;
							} else {
	                         		
            row8.userpreferencesshowpostalcodetoexternalusers = rs_tDBInput_8.getBoolean(2);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowpostalcodetoexternalusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								row8.sendername = null;
							} else {
	                         		
        	row8.sendername = routines.system.JDBCUtil.getString(rs_tDBInput_8, 3, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 4) {
								row8.userpreferencesreceivenotificationsasdelegatedapprover = null;
							} else {
	                         		
            row8.userpreferencesreceivenotificationsasdelegatedapprover = rs_tDBInput_8.getBoolean(4);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesreceivenotificationsasdelegatedapprover = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 5) {
								row8.userpreferencesshowcitytoguestusers = null;
							} else {
	                         		
            row8.userpreferencesshowcitytoguestusers = rs_tDBInput_8.getBoolean(5);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowcitytoguestusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 6) {
								row8.lastlogindate = null;
							} else {
										
			row8.lastlogindate = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 6);
		                    }
							if(colQtyInRs_tDBInput_8 < 7) {
								row8.userpreferencesuserdebugmodepref = null;
							} else {
	                         		
            row8.userpreferencesuserdebugmodepref = rs_tDBInput_8.getBoolean(7);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesuserdebugmodepref = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 8) {
								row8.userpreferenceshidebiggerphotocallout = null;
							} else {
	                         		
            row8.userpreferenceshidebiggerphotocallout = rs_tDBInput_8.getBoolean(8);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferenceshidebiggerphotocallout = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 9) {
								row8.lastname = null;
							} else {
	                         		
        	row8.lastname = routines.system.JDBCUtil.getString(rs_tDBInput_8, 9, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 10) {
								row8.userpermissionssupportuser = null;
							} else {
	                         		
            row8.userpermissionssupportuser = rs_tDBInput_8.getBoolean(10);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpermissionssupportuser = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 11) {
								row8.userpreferenceshideenduseronboardingassistantmodal = null;
							} else {
	                         		
            row8.userpreferenceshideenduseronboardingassistantmodal = rs_tDBInput_8.getBoolean(11);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferenceshideenduseronboardingassistantmodal = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 12) {
								row8.userpreferencesdisablefollowersemail = null;
							} else {
	                         		
            row8.userpreferencesdisablefollowersemail = rs_tDBInput_8.getBoolean(12);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisablefollowersemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 13) {
								row8.street = null;
							} else {
	                         		
        	row8.street = routines.system.JDBCUtil.getString(rs_tDBInput_8, 13, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 14) {
								row8.userpreferencessuppresstasksfxreminders = null;
							} else {
	                         		
            row8.userpreferencessuppresstasksfxreminders = rs_tDBInput_8.getBoolean(14);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencessuppresstasksfxreminders = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 15) {
								row8.userpermissionsinteractionuser = null;
							} else {
	                         		
            row8.userpermissionsinteractionuser = rs_tDBInput_8.getBoolean(15);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpermissionsinteractionuser = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 16) {
								row8.profileid = null;
							} else {
	                         		
        	row8.profileid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 16, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 17) {
								row8.receivesadmininfoemails = null;
							} else {
	                         		
            row8.receivesadmininfoemails = rs_tDBInput_8.getBoolean(17);
            if(rs_tDBInput_8.wasNull()){
                    row8.receivesadmininfoemails = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 18) {
								row8.smallphotourl = null;
							} else {
	                         		
        	row8.smallphotourl = routines.system.JDBCUtil.getString(rs_tDBInput_8, 18, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 19) {
								row8.usertype = null;
							} else {
	                         		
        	row8.usertype = routines.system.JDBCUtil.getString(rs_tDBInput_8, 19, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 20) {
								row8.aboutme = null;
							} else {
	                         		
        	row8.aboutme = routines.system.JDBCUtil.getString(rs_tDBInput_8, 20, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 21) {
								row8.et4ae5__default_mid__c = null;
							} else {
	                         		
        	row8.et4ae5__default_mid__c = routines.system.JDBCUtil.getString(rs_tDBInput_8, 21, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 22) {
								row8.outofofficemessage = null;
							} else {
	                         		
        	row8.outofofficemessage = routines.system.JDBCUtil.getString(rs_tDBInput_8, 22, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 23) {
								row8.userpermissionsmobileuser = null;
							} else {
	                         		
            row8.userpermissionsmobileuser = rs_tDBInput_8.getBoolean(23);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpermissionsmobileuser = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 24) {
								row8.forecastenabled = null;
							} else {
	                         		
            row8.forecastenabled = rs_tDBInput_8.getBoolean(24);
            if(rs_tDBInput_8.wasNull()){
                    row8.forecastenabled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 25) {
								row8.userpreferenceshascelebrationbadge = null;
							} else {
	                         		
            row8.userpreferenceshascelebrationbadge = rs_tDBInput_8.getBoolean(25);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferenceshascelebrationbadge = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 26) {
								row8.numberoffailedlogins = null;
							} else {
		                          
            row8.numberoffailedlogins = rs_tDBInput_8.getInt(26);
            if(rs_tDBInput_8.wasNull()){
                    row8.numberoffailedlogins = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 27) {
								row8.senderemail = null;
							} else {
	                         		
        	row8.senderemail = routines.system.JDBCUtil.getString(rs_tDBInput_8, 27, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 28) {
								row8.userpreferencesactivityreminderspopup = null;
							} else {
	                         		
            row8.userpreferencesactivityreminderspopup = rs_tDBInput_8.getBoolean(28);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesactivityreminderspopup = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 29) {
								row8.userpreferencesdiscommentafterlikeemail = null;
							} else {
	                         		
            row8.userpreferencesdiscommentafterlikeemail = rs_tDBInput_8.getBoolean(29);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdiscommentafterlikeemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 30) {
								row8.userpreferencesdismentionscommentemail = null;
							} else {
	                         		
            row8.userpreferencesdismentionscommentemail = rs_tDBInput_8.getBoolean(30);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdismentionscommentemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 31) {
								row8.accountid = null;
							} else {
	                         		
        	row8.accountid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 31, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 32) {
								row8.companyname = null;
							} else {
	                         		
        	row8.companyname = routines.system.JDBCUtil.getString(rs_tDBInput_8, 32, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 33) {
								row8.managerid = null;
							} else {
	                         		
        	row8.managerid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 33, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 34) {
								row8.userpreferencesreceivenonotificationsasapprover = null;
							} else {
	                         		
            row8.userpreferencesreceivenonotificationsasapprover = rs_tDBInput_8.getBoolean(34);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesreceivenonotificationsasapprover = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 35) {
								row8.userpreferenceshidesecondchatteronboardingsplash = null;
							} else {
	                         		
            row8.userpreferenceshidesecondchatteronboardingsplash = rs_tDBInput_8.getBoolean(35);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferenceshidesecondchatteronboardingsplash = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 36) {
								row8.lastvieweddate = null;
							} else {
										
			row8.lastvieweddate = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 36);
		                    }
							if(colQtyInRs_tDBInput_8 < 37) {
								row8.userpreferencesdisablechangecommentemail = null;
							} else {
	                         		
            row8.userpreferencesdisablechangecommentemail = rs_tDBInput_8.getBoolean(37);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisablechangecommentemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 38) {
								row8.userpreferenceshidecsngetchattermobiletask = null;
							} else {
	                         		
            row8.userpreferenceshidecsngetchattermobiletask = rs_tDBInput_8.getBoolean(38);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferenceshidecsngetchattermobiletask = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 39) {
								row8.bannerphotourl = null;
							} else {
	                         		
        	row8.bannerphotourl = routines.system.JDBCUtil.getString(rs_tDBInput_8, 39, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 40) {
								row8.et4ae5__exacttargetusername__c = null;
							} else {
	                         		
        	row8.et4ae5__exacttargetusername__c = routines.system.JDBCUtil.getString(rs_tDBInput_8, 40, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 41) {
								row8.userpreferencesdisableendorsementemail = null;
							} else {
	                         		
            row8.userpreferencesdisableendorsementemail = rs_tDBInput_8.getBoolean(41);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisableendorsementemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 42) {
								row8.userpreferencesfavoritesshowtopfavorites = null;
							} else {
	                         		
            row8.userpreferencesfavoritesshowtopfavorites = rs_tDBInput_8.getBoolean(42);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesfavoritesshowtopfavorites = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 43) {
								row8.offlinepdatrialexpirationdate = null;
							} else {
										
			row8.offlinepdatrialexpirationdate = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 43);
		                    }
							if(colQtyInRs_tDBInput_8 < 44) {
								row8.timezonesidkey = null;
							} else {
	                         		
        	row8.timezonesidkey = routines.system.JDBCUtil.getString(rs_tDBInput_8, 44, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 45) {
								row8.userpreferencesdisablelikeemail = null;
							} else {
	                         		
            row8.userpreferencesdisablelikeemail = rs_tDBInput_8.getBoolean(45);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisablelikeemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 46) {
								row8.emailpreferencesautobccstayintouch = null;
							} else {
	                         		
            row8.emailpreferencesautobccstayintouch = rs_tDBInput_8.getBoolean(46);
            if(rs_tDBInput_8.wasNull()){
                    row8.emailpreferencesautobccstayintouch = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 47) {
								row8.userpreferencesfavoriteswtshown = null;
							} else {
	                         		
            row8.userpreferencesfavoriteswtshown = rs_tDBInput_8.getBoolean(47);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesfavoriteswtshown = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 48) {
								row8.userpreferenceseventreminderscheckboxdefault = null;
							} else {
	                         		
            row8.userpreferenceseventreminderscheckboxdefault = rs_tDBInput_8.getBoolean(48);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferenceseventreminderscheckboxdefault = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 49) {
								row8.userpreferencespathassistantcollapsed = null;
							} else {
	                         		
            row8.userpreferencespathassistantcollapsed = rs_tDBInput_8.getBoolean(49);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencespathassistantcollapsed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 50) {
								row8.stayintouchsubject = null;
							} else {
	                         		
        	row8.stayintouchsubject = routines.system.JDBCUtil.getString(rs_tDBInput_8, 50, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 51) {
								row8.city = null;
							} else {
	                         		
        	row8.city = routines.system.JDBCUtil.getString(rs_tDBInput_8, 51, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 52) {
								row8.localesidkey = null;
							} else {
	                         		
        	row8.localesidkey = routines.system.JDBCUtil.getString(rs_tDBInput_8, 52, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 53) {
								row8.name = null;
							} else {
	                         		
        	row8.name = routines.system.JDBCUtil.getString(rs_tDBInput_8, 53, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 54) {
								row8.userpreferencesdisablebookmarkemail = null;
							} else {
	                         		
            row8.userpreferencesdisablebookmarkemail = rs_tDBInput_8.getBoolean(54);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisablebookmarkemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 55) {
								row8.federationidentifier = null;
							} else {
	                         		
        	row8.federationidentifier = routines.system.JDBCUtil.getString(rs_tDBInput_8, 55, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 56) {
								row8.latitude = null;
							} else {
	                         		
            row8.latitude = rs_tDBInput_8.getDouble(56);
            if(rs_tDBInput_8.wasNull()){
                    row8.latitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 57) {
								row8.fullphotourl = null;
							} else {
	                         		
        	row8.fullphotourl = routines.system.JDBCUtil.getString(rs_tDBInput_8, 57, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 58) {
								row8.mobilephone = null;
							} else {
	                         		
        	row8.mobilephone = routines.system.JDBCUtil.getString(rs_tDBInput_8, 58, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 59) {
								row8.userpreferencescreatelexappswtshown = null;
							} else {
	                         		
            row8.userpreferencescreatelexappswtshown = rs_tDBInput_8.getBoolean(59);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencescreatelexappswtshown = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 60) {
								row8.userpreferencesenableautosubforfeeds = null;
							} else {
	                         		
            row8.userpreferencesenableautosubforfeeds = rs_tDBInput_8.getBoolean(60);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesenableautosubforfeeds = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 61) {
								row8.userpreferencesshowpostalcodetoguestusers = null;
							} else {
	                         		
            row8.userpreferencesshowpostalcodetoguestusers = rs_tDBInput_8.getBoolean(61);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowpostalcodetoguestusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 62) {
								row8.division = null;
							} else {
	                         		
        	row8.division = routines.system.JDBCUtil.getString(rs_tDBInput_8, 62, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 63) {
								row8.languagelocalekey = null;
							} else {
	                         		
        	row8.languagelocalekey = routines.system.JDBCUtil.getString(rs_tDBInput_8, 63, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 64) {
								row8.userpreferencesshowmobilephonetoguestusers = null;
							} else {
	                         		
            row8.userpreferencesshowmobilephonetoguestusers = rs_tDBInput_8.getBoolean(64);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowmobilephonetoguestusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 65) {
								row8.userpreferencesdisableallfeedsemail = null;
							} else {
	                         		
            row8.userpreferencesdisableallfeedsemail = rs_tDBInput_8.getBoolean(65);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisableallfeedsemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 66) {
								row8.userpreferencesshowcitytoexternalusers = null;
							} else {
	                         		
            row8.userpreferencesshowcitytoexternalusers = rs_tDBInput_8.getBoolean(66);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowcitytoexternalusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 67) {
								row8.et4ae5__exacttarget_oauth_token__c = null;
							} else {
	                         		
        	row8.et4ae5__exacttarget_oauth_token__c = routines.system.JDBCUtil.getString(rs_tDBInput_8, 67, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 68) {
								row8.lastmodifieddate = null;
							} else {
										
			row8.lastmodifieddate = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 68);
		                    }
							if(colQtyInRs_tDBInput_8 < 69) {
								row8.callcenterid = null;
							} else {
	                         		
        	row8.callcenterid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 69, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 70) {
								row8.userpreferencesshowmanagertoguestusers = null;
							} else {
	                         		
            row8.userpreferencesshowmanagertoguestusers = rs_tDBInput_8.getBoolean(70);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowmanagertoguestusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 71) {
								row8.phone = null;
							} else {
	                         		
        	row8.phone = routines.system.JDBCUtil.getString(rs_tDBInput_8, 71, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 72) {
								row8.userpreferencesdisableprofilepostemail = null;
							} else {
	                         		
            row8.userpreferencesdisableprofilepostemail = rs_tDBInput_8.getBoolean(72);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisableprofilepostemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 73) {
								row8.userpreferencesdisablelatercommentemail = null;
							} else {
	                         		
            row8.userpreferencesdisablelatercommentemail = rs_tDBInput_8.getBoolean(73);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisablelatercommentemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 74) {
								row8.userpermissionscallcenterautologin = null;
							} else {
	                         		
            row8.userpermissionscallcenterautologin = rs_tDBInput_8.getBoolean(74);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpermissionscallcenterautologin = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 75) {
								row8.et4ae5__default_et_page__c = null;
							} else {
	                         		
        	row8.et4ae5__default_et_page__c = routines.system.JDBCUtil.getString(rs_tDBInput_8, 75, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 76) {
								row8.userpreferencespipelineviewhidehelppopover = null;
							} else {
	                         		
            row8.userpreferencespipelineviewhidehelppopover = rs_tDBInput_8.getBoolean(76);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencespipelineviewhidehelppopover = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 77) {
								row8.userpreferencespreviewlightning = null;
							} else {
	                         		
            row8.userpreferencespreviewlightning = rs_tDBInput_8.getBoolean(77);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencespreviewlightning = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 78) {
								row8.userpreferencesshowworkphonetoexternalusers = null;
							} else {
	                         		
            row8.userpreferencesshowworkphonetoexternalusers = rs_tDBInput_8.getBoolean(78);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowworkphonetoexternalusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 79) {
								row8.longitude = null;
							} else {
	                         		
            row8.longitude = rs_tDBInput_8.getDouble(79);
            if(rs_tDBInput_8.wasNull()){
                    row8.longitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 80) {
								row8.userpreferencesshowfaxtoexternalusers = null;
							} else {
	                         		
            row8.userpreferencesshowfaxtoexternalusers = rs_tDBInput_8.getBoolean(80);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowfaxtoexternalusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 81) {
								row8.lastpasswordchangedate = null;
							} else {
										
			row8.lastpasswordchangedate = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 81);
		                    }
							if(colQtyInRs_tDBInput_8 < 82) {
								row8.userpreferenceshides1browserui = null;
							} else {
	                         		
            row8.userpreferenceshides1browserui = rs_tDBInput_8.getBoolean(82);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferenceshides1browserui = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 83) {
								row8.userpreferencesrecordhomereservedwtshown = null;
							} else {
	                         		
            row8.userpreferencesrecordhomereservedwtshown = rs_tDBInput_8.getBoolean(83);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesrecordhomereservedwtshown = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 84) {
								row8.userpreferencestaskreminderscheckboxdefault = null;
							} else {
	                         		
            row8.userpreferencestaskreminderscheckboxdefault = rs_tDBInput_8.getBoolean(84);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencestaskreminderscheckboxdefault = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 85) {
								row8.userpreferencesshowemailtoexternalusers = null;
							} else {
	                         		
            row8.userpreferencesshowemailtoexternalusers = rs_tDBInput_8.getBoolean(85);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowemailtoexternalusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 86) {
								row8.offlinetrialexpirationdate = null;
							} else {
										
			row8.offlinetrialexpirationdate = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 86);
		                    }
							if(colQtyInRs_tDBInput_8 < 87) {
								row8.isactive = null;
							} else {
	                         		
            row8.isactive = rs_tDBInput_8.getBoolean(87);
            if(rs_tDBInput_8.wasNull()){
                    row8.isactive = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 88) {
								row8.systemmodstamp = null;
							} else {
										
			row8.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 88);
		                    }
							if(colQtyInRs_tDBInput_8 < 89) {
								row8.smallbannerphotourl = null;
							} else {
	                         		
        	row8.smallbannerphotourl = routines.system.JDBCUtil.getString(rs_tDBInput_8, 89, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 90) {
								row8.alias = null;
							} else {
	                         		
        	row8.alias = routines.system.JDBCUtil.getString(rs_tDBInput_8, 90, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 91) {
								row8.emailencodingkey = null;
							} else {
	                         		
        	row8.emailencodingkey = routines.system.JDBCUtil.getString(rs_tDBInput_8, 91, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 92) {
								row8.badgetext = null;
							} else {
	                         		
        	row8.badgetext = routines.system.JDBCUtil.getString(rs_tDBInput_8, 92, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 93) {
								row8.userpreferencesdisablemessageemail = null;
							} else {
	                         		
            row8.userpreferencesdisablemessageemail = rs_tDBInput_8.getBoolean(93);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisablemessageemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 94) {
								row8.lastmodifiedbyid = null;
							} else {
	                         		
        	row8.lastmodifiedbyid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 94, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 95) {
								row8.state = null;
							} else {
	                         		
        	row8.state = routines.system.JDBCUtil.getString(rs_tDBInput_8, 95, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 96) {
								row8.userpreferencesdisablefilesharenotificationsforapi = null;
							} else {
	                         		
            row8.userpreferencesdisablefilesharenotificationsforapi = rs_tDBInput_8.getBoolean(96);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisablefilesharenotificationsforapi = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 97) {
								row8.mediumphotourl = null;
							} else {
	                         		
        	row8.mediumphotourl = routines.system.JDBCUtil.getString(rs_tDBInput_8, 97, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 98) {
								row8.userpreferencesshowstreetaddresstoguestusers = null;
							} else {
	                         		
            row8.userpreferencesshowstreetaddresstoguestusers = rs_tDBInput_8.getBoolean(98);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowstreetaddresstoguestusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 99) {
								row8.userpreferencesshowstatetoguestusers = null;
							} else {
	                         		
            row8.userpreferencesshowstatetoguestusers = rs_tDBInput_8.getBoolean(99);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowstatetoguestusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 100) {
								row8.userpreferenceshidecsndesktoptask = null;
							} else {
	                         		
            row8.userpreferenceshidecsndesktoptask = rs_tDBInput_8.getBoolean(100);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferenceshidecsndesktoptask = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 101) {
								row8.userpreferencesnewlightningreportrunpageenabled = null;
							} else {
	                         		
            row8.userpreferencesnewlightningreportrunpageenabled = rs_tDBInput_8.getBoolean(101);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesnewlightningreportrunpageenabled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 102) {
								row8.department = null;
							} else {
	                         		
        	row8.department = routines.system.JDBCUtil.getString(rs_tDBInput_8, 102, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 103) {
								row8.userpreferencesexcludemailappattachments = null;
							} else {
	                         		
            row8.userpreferencesexcludemailappattachments = rs_tDBInput_8.getBoolean(103);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesexcludemailappattachments = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 104) {
								row8.defaultgroupnotificationfrequency = null;
							} else {
	                         		
        	row8.defaultgroupnotificationfrequency = routines.system.JDBCUtil.getString(rs_tDBInput_8, 104, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 105) {
								row8.et4ae5__exacttargetforappexchangeadmin__c = null;
							} else {
	                         		
            row8.et4ae5__exacttargetforappexchangeadmin__c = rs_tDBInput_8.getBoolean(105);
            if(rs_tDBInput_8.wasNull()){
                    row8.et4ae5__exacttargetforappexchangeadmin__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 106) {
								row8.stayintouchnote = null;
							} else {
	                         		
        	row8.stayintouchnote = routines.system.JDBCUtil.getString(rs_tDBInput_8, 106, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 107) {
								row8.userpreferencesglobalnavbarwtshown = null;
							} else {
	                         		
            row8.userpreferencesglobalnavbarwtshown = rs_tDBInput_8.getBoolean(107);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesglobalnavbarwtshown = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 108) {
								row8.userpreferenceshidesfxwelcomemat = null;
							} else {
	                         		
            row8.userpreferenceshidesfxwelcomemat = rs_tDBInput_8.getBoolean(108);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferenceshidesfxwelcomemat = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 109) {
								row8.et4ae5__validexacttargetadmin__c = null;
							} else {
	                         		
            row8.et4ae5__validexacttargetadmin__c = rs_tDBInput_8.getBoolean(109);
            if(rs_tDBInput_8.wasNull()){
                    row8.et4ae5__validexacttargetadmin__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 110) {
								row8.individualid = null;
							} else {
	                         		
        	row8.individualid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 110, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 111) {
								row8.userpreferencesshowtitletoexternalusers = null;
							} else {
	                         		
            row8.userpreferencesshowtitletoexternalusers = rs_tDBInput_8.getBoolean(111);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowtitletoexternalusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 112) {
								row8.userpreferencessuppresseventsfxreminders = null;
							} else {
	                         		
            row8.userpreferencessuppresseventsfxreminders = rs_tDBInput_8.getBoolean(112);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencessuppresseventsfxreminders = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 113) {
								row8.receivesinfoemails = null;
							} else {
	                         		
            row8.receivesinfoemails = rs_tDBInput_8.getBoolean(113);
            if(rs_tDBInput_8.wasNull()){
                    row8.receivesinfoemails = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 114) {
								row8.userpreferencessrhoverrideactivities = null;
							} else {
	                         		
            row8.userpreferencessrhoverrideactivities = rs_tDBInput_8.getBoolean(114);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencessrhoverrideactivities = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 115) {
								row8.userpermissionsofflineuser = null;
							} else {
	                         		
            row8.userpermissionsofflineuser = rs_tDBInput_8.getBoolean(115);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpermissionsofflineuser = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 116) {
								row8.userpreferencesshowprofilepictoguestusers = null;
							} else {
	                         		
            row8.userpreferencesshowprofilepictoguestusers = rs_tDBInput_8.getBoolean(116);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowprofilepictoguestusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 117) {
								row8.username = null;
							} else {
	                         		
        	row8.username = routines.system.JDBCUtil.getString(rs_tDBInput_8, 117, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 118) {
								row8.createddate = null;
							} else {
										
			row8.createddate = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 118);
		                    }
							if(colQtyInRs_tDBInput_8 < 119) {
								row8.userpreferencesshowcountrytoexternalusers = null;
							} else {
	                         		
            row8.userpreferencesshowcountrytoexternalusers = rs_tDBInput_8.getBoolean(119);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowcountrytoexternalusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 120) {
								row8.country = null;
							} else {
	                         		
        	row8.country = routines.system.JDBCUtil.getString(rs_tDBInput_8, 120, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 121) {
								row8.emailpreferencesstayintouchreminder = null;
							} else {
	                         		
            row8.emailpreferencesstayintouchreminder = rs_tDBInput_8.getBoolean(121);
            if(rs_tDBInput_8.wasNull()){
                    row8.emailpreferencesstayintouchreminder = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 122) {
								row8.userpreferencescachediagnostics = null;
							} else {
	                         		
            row8.userpreferencescachediagnostics = rs_tDBInput_8.getBoolean(122);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencescachediagnostics = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 123) {
								row8.stayintouchsignature = null;
							} else {
	                         		
        	row8.stayintouchsignature = routines.system.JDBCUtil.getString(rs_tDBInput_8, 123, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 124) {
								row8.emailpreferencesautobcc = null;
							} else {
	                         		
            row8.emailpreferencesautobcc = rs_tDBInput_8.getBoolean(124);
            if(rs_tDBInput_8.wasNull()){
                    row8.emailpreferencesautobcc = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 125) {
								row8.communitynickname = null;
							} else {
	                         		
        	row8.communitynickname = routines.system.JDBCUtil.getString(rs_tDBInput_8, 125, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 126) {
								row8.userpreferencesdisprofpostcommentemail = null;
							} else {
	                         		
            row8.userpreferencesdisprofpostcommentemail = rs_tDBInput_8.getBoolean(126);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisprofpostcommentemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 127) {
								row8.userpreferencesshowcountrytoguestusers = null;
							} else {
	                         		
            row8.userpreferencesshowcountrytoguestusers = rs_tDBInput_8.getBoolean(127);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowcountrytoguestusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 128) {
								row8.employeenumber = null;
							} else {
	                         		
        	row8.employeenumber = routines.system.JDBCUtil.getString(rs_tDBInput_8, 128, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 129) {
								row8.geocodeaccuracy = null;
							} else {
	                         		
        	row8.geocodeaccuracy = routines.system.JDBCUtil.getString(rs_tDBInput_8, 129, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 130) {
								row8.signature = null;
							} else {
	                         		
        	row8.signature = routines.system.JDBCUtil.getString(rs_tDBInput_8, 130, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 131) {
								row8.userpermissionssfcontentuser = null;
							} else {
	                         		
            row8.userpermissionssfcontentuser = rs_tDBInput_8.getBoolean(131);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpermissionssfcontentuser = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 132) {
								row8.postalcode = null;
							} else {
	                         		
        	row8.postalcode = routines.system.JDBCUtil.getString(rs_tDBInput_8, 132, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 133) {
								row8.title = null;
							} else {
	                         		
        	row8.title = routines.system.JDBCUtil.getString(rs_tDBInput_8, 133, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 134) {
								row8.userpreferencesdisablementionspostemail = null;
							} else {
	                         		
            row8.userpreferencesdisablementionspostemail = rs_tDBInput_8.getBoolean(134);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisablementionspostemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 135) {
								row8.userpreferencesapexpagesdevelopermode = null;
							} else {
	                         		
            row8.userpreferencesapexpagesdevelopermode = rs_tDBInput_8.getBoolean(135);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesapexpagesdevelopermode = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 136) {
								row8.userpreferencesdisablesharepostemail = null;
							} else {
	                         		
            row8.userpreferencesdisablesharepostemail = rs_tDBInput_8.getBoolean(136);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesdisablesharepostemail = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 137) {
								row8.et4ae5__validexacttargetuser__c = null;
							} else {
	                         		
            row8.et4ae5__validexacttargetuser__c = rs_tDBInput_8.getBoolean(137);
            if(rs_tDBInput_8.wasNull()){
                    row8.et4ae5__validexacttargetuser__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 138) {
								row8.digestfrequency = null;
							} else {
	                         		
        	row8.digestfrequency = routines.system.JDBCUtil.getString(rs_tDBInput_8, 138, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 139) {
								row8.userpermissionsmarketinguser = null;
							} else {
	                         		
            row8.userpermissionsmarketinguser = rs_tDBInput_8.getBoolean(139);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpermissionsmarketinguser = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 140) {
								row8.userpreferencesshowtitletoguestusers = null;
							} else {
	                         		
            row8.userpreferencesshowtitletoguestusers = rs_tDBInput_8.getBoolean(140);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowtitletoguestusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 141) {
								row8.isprofilephotoactive = null;
							} else {
	                         		
            row8.isprofilephotoactive = rs_tDBInput_8.getBoolean(141);
            if(rs_tDBInput_8.wasNull()){
                    row8.isprofilephotoactive = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 142) {
								row8.et4ae5__exacttargetforappexchangeuser__c = null;
							} else {
	                         		
            row8.et4ae5__exacttargetforappexchangeuser__c = rs_tDBInput_8.getBoolean(142);
            if(rs_tDBInput_8.wasNull()){
                    row8.et4ae5__exacttargetforappexchangeuser__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 143) {
								row8.isextindicatorvisible = null;
							} else {
	                         		
            row8.isextindicatorvisible = rs_tDBInput_8.getBoolean(143);
            if(rs_tDBInput_8.wasNull()){
                    row8.isextindicatorvisible = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 144) {
								row8.createdbyid = null;
							} else {
	                         		
        	row8.createdbyid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 144, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 145) {
								row8.userpreferenceshidelightningmigrationmodal = null;
							} else {
	                         		
            row8.userpreferenceshidelightningmigrationmodal = rs_tDBInput_8.getBoolean(145);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferenceshidelightningmigrationmodal = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 146) {
								row8.userpreferenceslightningexperiencepreferred = null;
							} else {
	                         		
            row8.userpreferenceslightningexperiencepreferred = rs_tDBInput_8.getBoolean(146);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferenceslightningexperiencepreferred = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 147) {
								row8.firstname = null;
							} else {
	                         		
        	row8.firstname = routines.system.JDBCUtil.getString(rs_tDBInput_8, 147, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 148) {
								row8.contactid = null;
							} else {
	                         		
        	row8.contactid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 148, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 149) {
								row8.userpreferencesshowstatetoexternalusers = null;
							} else {
	                         		
            row8.userpreferencesshowstatetoexternalusers = rs_tDBInput_8.getBoolean(149);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowstatetoexternalusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 150) {
								row8.userpreferencesshowstreetaddresstoexternalusers = null;
							} else {
	                         		
            row8.userpreferencesshowstreetaddresstoexternalusers = rs_tDBInput_8.getBoolean(150);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowstreetaddresstoexternalusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 151) {
								row8.userpreferenceshidechatteronboardingsplash = null;
							} else {
	                         		
            row8.userpreferenceshidechatteronboardingsplash = rs_tDBInput_8.getBoolean(151);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferenceshidechatteronboardingsplash = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 152) {
								row8.userpreferencesglobalnavgridmenuwtshown = null;
							} else {
	                         		
            row8.userpreferencesglobalnavgridmenuwtshown = rs_tDBInput_8.getBoolean(152);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesglobalnavgridmenuwtshown = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 153) {
								row8.email = null;
							} else {
	                         		
        	row8.email = routines.system.JDBCUtil.getString(rs_tDBInput_8, 153, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 154) {
								row8.userroleid = null;
							} else {
	                         		
        	row8.userroleid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 154, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 155) {
								row8.userpreferencesshowemailtoguestusers = null;
							} else {
	                         		
            row8.userpreferencesshowemailtoguestusers = rs_tDBInput_8.getBoolean(155);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowemailtoguestusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 156) {
								row8.userpreferencespreviewcustomtheme = null;
							} else {
	                         		
            row8.userpreferencespreviewcustomtheme = rs_tDBInput_8.getBoolean(156);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencespreviewcustomtheme = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 157) {
								row8.lastreferenceddate = null;
							} else {
										
			row8.lastreferenceddate = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 157);
		                    }
							if(colQtyInRs_tDBInput_8 < 158) {
								row8.fax = null;
							} else {
	                         		
        	row8.fax = routines.system.JDBCUtil.getString(rs_tDBInput_8, 158, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 159) {
								row8.noodlecrm__default_owner__c = null;
							} else {
	                         		
            row8.noodlecrm__default_owner__c = rs_tDBInput_8.getBoolean(159);
            if(rs_tDBInput_8.wasNull()){
                    row8.noodlecrm__default_owner__c = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 160) {
								row8.mediumbannerphotourl = null;
							} else {
	                         		
        	row8.mediumbannerphotourl = routines.system.JDBCUtil.getString(rs_tDBInput_8, 160, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 161) {
								row8.userpreferencesshowworkphonetoguestusers = null;
							} else {
	                         		
            row8.userpreferencesshowworkphonetoguestusers = rs_tDBInput_8.getBoolean(161);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowworkphonetoguestusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 162) {
								row8.userpreferencesshowfaxtoguestusers = null;
							} else {
	                         		
            row8.userpreferencesshowfaxtoguestusers = rs_tDBInput_8.getBoolean(162);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowfaxtoguestusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 163) {
								row8.extension = null;
							} else {
	                         		
        	row8.extension = routines.system.JDBCUtil.getString(rs_tDBInput_8, 163, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 164) {
								row8.userpreferencesremindersoundoff = null;
							} else {
	                         		
            row8.userpreferencesremindersoundoff = rs_tDBInput_8.getBoolean(164);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesremindersoundoff = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 165) {
								row8.userpreferencesrecordhomesectioncollapsewtshown = null;
							} else {
	                         		
            row8.userpreferencesrecordhomesectioncollapsewtshown = rs_tDBInput_8.getBoolean(165);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesrecordhomesectioncollapsewtshown = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 166) {
								row8.userpreferencesshowmanagertoexternalusers = null;
							} else {
	                         		
            row8.userpreferencesshowmanagertoexternalusers = rs_tDBInput_8.getBoolean(166);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencesshowmanagertoexternalusers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 167) {
								row8.userpreferencessortfeedbycomment = null;
							} else {
	                         		
            row8.userpreferencessortfeedbycomment = rs_tDBInput_8.getBoolean(167);
            if(rs_tDBInput_8.wasNull()){
                    row8.userpreferencessortfeedbycomment = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 168) {
								row8.delegatedapproverid = null;
							} else {
	                         		
        	row8.delegatedapproverid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 168, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 169) {
								row8.sfid = null;
							} else {
	                         		
        	row8.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 169, true);
		                    }
							if(colQtyInRs_tDBInput_8 < 170) {
								row8.id = 0;
							} else {
		                          
            row8.id = rs_tDBInput_8.getInt(170);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

out15 = null;
out16 = null;


// # Output table : 'out15'
out15_tmp.userpreferencesshowmobilephonetoexternalusers = row8.userpreferencesshowmobilephonetoexternalusers ;
out15_tmp.userpreferencesshowpostalcodetoexternalusers = row8.userpreferencesshowpostalcodetoexternalusers ;
out15_tmp.sendername = row8.sendername ;
out15_tmp.userpreferencesreceivenotificationsasdelegatedapprover = row8.userpreferencesreceivenotificationsasdelegatedapprover ;
out15_tmp.userpreferencesshowcitytoguestusers = row8.userpreferencesshowcitytoguestusers ;
out15_tmp.lastlogindate = row8.lastlogindate ;
out15_tmp.userpreferencesuserdebugmodepref = row8.userpreferencesuserdebugmodepref ;
out15_tmp.userpreferenceshidebiggerphotocallout = row8.userpreferenceshidebiggerphotocallout ;
out15_tmp.lastname = row8.lastname ;
out15_tmp.userpermissionssupportuser = row8.userpermissionssupportuser ;
out15_tmp.userpreferenceshideenduseronboardingassistantmodal = row8.userpreferenceshideenduseronboardingassistantmodal ;
out15_tmp.userpreferencesdisablefollowersemail = row8.userpreferencesdisablefollowersemail ;
out15_tmp.street = row8.street ;
out15_tmp.userpreferencessuppresstasksfxreminders = row8.userpreferencessuppresstasksfxreminders ;
out15_tmp.userpermissionsinteractionuser = row8.userpermissionsinteractionuser ;
out15_tmp.profileid = row8.profileid ;
out15_tmp.receivesadmininfoemails = row8.receivesadmininfoemails ;
out15_tmp.smallphotourl = row8.smallphotourl ;
out15_tmp.usertype = row8.usertype ;
out15_tmp.aboutme = row8.aboutme ;
out15_tmp.et4ae5__default_mid__c = row8.et4ae5__default_mid__c ;
out15_tmp.outofofficemessage = row8.outofofficemessage ;
out15_tmp.userpermissionsmobileuser = row8.userpermissionsmobileuser ;
out15_tmp.forecastenabled = row8.forecastenabled ;
out15_tmp.userpreferenceshascelebrationbadge = row8.userpreferenceshascelebrationbadge ;
out15_tmp.numberoffailedlogins = row8.numberoffailedlogins ;
out15_tmp.senderemail = row8.senderemail ;
out15_tmp.userpreferencesactivityreminderspopup = row8.userpreferencesactivityreminderspopup ;
out15_tmp.userpreferencesdiscommentafterlikeemail = row8.userpreferencesdiscommentafterlikeemail ;
out15_tmp.userpreferencesdismentionscommentemail = row8.userpreferencesdismentionscommentemail ;
out15_tmp.accountid = row8.accountid ;
out15_tmp.companyname = row8.companyname ;
out15_tmp.managerid = row8.managerid ;
out15_tmp.userpreferencesreceivenonotificationsasapprover = row8.userpreferencesreceivenonotificationsasapprover ;
out15_tmp.userpreferenceshidesecondchatteronboardingsplash = row8.userpreferenceshidesecondchatteronboardingsplash ;
out15_tmp.lastvieweddate = row8.lastvieweddate ;
out15_tmp.userpreferencesdisablechangecommentemail = row8.userpreferencesdisablechangecommentemail ;
out15_tmp.userpreferenceshidecsngetchattermobiletask = row8.userpreferenceshidecsngetchattermobiletask ;
out15_tmp.bannerphotourl = row8.bannerphotourl ;
out15_tmp.et4ae5__exacttargetusername__c = row8.et4ae5__exacttargetusername__c ;
out15_tmp.userpreferencesdisableendorsementemail = row8.userpreferencesdisableendorsementemail ;
out15_tmp.userpreferencesfavoritesshowtopfavorites = row8.userpreferencesfavoritesshowtopfavorites ;
out15_tmp.offlinepdatrialexpirationdate = row8.offlinepdatrialexpirationdate ;
out15_tmp.timezonesidkey = row8.timezonesidkey ;
out15_tmp.userpreferencesdisablelikeemail = row8.userpreferencesdisablelikeemail ;
out15_tmp.emailpreferencesautobccstayintouch = row8.emailpreferencesautobccstayintouch ;
out15_tmp.userpreferencesfavoriteswtshown = row8.userpreferencesfavoriteswtshown ;
out15_tmp.userpreferenceseventreminderscheckboxdefault = row8.userpreferenceseventreminderscheckboxdefault ;
out15_tmp.userpreferencespathassistantcollapsed = row8.userpreferencespathassistantcollapsed ;
out15_tmp.stayintouchsubject = row8.stayintouchsubject ;
out15_tmp.city = row8.city ;
out15_tmp.localesidkey = row8.localesidkey ;
out15_tmp.name = row8.name ;
out15_tmp.userpreferencesdisablebookmarkemail = row8.userpreferencesdisablebookmarkemail ;
out15_tmp.federationidentifier = row8.federationidentifier ;
out15_tmp.latitude = row8.latitude ;
out15_tmp.fullphotourl = row8.fullphotourl ;
out15_tmp.mobilephone = row8.mobilephone ;
out15_tmp.userpreferencescreatelexappswtshown = row8.userpreferencescreatelexappswtshown ;
out15_tmp.userpreferencesenableautosubforfeeds = row8.userpreferencesenableautosubforfeeds ;
out15_tmp.userpreferencesshowpostalcodetoguestusers = row8.userpreferencesshowpostalcodetoguestusers ;
out15_tmp.division = row8.division ;
out15_tmp.languagelocalekey = row8.languagelocalekey ;
out15_tmp.userpreferencesshowmobilephonetoguestusers = row8.userpreferencesshowmobilephonetoguestusers ;
out15_tmp.userpreferencesdisableallfeedsemail = row8.userpreferencesdisableallfeedsemail ;
out15_tmp.userpreferencesshowcitytoexternalusers = row8.userpreferencesshowcitytoexternalusers ;
out15_tmp.et4ae5__exacttarget_oauth_token__c = row8.et4ae5__exacttarget_oauth_token__c ;
out15_tmp.lastmodifieddate = row8.lastmodifieddate ;
out15_tmp.callcenterid = row8.callcenterid ;
out15_tmp.userpreferencesshowmanagertoguestusers = row8.userpreferencesshowmanagertoguestusers ;
out15_tmp.phone = row8.phone ;
out15_tmp.userpreferencesdisableprofilepostemail = row8.userpreferencesdisableprofilepostemail ;
out15_tmp.userpreferencesdisablelatercommentemail = row8.userpreferencesdisablelatercommentemail ;
out15_tmp.userpermissionscallcenterautologin = row8.userpermissionscallcenterautologin ;
out15_tmp.et4ae5__default_et_page__c = row8.et4ae5__default_et_page__c ;
out15_tmp.userpreferencespipelineviewhidehelppopover = row8.userpreferencespipelineviewhidehelppopover ;
out15_tmp.userpreferencespreviewlightning = row8.userpreferencespreviewlightning ;
out15_tmp.userpreferencesshowworkphonetoexternalusers = row8.userpreferencesshowworkphonetoexternalusers ;
out15_tmp.longitude = row8.longitude ;
out15_tmp.userpreferencesshowfaxtoexternalusers = row8.userpreferencesshowfaxtoexternalusers ;
out15_tmp.lastpasswordchangedate = row8.lastpasswordchangedate ;
out15_tmp.userpreferenceshides1browserui = row8.userpreferenceshides1browserui ;
out15_tmp.userpreferencesrecordhomereservedwtshown = row8.userpreferencesrecordhomereservedwtshown ;
out15_tmp.userpreferencestaskreminderscheckboxdefault = row8.userpreferencestaskreminderscheckboxdefault ;
out15_tmp.userpreferencesshowemailtoexternalusers = row8.userpreferencesshowemailtoexternalusers ;
out15_tmp.offlinetrialexpirationdate = row8.offlinetrialexpirationdate ;
out15_tmp.isactive = row8.isactive ;
out15_tmp.systemmodstamp = row8.systemmodstamp ;
out15_tmp.smallbannerphotourl = row8.smallbannerphotourl ;
out15_tmp.alias = row8.alias ;
out15_tmp.emailencodingkey = row8.emailencodingkey ;
out15_tmp.badgetext = row8.badgetext ;
out15_tmp.userpreferencesdisablemessageemail = row8.userpreferencesdisablemessageemail ;
out15_tmp.lastmodifiedbyid = row8.lastmodifiedbyid ;
out15_tmp.state = row8.state ;
out15_tmp.userpreferencesdisablefilesharenotificationsforapi = row8.userpreferencesdisablefilesharenotificationsforapi ;
out15_tmp.mediumphotourl = row8.mediumphotourl ;
out15_tmp.userpreferencesshowstreetaddresstoguestusers = row8.userpreferencesshowstreetaddresstoguestusers ;
out15_tmp.userpreferencesshowstatetoguestusers = row8.userpreferencesshowstatetoguestusers ;
out15_tmp.userpreferenceshidecsndesktoptask = row8.userpreferenceshidecsndesktoptask ;
out15_tmp.userpreferencesnewlightningreportrunpageenabled = row8.userpreferencesnewlightningreportrunpageenabled ;
out15_tmp.department = row8.department ;
out15_tmp.userpreferencesexcludemailappattachments = row8.userpreferencesexcludemailappattachments ;
out15_tmp.defaultgroupnotificationfrequency = row8.defaultgroupnotificationfrequency ;
out15_tmp.et4ae5__exacttargetforappexchangeadmin__c = row8.et4ae5__exacttargetforappexchangeadmin__c ;
out15_tmp.stayintouchnote = row8.stayintouchnote ;
out15_tmp.userpreferencesglobalnavbarwtshown = row8.userpreferencesglobalnavbarwtshown ;
out15_tmp.userpreferenceshidesfxwelcomemat = row8.userpreferenceshidesfxwelcomemat ;
out15_tmp.et4ae5__validexacttargetadmin__c = row8.et4ae5__validexacttargetadmin__c ;
out15_tmp.individualid = row8.individualid ;
out15_tmp.userpreferencesshowtitletoexternalusers = row8.userpreferencesshowtitletoexternalusers ;
out15_tmp.userpreferencessuppresseventsfxreminders = row8.userpreferencessuppresseventsfxreminders ;
out15_tmp.receivesinfoemails = row8.receivesinfoemails ;
out15_tmp.userpreferencessrhoverrideactivities = row8.userpreferencessrhoverrideactivities ;
out15_tmp.userpermissionsofflineuser = row8.userpermissionsofflineuser ;
out15_tmp.userpreferencesshowprofilepictoguestusers = row8.userpreferencesshowprofilepictoguestusers ;
out15_tmp.username = row8.username ;
out15_tmp.createddate = row8.createddate ;
out15_tmp.userpreferencesshowcountrytoexternalusers = row8.userpreferencesshowcountrytoexternalusers ;
out15_tmp.country = row8.country ;
out15_tmp.emailpreferencesstayintouchreminder = row8.emailpreferencesstayintouchreminder ;
out15_tmp.userpreferencescachediagnostics = row8.userpreferencescachediagnostics ;
out15_tmp.stayintouchsignature = row8.stayintouchsignature ;
out15_tmp.emailpreferencesautobcc = row8.emailpreferencesautobcc ;
out15_tmp.communitynickname = row8.communitynickname ;
out15_tmp.userpreferencesdisprofpostcommentemail = row8.userpreferencesdisprofpostcommentemail ;
out15_tmp.userpreferencesshowcountrytoguestusers = row8.userpreferencesshowcountrytoguestusers ;
out15_tmp.employeenumber = row8.employeenumber ;
out15_tmp.geocodeaccuracy = row8.geocodeaccuracy ;
out15_tmp.signature = row8.signature ;
out15_tmp.userpermissionssfcontentuser = row8.userpermissionssfcontentuser ;
out15_tmp.postalcode = row8.postalcode ;
out15_tmp.title = row8.title ;
out15_tmp.userpreferencesdisablementionspostemail = row8.userpreferencesdisablementionspostemail ;
out15_tmp.userpreferencesapexpagesdevelopermode = row8.userpreferencesapexpagesdevelopermode ;
out15_tmp.userpreferencesdisablesharepostemail = row8.userpreferencesdisablesharepostemail ;
out15_tmp.et4ae5__validexacttargetuser__c = row8.et4ae5__validexacttargetuser__c ;
out15_tmp.digestfrequency = row8.digestfrequency ;
out15_tmp.userpermissionsmarketinguser = row8.userpermissionsmarketinguser ;
out15_tmp.userpreferencesshowtitletoguestusers = row8.userpreferencesshowtitletoguestusers ;
out15_tmp.isprofilephotoactive = row8.isprofilephotoactive ;
out15_tmp.et4ae5__exacttargetforappexchangeuser__c = row8.et4ae5__exacttargetforappexchangeuser__c ;
out15_tmp.isextindicatorvisible = row8.isextindicatorvisible ;
out15_tmp.createdbyid = row8.createdbyid ;
out15_tmp.userpreferenceshidelightningmigrationmodal = row8.userpreferenceshidelightningmigrationmodal ;
out15_tmp.userpreferenceslightningexperiencepreferred = row8.userpreferenceslightningexperiencepreferred ;
out15_tmp.firstname = row8.firstname ;
out15_tmp.contactid = row8.contactid ;
out15_tmp.userpreferencesshowstatetoexternalusers = row8.userpreferencesshowstatetoexternalusers ;
out15_tmp.userpreferencesshowstreetaddresstoexternalusers = row8.userpreferencesshowstreetaddresstoexternalusers ;
out15_tmp.userpreferenceshidechatteronboardingsplash = row8.userpreferenceshidechatteronboardingsplash ;
out15_tmp.userpreferencesglobalnavgridmenuwtshown = row8.userpreferencesglobalnavgridmenuwtshown ;
out15_tmp.email = row8.email ;
out15_tmp.userroleid = row8.userroleid ;
out15_tmp.userpreferencesshowemailtoguestusers = row8.userpreferencesshowemailtoguestusers ;
out15_tmp.userpreferencespreviewcustomtheme = row8.userpreferencespreviewcustomtheme ;
out15_tmp.lastreferenceddate = row8.lastreferenceddate ;
out15_tmp.fax = row8.fax ;
out15_tmp.noodlecrm__default_owner__c = row8.noodlecrm__default_owner__c ;
out15_tmp.mediumbannerphotourl = row8.mediumbannerphotourl ;
out15_tmp.userpreferencesshowworkphonetoguestusers = row8.userpreferencesshowworkphonetoguestusers ;
out15_tmp.userpreferencesshowfaxtoguestusers = row8.userpreferencesshowfaxtoguestusers ;
out15_tmp.extension = row8.extension ;
out15_tmp.userpreferencesremindersoundoff = row8.userpreferencesremindersoundoff ;
out15_tmp.userpreferencesrecordhomesectioncollapsewtshown = row8.userpreferencesrecordhomesectioncollapsewtshown ;
out15_tmp.userpreferencesshowmanagertoexternalusers = row8.userpreferencesshowmanagertoexternalusers ;
out15_tmp.userpreferencessortfeedbycomment = row8.userpreferencessortfeedbycomment ;
out15_tmp.delegatedapproverid = row8.delegatedapproverid ;
out15_tmp.sfid = row8.sfid ;
out15_tmp.id = row8.id ;
out15 = out15_tmp;

// # Output table : 'out16'
out16_tmp.userpreferencesshowmobilephonetoexternalusers = row8.userpreferencesshowmobilephonetoexternalusers ;
out16_tmp.userpreferencesshowpostalcodetoexternalusers = row8.userpreferencesshowpostalcodetoexternalusers ;
out16_tmp.sendername = row8.sendername ;
out16_tmp.userpreferencesreceivenotificationsasdelegatedapprover = row8.userpreferencesreceivenotificationsasdelegatedapprover ;
out16_tmp.userpreferencesshowcitytoguestusers = row8.userpreferencesshowcitytoguestusers ;
out16_tmp.lastlogindate = row8.lastlogindate ;
out16_tmp.userpreferencesuserdebugmodepref = row8.userpreferencesuserdebugmodepref ;
out16_tmp.userpreferenceshidebiggerphotocallout = row8.userpreferenceshidebiggerphotocallout ;
out16_tmp.lastname = row8.lastname ;
out16_tmp.userpermissionssupportuser = row8.userpermissionssupportuser ;
out16_tmp.userpreferenceshideenduseronboardingassistantmodal = row8.userpreferenceshideenduseronboardingassistantmodal ;
out16_tmp.userpreferencesdisablefollowersemail = row8.userpreferencesdisablefollowersemail ;
out16_tmp.street = row8.street ;
out16_tmp.userpreferencessuppresstasksfxreminders = row8.userpreferencessuppresstasksfxreminders ;
out16_tmp.userpermissionsinteractionuser = row8.userpermissionsinteractionuser ;
out16_tmp.profileid = row8.profileid ;
out16_tmp.receivesadmininfoemails = row8.receivesadmininfoemails ;
out16_tmp.smallphotourl = row8.smallphotourl ;
out16_tmp.usertype = row8.usertype ;
out16_tmp.aboutme = row8.aboutme ;
out16_tmp.et4ae5__default_mid__c = row8.et4ae5__default_mid__c ;
out16_tmp.outofofficemessage = row8.outofofficemessage ;
out16_tmp.userpermissionsmobileuser = row8.userpermissionsmobileuser ;
out16_tmp.forecastenabled = row8.forecastenabled ;
out16_tmp.userpreferenceshascelebrationbadge = row8.userpreferenceshascelebrationbadge ;
out16_tmp.numberoffailedlogins = row8.numberoffailedlogins ;
out16_tmp.senderemail = row8.senderemail ;
out16_tmp.userpreferencesactivityreminderspopup = row8.userpreferencesactivityreminderspopup ;
out16_tmp.userpreferencesdiscommentafterlikeemail = row8.userpreferencesdiscommentafterlikeemail ;
out16_tmp.userpreferencesdismentionscommentemail = row8.userpreferencesdismentionscommentemail ;
out16_tmp.accountid = row8.accountid ;
out16_tmp.companyname = row8.companyname ;
out16_tmp.managerid = row8.managerid ;
out16_tmp.userpreferencesreceivenonotificationsasapprover = row8.userpreferencesreceivenonotificationsasapprover ;
out16_tmp.userpreferenceshidesecondchatteronboardingsplash = row8.userpreferenceshidesecondchatteronboardingsplash ;
out16_tmp.lastvieweddate = row8.lastvieweddate ;
out16_tmp.userpreferencesdisablechangecommentemail = row8.userpreferencesdisablechangecommentemail ;
out16_tmp.userpreferenceshidecsngetchattermobiletask = row8.userpreferenceshidecsngetchattermobiletask ;
out16_tmp.bannerphotourl = row8.bannerphotourl ;
out16_tmp.et4ae5__exacttargetusername__c = row8.et4ae5__exacttargetusername__c ;
out16_tmp.userpreferencesdisableendorsementemail = row8.userpreferencesdisableendorsementemail ;
out16_tmp.userpreferencesfavoritesshowtopfavorites = row8.userpreferencesfavoritesshowtopfavorites ;
out16_tmp.offlinepdatrialexpirationdate = row8.offlinepdatrialexpirationdate ;
out16_tmp.timezonesidkey = row8.timezonesidkey ;
out16_tmp.userpreferencesdisablelikeemail = row8.userpreferencesdisablelikeemail ;
out16_tmp.emailpreferencesautobccstayintouch = row8.emailpreferencesautobccstayintouch ;
out16_tmp.userpreferencesfavoriteswtshown = row8.userpreferencesfavoriteswtshown ;
out16_tmp.userpreferenceseventreminderscheckboxdefault = row8.userpreferenceseventreminderscheckboxdefault ;
out16_tmp.userpreferencespathassistantcollapsed = row8.userpreferencespathassistantcollapsed ;
out16_tmp.stayintouchsubject = row8.stayintouchsubject ;
out16_tmp.city = row8.city ;
out16_tmp.localesidkey = row8.localesidkey ;
out16_tmp.name = row8.name ;
out16_tmp.userpreferencesdisablebookmarkemail = row8.userpreferencesdisablebookmarkemail ;
out16_tmp.federationidentifier = row8.federationidentifier ;
out16_tmp.latitude = row8.latitude ;
out16_tmp.fullphotourl = row8.fullphotourl ;
out16_tmp.mobilephone = row8.mobilephone ;
out16_tmp.userpreferencescreatelexappswtshown = row8.userpreferencescreatelexappswtshown ;
out16_tmp.userpreferencesenableautosubforfeeds = row8.userpreferencesenableautosubforfeeds ;
out16_tmp.userpreferencesshowpostalcodetoguestusers = row8.userpreferencesshowpostalcodetoguestusers ;
out16_tmp.division = row8.division ;
out16_tmp.languagelocalekey = row8.languagelocalekey ;
out16_tmp.userpreferencesshowmobilephonetoguestusers = row8.userpreferencesshowmobilephonetoguestusers ;
out16_tmp.userpreferencesdisableallfeedsemail = row8.userpreferencesdisableallfeedsemail ;
out16_tmp.userpreferencesshowcitytoexternalusers = row8.userpreferencesshowcitytoexternalusers ;
out16_tmp.et4ae5__exacttarget_oauth_token__c = row8.et4ae5__exacttarget_oauth_token__c ;
out16_tmp.lastmodifieddate = row8.lastmodifieddate ;
out16_tmp.callcenterid = row8.callcenterid ;
out16_tmp.userpreferencesshowmanagertoguestusers = row8.userpreferencesshowmanagertoguestusers ;
out16_tmp.phone = row8.phone ;
out16_tmp.userpreferencesdisableprofilepostemail = row8.userpreferencesdisableprofilepostemail ;
out16_tmp.userpreferencesdisablelatercommentemail = row8.userpreferencesdisablelatercommentemail ;
out16_tmp.userpermissionscallcenterautologin = row8.userpermissionscallcenterautologin ;
out16_tmp.et4ae5__default_et_page__c = row8.et4ae5__default_et_page__c ;
out16_tmp.userpreferencespipelineviewhidehelppopover = row8.userpreferencespipelineviewhidehelppopover ;
out16_tmp.userpreferencespreviewlightning = row8.userpreferencespreviewlightning ;
out16_tmp.userpreferencesshowworkphonetoexternalusers = row8.userpreferencesshowworkphonetoexternalusers ;
out16_tmp.longitude = row8.longitude ;
out16_tmp.userpreferencesshowfaxtoexternalusers = row8.userpreferencesshowfaxtoexternalusers ;
out16_tmp.lastpasswordchangedate = row8.lastpasswordchangedate ;
out16_tmp.userpreferenceshides1browserui = row8.userpreferenceshides1browserui ;
out16_tmp.userpreferencesrecordhomereservedwtshown = row8.userpreferencesrecordhomereservedwtshown ;
out16_tmp.userpreferencestaskreminderscheckboxdefault = row8.userpreferencestaskreminderscheckboxdefault ;
out16_tmp.userpreferencesshowemailtoexternalusers = row8.userpreferencesshowemailtoexternalusers ;
out16_tmp.offlinetrialexpirationdate = row8.offlinetrialexpirationdate ;
out16_tmp.isactive = row8.isactive ;
out16_tmp.systemmodstamp = row8.systemmodstamp ;
out16_tmp.smallbannerphotourl = row8.smallbannerphotourl ;
out16_tmp.alias = row8.alias ;
out16_tmp.emailencodingkey = row8.emailencodingkey ;
out16_tmp.badgetext = row8.badgetext ;
out16_tmp.userpreferencesdisablemessageemail = row8.userpreferencesdisablemessageemail ;
out16_tmp.lastmodifiedbyid = row8.lastmodifiedbyid ;
out16_tmp.state = row8.state ;
out16_tmp.userpreferencesdisablefilesharenotificationsforapi = row8.userpreferencesdisablefilesharenotificationsforapi ;
out16_tmp.mediumphotourl = row8.mediumphotourl ;
out16_tmp.userpreferencesshowstreetaddresstoguestusers = row8.userpreferencesshowstreetaddresstoguestusers ;
out16_tmp.userpreferencesshowstatetoguestusers = row8.userpreferencesshowstatetoguestusers ;
out16_tmp.userpreferenceshidecsndesktoptask = row8.userpreferenceshidecsndesktoptask ;
out16_tmp.userpreferencesnewlightningreportrunpageenabled = row8.userpreferencesnewlightningreportrunpageenabled ;
out16_tmp.department = row8.department ;
out16_tmp.userpreferencesexcludemailappattachments = row8.userpreferencesexcludemailappattachments ;
out16_tmp.defaultgroupnotificationfrequency = row8.defaultgroupnotificationfrequency ;
out16_tmp.et4ae5__exacttargetforappexchangeadmin__c = row8.et4ae5__exacttargetforappexchangeadmin__c ;
out16_tmp.stayintouchnote = row8.stayintouchnote ;
out16_tmp.userpreferencesglobalnavbarwtshown = row8.userpreferencesglobalnavbarwtshown ;
out16_tmp.userpreferenceshidesfxwelcomemat = row8.userpreferenceshidesfxwelcomemat ;
out16_tmp.et4ae5__validexacttargetadmin__c = row8.et4ae5__validexacttargetadmin__c ;
out16_tmp.individualid = row8.individualid ;
out16_tmp.userpreferencesshowtitletoexternalusers = row8.userpreferencesshowtitletoexternalusers ;
out16_tmp.userpreferencessuppresseventsfxreminders = row8.userpreferencessuppresseventsfxreminders ;
out16_tmp.receivesinfoemails = row8.receivesinfoemails ;
out16_tmp.userpreferencessrhoverrideactivities = row8.userpreferencessrhoverrideactivities ;
out16_tmp.userpermissionsofflineuser = row8.userpermissionsofflineuser ;
out16_tmp.userpreferencesshowprofilepictoguestusers = row8.userpreferencesshowprofilepictoguestusers ;
out16_tmp.username = row8.username ;
out16_tmp.createddate = row8.createddate ;
out16_tmp.userpreferencesshowcountrytoexternalusers = row8.userpreferencesshowcountrytoexternalusers ;
out16_tmp.country = row8.country ;
out16_tmp.emailpreferencesstayintouchreminder = row8.emailpreferencesstayintouchreminder ;
out16_tmp.userpreferencescachediagnostics = row8.userpreferencescachediagnostics ;
out16_tmp.stayintouchsignature = row8.stayintouchsignature ;
out16_tmp.emailpreferencesautobcc = row8.emailpreferencesautobcc ;
out16_tmp.communitynickname = row8.communitynickname ;
out16_tmp.userpreferencesdisprofpostcommentemail = row8.userpreferencesdisprofpostcommentemail ;
out16_tmp.userpreferencesshowcountrytoguestusers = row8.userpreferencesshowcountrytoguestusers ;
out16_tmp.employeenumber = row8.employeenumber ;
out16_tmp.geocodeaccuracy = row8.geocodeaccuracy ;
out16_tmp.signature = row8.signature ;
out16_tmp.userpermissionssfcontentuser = row8.userpermissionssfcontentuser ;
out16_tmp.postalcode = row8.postalcode ;
out16_tmp.title = row8.title ;
out16_tmp.userpreferencesdisablementionspostemail = row8.userpreferencesdisablementionspostemail ;
out16_tmp.userpreferencesapexpagesdevelopermode = row8.userpreferencesapexpagesdevelopermode ;
out16_tmp.userpreferencesdisablesharepostemail = row8.userpreferencesdisablesharepostemail ;
out16_tmp.et4ae5__validexacttargetuser__c = row8.et4ae5__validexacttargetuser__c ;
out16_tmp.digestfrequency = row8.digestfrequency ;
out16_tmp.userpermissionsmarketinguser = row8.userpermissionsmarketinguser ;
out16_tmp.userpreferencesshowtitletoguestusers = row8.userpreferencesshowtitletoguestusers ;
out16_tmp.isprofilephotoactive = row8.isprofilephotoactive ;
out16_tmp.et4ae5__exacttargetforappexchangeuser__c = row8.et4ae5__exacttargetforappexchangeuser__c ;
out16_tmp.isextindicatorvisible = row8.isextindicatorvisible ;
out16_tmp.createdbyid = row8.createdbyid ;
out16_tmp.userpreferenceshidelightningmigrationmodal = row8.userpreferenceshidelightningmigrationmodal ;
out16_tmp.userpreferenceslightningexperiencepreferred = row8.userpreferenceslightningexperiencepreferred ;
out16_tmp.firstname = row8.firstname ;
out16_tmp.contactid = row8.contactid ;
out16_tmp.userpreferencesshowstatetoexternalusers = row8.userpreferencesshowstatetoexternalusers ;
out16_tmp.userpreferencesshowstreetaddresstoexternalusers = row8.userpreferencesshowstreetaddresstoexternalusers ;
out16_tmp.userpreferenceshidechatteronboardingsplash = row8.userpreferenceshidechatteronboardingsplash ;
out16_tmp.userpreferencesglobalnavgridmenuwtshown = row8.userpreferencesglobalnavgridmenuwtshown ;
out16_tmp.email = row8.email ;
out16_tmp.userroleid = row8.userroleid ;
out16_tmp.userpreferencesshowemailtoguestusers = row8.userpreferencesshowemailtoguestusers ;
out16_tmp.userpreferencespreviewcustomtheme = row8.userpreferencespreviewcustomtheme ;
out16_tmp.lastreferenceddate = row8.lastreferenceddate ;
out16_tmp.fax = row8.fax ;
out16_tmp.noodlecrm__default_owner__c = row8.noodlecrm__default_owner__c ;
out16_tmp.mediumbannerphotourl = row8.mediumbannerphotourl ;
out16_tmp.userpreferencesshowworkphonetoguestusers = row8.userpreferencesshowworkphonetoguestusers ;
out16_tmp.userpreferencesshowfaxtoguestusers = row8.userpreferencesshowfaxtoguestusers ;
out16_tmp.extension = row8.extension ;
out16_tmp.userpreferencesremindersoundoff = row8.userpreferencesremindersoundoff ;
out16_tmp.userpreferencesrecordhomesectioncollapsewtshown = row8.userpreferencesrecordhomesectioncollapsewtshown ;
out16_tmp.userpreferencesshowmanagertoexternalusers = row8.userpreferencesshowmanagertoexternalusers ;
out16_tmp.userpreferencessortfeedbycomment = row8.userpreferencessortfeedbycomment ;
out16_tmp.delegatedapproverid = row8.delegatedapproverid ;
out16_tmp.sfid = row8.sfid ;
out16_tmp.id = row8.id ;
out16 = out16_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "out15"
if(out15 != null) { 



	
	/**
	 * [tFileOutputDelimited_8 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out15");
					}
					


                        String[] rowtFileOutputDelimited_8=new String[170];
                                fileOutputDelimitedUtil_tFileOutputDelimited_8.putValue_0(out15,rowtFileOutputDelimited_8);
                                fileOutputDelimitedUtil_tFileOutputDelimited_8.putValue_1(out15,rowtFileOutputDelimited_8);
                nb_line_tFileOutputDelimited_8++;
                resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);
                                       CsvWritertFileOutputDelimited_8.writeNext(rowtFileOutputDelimited_8);




 


	tos_count_tFileOutputDelimited_8++;

/**
 * [tFileOutputDelimited_8 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	

 



/**
 * [tFileOutputDelimited_8 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	

 



/**
 * [tFileOutputDelimited_8 process_data_end ] stop
 */

} // End of branch "out15"




// Start of branch "out16"
if(out16 != null) { 



	
	/**
	 * [tDBOutput_8 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out16");
					}
					



        whetherReject_tDBOutput_8 = false;
                    if(out16.userpreferencesshowmobilephonetoexternalusers == null) {
pstmt_tDBOutput_8.setNull(1, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(1, out16.userpreferencesshowmobilephonetoexternalusers);
}

                    if(out16.userpreferencesshowpostalcodetoexternalusers == null) {
pstmt_tDBOutput_8.setNull(2, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(2, out16.userpreferencesshowpostalcodetoexternalusers);
}

                    if(out16.sendername == null) {
pstmt_tDBOutput_8.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(3, out16.sendername);
}

                    if(out16.userpreferencesreceivenotificationsasdelegatedapprover == null) {
pstmt_tDBOutput_8.setNull(4, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(4, out16.userpreferencesreceivenotificationsasdelegatedapprover);
}

                    if(out16.userpreferencesshowcitytoguestusers == null) {
pstmt_tDBOutput_8.setNull(5, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(5, out16.userpreferencesshowcitytoguestusers);
}

                    if(out16.lastlogindate != null) {
pstmt_tDBOutput_8.setTimestamp(6, new java.sql.Timestamp(out16.lastlogindate.getTime()));
} else {
pstmt_tDBOutput_8.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(out16.userpreferencesuserdebugmodepref == null) {
pstmt_tDBOutput_8.setNull(7, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(7, out16.userpreferencesuserdebugmodepref);
}

                    if(out16.userpreferenceshidebiggerphotocallout == null) {
pstmt_tDBOutput_8.setNull(8, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(8, out16.userpreferenceshidebiggerphotocallout);
}

                    if(out16.lastname == null) {
pstmt_tDBOutput_8.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(9, out16.lastname);
}

                    if(out16.userpermissionssupportuser == null) {
pstmt_tDBOutput_8.setNull(10, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(10, out16.userpermissionssupportuser);
}

                    if(out16.userpreferenceshideenduseronboardingassistantmodal == null) {
pstmt_tDBOutput_8.setNull(11, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(11, out16.userpreferenceshideenduseronboardingassistantmodal);
}

                    if(out16.userpreferencesdisablefollowersemail == null) {
pstmt_tDBOutput_8.setNull(12, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(12, out16.userpreferencesdisablefollowersemail);
}

                    if(out16.street == null) {
pstmt_tDBOutput_8.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(13, out16.street);
}

                    if(out16.userpreferencessuppresstasksfxreminders == null) {
pstmt_tDBOutput_8.setNull(14, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(14, out16.userpreferencessuppresstasksfxreminders);
}

                    if(out16.userpermissionsinteractionuser == null) {
pstmt_tDBOutput_8.setNull(15, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(15, out16.userpermissionsinteractionuser);
}

                    if(out16.profileid == null) {
pstmt_tDBOutput_8.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(16, out16.profileid);
}

                    if(out16.receivesadmininfoemails == null) {
pstmt_tDBOutput_8.setNull(17, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(17, out16.receivesadmininfoemails);
}

                    if(out16.smallphotourl == null) {
pstmt_tDBOutput_8.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(18, out16.smallphotourl);
}

                    if(out16.usertype == null) {
pstmt_tDBOutput_8.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(19, out16.usertype);
}

                    if(out16.aboutme == null) {
pstmt_tDBOutput_8.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(20, out16.aboutme);
}

                    if(out16.et4ae5__default_mid__c == null) {
pstmt_tDBOutput_8.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(21, out16.et4ae5__default_mid__c);
}

                    if(out16.outofofficemessage == null) {
pstmt_tDBOutput_8.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(22, out16.outofofficemessage);
}

                    if(out16.userpermissionsmobileuser == null) {
pstmt_tDBOutput_8.setNull(23, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(23, out16.userpermissionsmobileuser);
}

                    if(out16.forecastenabled == null) {
pstmt_tDBOutput_8.setNull(24, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(24, out16.forecastenabled);
}

                    if(out16.userpreferenceshascelebrationbadge == null) {
pstmt_tDBOutput_8.setNull(25, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(25, out16.userpreferenceshascelebrationbadge);
}

                    if(out16.numberoffailedlogins == null) {
pstmt_tDBOutput_8.setNull(26, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_8.setInt(26, out16.numberoffailedlogins);
}

                    if(out16.senderemail == null) {
pstmt_tDBOutput_8.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(27, out16.senderemail);
}

                    if(out16.userpreferencesactivityreminderspopup == null) {
pstmt_tDBOutput_8.setNull(28, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(28, out16.userpreferencesactivityreminderspopup);
}

                    if(out16.userpreferencesdiscommentafterlikeemail == null) {
pstmt_tDBOutput_8.setNull(29, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(29, out16.userpreferencesdiscommentafterlikeemail);
}

                    if(out16.userpreferencesdismentionscommentemail == null) {
pstmt_tDBOutput_8.setNull(30, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(30, out16.userpreferencesdismentionscommentemail);
}

                    if(out16.accountid == null) {
pstmt_tDBOutput_8.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(31, out16.accountid);
}

                    if(out16.companyname == null) {
pstmt_tDBOutput_8.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(32, out16.companyname);
}

                    if(out16.managerid == null) {
pstmt_tDBOutput_8.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(33, out16.managerid);
}

                    if(out16.userpreferencesreceivenonotificationsasapprover == null) {
pstmt_tDBOutput_8.setNull(34, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(34, out16.userpreferencesreceivenonotificationsasapprover);
}

                    if(out16.userpreferenceshidesecondchatteronboardingsplash == null) {
pstmt_tDBOutput_8.setNull(35, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(35, out16.userpreferenceshidesecondchatteronboardingsplash);
}

                    if(out16.lastvieweddate != null) {
pstmt_tDBOutput_8.setTimestamp(36, new java.sql.Timestamp(out16.lastvieweddate.getTime()));
} else {
pstmt_tDBOutput_8.setNull(36, java.sql.Types.TIMESTAMP);
}

                    if(out16.userpreferencesdisablechangecommentemail == null) {
pstmt_tDBOutput_8.setNull(37, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(37, out16.userpreferencesdisablechangecommentemail);
}

                    if(out16.userpreferenceshidecsngetchattermobiletask == null) {
pstmt_tDBOutput_8.setNull(38, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(38, out16.userpreferenceshidecsngetchattermobiletask);
}

                    if(out16.bannerphotourl == null) {
pstmt_tDBOutput_8.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(39, out16.bannerphotourl);
}

                    if(out16.et4ae5__exacttargetusername__c == null) {
pstmt_tDBOutput_8.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(40, out16.et4ae5__exacttargetusername__c);
}

                    if(out16.userpreferencesdisableendorsementemail == null) {
pstmt_tDBOutput_8.setNull(41, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(41, out16.userpreferencesdisableendorsementemail);
}

                    if(out16.userpreferencesfavoritesshowtopfavorites == null) {
pstmt_tDBOutput_8.setNull(42, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(42, out16.userpreferencesfavoritesshowtopfavorites);
}

                    if(out16.offlinepdatrialexpirationdate != null) {
pstmt_tDBOutput_8.setTimestamp(43, new java.sql.Timestamp(out16.offlinepdatrialexpirationdate.getTime()));
} else {
pstmt_tDBOutput_8.setNull(43, java.sql.Types.TIMESTAMP);
}

                    if(out16.timezonesidkey == null) {
pstmt_tDBOutput_8.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(44, out16.timezonesidkey);
}

                    if(out16.userpreferencesdisablelikeemail == null) {
pstmt_tDBOutput_8.setNull(45, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(45, out16.userpreferencesdisablelikeemail);
}

                    if(out16.emailpreferencesautobccstayintouch == null) {
pstmt_tDBOutput_8.setNull(46, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(46, out16.emailpreferencesautobccstayintouch);
}

                    if(out16.userpreferencesfavoriteswtshown == null) {
pstmt_tDBOutput_8.setNull(47, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(47, out16.userpreferencesfavoriteswtshown);
}

                    if(out16.userpreferenceseventreminderscheckboxdefault == null) {
pstmt_tDBOutput_8.setNull(48, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(48, out16.userpreferenceseventreminderscheckboxdefault);
}

                    if(out16.userpreferencespathassistantcollapsed == null) {
pstmt_tDBOutput_8.setNull(49, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(49, out16.userpreferencespathassistantcollapsed);
}

                    if(out16.stayintouchsubject == null) {
pstmt_tDBOutput_8.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(50, out16.stayintouchsubject);
}

                    if(out16.city == null) {
pstmt_tDBOutput_8.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(51, out16.city);
}

                    if(out16.localesidkey == null) {
pstmt_tDBOutput_8.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(52, out16.localesidkey);
}

                    if(out16.name == null) {
pstmt_tDBOutput_8.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(53, out16.name);
}

                    if(out16.userpreferencesdisablebookmarkemail == null) {
pstmt_tDBOutput_8.setNull(54, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(54, out16.userpreferencesdisablebookmarkemail);
}

                    if(out16.federationidentifier == null) {
pstmt_tDBOutput_8.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(55, out16.federationidentifier);
}

                    if(out16.latitude == null) {
pstmt_tDBOutput_8.setNull(56, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_8.setDouble(56, out16.latitude);
}

                    if(out16.fullphotourl == null) {
pstmt_tDBOutput_8.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(57, out16.fullphotourl);
}

                    if(out16.mobilephone == null) {
pstmt_tDBOutput_8.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(58, out16.mobilephone);
}

                    if(out16.userpreferencescreatelexappswtshown == null) {
pstmt_tDBOutput_8.setNull(59, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(59, out16.userpreferencescreatelexappswtshown);
}

                    if(out16.userpreferencesenableautosubforfeeds == null) {
pstmt_tDBOutput_8.setNull(60, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(60, out16.userpreferencesenableautosubforfeeds);
}

                    if(out16.userpreferencesshowpostalcodetoguestusers == null) {
pstmt_tDBOutput_8.setNull(61, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(61, out16.userpreferencesshowpostalcodetoguestusers);
}

                    if(out16.division == null) {
pstmt_tDBOutput_8.setNull(62, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(62, out16.division);
}

                    if(out16.languagelocalekey == null) {
pstmt_tDBOutput_8.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(63, out16.languagelocalekey);
}

                    if(out16.userpreferencesshowmobilephonetoguestusers == null) {
pstmt_tDBOutput_8.setNull(64, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(64, out16.userpreferencesshowmobilephonetoguestusers);
}

                    if(out16.userpreferencesdisableallfeedsemail == null) {
pstmt_tDBOutput_8.setNull(65, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(65, out16.userpreferencesdisableallfeedsemail);
}

                    if(out16.userpreferencesshowcitytoexternalusers == null) {
pstmt_tDBOutput_8.setNull(66, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(66, out16.userpreferencesshowcitytoexternalusers);
}

                    if(out16.et4ae5__exacttarget_oauth_token__c == null) {
pstmt_tDBOutput_8.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(67, out16.et4ae5__exacttarget_oauth_token__c);
}

                    if(out16.lastmodifieddate != null) {
pstmt_tDBOutput_8.setTimestamp(68, new java.sql.Timestamp(out16.lastmodifieddate.getTime()));
} else {
pstmt_tDBOutput_8.setNull(68, java.sql.Types.TIMESTAMP);
}

                    if(out16.callcenterid == null) {
pstmt_tDBOutput_8.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(69, out16.callcenterid);
}

                    if(out16.userpreferencesshowmanagertoguestusers == null) {
pstmt_tDBOutput_8.setNull(70, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(70, out16.userpreferencesshowmanagertoguestusers);
}

                    if(out16.phone == null) {
pstmt_tDBOutput_8.setNull(71, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(71, out16.phone);
}

                    if(out16.userpreferencesdisableprofilepostemail == null) {
pstmt_tDBOutput_8.setNull(72, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(72, out16.userpreferencesdisableprofilepostemail);
}

                    if(out16.userpreferencesdisablelatercommentemail == null) {
pstmt_tDBOutput_8.setNull(73, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(73, out16.userpreferencesdisablelatercommentemail);
}

                    if(out16.userpermissionscallcenterautologin == null) {
pstmt_tDBOutput_8.setNull(74, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(74, out16.userpermissionscallcenterautologin);
}

                    if(out16.et4ae5__default_et_page__c == null) {
pstmt_tDBOutput_8.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(75, out16.et4ae5__default_et_page__c);
}

                    if(out16.userpreferencespipelineviewhidehelppopover == null) {
pstmt_tDBOutput_8.setNull(76, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(76, out16.userpreferencespipelineviewhidehelppopover);
}

                    if(out16.userpreferencespreviewlightning == null) {
pstmt_tDBOutput_8.setNull(77, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(77, out16.userpreferencespreviewlightning);
}

                    if(out16.userpreferencesshowworkphonetoexternalusers == null) {
pstmt_tDBOutput_8.setNull(78, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(78, out16.userpreferencesshowworkphonetoexternalusers);
}

                    if(out16.longitude == null) {
pstmt_tDBOutput_8.setNull(79, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_8.setDouble(79, out16.longitude);
}

                    if(out16.userpreferencesshowfaxtoexternalusers == null) {
pstmt_tDBOutput_8.setNull(80, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(80, out16.userpreferencesshowfaxtoexternalusers);
}

                    if(out16.lastpasswordchangedate != null) {
pstmt_tDBOutput_8.setTimestamp(81, new java.sql.Timestamp(out16.lastpasswordchangedate.getTime()));
} else {
pstmt_tDBOutput_8.setNull(81, java.sql.Types.TIMESTAMP);
}

                    if(out16.userpreferenceshides1browserui == null) {
pstmt_tDBOutput_8.setNull(82, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(82, out16.userpreferenceshides1browserui);
}

                    if(out16.userpreferencesrecordhomereservedwtshown == null) {
pstmt_tDBOutput_8.setNull(83, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(83, out16.userpreferencesrecordhomereservedwtshown);
}

                    if(out16.userpreferencestaskreminderscheckboxdefault == null) {
pstmt_tDBOutput_8.setNull(84, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(84, out16.userpreferencestaskreminderscheckboxdefault);
}

                    if(out16.userpreferencesshowemailtoexternalusers == null) {
pstmt_tDBOutput_8.setNull(85, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(85, out16.userpreferencesshowemailtoexternalusers);
}

                    if(out16.offlinetrialexpirationdate != null) {
pstmt_tDBOutput_8.setTimestamp(86, new java.sql.Timestamp(out16.offlinetrialexpirationdate.getTime()));
} else {
pstmt_tDBOutput_8.setNull(86, java.sql.Types.TIMESTAMP);
}

                    if(out16.isactive == null) {
pstmt_tDBOutput_8.setNull(87, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(87, out16.isactive);
}

                    if(out16.systemmodstamp != null) {
pstmt_tDBOutput_8.setTimestamp(88, new java.sql.Timestamp(out16.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_8.setNull(88, java.sql.Types.TIMESTAMP);
}

                    if(out16.smallbannerphotourl == null) {
pstmt_tDBOutput_8.setNull(89, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(89, out16.smallbannerphotourl);
}

                    if(out16.alias == null) {
pstmt_tDBOutput_8.setNull(90, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(90, out16.alias);
}

                    if(out16.emailencodingkey == null) {
pstmt_tDBOutput_8.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(91, out16.emailencodingkey);
}

                    if(out16.badgetext == null) {
pstmt_tDBOutput_8.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(92, out16.badgetext);
}

                    if(out16.userpreferencesdisablemessageemail == null) {
pstmt_tDBOutput_8.setNull(93, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(93, out16.userpreferencesdisablemessageemail);
}

                    if(out16.lastmodifiedbyid == null) {
pstmt_tDBOutput_8.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(94, out16.lastmodifiedbyid);
}

                    if(out16.state == null) {
pstmt_tDBOutput_8.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(95, out16.state);
}

                    if(out16.userpreferencesdisablefilesharenotificationsforapi == null) {
pstmt_tDBOutput_8.setNull(96, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(96, out16.userpreferencesdisablefilesharenotificationsforapi);
}

                    if(out16.mediumphotourl == null) {
pstmt_tDBOutput_8.setNull(97, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(97, out16.mediumphotourl);
}

                    if(out16.userpreferencesshowstreetaddresstoguestusers == null) {
pstmt_tDBOutput_8.setNull(98, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(98, out16.userpreferencesshowstreetaddresstoguestusers);
}

                    if(out16.userpreferencesshowstatetoguestusers == null) {
pstmt_tDBOutput_8.setNull(99, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(99, out16.userpreferencesshowstatetoguestusers);
}

                    if(out16.userpreferenceshidecsndesktoptask == null) {
pstmt_tDBOutput_8.setNull(100, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(100, out16.userpreferenceshidecsndesktoptask);
}

                    if(out16.userpreferencesnewlightningreportrunpageenabled == null) {
pstmt_tDBOutput_8.setNull(101, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(101, out16.userpreferencesnewlightningreportrunpageenabled);
}

                    if(out16.department == null) {
pstmt_tDBOutput_8.setNull(102, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(102, out16.department);
}

                    if(out16.userpreferencesexcludemailappattachments == null) {
pstmt_tDBOutput_8.setNull(103, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(103, out16.userpreferencesexcludemailappattachments);
}

                    if(out16.defaultgroupnotificationfrequency == null) {
pstmt_tDBOutput_8.setNull(104, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(104, out16.defaultgroupnotificationfrequency);
}

                    if(out16.et4ae5__exacttargetforappexchangeadmin__c == null) {
pstmt_tDBOutput_8.setNull(105, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(105, out16.et4ae5__exacttargetforappexchangeadmin__c);
}

                    if(out16.stayintouchnote == null) {
pstmt_tDBOutput_8.setNull(106, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(106, out16.stayintouchnote);
}

                    if(out16.userpreferencesglobalnavbarwtshown == null) {
pstmt_tDBOutput_8.setNull(107, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(107, out16.userpreferencesglobalnavbarwtshown);
}

                    if(out16.userpreferenceshidesfxwelcomemat == null) {
pstmt_tDBOutput_8.setNull(108, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(108, out16.userpreferenceshidesfxwelcomemat);
}

                    if(out16.et4ae5__validexacttargetadmin__c == null) {
pstmt_tDBOutput_8.setNull(109, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(109, out16.et4ae5__validexacttargetadmin__c);
}

                    if(out16.individualid == null) {
pstmt_tDBOutput_8.setNull(110, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(110, out16.individualid);
}

                    if(out16.userpreferencesshowtitletoexternalusers == null) {
pstmt_tDBOutput_8.setNull(111, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(111, out16.userpreferencesshowtitletoexternalusers);
}

                    if(out16.userpreferencessuppresseventsfxreminders == null) {
pstmt_tDBOutput_8.setNull(112, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(112, out16.userpreferencessuppresseventsfxreminders);
}

                    if(out16.receivesinfoemails == null) {
pstmt_tDBOutput_8.setNull(113, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(113, out16.receivesinfoemails);
}

                    if(out16.userpreferencessrhoverrideactivities == null) {
pstmt_tDBOutput_8.setNull(114, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(114, out16.userpreferencessrhoverrideactivities);
}

                    if(out16.userpermissionsofflineuser == null) {
pstmt_tDBOutput_8.setNull(115, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(115, out16.userpermissionsofflineuser);
}

                    if(out16.userpreferencesshowprofilepictoguestusers == null) {
pstmt_tDBOutput_8.setNull(116, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(116, out16.userpreferencesshowprofilepictoguestusers);
}

                    if(out16.username == null) {
pstmt_tDBOutput_8.setNull(117, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(117, out16.username);
}

                    if(out16.createddate != null) {
pstmt_tDBOutput_8.setTimestamp(118, new java.sql.Timestamp(out16.createddate.getTime()));
} else {
pstmt_tDBOutput_8.setNull(118, java.sql.Types.TIMESTAMP);
}

                    if(out16.userpreferencesshowcountrytoexternalusers == null) {
pstmt_tDBOutput_8.setNull(119, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(119, out16.userpreferencesshowcountrytoexternalusers);
}

                    if(out16.country == null) {
pstmt_tDBOutput_8.setNull(120, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(120, out16.country);
}

                    if(out16.emailpreferencesstayintouchreminder == null) {
pstmt_tDBOutput_8.setNull(121, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(121, out16.emailpreferencesstayintouchreminder);
}

                    if(out16.userpreferencescachediagnostics == null) {
pstmt_tDBOutput_8.setNull(122, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(122, out16.userpreferencescachediagnostics);
}

                    if(out16.stayintouchsignature == null) {
pstmt_tDBOutput_8.setNull(123, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(123, out16.stayintouchsignature);
}

                    if(out16.emailpreferencesautobcc == null) {
pstmt_tDBOutput_8.setNull(124, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(124, out16.emailpreferencesautobcc);
}

                    if(out16.communitynickname == null) {
pstmt_tDBOutput_8.setNull(125, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(125, out16.communitynickname);
}

                    if(out16.userpreferencesdisprofpostcommentemail == null) {
pstmt_tDBOutput_8.setNull(126, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(126, out16.userpreferencesdisprofpostcommentemail);
}

                    if(out16.userpreferencesshowcountrytoguestusers == null) {
pstmt_tDBOutput_8.setNull(127, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(127, out16.userpreferencesshowcountrytoguestusers);
}

                    if(out16.employeenumber == null) {
pstmt_tDBOutput_8.setNull(128, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(128, out16.employeenumber);
}

                    if(out16.geocodeaccuracy == null) {
pstmt_tDBOutput_8.setNull(129, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(129, out16.geocodeaccuracy);
}

                    if(out16.signature == null) {
pstmt_tDBOutput_8.setNull(130, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(130, out16.signature);
}

                    if(out16.userpermissionssfcontentuser == null) {
pstmt_tDBOutput_8.setNull(131, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(131, out16.userpermissionssfcontentuser);
}

                    if(out16.postalcode == null) {
pstmt_tDBOutput_8.setNull(132, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(132, out16.postalcode);
}

                    if(out16.title == null) {
pstmt_tDBOutput_8.setNull(133, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(133, out16.title);
}

                    if(out16.userpreferencesdisablementionspostemail == null) {
pstmt_tDBOutput_8.setNull(134, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(134, out16.userpreferencesdisablementionspostemail);
}

                    if(out16.userpreferencesapexpagesdevelopermode == null) {
pstmt_tDBOutput_8.setNull(135, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(135, out16.userpreferencesapexpagesdevelopermode);
}

                    if(out16.userpreferencesdisablesharepostemail == null) {
pstmt_tDBOutput_8.setNull(136, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(136, out16.userpreferencesdisablesharepostemail);
}

                    if(out16.et4ae5__validexacttargetuser__c == null) {
pstmt_tDBOutput_8.setNull(137, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(137, out16.et4ae5__validexacttargetuser__c);
}

                    if(out16.digestfrequency == null) {
pstmt_tDBOutput_8.setNull(138, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(138, out16.digestfrequency);
}

                    if(out16.userpermissionsmarketinguser == null) {
pstmt_tDBOutput_8.setNull(139, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(139, out16.userpermissionsmarketinguser);
}

                    if(out16.userpreferencesshowtitletoguestusers == null) {
pstmt_tDBOutput_8.setNull(140, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(140, out16.userpreferencesshowtitletoguestusers);
}

                    if(out16.isprofilephotoactive == null) {
pstmt_tDBOutput_8.setNull(141, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(141, out16.isprofilephotoactive);
}

                    if(out16.et4ae5__exacttargetforappexchangeuser__c == null) {
pstmt_tDBOutput_8.setNull(142, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(142, out16.et4ae5__exacttargetforappexchangeuser__c);
}

                    if(out16.isextindicatorvisible == null) {
pstmt_tDBOutput_8.setNull(143, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(143, out16.isextindicatorvisible);
}

                    if(out16.createdbyid == null) {
pstmt_tDBOutput_8.setNull(144, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(144, out16.createdbyid);
}

                    if(out16.userpreferenceshidelightningmigrationmodal == null) {
pstmt_tDBOutput_8.setNull(145, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(145, out16.userpreferenceshidelightningmigrationmodal);
}

                    if(out16.userpreferenceslightningexperiencepreferred == null) {
pstmt_tDBOutput_8.setNull(146, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(146, out16.userpreferenceslightningexperiencepreferred);
}

                    if(out16.firstname == null) {
pstmt_tDBOutput_8.setNull(147, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(147, out16.firstname);
}

                    if(out16.contactid == null) {
pstmt_tDBOutput_8.setNull(148, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(148, out16.contactid);
}

                    if(out16.userpreferencesshowstatetoexternalusers == null) {
pstmt_tDBOutput_8.setNull(149, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(149, out16.userpreferencesshowstatetoexternalusers);
}

                    if(out16.userpreferencesshowstreetaddresstoexternalusers == null) {
pstmt_tDBOutput_8.setNull(150, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(150, out16.userpreferencesshowstreetaddresstoexternalusers);
}

                    if(out16.userpreferenceshidechatteronboardingsplash == null) {
pstmt_tDBOutput_8.setNull(151, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(151, out16.userpreferenceshidechatteronboardingsplash);
}

                    if(out16.userpreferencesglobalnavgridmenuwtshown == null) {
pstmt_tDBOutput_8.setNull(152, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(152, out16.userpreferencesglobalnavgridmenuwtshown);
}

                    if(out16.email == null) {
pstmt_tDBOutput_8.setNull(153, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(153, out16.email);
}

                    if(out16.userroleid == null) {
pstmt_tDBOutput_8.setNull(154, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(154, out16.userroleid);
}

                    if(out16.userpreferencesshowemailtoguestusers == null) {
pstmt_tDBOutput_8.setNull(155, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(155, out16.userpreferencesshowemailtoguestusers);
}

                    if(out16.userpreferencespreviewcustomtheme == null) {
pstmt_tDBOutput_8.setNull(156, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(156, out16.userpreferencespreviewcustomtheme);
}

                    if(out16.lastreferenceddate != null) {
pstmt_tDBOutput_8.setTimestamp(157, new java.sql.Timestamp(out16.lastreferenceddate.getTime()));
} else {
pstmt_tDBOutput_8.setNull(157, java.sql.Types.TIMESTAMP);
}

                    if(out16.fax == null) {
pstmt_tDBOutput_8.setNull(158, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(158, out16.fax);
}

                    if(out16.noodlecrm__default_owner__c == null) {
pstmt_tDBOutput_8.setNull(159, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(159, out16.noodlecrm__default_owner__c);
}

                    if(out16.mediumbannerphotourl == null) {
pstmt_tDBOutput_8.setNull(160, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(160, out16.mediumbannerphotourl);
}

                    if(out16.userpreferencesshowworkphonetoguestusers == null) {
pstmt_tDBOutput_8.setNull(161, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(161, out16.userpreferencesshowworkphonetoguestusers);
}

                    if(out16.userpreferencesshowfaxtoguestusers == null) {
pstmt_tDBOutput_8.setNull(162, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(162, out16.userpreferencesshowfaxtoguestusers);
}

                    if(out16.extension == null) {
pstmt_tDBOutput_8.setNull(163, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(163, out16.extension);
}

                    if(out16.userpreferencesremindersoundoff == null) {
pstmt_tDBOutput_8.setNull(164, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(164, out16.userpreferencesremindersoundoff);
}

                    if(out16.userpreferencesrecordhomesectioncollapsewtshown == null) {
pstmt_tDBOutput_8.setNull(165, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(165, out16.userpreferencesrecordhomesectioncollapsewtshown);
}

                    if(out16.userpreferencesshowmanagertoexternalusers == null) {
pstmt_tDBOutput_8.setNull(166, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(166, out16.userpreferencesshowmanagertoexternalusers);
}

                    if(out16.userpreferencessortfeedbycomment == null) {
pstmt_tDBOutput_8.setNull(167, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(167, out16.userpreferencessortfeedbycomment);
}

                    if(out16.delegatedapproverid == null) {
pstmt_tDBOutput_8.setNull(168, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(168, out16.delegatedapproverid);
}

                    if(out16.sfid == null) {
pstmt_tDBOutput_8.setNull(169, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(169, out16.sfid);
}

                    pstmt_tDBOutput_8.setInt(170, out16.id);

			
    		pstmt_tDBOutput_8.addBatch();
    		nb_line_tDBOutput_8++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_8++;
    		  
            if(!whetherReject_tDBOutput_8) {
            }
    			if ((batchSize_tDBOutput_8 > 0) && (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
                try {
						int countSum_tDBOutput_8 = 0;
						    
						for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
				    	
				    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
				    	
            	    	batchSizeCounter_tDBOutput_8 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_8){
				    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
				    	String errormessage_tDBOutput_8;
						if (ne_tDBOutput_8 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
							errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
						}else{
							errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
						}
				    	
				    	int countSum_tDBOutput_8 = 0;
						for(int countEach_tDBOutput_8: e_tDBOutput_8.getUpdateCounts()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
						
				    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
				    	
				    	System.err.println(errormessage_tDBOutput_8);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_8++;

/**
 * [tDBOutput_8 main ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_end ] stop
 */

} // End of branch "out16"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_8!=null) {
				    	CsvWritertFileOutputDelimited_8.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_8_NB_LINE",nb_line_tFileOutputDelimited_8);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_8", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out15");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_8", true);
end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk96", 0, "ok");
				}
				tFileArchive_8Process(globalMap);



/**
 * [tFileOutputDelimited_8 end ] stop
 */




	
	/**
	 * [tDBOutput_8 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



	    try {
				int countSum_tDBOutput_8 = 0;
				if (pstmt_tDBOutput_8 != null && batchSizeCounter_tDBOutput_8 > 0) {
						
					for(int countEach_tDBOutput_8: pstmt_tDBOutput_8.executeBatch()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_8){
	    	java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),sqle_tDBOutput_8=null;
	    	String errormessage_tDBOutput_8;
			if (ne_tDBOutput_8 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_8 = new java.sql.SQLException(e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(), ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
				errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
			}else{
				errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
			}
	    	
	    	int countSum_tDBOutput_8 = 0;
			for(int countEach_tDBOutput_8: e_tDBOutput_8.getUpdateCounts()) {
				countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
			}
			
	    		insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
	    	
	    	System.err.println(errormessage_tDBOutput_8);
	    	
		}
	    
        if(pstmt_tDBOutput_8 != null) {
        		
            pstmt_tDBOutput_8.close();
            resourceMap.remove("pstmt_tDBOutput_8");
        }
    resourceMap.put("statementClosed_tDBOutput_8", true);

	nb_line_deleted_tDBOutput_8=nb_line_deleted_tDBOutput_8+ deletedCount_tDBOutput_8;
	nb_line_update_tDBOutput_8=nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
	nb_line_inserted_tDBOutput_8=nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
	nb_line_rejected_tDBOutput_8=nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;
	
        globalMap.put("tDBOutput_8_NB_LINE",nb_line_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_UPDATED",nb_line_update_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_DELETED",nb_line_deleted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out16");
			  	}
			  	
 

ok_Hash.put("tDBOutput_8", true);
end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk99", 0, "ok");
				}
				tJava_35Process(globalMap);



/**
 * [tDBOutput_8 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	


		if(resourceMap.get("finish_tFileOutputDelimited_8") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_8 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_8");
					
						if(CsvWritertFileOutputDelimited_8!=null) {
					    	CsvWritertFileOutputDelimited_8.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_8 finally ] stop
 */




	
	/**
	 * [tDBOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



    if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
                if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_8")) != null) {
                    pstmtToClose_tDBOutput_8.close();
                }
    }
 



/**
 * [tDBOutput_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_8", false);
		start_Hash.put("tFileArchive_8", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_8";

	
		int tos_count_tFileArchive_8 = 0;
		

 



/**
 * [tFileArchive_8 begin ] stop
 */
	
	/**
	 * [tFileArchive_8 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_8";

	

	

		String sourceFile_tFileArchive_8 = context.staging_S3_dir + "user.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_8), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_8 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_8 = context.staging_S3_dir + "user.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_8 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_8, zipFile_tFileArchive_8);
    zip_tFileArchive_8.setOverwriteExistTargetZip(true);
	zip_tFileArchive_8.setMakeTargetDir(true);
	zip_tFileArchive_8.setCompressLevel(9);
	zip_tFileArchive_8.setArchiveFormat("gzip");
	zip_tFileArchive_8.setAllFiles(true);
	
	
		zip_tFileArchive_8.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_8_ARCHIVE_FILEPATH",zipFile_tFileArchive_8);
   
   globalMap.put("tFileArchive_8_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_8).getName());

   zip_tFileArchive_8.doZip();


 


	tos_count_tFileArchive_8++;

/**
 * [tFileArchive_8 main ] stop
 */
	
	/**
	 * [tFileArchive_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_8";

	

 



/**
 * [tFileArchive_8 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_8";

	

 



/**
 * [tFileArchive_8 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_8 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_8";

	

 

ok_Hash.put("tFileArchive_8", true);
end_Hash.put("tFileArchive_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk97", 0, "ok");
				}
				tS3Put_8Process(globalMap);



/**
 * [tFileArchive_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_8 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_8";

	

 



/**
 * [tFileArchive_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_8_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_8", false);
		start_Hash.put("tS3Put_8", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_8";

	
		int tos_count_tS3Put_8 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_8 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_8 = context.nd_s3_data_lake_path_sfdc +"/user/latest/university_id="+context.university_code+"/user.csv.gz";
	
	int partSizeInBytes_tS3Put_8 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_8 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_8 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_8 = context.staging_S3_dir + "user.csv.gz";
	
	boolean useStream_tS3Put_8 = false;
	java.io.InputStream uploadStream_tS3Put_8 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_8 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_8 instanceof String){
		    useStream_tS3Put_8 = false;
		}else if(fileOrStream_tS3Put_8 instanceof java.io.InputStream){
		    useStream_tS3Put_8 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_8 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_8) {
				java.io.File inputFile_tS3Put_8 = new java.io.File((String)fileOrStream_tS3Put_8);
				
				long multipart_upload_threshold_tS3Put_8 = 5 * 1024 * 1024;
				
    		tm_tS3Put_8 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_8)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_8)
    			.withS3Client(conn_tS3Put_8)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_8 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_8, inputFile_tS3Put_8).withMetadata(objectMetadata_tS3Put_8);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_8 = tm_tS3Put_8.upload(putRequest_tS3Put_8);
  		
  			upload_tS3Put_8.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_8 = ((java.io.InputStream)fileOrStream_tS3Put_8);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_8 = new S3StreamUtil();
    		byte[] buffer_tS3Put_8 = new byte[partSizeInBytes_tS3Put_8];
    		sourceStream_tS3Put_8.read(buffer_tS3Put_8);
    		long curPartSize_tS3Put_8 = streamUtil_tS3Put_8.getLength(buffer_tS3Put_8);
    		boolean multiUpload_tS3Put_8 = curPartSize_tS3Put_8 == partSizeInBytes_tS3Put_8;
    		
    		if(!multiUpload_tS3Put_8) {
    				objectMetadata_tS3Put_8.setContentLength(curPartSize_tS3Put_8);
    				uploadStream_tS3Put_8 = new java.io.ByteArrayInputStream(buffer_tS3Put_8,0,Long.valueOf(curPartSize_tS3Put_8).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_8 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_8, uploadStream_tS3Put_8, objectMetadata_tS3Put_8);
			
    				
    				

    				
    				conn_tS3Put_8.putObject(putRequest_tS3Put_8);
    		} else {
    				uploadStream_tS3Put_8 = new java.io.ByteArrayInputStream(buffer_tS3Put_8);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_8 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_8 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_8, objectMetadata_tS3Put_8);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_8 = conn_tS3Put_8.initiateMultipartUpload(putRequest_tS3Put_8);
      			String uploadId_tS3Put_8 = initResponse_tS3Put_8.getUploadId();
      			int partNumber_tS3Put_8 = 1;
      			boolean streamHasNext_tS3Put_8 = true;
      			byte[] probeAvailability_tS3Put_8 = new byte[1];
				try {
					while (streamHasNext_tS3Put_8) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_8 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_8)
						.withUploadId(uploadId_tS3Put_8)
                    	.withPartNumber(partNumber_tS3Put_8)
						.withPartSize(curPartSize_tS3Put_8);
            		    uploadRequest_tS3Put_8.setInputStream(uploadStream_tS3Put_8);
            		    streamHasNext_tS3Put_8 = sourceStream_tS3Put_8.read(probeAvailability_tS3Put_8) != -1;
            		    if(!streamHasNext_tS3Put_8){
                    	    uploadRequest_tS3Put_8.setLastPart(true);
                    	}

                		partTags_tS3Put_8.add(conn_tS3Put_8.uploadPart(uploadRequest_tS3Put_8).getPartETag());
                  	    partNumber_tS3Put_8++;

          		     	if(uploadStream_tS3Put_8!=null){
      		         			uploadStream_tS3Put_8.close();
          		     	}
          		     	buffer_tS3Put_8 = new byte[partSizeInBytes_tS3Put_8];
          		     	sourceStream_tS3Put_8.read(buffer_tS3Put_8,1,partSizeInBytes_tS3Put_8-1);
          		     	buffer_tS3Put_8[0] = probeAvailability_tS3Put_8[0];
          		     	probeAvailability_tS3Put_8 = new byte[1];
          		     	curPartSize_tS3Put_8 = streamUtil_tS3Put_8.getLength(buffer_tS3Put_8);
          		     	uploadStream_tS3Put_8 = new java.io.ByteArrayInputStream(buffer_tS3Put_8);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_8 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_8,
                        uploadId_tS3Put_8, partTags_tS3Put_8);
            		conn_tS3Put_8.completeMultipartUpload(compRequest_tS3Put_8);
            } catch (java.lang.Exception uploadException_tS3Put_8) {
  							conn_tS3Put_8.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_8, uploadId_tS3Put_8));
    						throw uploadException_tS3Put_8;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_8){
		
			throw(e_tS3Put_8);
		
	}finally{
		if(useStream_tS3Put_8 && uploadStream_tS3Put_8!=null){
    	uploadStream_tS3Put_8.close();
    }
    
    if(tm_tS3Put_8 != null){
        tm_tS3Put_8.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_8 begin ] stop
 */
	
	/**
	 * [tS3Put_8 main ] start
	 */

	

	
	
	currentComponent="tS3Put_8";

	

 


	tos_count_tS3Put_8++;

/**
 * [tS3Put_8 main ] stop
 */
	
	/**
	 * [tS3Put_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_8";

	

 



/**
 * [tS3Put_8 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_8";

	

 



/**
 * [tS3Put_8 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_8 end ] start
	 */

	

	
	
	currentComponent="tS3Put_8";

	

 

ok_Hash.put("tS3Put_8", true);
end_Hash.put("tS3Put_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk98", 0, "ok");
				}
				tJava_36Process(globalMap);



/**
 * [tS3Put_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_8 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_8";

	

 



/**
 * [tS3Put_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_8_SUBPROCESS_STATE", 1);
	}
	

public void tJava_36Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_36_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_36 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_36", false);
		start_Hash.put("tJava_36", System.currentTimeMillis());
		
	
	currentComponent="tJava_36";

	
		int tos_count_tJava_36 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_36 begin ] stop
 */
	
	/**
	 * [tJava_36 main ] start
	 */

	

	
	
	currentComponent="tJava_36";

	

 


	tos_count_tJava_36++;

/**
 * [tJava_36 main ] stop
 */
	
	/**
	 * [tJava_36 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_36";

	

 



/**
 * [tJava_36 process_data_begin ] stop
 */
	
	/**
	 * [tJava_36 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_36";

	

 



/**
 * [tJava_36 process_data_end ] stop
 */
	
	/**
	 * [tJava_36 end ] start
	 */

	

	
	
	currentComponent="tJava_36";

	

 

ok_Hash.put("tJava_36", true);
end_Hash.put("tJava_36", System.currentTimeMillis());




/**
 * [tJava_36 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_36 finally ] start
	 */

	

	
	
	currentComponent="tJava_36";

	

 



/**
 * [tJava_36 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_36_SUBPROCESS_STATE", 1);
	}
	

public void tJava_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_35_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_35 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_35", false);
		start_Hash.put("tJava_35", System.currentTimeMillis());
		
	
	currentComponent="tJava_35";

	
		int tos_count_tJava_35 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_8_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");
 



/**
 * [tJava_35 begin ] stop
 */
	
	/**
	 * [tJava_35 main ] start
	 */

	

	
	
	currentComponent="tJava_35";

	

 


	tos_count_tJava_35++;

/**
 * [tJava_35 main ] stop
 */
	
	/**
	 * [tJava_35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_35";

	

 



/**
 * [tJava_35 process_data_begin ] stop
 */
	
	/**
	 * [tJava_35 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_35";

	

 



/**
 * [tJava_35 process_data_end ] stop
 */
	
	/**
	 * [tJava_35 end ] start
	 */

	

	
	
	currentComponent="tJava_35";

	

 

ok_Hash.put("tJava_35", true);
end_Hash.put("tJava_35", System.currentTimeMillis());




/**
 * [tJava_35 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_35 finally ] start
	 */

	

	
	
	currentComponent="tJava_35";

	

 



/**
 * [tJava_35 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_35_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_4", false);
		start_Hash.put("tS3Copy_4", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_4";

	
		int tos_count_tS3Copy_4 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_4 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_4 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_4 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_4 = null;
		
		
		final String from_bucket_tS3Copy_4 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_4 = context.nd_s3_data_lake_path_sfdc+"/userrole/latest/university_id="+context.university_code+"/userrole.csv.gz";
		final String to_bucket_tS3Copy_4 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_4 = context.nd_s3_data_lake_path_sfdc+"/userrole/archive/university_id="+context.university_code+"/userrole_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_4 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_4, from_key_tS3Copy_4);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_4 = conn_tS3Copy_4.getObjectMetadata(metadataRequest_tS3Copy_4);
    long objectSize_tS3Copy_4 = metadataResult_tS3Copy_4.getContentLength();
    
    boolean multiUpload_tS3Copy_4 = objectSize_tS3Copy_4 > maxBytes4SingleCopyCall_tS3Copy_4;
    
    if(!multiUpload_tS3Copy_4) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_4 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_4, from_key_tS3Copy_4, to_bucket_tS3Copy_4, to_key_tS3Copy_4);
    		if(objectMetadata_tS3Copy_4 != null) {
    				putRequest_tS3Copy_4.setNewObjectMetadata(objectMetadata_tS3Copy_4);
    		}
    		
    		

    		
    		conn_tS3Copy_4.copyObject(putRequest_tS3Copy_4);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_4 = metadataResult_tS3Copy_4.getUserMetadata();
						if((userMetadata_tS3Copy_4!=null) && userMetadata_tS3Copy_4.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_4 = null;
    				if(objectMetadata_tS3Copy_4 != null) {
    						putRequest_tS3Copy_4 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_4, to_key_tS3Copy_4, objectMetadata_tS3Copy_4);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_4 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_4, to_key_tS3Copy_4, metadataResult_tS3Copy_4);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_4 = conn_tS3Copy_4.initiateMultipartUpload(putRequest_tS3Copy_4);
            
            long bytePosition_tS3Copy_4 = 0;
            int partNum_tS3Copy_4 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_4 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_4 < objectSize_tS3Copy_4) {
                long lastByte_tS3Copy_4 = java.lang.Math.min(bytePosition_tS3Copy_4 + partSizeInBytes_tS3Copy_4 - 1, objectSize_tS3Copy_4 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_4 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_4)
                        .withSourceKey(from_key_tS3Copy_4)
                        .withDestinationBucketName(to_bucket_tS3Copy_4)
                        .withDestinationKey(to_key_tS3Copy_4)
                        .withUploadId(initResult_tS3Copy_4.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_4)
                        .withLastByte(lastByte_tS3Copy_4)
                        .withPartNumber(partNum_tS3Copy_4++);
                partTags_tS3Copy_4.add(conn_tS3Copy_4.copyPart(copyPartRequest_tS3Copy_4).getPartETag());
                bytePosition_tS3Copy_4 += partSizeInBytes_tS3Copy_4;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_4 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_4,
                                                                        to_key_tS3Copy_4, 
                                                                        initResult_tS3Copy_4.getUploadId(),
                                                                        partTags_tS3Copy_4);
            conn_tS3Copy_4.completeMultipartUpload(completeRequest_tS3Copy_4);
    		} catch (java.lang.Exception uploadException_tS3Copy_4) {
    				conn_tS3Copy_4.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_4, to_key_tS3Copy_4, initResult_tS3Copy_4.getUploadId()));
    				throw uploadException_tS3Copy_4;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_4){
		
			System.err.println(e_tS3Copy_4.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_4 begin ] stop
 */
	
	/**
	 * [tS3Copy_4 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_4";

	

 


	tos_count_tS3Copy_4++;

/**
 * [tS3Copy_4 main ] stop
 */
	
	/**
	 * [tS3Copy_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_4";

	

 



/**
 * [tS3Copy_4 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_4";

	

 



/**
 * [tS3Copy_4 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_4 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_4";

	

 

ok_Hash.put("tS3Copy_4", true);
end_Hash.put("tS3Copy_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk72", 0, "ok");
				}
				tJava_15Process(globalMap);



/**
 * [tS3Copy_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Copy_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tS3Copy_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_4 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_4";

	

 



/**
 * [tS3Copy_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_15", false);
		start_Hash.put("tJava_15", System.currentTimeMillis());
		
	
	currentComponent="tJava_15";

	
		int tos_count_tJava_15 = 0;
		


System.out.println("Step 0: Running For Userrole Object");
System.out.println("Step 1: Copied Previous Run File To Archive");
 



/**
 * [tJava_15 begin ] stop
 */
	
	/**
	 * [tJava_15 main ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 


	tos_count_tJava_15++;

/**
 * [tJava_15 main ] stop
 */
	
	/**
	 * [tJava_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 



/**
 * [tJava_15 process_data_begin ] stop
 */
	
	/**
	 * [tJava_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 



/**
 * [tJava_15 process_data_end ] stop
 */
	
	/**
	 * [tJava_15 end ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 

ok_Hash.put("tJava_15", true);
end_Hash.put("tJava_15", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk73", 0, "ok");
				}
				tS3Delete_4Process(globalMap);



/**
 * [tJava_15 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_15 finally ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 



/**
 * [tJava_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_4", false);
		start_Hash.put("tS3Delete_4", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_4";

	
		int tos_count_tS3Delete_4 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_4 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_4 = context.nd_s3_data_lake_path_sfdc +"/userrole/latest/university_id="+context.university_code+"/userrole.csv.gz";
		if(key_tS3Delete_4!=null && key_tS3Delete_4.trim().length()>0){
			
			conn_tS3Delete_4.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_4);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_4){
		
			System.err.println(e_tS3Delete_4.getMessage());
		
	}
	
 



/**
 * [tS3Delete_4 begin ] stop
 */
	
	/**
	 * [tS3Delete_4 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_4";

	

 


	tos_count_tS3Delete_4++;

/**
 * [tS3Delete_4 main ] stop
 */
	
	/**
	 * [tS3Delete_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_4";

	

 



/**
 * [tS3Delete_4 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_4";

	

 



/**
 * [tS3Delete_4 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_4 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_4";

	

 

ok_Hash.put("tS3Delete_4", true);
end_Hash.put("tS3Delete_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk74", 0, "ok");
				}
				tJava_16Process(globalMap);



/**
 * [tS3Delete_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_4 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_4";

	

 



/**
 * [tS3Delete_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_16", false);
		start_Hash.put("tJava_16", System.currentTimeMillis());
		
	
	currentComponent="tJava_16";

	
		int tos_count_tJava_16 = 0;
		


System.out.println("Step 2: Deleted Previous Run File From Latest Folder");
System.out.println("Step 3: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_16 begin ] stop
 */
	
	/**
	 * [tJava_16 main ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 


	tos_count_tJava_16++;

/**
 * [tJava_16 main ] stop
 */
	
	/**
	 * [tJava_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 



/**
 * [tJava_16 process_data_begin ] stop
 */
	
	/**
	 * [tJava_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 



/**
 * [tJava_16 process_data_end ] stop
 */
	
	/**
	 * [tJava_16 end ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 

ok_Hash.put("tJava_16", true);
end_Hash.put("tJava_16", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk87", 0, "ok");
				}
				tDBInput_9Process(globalMap);



/**
 * [tJava_16 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_16 finally ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 



/**
 * [tJava_16 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_16_SUBPROCESS_STATE", 1);
	}
	


public static class out17Struct implements routines.system.IPersistableRow<out17Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String developername;

				public String getDevelopername () {
					return this.developername;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out17Struct other = (out17Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out17Struct other) {

		other.name = this.name;
	            other.systemmodstamp = this.systemmodstamp;
	            other.developername = this.developername;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            
	}

	public void copyKeysDataTo(out17Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.developername = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.developername,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",developername="+developername);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out17Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out18Struct implements routines.system.IPersistableRow<out18Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String developername;

				public String getDevelopername () {
					return this.developername;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out18Struct other = (out18Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out18Struct other) {

		other.name = this.name;
	            other.systemmodstamp = this.systemmodstamp;
	            other.developername = this.developername;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            
	}

	public void copyKeysDataTo(out18Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.developername = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.developername,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",developername="+developername);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String developername;

				public String getDevelopername () {
					return this.developername;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.developername = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.developername,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",developername="+developername);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
out17Struct out17 = new out17Struct();
out18Struct out18 = new out18Struct();





	
	/**
	 * [tFileOutputDelimited_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_9", false);
		start_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out17");
					}
				
		int tos_count_tFileOutputDelimited_9 = 0;
		

String fileName_tFileOutputDelimited_9 = "";
    fileName_tFileOutputDelimited_9 = (new java.io.File(context.staging_S3_dir + "userrole.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_9 = null;
    String extension_tFileOutputDelimited_9 = null;
    String directory_tFileOutputDelimited_9 = null;
    if((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
            extension_tFileOutputDelimited_9 = "";
        } else {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0, fileName_tFileOutputDelimited_9.lastIndexOf("."));
            extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0, fileName_tFileOutputDelimited_9.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0, fileName_tFileOutputDelimited_9.lastIndexOf("."));
            extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
            extension_tFileOutputDelimited_9 = "";
        }
        directory_tFileOutputDelimited_9 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_9 = true;
    java.io.File filetFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
    globalMap.put("tFileOutputDelimited_9_FILE_NAME",fileName_tFileOutputDelimited_9);
                String[] headColutFileOutputDelimited_9=new String[5];
            class CSVBasicSet_tFileOutputDelimited_9{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_9[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_9 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_9[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_9[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_9 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_9[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_9[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_9 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_9[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_9 = 0;
            int splitedFileNo_tFileOutputDelimited_9 =0;
            int currentRow_tFileOutputDelimited_9 = 0;


            CSVBasicSet_tFileOutputDelimited_9 csvSettings_tFileOutputDelimited_9 = new CSVBasicSet_tFileOutputDelimited_9();
            csvSettings_tFileOutputDelimited_9.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_9.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_9.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_9 != null && directory_tFileOutputDelimited_9.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_9 = new java.io.File(directory_tFileOutputDelimited_9);
                        if(!dir_tFileOutputDelimited_9.exists()) {
                            dir_tFileOutputDelimited_9.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_9 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
                            if(fileToDelete_tFileOutputDelimited_9.exists()) {
                                fileToDelete_tFileOutputDelimited_9.delete();
                            }
                            CsvWritertFileOutputDelimited_9 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_9, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_9.setSeparator(csvSettings_tFileOutputDelimited_9.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_9.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_9.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_9.setLineEnd(""+csvSettings_tFileOutputDelimited_9.getRowDelim());
                    }
                        if(filetFileOutputDelimited_9.length()==0){
                                    headColutFileOutputDelimited_9[0]="name";
                                    headColutFileOutputDelimited_9[1]="systemmodstamp";
                                    headColutFileOutputDelimited_9[2]="developername";
                                    headColutFileOutputDelimited_9[3]="sfid";
                                    headColutFileOutputDelimited_9[4]="id";
                            CsvWritertFileOutputDelimited_9.writeNext(headColutFileOutputDelimited_9);
                            CsvWritertFileOutputDelimited_9.flush();
                        }
                CsvWritertFileOutputDelimited_9.setEscapeChar(csvSettings_tFileOutputDelimited_9.getEscapeChar());
                CsvWritertFileOutputDelimited_9.setQuoteChar(csvSettings_tFileOutputDelimited_9.getTextEnclosure());
                CsvWritertFileOutputDelimited_9.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_9", CsvWritertFileOutputDelimited_9);
resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

 



/**
 * [tFileOutputDelimited_9 begin ] stop
 */




	
	/**
	 * [tDBOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_9", false);
		start_Hash.put("tDBOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out18");
					}
				
		int tos_count_tDBOutput_9 = 0;
		





String dbschema_tDBOutput_9 = null;
	dbschema_tDBOutput_9 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_9 = null;
if(dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
	tableName_tDBOutput_9 = ("userrole");
} else {
	tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "\".\"" + ("userrole");
}

int nb_line_tDBOutput_9 = 0;
int nb_line_update_tDBOutput_9 = 0;
int nb_line_inserted_tDBOutput_9 = 0;
int nb_line_deleted_tDBOutput_9 = 0;
int nb_line_rejected_tDBOutput_9 = 0;

int deletedCount_tDBOutput_9=0;
int updatedCount_tDBOutput_9=0;
int insertedCount_tDBOutput_9=0;
int rejectedCount_tDBOutput_9=0;

boolean whetherReject_tDBOutput_9 = false;

java.sql.Connection conn_tDBOutput_9 = null;
String dbUser_tDBOutput_9 = null;

	conn_tDBOutput_9 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_9 = 100000;
   int batchSizeCounter_tDBOutput_9=0;

int count_tDBOutput_9=0;
            try (java.sql.Statement stmtClear_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
                stmtClear_tDBOutput_9.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_9 + "\"");
            }
	    String insert_tDBOutput_9 = "INSERT INTO \"" + tableName_tDBOutput_9 + "\" (\"name\",\"systemmodstamp\",\"developername\",\"sfid\",\"id\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
	    resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);
	    

 



/**
 * [tDBOutput_9 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
out17Struct out17_tmp = new out17Struct();
out18Struct out18_tmp = new out18Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				conn_tDBInput_9 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "SELECT \n  name, \n  systemmodstamp, \n  developername, \n  sfid, \n  id \nFROM "+context.university_code+".userrole ";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								row9.name = null;
							} else {
	                         		
        	row9.name = routines.system.JDBCUtil.getString(rs_tDBInput_9, 1, true);
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								row9.systemmodstamp = null;
							} else {
										
			row9.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 2);
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								row9.developername = null;
							} else {
	                         		
        	row9.developername = routines.system.JDBCUtil.getString(rs_tDBInput_9, 3, true);
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								row9.sfid = null;
							} else {
	                         		
        	row9.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_9, 4, true);
		                    }
							if(colQtyInRs_tDBInput_9 < 5) {
								row9.id = 0;
							} else {
		                          
            row9.id = rs_tDBInput_9.getInt(5);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

out17 = null;
out18 = null;


// # Output table : 'out17'
out17_tmp.name = row9.name ;
out17_tmp.systemmodstamp = row9.systemmodstamp ;
out17_tmp.developername = row9.developername ;
out17_tmp.sfid = row9.sfid ;
out17_tmp.id = row9.id ;
out17 = out17_tmp;

// # Output table : 'out18'
out18_tmp.name = row9.name ;
out18_tmp.systemmodstamp = row9.systemmodstamp ;
out18_tmp.developername = row9.developername ;
out18_tmp.sfid = row9.sfid ;
out18_tmp.id = row9.id ;
out18 = out18_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "out17"
if(out17 != null) { 



	
	/**
	 * [tFileOutputDelimited_9 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out17");
					}
					


                        String[] rowtFileOutputDelimited_9=new String[5];
                            rowtFileOutputDelimited_9[0]=out17.name == null ? null : out17.name;
                            rowtFileOutputDelimited_9[1]=out17.systemmodstamp == null ? null : FormatterUtils.format_Date(out17.systemmodstamp, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_9[2]=out17.developername == null ? null : out17.developername;
                            rowtFileOutputDelimited_9[3]=out17.sfid == null ? null : out17.sfid;
                            rowtFileOutputDelimited_9[4]=String.valueOf(out17.id);
                nb_line_tFileOutputDelimited_9++;
                resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);
                                       CsvWritertFileOutputDelimited_9.writeNext(rowtFileOutputDelimited_9);




 


	tos_count_tFileOutputDelimited_9++;

/**
 * [tFileOutputDelimited_9 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	

 



/**
 * [tFileOutputDelimited_9 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	

 



/**
 * [tFileOutputDelimited_9 process_data_end ] stop
 */

} // End of branch "out17"




// Start of branch "out18"
if(out18 != null) { 



	
	/**
	 * [tDBOutput_9 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out18");
					}
					



        whetherReject_tDBOutput_9 = false;
                    if(out18.name == null) {
pstmt_tDBOutput_9.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(1, out18.name);
}

                    if(out18.systemmodstamp != null) {
pstmt_tDBOutput_9.setTimestamp(2, new java.sql.Timestamp(out18.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_9.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(out18.developername == null) {
pstmt_tDBOutput_9.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(3, out18.developername);
}

                    if(out18.sfid == null) {
pstmt_tDBOutput_9.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(4, out18.sfid);
}

                    pstmt_tDBOutput_9.setInt(5, out18.id);

			
    		pstmt_tDBOutput_9.addBatch();
    		nb_line_tDBOutput_9++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_9++;
    		  
            if(!whetherReject_tDBOutput_9) {
            }
    			if ((batchSize_tDBOutput_9 > 0) && (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {
                try {
						int countSum_tDBOutput_9 = 0;
						    
						for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}
				    	
				    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
				    	
            	    	batchSizeCounter_tDBOutput_9 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_9){
				    	java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),sqle_tDBOutput_9=null;
				    	String errormessage_tDBOutput_9;
						if (ne_tDBOutput_9 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_9 = new java.sql.SQLException(e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(), ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
							errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
						}else{
							errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
						}
				    	
				    	int countSum_tDBOutput_9 = 0;
						for(int countEach_tDBOutput_9: e_tDBOutput_9.getUpdateCounts()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
						}
						
				    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
				    	
				    	System.err.println(errormessage_tDBOutput_9);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_9++;

/**
 * [tDBOutput_9 main ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_end ] stop
 */

} // End of branch "out18"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_9 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_9!=null) {
				    	CsvWritertFileOutputDelimited_9.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_9_NB_LINE",nb_line_tFileOutputDelimited_9);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_9", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out17");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_9", true);
end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk100", 0, "ok");
				}
				tFileArchive_9Process(globalMap);



/**
 * [tFileOutputDelimited_9 end ] stop
 */




	
	/**
	 * [tDBOutput_9 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



	    try {
				int countSum_tDBOutput_9 = 0;
				if (pstmt_tDBOutput_9 != null && batchSizeCounter_tDBOutput_9 > 0) {
						
					for(int countEach_tDBOutput_9: pstmt_tDBOutput_9.executeBatch()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_9){
	    	java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),sqle_tDBOutput_9=null;
	    	String errormessage_tDBOutput_9;
			if (ne_tDBOutput_9 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_9 = new java.sql.SQLException(e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(), ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
				errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
			}else{
				errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
			}
	    	
	    	int countSum_tDBOutput_9 = 0;
			for(int countEach_tDBOutput_9: e_tDBOutput_9.getUpdateCounts()) {
				countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
			}
			
	    		insertedCount_tDBOutput_9 += countSum_tDBOutput_9;
	    	
	    	System.err.println(errormessage_tDBOutput_9);
	    	
		}
	    
        if(pstmt_tDBOutput_9 != null) {
        		
            pstmt_tDBOutput_9.close();
            resourceMap.remove("pstmt_tDBOutput_9");
        }
    resourceMap.put("statementClosed_tDBOutput_9", true);

	nb_line_deleted_tDBOutput_9=nb_line_deleted_tDBOutput_9+ deletedCount_tDBOutput_9;
	nb_line_update_tDBOutput_9=nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
	nb_line_inserted_tDBOutput_9=nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
	nb_line_rejected_tDBOutput_9=nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;
	
        globalMap.put("tDBOutput_9_NB_LINE",nb_line_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_UPDATED",nb_line_update_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_DELETED",nb_line_deleted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out18");
			  	}
			  	
 

ok_Hash.put("tDBOutput_9", true);
end_Hash.put("tDBOutput_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk103", 0, "ok");
				}
				tJava_37Process(globalMap);



/**
 * [tDBOutput_9 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_9 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	


		if(resourceMap.get("finish_tFileOutputDelimited_9") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_9 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_9");
					
						if(CsvWritertFileOutputDelimited_9!=null) {
					    	CsvWritertFileOutputDelimited_9.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_9 finally ] stop
 */




	
	/**
	 * [tDBOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



    if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
                if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_9")) != null) {
                    pstmtToClose_tDBOutput_9.close();
                }
    }
 



/**
 * [tDBOutput_9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_9", false);
		start_Hash.put("tFileArchive_9", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_9";

	
		int tos_count_tFileArchive_9 = 0;
		

 



/**
 * [tFileArchive_9 begin ] stop
 */
	
	/**
	 * [tFileArchive_9 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_9";

	

	

		String sourceFile_tFileArchive_9 = context.staging_S3_dir + "userrole.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_9), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_9 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_9 = context.staging_S3_dir + "userrole.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_9 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_9, zipFile_tFileArchive_9);
    zip_tFileArchive_9.setOverwriteExistTargetZip(true);
	zip_tFileArchive_9.setMakeTargetDir(true);
	zip_tFileArchive_9.setCompressLevel(9);
	zip_tFileArchive_9.setArchiveFormat("gzip");
	zip_tFileArchive_9.setAllFiles(true);
	
	
		zip_tFileArchive_9.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_9_ARCHIVE_FILEPATH",zipFile_tFileArchive_9);
   
   globalMap.put("tFileArchive_9_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_9).getName());

   zip_tFileArchive_9.doZip();


 


	tos_count_tFileArchive_9++;

/**
 * [tFileArchive_9 main ] stop
 */
	
	/**
	 * [tFileArchive_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_9";

	

 



/**
 * [tFileArchive_9 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_9";

	

 



/**
 * [tFileArchive_9 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_9 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_9";

	

 

ok_Hash.put("tFileArchive_9", true);
end_Hash.put("tFileArchive_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk101", 0, "ok");
				}
				tS3Put_9Process(globalMap);



/**
 * [tFileArchive_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_9 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_9";

	

 



/**
 * [tFileArchive_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_9_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_9", false);
		start_Hash.put("tS3Put_9", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_9";

	
		int tos_count_tS3Put_9 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_9 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_9 = context.nd_s3_data_lake_path_sfdc +"/userrole/latest/university_id="+context.university_code+"/userrole.csv.gz";
	
	int partSizeInBytes_tS3Put_9 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_9 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_9 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_9 = context.staging_S3_dir + "userrole.csv.gz";
	
	boolean useStream_tS3Put_9 = false;
	java.io.InputStream uploadStream_tS3Put_9 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_9 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_9 instanceof String){
		    useStream_tS3Put_9 = false;
		}else if(fileOrStream_tS3Put_9 instanceof java.io.InputStream){
		    useStream_tS3Put_9 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_9 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_9) {
				java.io.File inputFile_tS3Put_9 = new java.io.File((String)fileOrStream_tS3Put_9);
				
				long multipart_upload_threshold_tS3Put_9 = 5 * 1024 * 1024;
				
    		tm_tS3Put_9 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_9)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_9)
    			.withS3Client(conn_tS3Put_9)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_9 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_9, inputFile_tS3Put_9).withMetadata(objectMetadata_tS3Put_9);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_9 = tm_tS3Put_9.upload(putRequest_tS3Put_9);
  		
  			upload_tS3Put_9.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_9 = ((java.io.InputStream)fileOrStream_tS3Put_9);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_9 = new S3StreamUtil();
    		byte[] buffer_tS3Put_9 = new byte[partSizeInBytes_tS3Put_9];
    		sourceStream_tS3Put_9.read(buffer_tS3Put_9);
    		long curPartSize_tS3Put_9 = streamUtil_tS3Put_9.getLength(buffer_tS3Put_9);
    		boolean multiUpload_tS3Put_9 = curPartSize_tS3Put_9 == partSizeInBytes_tS3Put_9;
    		
    		if(!multiUpload_tS3Put_9) {
    				objectMetadata_tS3Put_9.setContentLength(curPartSize_tS3Put_9);
    				uploadStream_tS3Put_9 = new java.io.ByteArrayInputStream(buffer_tS3Put_9,0,Long.valueOf(curPartSize_tS3Put_9).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_9 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_9, uploadStream_tS3Put_9, objectMetadata_tS3Put_9);
			
    				
    				

    				
    				conn_tS3Put_9.putObject(putRequest_tS3Put_9);
    		} else {
    				uploadStream_tS3Put_9 = new java.io.ByteArrayInputStream(buffer_tS3Put_9);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_9 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_9 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_9, objectMetadata_tS3Put_9);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_9 = conn_tS3Put_9.initiateMultipartUpload(putRequest_tS3Put_9);
      			String uploadId_tS3Put_9 = initResponse_tS3Put_9.getUploadId();
      			int partNumber_tS3Put_9 = 1;
      			boolean streamHasNext_tS3Put_9 = true;
      			byte[] probeAvailability_tS3Put_9 = new byte[1];
				try {
					while (streamHasNext_tS3Put_9) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_9 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_9)
						.withUploadId(uploadId_tS3Put_9)
                    	.withPartNumber(partNumber_tS3Put_9)
						.withPartSize(curPartSize_tS3Put_9);
            		    uploadRequest_tS3Put_9.setInputStream(uploadStream_tS3Put_9);
            		    streamHasNext_tS3Put_9 = sourceStream_tS3Put_9.read(probeAvailability_tS3Put_9) != -1;
            		    if(!streamHasNext_tS3Put_9){
                    	    uploadRequest_tS3Put_9.setLastPart(true);
                    	}

                		partTags_tS3Put_9.add(conn_tS3Put_9.uploadPart(uploadRequest_tS3Put_9).getPartETag());
                  	    partNumber_tS3Put_9++;

          		     	if(uploadStream_tS3Put_9!=null){
      		         			uploadStream_tS3Put_9.close();
          		     	}
          		     	buffer_tS3Put_9 = new byte[partSizeInBytes_tS3Put_9];
          		     	sourceStream_tS3Put_9.read(buffer_tS3Put_9,1,partSizeInBytes_tS3Put_9-1);
          		     	buffer_tS3Put_9[0] = probeAvailability_tS3Put_9[0];
          		     	probeAvailability_tS3Put_9 = new byte[1];
          		     	curPartSize_tS3Put_9 = streamUtil_tS3Put_9.getLength(buffer_tS3Put_9);
          		     	uploadStream_tS3Put_9 = new java.io.ByteArrayInputStream(buffer_tS3Put_9);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_9 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_9,
                        uploadId_tS3Put_9, partTags_tS3Put_9);
            		conn_tS3Put_9.completeMultipartUpload(compRequest_tS3Put_9);
            } catch (java.lang.Exception uploadException_tS3Put_9) {
  							conn_tS3Put_9.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_9, uploadId_tS3Put_9));
    						throw uploadException_tS3Put_9;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_9){
		
			throw(e_tS3Put_9);
		
	}finally{
		if(useStream_tS3Put_9 && uploadStream_tS3Put_9!=null){
    	uploadStream_tS3Put_9.close();
    }
    
    if(tm_tS3Put_9 != null){
        tm_tS3Put_9.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_9 begin ] stop
 */
	
	/**
	 * [tS3Put_9 main ] start
	 */

	

	
	
	currentComponent="tS3Put_9";

	

 


	tos_count_tS3Put_9++;

/**
 * [tS3Put_9 main ] stop
 */
	
	/**
	 * [tS3Put_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_9";

	

 



/**
 * [tS3Put_9 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_9";

	

 



/**
 * [tS3Put_9 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_9 end ] start
	 */

	

	
	
	currentComponent="tS3Put_9";

	

 

ok_Hash.put("tS3Put_9", true);
end_Hash.put("tS3Put_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk102", 0, "ok");
				}
				tJava_38Process(globalMap);



/**
 * [tS3Put_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_9 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_9";

	

 



/**
 * [tS3Put_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_9_SUBPROCESS_STATE", 1);
	}
	

public void tJava_38Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_38_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_38 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_38", false);
		start_Hash.put("tJava_38", System.currentTimeMillis());
		
	
	currentComponent="tJava_38";

	
		int tos_count_tJava_38 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_38 begin ] stop
 */
	
	/**
	 * [tJava_38 main ] start
	 */

	

	
	
	currentComponent="tJava_38";

	

 


	tos_count_tJava_38++;

/**
 * [tJava_38 main ] stop
 */
	
	/**
	 * [tJava_38 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_38";

	

 



/**
 * [tJava_38 process_data_begin ] stop
 */
	
	/**
	 * [tJava_38 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_38";

	

 



/**
 * [tJava_38 process_data_end ] stop
 */
	
	/**
	 * [tJava_38 end ] start
	 */

	

	
	
	currentComponent="tJava_38";

	

 

ok_Hash.put("tJava_38", true);
end_Hash.put("tJava_38", System.currentTimeMillis());




/**
 * [tJava_38 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_38 finally ] start
	 */

	

	
	
	currentComponent="tJava_38";

	

 



/**
 * [tJava_38 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_38_SUBPROCESS_STATE", 1);
	}
	

public void tJava_37Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_37_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_37 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_37", false);
		start_Hash.put("tJava_37", System.currentTimeMillis());
		
	
	currentComponent="tJava_37";

	
		int tos_count_tJava_37 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_9_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");
 



/**
 * [tJava_37 begin ] stop
 */
	
	/**
	 * [tJava_37 main ] start
	 */

	

	
	
	currentComponent="tJava_37";

	

 


	tos_count_tJava_37++;

/**
 * [tJava_37 main ] stop
 */
	
	/**
	 * [tJava_37 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_37";

	

 



/**
 * [tJava_37 process_data_begin ] stop
 */
	
	/**
	 * [tJava_37 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_37";

	

 



/**
 * [tJava_37 process_data_end ] stop
 */
	
	/**
	 * [tJava_37 end ] start
	 */

	

	
	
	currentComponent="tJava_37";

	

 

ok_Hash.put("tJava_37", true);
end_Hash.put("tJava_37", System.currentTimeMillis());




/**
 * [tJava_37 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_37 finally ] start
	 */

	

	
	
	currentComponent="tJava_37";

	

 



/**
 * [tJava_37 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_37_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_10", false);
		start_Hash.put("tS3Copy_10", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_10";

	
		int tos_count_tS3Copy_10 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_10 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_10 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_10 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_10 = null;
		
		
		final String from_bucket_tS3Copy_10 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_10 = context.nd_s3_data_lake_path_sfdc+"/targetx_srmb__application/latest/university_id="+context.university_code+"/targetx_srmb__application__c.csv.gz";
		final String to_bucket_tS3Copy_10 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_10 = context.nd_s3_data_lake_path_sfdc+"/targetx_srmb__application/archive/university_id="+context.university_code+"/targetx_srmb__application__c_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_10 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_10, from_key_tS3Copy_10);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_10 = conn_tS3Copy_10.getObjectMetadata(metadataRequest_tS3Copy_10);
    long objectSize_tS3Copy_10 = metadataResult_tS3Copy_10.getContentLength();
    
    boolean multiUpload_tS3Copy_10 = objectSize_tS3Copy_10 > maxBytes4SingleCopyCall_tS3Copy_10;
    
    if(!multiUpload_tS3Copy_10) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_10 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_10, from_key_tS3Copy_10, to_bucket_tS3Copy_10, to_key_tS3Copy_10);
    		if(objectMetadata_tS3Copy_10 != null) {
    				putRequest_tS3Copy_10.setNewObjectMetadata(objectMetadata_tS3Copy_10);
    		}
    		
    		

    		
    		conn_tS3Copy_10.copyObject(putRequest_tS3Copy_10);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_10 = metadataResult_tS3Copy_10.getUserMetadata();
						if((userMetadata_tS3Copy_10!=null) && userMetadata_tS3Copy_10.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_10 = null;
    				if(objectMetadata_tS3Copy_10 != null) {
    						putRequest_tS3Copy_10 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_10, to_key_tS3Copy_10, objectMetadata_tS3Copy_10);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_10 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_10, to_key_tS3Copy_10, metadataResult_tS3Copy_10);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_10 = conn_tS3Copy_10.initiateMultipartUpload(putRequest_tS3Copy_10);
            
            long bytePosition_tS3Copy_10 = 0;
            int partNum_tS3Copy_10 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_10 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_10 < objectSize_tS3Copy_10) {
                long lastByte_tS3Copy_10 = java.lang.Math.min(bytePosition_tS3Copy_10 + partSizeInBytes_tS3Copy_10 - 1, objectSize_tS3Copy_10 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_10 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_10)
                        .withSourceKey(from_key_tS3Copy_10)
                        .withDestinationBucketName(to_bucket_tS3Copy_10)
                        .withDestinationKey(to_key_tS3Copy_10)
                        .withUploadId(initResult_tS3Copy_10.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_10)
                        .withLastByte(lastByte_tS3Copy_10)
                        .withPartNumber(partNum_tS3Copy_10++);
                partTags_tS3Copy_10.add(conn_tS3Copy_10.copyPart(copyPartRequest_tS3Copy_10).getPartETag());
                bytePosition_tS3Copy_10 += partSizeInBytes_tS3Copy_10;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_10 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_10,
                                                                        to_key_tS3Copy_10, 
                                                                        initResult_tS3Copy_10.getUploadId(),
                                                                        partTags_tS3Copy_10);
            conn_tS3Copy_10.completeMultipartUpload(completeRequest_tS3Copy_10);
    		} catch (java.lang.Exception uploadException_tS3Copy_10) {
    				conn_tS3Copy_10.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_10, to_key_tS3Copy_10, initResult_tS3Copy_10.getUploadId()));
    				throw uploadException_tS3Copy_10;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_10){
		
			System.err.println(e_tS3Copy_10.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_10 begin ] stop
 */
	
	/**
	 * [tS3Copy_10 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_10";

	

 


	tos_count_tS3Copy_10++;

/**
 * [tS3Copy_10 main ] stop
 */
	
	/**
	 * [tS3Copy_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_10";

	

 



/**
 * [tS3Copy_10 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_10";

	

 



/**
 * [tS3Copy_10 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_10 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_10";

	

 

ok_Hash.put("tS3Copy_10", true);
end_Hash.put("tS3Copy_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk116", 0, "ok");
				}
				tJava_45Process(globalMap);



/**
 * [tS3Copy_10 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Copy_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tS3Copy_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_10 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_10";

	

 



/**
 * [tS3Copy_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_10_SUBPROCESS_STATE", 1);
	}
	

public void tJava_45Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_45_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_45 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_45", false);
		start_Hash.put("tJava_45", System.currentTimeMillis());
		
	
	currentComponent="tJava_45";

	
		int tos_count_tJava_45 = 0;
		


System.out.println("Step 0: Running For targetx_srmb_application__c Object");
System.out.println("Step 1: Copied Previous Run File To Archive");
 



/**
 * [tJava_45 begin ] stop
 */
	
	/**
	 * [tJava_45 main ] start
	 */

	

	
	
	currentComponent="tJava_45";

	

 


	tos_count_tJava_45++;

/**
 * [tJava_45 main ] stop
 */
	
	/**
	 * [tJava_45 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_45";

	

 



/**
 * [tJava_45 process_data_begin ] stop
 */
	
	/**
	 * [tJava_45 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_45";

	

 



/**
 * [tJava_45 process_data_end ] stop
 */
	
	/**
	 * [tJava_45 end ] start
	 */

	

	
	
	currentComponent="tJava_45";

	

 

ok_Hash.put("tJava_45", true);
end_Hash.put("tJava_45", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk117", 0, "ok");
				}
				tS3Delete_10Process(globalMap);



/**
 * [tJava_45 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_45 finally ] start
	 */

	

	
	
	currentComponent="tJava_45";

	

 



/**
 * [tJava_45 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_45_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_10", false);
		start_Hash.put("tS3Delete_10", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_10";

	
		int tos_count_tS3Delete_10 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_10 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_10 = context.nd_s3_data_lake_path_sfdc+"/targetx_srmb__application/latest/university_id="+context.university_code+"/targetx_srmb__application__c.csv.gz";
		if(key_tS3Delete_10!=null && key_tS3Delete_10.trim().length()>0){
			
			conn_tS3Delete_10.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_10);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_10){
		
			System.err.println(e_tS3Delete_10.getMessage());
		
	}
	
 



/**
 * [tS3Delete_10 begin ] stop
 */
	
	/**
	 * [tS3Delete_10 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_10";

	

 


	tos_count_tS3Delete_10++;

/**
 * [tS3Delete_10 main ] stop
 */
	
	/**
	 * [tS3Delete_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_10";

	

 



/**
 * [tS3Delete_10 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_10";

	

 



/**
 * [tS3Delete_10 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_10 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_10";

	

 

ok_Hash.put("tS3Delete_10", true);
end_Hash.put("tS3Delete_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk118", 0, "ok");
				}
				tJava_46Process(globalMap);



/**
 * [tS3Delete_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_10 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_10";

	

 



/**
 * [tS3Delete_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_10_SUBPROCESS_STATE", 1);
	}
	

public void tJava_46Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_46_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_46 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_46", false);
		start_Hash.put("tJava_46", System.currentTimeMillis());
		
	
	currentComponent="tJava_46";

	
		int tos_count_tJava_46 = 0;
		


System.out.println("Step 2: Deleted Previous Run File From Latest Folder");
System.out.println("Step 3: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_46 begin ] stop
 */
	
	/**
	 * [tJava_46 main ] start
	 */

	

	
	
	currentComponent="tJava_46";

	

 


	tos_count_tJava_46++;

/**
 * [tJava_46 main ] stop
 */
	
	/**
	 * [tJava_46 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_46";

	

 



/**
 * [tJava_46 process_data_begin ] stop
 */
	
	/**
	 * [tJava_46 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_46";

	

 



/**
 * [tJava_46 process_data_end ] stop
 */
	
	/**
	 * [tJava_46 end ] start
	 */

	

	
	
	currentComponent="tJava_46";

	

 

ok_Hash.put("tJava_46", true);
end_Hash.put("tJava_46", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk125", 0, "ok");
				}
				tDBInput_14Process(globalMap);



/**
 * [tJava_46 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_46 finally ] start
	 */

	

	
	
	currentComponent="tJava_46";

	

 



/**
 * [tJava_46 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_46_SUBPROCESS_STATE", 1);
	}
	


public static class out19Struct implements routines.system.IPersistableRow<out19Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String email__c;

				public String getEmail__c () {
					return this.email__c;
				}
				
			    public String program3__c;

				public String getProgram3__c () {
					return this.program3__c;
				}
				
			    public String targetx_srmb__program__c;

				public String getTargetx_srmb__program__c () {
					return this.targetx_srmb__program__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String opportunity__c;

				public String getOpportunity__c () {
					return this.opportunity__c;
				}
				
			    public java.util.Date targetx_srmb__deposit_paid_date__c;

				public java.util.Date getTargetx_srmb__deposit_paid_date__c () {
					return this.targetx_srmb__deposit_paid_date__c;
				}
				
			    public java.util.Date tgtx_application_start_date__c;

				public java.util.Date getTgtx_application_start_date__c () {
					return this.tgtx_application_start_date__c;
				}
				
			    public java.util.Date tgtx_admit_date__c;

				public java.util.Date getTgtx_admit_date__c () {
					return this.tgtx_admit_date__c;
				}
				
			    public java.util.Date tgtx_application_complete_date__c;

				public java.util.Date getTgtx_application_complete_date__c () {
					return this.tgtx_application_complete_date__c;
				}
				
			    public java.util.Date targetx_srmb__application_submit_date__c;

				public java.util.Date getTargetx_srmb__application_submit_date__c () {
					return this.targetx_srmb__application_submit_date__c;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out19Struct other = (out19Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out19Struct other) {

		other.createddate = this.createddate;
	            other.isdeleted = this.isdeleted;
	            other.name = this.name;
	            other.systemmodstamp = this.systemmodstamp;
	            other.email__c = this.email__c;
	            other.program3__c = this.program3__c;
	            other.targetx_srmb__program__c = this.targetx_srmb__program__c;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            other.opportunity__c = this.opportunity__c;
	            other.targetx_srmb__deposit_paid_date__c = this.targetx_srmb__deposit_paid_date__c;
	            other.tgtx_application_start_date__c = this.tgtx_application_start_date__c;
	            other.tgtx_admit_date__c = this.tgtx_admit_date__c;
	            other.tgtx_application_complete_date__c = this.tgtx_application_complete_date__c;
	            other.targetx_srmb__application_submit_date__c = this.targetx_srmb__application_submit_date__c;
	            
	}

	public void copyKeysDataTo(out19Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.name = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.email__c = readString(dis);
					
					this.program3__c = readString(dis);
					
					this.targetx_srmb__program__c = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.opportunity__c = readString(dis);
					
					this.targetx_srmb__deposit_paid_date__c = readDate(dis);
					
					this.tgtx_application_start_date__c = readDate(dis);
					
					this.tgtx_admit_date__c = readDate(dis);
					
					this.tgtx_application_complete_date__c = readDate(dis);
					
					this.targetx_srmb__application_submit_date__c = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// String
				
						writeString(this.name,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.email__c,dos);
					
					// String
				
						writeString(this.program3__c,dos);
					
					// String
				
						writeString(this.targetx_srmb__program__c,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.opportunity__c,dos);
					
					// java.util.Date
				
						writeDate(this.targetx_srmb__deposit_paid_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.tgtx_application_start_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.tgtx_admit_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.tgtx_application_complete_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.targetx_srmb__application_submit_date__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("createddate="+String.valueOf(createddate));
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",name="+name);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",email__c="+email__c);
		sb.append(",program3__c="+program3__c);
		sb.append(",targetx_srmb__program__c="+targetx_srmb__program__c);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",opportunity__c="+opportunity__c);
		sb.append(",targetx_srmb__deposit_paid_date__c="+String.valueOf(targetx_srmb__deposit_paid_date__c));
		sb.append(",tgtx_application_start_date__c="+String.valueOf(tgtx_application_start_date__c));
		sb.append(",tgtx_admit_date__c="+String.valueOf(tgtx_admit_date__c));
		sb.append(",tgtx_application_complete_date__c="+String.valueOf(tgtx_application_complete_date__c));
		sb.append(",targetx_srmb__application_submit_date__c="+String.valueOf(targetx_srmb__application_submit_date__c));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out20Struct implements routines.system.IPersistableRow<out20Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String email__c;

				public String getEmail__c () {
					return this.email__c;
				}
				
			    public String program3__c;

				public String getProgram3__c () {
					return this.program3__c;
				}
				
			    public String targetx_srmb__program__c;

				public String getTargetx_srmb__program__c () {
					return this.targetx_srmb__program__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String opportunity__c;

				public String getOpportunity__c () {
					return this.opportunity__c;
				}
				
			    public java.util.Date targetx_srmb__deposit_paid_date__c;

				public java.util.Date getTargetx_srmb__deposit_paid_date__c () {
					return this.targetx_srmb__deposit_paid_date__c;
				}
				
			    public java.util.Date tgtx_application_start_date__c;

				public java.util.Date getTgtx_application_start_date__c () {
					return this.tgtx_application_start_date__c;
				}
				
			    public java.util.Date tgtx_admit_date__c;

				public java.util.Date getTgtx_admit_date__c () {
					return this.tgtx_admit_date__c;
				}
				
			    public java.util.Date tgtx_application_complete_date__c;

				public java.util.Date getTgtx_application_complete_date__c () {
					return this.tgtx_application_complete_date__c;
				}
				
			    public java.util.Date targetx_srmb__application_submit_date__c;

				public java.util.Date getTargetx_srmb__application_submit_date__c () {
					return this.targetx_srmb__application_submit_date__c;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out20Struct other = (out20Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out20Struct other) {

		other.createddate = this.createddate;
	            other.isdeleted = this.isdeleted;
	            other.name = this.name;
	            other.systemmodstamp = this.systemmodstamp;
	            other.email__c = this.email__c;
	            other.program3__c = this.program3__c;
	            other.targetx_srmb__program__c = this.targetx_srmb__program__c;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            other.opportunity__c = this.opportunity__c;
	            other.targetx_srmb__deposit_paid_date__c = this.targetx_srmb__deposit_paid_date__c;
	            other.tgtx_application_start_date__c = this.tgtx_application_start_date__c;
	            other.tgtx_admit_date__c = this.tgtx_admit_date__c;
	            other.tgtx_application_complete_date__c = this.tgtx_application_complete_date__c;
	            other.targetx_srmb__application_submit_date__c = this.targetx_srmb__application_submit_date__c;
	            
	}

	public void copyKeysDataTo(out20Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.name = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.email__c = readString(dis);
					
					this.program3__c = readString(dis);
					
					this.targetx_srmb__program__c = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.opportunity__c = readString(dis);
					
					this.targetx_srmb__deposit_paid_date__c = readDate(dis);
					
					this.tgtx_application_start_date__c = readDate(dis);
					
					this.tgtx_admit_date__c = readDate(dis);
					
					this.tgtx_application_complete_date__c = readDate(dis);
					
					this.targetx_srmb__application_submit_date__c = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// String
				
						writeString(this.name,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.email__c,dos);
					
					// String
				
						writeString(this.program3__c,dos);
					
					// String
				
						writeString(this.targetx_srmb__program__c,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.opportunity__c,dos);
					
					// java.util.Date
				
						writeDate(this.targetx_srmb__deposit_paid_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.tgtx_application_start_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.tgtx_admit_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.tgtx_application_complete_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.targetx_srmb__application_submit_date__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("createddate="+String.valueOf(createddate));
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",name="+name);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",email__c="+email__c);
		sb.append(",program3__c="+program3__c);
		sb.append(",targetx_srmb__program__c="+targetx_srmb__program__c);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",opportunity__c="+opportunity__c);
		sb.append(",targetx_srmb__deposit_paid_date__c="+String.valueOf(targetx_srmb__deposit_paid_date__c));
		sb.append(",tgtx_application_start_date__c="+String.valueOf(tgtx_application_start_date__c));
		sb.append(",tgtx_admit_date__c="+String.valueOf(tgtx_admit_date__c));
		sb.append(",tgtx_application_complete_date__c="+String.valueOf(tgtx_application_complete_date__c));
		sb.append(",targetx_srmb__application_submit_date__c="+String.valueOf(targetx_srmb__application_submit_date__c));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out20Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String email__c;

				public String getEmail__c () {
					return this.email__c;
				}
				
			    public String program3__c;

				public String getProgram3__c () {
					return this.program3__c;
				}
				
			    public String targetx_srmb__program__c;

				public String getTargetx_srmb__program__c () {
					return this.targetx_srmb__program__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String opportunity__c;

				public String getOpportunity__c () {
					return this.opportunity__c;
				}
				
			    public java.util.Date targetx_srmb__deposit_paid_date__c;

				public java.util.Date getTargetx_srmb__deposit_paid_date__c () {
					return this.targetx_srmb__deposit_paid_date__c;
				}
				
			    public java.util.Date tgtx_application_start_date__c;

				public java.util.Date getTgtx_application_start_date__c () {
					return this.tgtx_application_start_date__c;
				}
				
			    public java.util.Date tgtx_admit_date__c;

				public java.util.Date getTgtx_admit_date__c () {
					return this.tgtx_admit_date__c;
				}
				
			    public java.util.Date tgtx_application_complete_date__c;

				public java.util.Date getTgtx_application_complete_date__c () {
					return this.tgtx_application_complete_date__c;
				}
				
			    public java.util.Date targetx_srmb__application_submit_date__c;

				public java.util.Date getTargetx_srmb__application_submit_date__c () {
					return this.targetx_srmb__application_submit_date__c;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.name = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.email__c = readString(dis);
					
					this.program3__c = readString(dis);
					
					this.targetx_srmb__program__c = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.opportunity__c = readString(dis);
					
					this.targetx_srmb__deposit_paid_date__c = readDate(dis);
					
					this.tgtx_application_start_date__c = readDate(dis);
					
					this.tgtx_admit_date__c = readDate(dis);
					
					this.tgtx_application_complete_date__c = readDate(dis);
					
					this.targetx_srmb__application_submit_date__c = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// String
				
						writeString(this.name,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.email__c,dos);
					
					// String
				
						writeString(this.program3__c,dos);
					
					// String
				
						writeString(this.targetx_srmb__program__c,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.opportunity__c,dos);
					
					// java.util.Date
				
						writeDate(this.targetx_srmb__deposit_paid_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.tgtx_application_start_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.tgtx_admit_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.tgtx_application_complete_date__c,dos);
					
					// java.util.Date
				
						writeDate(this.targetx_srmb__application_submit_date__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("createddate="+String.valueOf(createddate));
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",name="+name);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",email__c="+email__c);
		sb.append(",program3__c="+program3__c);
		sb.append(",targetx_srmb__program__c="+targetx_srmb__program__c);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",opportunity__c="+opportunity__c);
		sb.append(",targetx_srmb__deposit_paid_date__c="+String.valueOf(targetx_srmb__deposit_paid_date__c));
		sb.append(",tgtx_application_start_date__c="+String.valueOf(tgtx_application_start_date__c));
		sb.append(",tgtx_admit_date__c="+String.valueOf(tgtx_admit_date__c));
		sb.append(",tgtx_application_complete_date__c="+String.valueOf(tgtx_application_complete_date__c));
		sb.append(",targetx_srmb__application_submit_date__c="+String.valueOf(targetx_srmb__application_submit_date__c));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
out19Struct out19 = new out19Struct();
out20Struct out20 = new out20Struct();





	
	/**
	 * [tFileOutputDelimited_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_10", false);
		start_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out19");
					}
				
		int tos_count_tFileOutputDelimited_10 = 0;
		

String fileName_tFileOutputDelimited_10 = "";
    fileName_tFileOutputDelimited_10 = (new java.io.File(context.staging_S3_dir + "targetx_srmb__application__c.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_10 = null;
    String extension_tFileOutputDelimited_10 = null;
    String directory_tFileOutputDelimited_10 = null;
    if((fileName_tFileOutputDelimited_10.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_10.lastIndexOf(".") < fileName_tFileOutputDelimited_10.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
            extension_tFileOutputDelimited_10 = "";
        } else {
            fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0, fileName_tFileOutputDelimited_10.lastIndexOf("."));
            extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(fileName_tFileOutputDelimited_10.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0, fileName_tFileOutputDelimited_10.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_10.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0, fileName_tFileOutputDelimited_10.lastIndexOf("."));
            extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(fileName_tFileOutputDelimited_10.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
            extension_tFileOutputDelimited_10 = "";
        }
        directory_tFileOutputDelimited_10 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_10 = true;
    java.io.File filetFileOutputDelimited_10 = new java.io.File(fileName_tFileOutputDelimited_10);
    globalMap.put("tFileOutputDelimited_10_FILE_NAME",fileName_tFileOutputDelimited_10);
                String[] headColutFileOutputDelimited_10=new String[15];
            class CSVBasicSet_tFileOutputDelimited_10{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_10[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_10 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_10[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_10[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_10 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_10[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_10[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_10 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_10[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_10 = 0;
            int splitedFileNo_tFileOutputDelimited_10 =0;
            int currentRow_tFileOutputDelimited_10 = 0;


            CSVBasicSet_tFileOutputDelimited_10 csvSettings_tFileOutputDelimited_10 = new CSVBasicSet_tFileOutputDelimited_10();
            csvSettings_tFileOutputDelimited_10.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_10.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_10.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_10 != null && directory_tFileOutputDelimited_10.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_10 = new java.io.File(directory_tFileOutputDelimited_10);
                        if(!dir_tFileOutputDelimited_10.exists()) {
                            dir_tFileOutputDelimited_10.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_10 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_10 = new java.io.File(fileName_tFileOutputDelimited_10);
                            if(fileToDelete_tFileOutputDelimited_10.exists()) {
                                fileToDelete_tFileOutputDelimited_10.delete();
                            }
                            CsvWritertFileOutputDelimited_10 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_10, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_10.setSeparator(csvSettings_tFileOutputDelimited_10.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_10.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_10.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_10.setLineEnd(""+csvSettings_tFileOutputDelimited_10.getRowDelim());
                    }
                        if(filetFileOutputDelimited_10.length()==0){
                                    headColutFileOutputDelimited_10[0]="createddate";
                                    headColutFileOutputDelimited_10[1]="isdeleted";
                                    headColutFileOutputDelimited_10[2]="name";
                                    headColutFileOutputDelimited_10[3]="systemmodstamp";
                                    headColutFileOutputDelimited_10[4]="email__c";
                                    headColutFileOutputDelimited_10[5]="program3__c";
                                    headColutFileOutputDelimited_10[6]="targetx_srmb__program__c";
                                    headColutFileOutputDelimited_10[7]="sfid";
                                    headColutFileOutputDelimited_10[8]="id";
                                    headColutFileOutputDelimited_10[9]="opportunity__c";
                                    headColutFileOutputDelimited_10[10]="targetx_srmb__deposit_paid_date__c";
                                    headColutFileOutputDelimited_10[11]="tgtx_application_start_date__c";
                                    headColutFileOutputDelimited_10[12]="tgtx_admit_date__c";
                                    headColutFileOutputDelimited_10[13]="tgtx_application_complete_date__c";
                                    headColutFileOutputDelimited_10[14]="targetx_srmb__application_submit_date__c";
                            CsvWritertFileOutputDelimited_10.writeNext(headColutFileOutputDelimited_10);
                            CsvWritertFileOutputDelimited_10.flush();
                        }
                CsvWritertFileOutputDelimited_10.setEscapeChar(csvSettings_tFileOutputDelimited_10.getEscapeChar());
                CsvWritertFileOutputDelimited_10.setQuoteChar(csvSettings_tFileOutputDelimited_10.getTextEnclosure());
                CsvWritertFileOutputDelimited_10.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_10", CsvWritertFileOutputDelimited_10);
resourceMap.put("nb_line_tFileOutputDelimited_10", nb_line_tFileOutputDelimited_10);

 



/**
 * [tFileOutputDelimited_10 begin ] stop
 */




	
	/**
	 * [tDBOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_10", false);
		start_Hash.put("tDBOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out20");
					}
				
		int tos_count_tDBOutput_10 = 0;
		





String dbschema_tDBOutput_10 = null;
	dbschema_tDBOutput_10 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_10 = null;
if(dbschema_tDBOutput_10 == null || dbschema_tDBOutput_10.trim().length() == 0) {
	tableName_tDBOutput_10 = ("targetx_srmb__application_c");
} else {
	tableName_tDBOutput_10 = dbschema_tDBOutput_10 + "\".\"" + ("targetx_srmb__application_c");
}

int nb_line_tDBOutput_10 = 0;
int nb_line_update_tDBOutput_10 = 0;
int nb_line_inserted_tDBOutput_10 = 0;
int nb_line_deleted_tDBOutput_10 = 0;
int nb_line_rejected_tDBOutput_10 = 0;

int deletedCount_tDBOutput_10=0;
int updatedCount_tDBOutput_10=0;
int insertedCount_tDBOutput_10=0;
int rejectedCount_tDBOutput_10=0;

boolean whetherReject_tDBOutput_10 = false;

java.sql.Connection conn_tDBOutput_10 = null;
String dbUser_tDBOutput_10 = null;

	conn_tDBOutput_10 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_10 = 100000;
   int batchSizeCounter_tDBOutput_10=0;

int count_tDBOutput_10=0;
            try (java.sql.Statement stmtClear_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
                stmtClear_tDBOutput_10.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_10 + "\"");
            }
	    String insert_tDBOutput_10 = "INSERT INTO \"" + tableName_tDBOutput_10 + "\" (\"createddate\",\"isdeleted\",\"name\",\"systemmodstamp\",\"email__c\",\"program3__c\",\"targetx_srmb__program__c\",\"sfid\",\"id\",\"opportunity__c\",\"targetx_srmb__deposit_paid_date__c\",\"tgtx_application_start_date__c\",\"tgtx_admit_date__c\",\"tgtx_application_complete_date__c\",\"targetx_srmb__application_submit_date__c\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(insert_tDBOutput_10);
	    resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);
	    

 



/**
 * [tDBOutput_10 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
out19Struct out19_tmp = new out19Struct();
out20Struct out20_tmp = new out20Struct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tDBInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_14", false);
		start_Hash.put("tDBInput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_14";

	
		int tos_count_tDBInput_14 = 0;
		
	
    
	
		    int nb_line_tDBInput_14 = 0;
		    java.sql.Connection conn_tDBInput_14 = null;
				conn_tDBInput_14 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

		    String dbquery_tDBInput_14 = "SELECT createddate\n       , isdeleted\n       , name\n       , systemmodstamp\n       , email__c\n       , program3__c"
+"\n       , targetx_srmb__program__c\n       , sfid\n       , id\n       , opportunity__c\n       , targetx_srmb__deposit"
+"_paid_date__c\n       , tgtx_application_start_date__c\n       , tgtx_admit_date__c\n       , tgtx_application_complete_"
+"date__c\n       , targetx_srmb__application_submit_date__c\n FROM "+context.university_code+".targetx_srmb__application__c";
			

            	globalMap.put("tDBInput_14_QUERY",dbquery_tDBInput_14);
		    java.sql.ResultSet rs_tDBInput_14 = null;

		    try {
		    	rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
		    	int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

		    String tmpContent_tDBInput_14 = null;
		    
		    
		    while (rs_tDBInput_14.next()) {
		        nb_line_tDBInput_14++;
		        
							if(colQtyInRs_tDBInput_14 < 1) {
								row10.createddate = null;
							} else {
										
			row10.createddate = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 1);
		                    }
							if(colQtyInRs_tDBInput_14 < 2) {
								row10.isdeleted = null;
							} else {
	                         		
            row10.isdeleted = rs_tDBInput_14.getBoolean(2);
            if(rs_tDBInput_14.wasNull()){
                    row10.isdeleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 3) {
								row10.name = null;
							} else {
	                         		
        	row10.name = routines.system.JDBCUtil.getString(rs_tDBInput_14, 3, true);
		                    }
							if(colQtyInRs_tDBInput_14 < 4) {
								row10.systemmodstamp = null;
							} else {
										
			row10.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 4);
		                    }
							if(colQtyInRs_tDBInput_14 < 5) {
								row10.email__c = null;
							} else {
	                         		
        	row10.email__c = routines.system.JDBCUtil.getString(rs_tDBInput_14, 5, true);
		                    }
							if(colQtyInRs_tDBInput_14 < 6) {
								row10.program3__c = null;
							} else {
	                         		
        	row10.program3__c = routines.system.JDBCUtil.getString(rs_tDBInput_14, 6, true);
		                    }
							if(colQtyInRs_tDBInput_14 < 7) {
								row10.targetx_srmb__program__c = null;
							} else {
	                         		
        	row10.targetx_srmb__program__c = routines.system.JDBCUtil.getString(rs_tDBInput_14, 7, true);
		                    }
							if(colQtyInRs_tDBInput_14 < 8) {
								row10.sfid = null;
							} else {
	                         		
        	row10.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_14, 8, true);
		                    }
							if(colQtyInRs_tDBInput_14 < 9) {
								row10.id = 0;
							} else {
		                          
            row10.id = rs_tDBInput_14.getInt(9);
            if(rs_tDBInput_14.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 10) {
								row10.opportunity__c = null;
							} else {
	                         		
        	row10.opportunity__c = routines.system.JDBCUtil.getString(rs_tDBInput_14, 10, true);
		                    }
							if(colQtyInRs_tDBInput_14 < 11) {
								row10.targetx_srmb__deposit_paid_date__c = null;
							} else {
										
			row10.targetx_srmb__deposit_paid_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 11);
		                    }
							if(colQtyInRs_tDBInput_14 < 12) {
								row10.tgtx_application_start_date__c = null;
							} else {
										
			row10.tgtx_application_start_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 12);
		                    }
							if(colQtyInRs_tDBInput_14 < 13) {
								row10.tgtx_admit_date__c = null;
							} else {
										
			row10.tgtx_admit_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 13);
		                    }
							if(colQtyInRs_tDBInput_14 < 14) {
								row10.tgtx_application_complete_date__c = null;
							} else {
										
			row10.tgtx_application_complete_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 14);
		                    }
							if(colQtyInRs_tDBInput_14 < 15) {
								row10.targetx_srmb__application_submit_date__c = null;
							} else {
										
			row10.targetx_srmb__application_submit_date__c = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 15);
		                    }
					


 



/**
 * [tDBInput_14 begin ] stop
 */
	
	/**
	 * [tDBInput_14 main ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 


	tos_count_tDBInput_14++;

/**
 * [tDBInput_14 main ] stop
 */
	
	/**
	 * [tDBInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

out19 = null;
out20 = null;


// # Output table : 'out19'
out19_tmp.createddate = row10.createddate ;
out19_tmp.isdeleted = row10.isdeleted ;
out19_tmp.name = row10.name ;
out19_tmp.systemmodstamp = row10.systemmodstamp ;
out19_tmp.email__c = row10.email__c ;
out19_tmp.program3__c = row10.program3__c ;
out19_tmp.targetx_srmb__program__c = row10.targetx_srmb__program__c ;
out19_tmp.sfid = row10.sfid ;
out19_tmp.id = row10.id ;
out19_tmp.opportunity__c = row10.opportunity__c ;
out19_tmp.targetx_srmb__deposit_paid_date__c = row10.targetx_srmb__deposit_paid_date__c ;
out19_tmp.tgtx_application_start_date__c = row10.tgtx_application_start_date__c ;
out19_tmp.tgtx_admit_date__c = row10.tgtx_admit_date__c ;
out19_tmp.tgtx_application_complete_date__c = row10.tgtx_application_complete_date__c ;
out19_tmp.targetx_srmb__application_submit_date__c = row10.targetx_srmb__application_submit_date__c ;
out19 = out19_tmp;

// # Output table : 'out20'
out20_tmp.createddate = row10.createddate ;
out20_tmp.isdeleted = row10.isdeleted ;
out20_tmp.name = row10.name ;
out20_tmp.systemmodstamp = row10.systemmodstamp ;
out20_tmp.email__c = row10.email__c ;
out20_tmp.program3__c = row10.program3__c ;
out20_tmp.targetx_srmb__program__c = row10.targetx_srmb__program__c ;
out20_tmp.sfid = row10.sfid ;
out20_tmp.id = row10.id ;
out20_tmp.opportunity__c = row10.opportunity__c ;
out20_tmp.targetx_srmb__deposit_paid_date__c = row10.targetx_srmb__deposit_paid_date__c ;
out20_tmp.tgtx_application_start_date__c = row10.tgtx_application_start_date__c ;
out20_tmp.tgtx_admit_date__c = row10.tgtx_admit_date__c ;
out20_tmp.tgtx_application_complete_date__c = row10.tgtx_application_complete_date__c ;
out20_tmp.targetx_srmb__application_submit_date__c = row10.targetx_srmb__application_submit_date__c ;
out20 = out20_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "out19"
if(out19 != null) { 



	
	/**
	 * [tFileOutputDelimited_10 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out19");
					}
					


                        String[] rowtFileOutputDelimited_10=new String[15];
                            rowtFileOutputDelimited_10[0]=out19.createddate == null ? null : FormatterUtils.format_Date(out19.createddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_10[1]=out19.isdeleted == null ? null : String.valueOf(out19.isdeleted);
                            rowtFileOutputDelimited_10[2]=out19.name == null ? null : out19.name;
                            rowtFileOutputDelimited_10[3]=out19.systemmodstamp == null ? null : FormatterUtils.format_Date(out19.systemmodstamp, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_10[4]=out19.email__c == null ? null : out19.email__c;
                            rowtFileOutputDelimited_10[5]=out19.program3__c == null ? null : out19.program3__c;
                            rowtFileOutputDelimited_10[6]=out19.targetx_srmb__program__c == null ? null : out19.targetx_srmb__program__c;
                            rowtFileOutputDelimited_10[7]=out19.sfid == null ? null : out19.sfid;
                            rowtFileOutputDelimited_10[8]=String.valueOf(out19.id);
                            rowtFileOutputDelimited_10[9]=out19.opportunity__c == null ? null : out19.opportunity__c;
                            rowtFileOutputDelimited_10[10]=out19.targetx_srmb__deposit_paid_date__c == null ? null : FormatterUtils.format_Date(out19.targetx_srmb__deposit_paid_date__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_10[11]=out19.tgtx_application_start_date__c == null ? null : FormatterUtils.format_Date(out19.tgtx_application_start_date__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_10[12]=out19.tgtx_admit_date__c == null ? null : FormatterUtils.format_Date(out19.tgtx_admit_date__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_10[13]=out19.tgtx_application_complete_date__c == null ? null : FormatterUtils.format_Date(out19.tgtx_application_complete_date__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_10[14]=out19.targetx_srmb__application_submit_date__c == null ? null : FormatterUtils.format_Date(out19.targetx_srmb__application_submit_date__c, "yyyy-MM-dd HH:mm:ss");
                nb_line_tFileOutputDelimited_10++;
                resourceMap.put("nb_line_tFileOutputDelimited_10", nb_line_tFileOutputDelimited_10);
                                       CsvWritertFileOutputDelimited_10.writeNext(rowtFileOutputDelimited_10);




 


	tos_count_tFileOutputDelimited_10++;

/**
 * [tFileOutputDelimited_10 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	

 



/**
 * [tFileOutputDelimited_10 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	

 



/**
 * [tFileOutputDelimited_10 process_data_end ] stop
 */

} // End of branch "out19"




// Start of branch "out20"
if(out20 != null) { 



	
	/**
	 * [tDBOutput_10 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out20");
					}
					



        whetherReject_tDBOutput_10 = false;
                    if(out20.createddate != null) {
pstmt_tDBOutput_10.setTimestamp(1, new java.sql.Timestamp(out20.createddate.getTime()));
} else {
pstmt_tDBOutput_10.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(out20.isdeleted == null) {
pstmt_tDBOutput_10.setNull(2, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_10.setBoolean(2, out20.isdeleted);
}

                    if(out20.name == null) {
pstmt_tDBOutput_10.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(3, out20.name);
}

                    if(out20.systemmodstamp != null) {
pstmt_tDBOutput_10.setTimestamp(4, new java.sql.Timestamp(out20.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_10.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(out20.email__c == null) {
pstmt_tDBOutput_10.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(5, out20.email__c);
}

                    if(out20.program3__c == null) {
pstmt_tDBOutput_10.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(6, out20.program3__c);
}

                    if(out20.targetx_srmb__program__c == null) {
pstmt_tDBOutput_10.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(7, out20.targetx_srmb__program__c);
}

                    if(out20.sfid == null) {
pstmt_tDBOutput_10.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(8, out20.sfid);
}

                    pstmt_tDBOutput_10.setInt(9, out20.id);

                    if(out20.opportunity__c == null) {
pstmt_tDBOutput_10.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(10, out20.opportunity__c);
}

                    if(out20.targetx_srmb__deposit_paid_date__c != null) {
pstmt_tDBOutput_10.setTimestamp(11, new java.sql.Timestamp(out20.targetx_srmb__deposit_paid_date__c.getTime()));
} else {
pstmt_tDBOutput_10.setNull(11, java.sql.Types.TIMESTAMP);
}

                    if(out20.tgtx_application_start_date__c != null) {
pstmt_tDBOutput_10.setTimestamp(12, new java.sql.Timestamp(out20.tgtx_application_start_date__c.getTime()));
} else {
pstmt_tDBOutput_10.setNull(12, java.sql.Types.TIMESTAMP);
}

                    if(out20.tgtx_admit_date__c != null) {
pstmt_tDBOutput_10.setTimestamp(13, new java.sql.Timestamp(out20.tgtx_admit_date__c.getTime()));
} else {
pstmt_tDBOutput_10.setNull(13, java.sql.Types.TIMESTAMP);
}

                    if(out20.tgtx_application_complete_date__c != null) {
pstmt_tDBOutput_10.setTimestamp(14, new java.sql.Timestamp(out20.tgtx_application_complete_date__c.getTime()));
} else {
pstmt_tDBOutput_10.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(out20.targetx_srmb__application_submit_date__c != null) {
pstmt_tDBOutput_10.setTimestamp(15, new java.sql.Timestamp(out20.targetx_srmb__application_submit_date__c.getTime()));
} else {
pstmt_tDBOutput_10.setNull(15, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_10.addBatch();
    		nb_line_tDBOutput_10++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_10++;
    		  
            if(!whetherReject_tDBOutput_10) {
            }
    			if ((batchSize_tDBOutput_10 > 0) && (batchSize_tDBOutput_10 <= batchSizeCounter_tDBOutput_10)) {
                try {
						int countSum_tDBOutput_10 = 0;
						    
						for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
						}
				    	
				    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
				    	
            	    	batchSizeCounter_tDBOutput_10 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_10){
				    	java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),sqle_tDBOutput_10=null;
				    	String errormessage_tDBOutput_10;
						if (ne_tDBOutput_10 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_10 = new java.sql.SQLException(e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(), ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
							errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
						}else{
							errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
						}
				    	
				    	int countSum_tDBOutput_10 = 0;
						for(int countEach_tDBOutput_10: e_tDBOutput_10.getUpdateCounts()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
						}
						
				    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
				    	
				    	System.err.println(errormessage_tDBOutput_10);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_10++;

/**
 * [tDBOutput_10 main ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_end ] stop
 */

} // End of branch "out20"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_14 end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

	}
}finally{
	if (rs_tDBInput_14 != null) {
		rs_tDBInput_14.close();
	}
	if (stmt_tDBInput_14 != null) {
		stmt_tDBInput_14.close();
	}
}
globalMap.put("tDBInput_14_NB_LINE",nb_line_tDBInput_14);
 

ok_Hash.put("tDBInput_14", true);
end_Hash.put("tDBInput_14", System.currentTimeMillis());




/**
 * [tDBInput_14 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_10 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_10!=null) {
				    	CsvWritertFileOutputDelimited_10.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_10_NB_LINE",nb_line_tFileOutputDelimited_10);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_10", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out19");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_10", true);
end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk104", 0, "ok");
				}
				tFileArchive_10Process(globalMap);



/**
 * [tFileOutputDelimited_10 end ] stop
 */




	
	/**
	 * [tDBOutput_10 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



	    try {
				int countSum_tDBOutput_10 = 0;
				if (pstmt_tDBOutput_10 != null && batchSizeCounter_tDBOutput_10 > 0) {
						
					for(int countEach_tDBOutput_10: pstmt_tDBOutput_10.executeBatch()) {
						countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_10){
	    	java.sql.SQLException ne_tDBOutput_10 = e_tDBOutput_10.getNextException(),sqle_tDBOutput_10=null;
	    	String errormessage_tDBOutput_10;
			if (ne_tDBOutput_10 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_10 = new java.sql.SQLException(e_tDBOutput_10.getMessage() + "\ncaused by: " + ne_tDBOutput_10.getMessage(), ne_tDBOutput_10.getSQLState(), ne_tDBOutput_10.getErrorCode(), ne_tDBOutput_10);
				errormessage_tDBOutput_10 = sqle_tDBOutput_10.getMessage();
			}else{
				errormessage_tDBOutput_10 = e_tDBOutput_10.getMessage();
			}
	    	
	    	int countSum_tDBOutput_10 = 0;
			for(int countEach_tDBOutput_10: e_tDBOutput_10.getUpdateCounts()) {
				countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
			}
			
	    		insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
	    	
	    	System.err.println(errormessage_tDBOutput_10);
	    	
		}
	    
        if(pstmt_tDBOutput_10 != null) {
        		
            pstmt_tDBOutput_10.close();
            resourceMap.remove("pstmt_tDBOutput_10");
        }
    resourceMap.put("statementClosed_tDBOutput_10", true);

	nb_line_deleted_tDBOutput_10=nb_line_deleted_tDBOutput_10+ deletedCount_tDBOutput_10;
	nb_line_update_tDBOutput_10=nb_line_update_tDBOutput_10 + updatedCount_tDBOutput_10;
	nb_line_inserted_tDBOutput_10=nb_line_inserted_tDBOutput_10 + insertedCount_tDBOutput_10;
	nb_line_rejected_tDBOutput_10=nb_line_rejected_tDBOutput_10 + rejectedCount_tDBOutput_10;
	
        globalMap.put("tDBOutput_10_NB_LINE",nb_line_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_UPDATED",nb_line_update_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_DELETED",nb_line_deleted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_10);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out20");
			  	}
			  	
 

ok_Hash.put("tDBOutput_10", true);
end_Hash.put("tDBOutput_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk107", 0, "ok");
				}
				tJava_39Process(globalMap);



/**
 * [tDBOutput_10 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_10 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	


		if(resourceMap.get("finish_tFileOutputDelimited_10") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_10 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_10");
					
						if(CsvWritertFileOutputDelimited_10!=null) {
					    	CsvWritertFileOutputDelimited_10.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_10 finally ] stop
 */




	
	/**
	 * [tDBOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



    if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
                if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_10")) != null) {
                    pstmtToClose_tDBOutput_10.close();
                }
    }
 



/**
 * [tDBOutput_10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_10", false);
		start_Hash.put("tFileArchive_10", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_10";

	
		int tos_count_tFileArchive_10 = 0;
		

 



/**
 * [tFileArchive_10 begin ] stop
 */
	
	/**
	 * [tFileArchive_10 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_10";

	

	

		String sourceFile_tFileArchive_10 = context.staging_S3_dir + "targetx_srmb__application__c.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_10), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_10 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_10 = context.staging_S3_dir + "targetx_srmb__application__c.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_10 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_10, zipFile_tFileArchive_10);
    zip_tFileArchive_10.setOverwriteExistTargetZip(true);
	zip_tFileArchive_10.setMakeTargetDir(true);
	zip_tFileArchive_10.setCompressLevel(9);
	zip_tFileArchive_10.setArchiveFormat("gzip");
	zip_tFileArchive_10.setAllFiles(true);
	
	
		zip_tFileArchive_10.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_10_ARCHIVE_FILEPATH",zipFile_tFileArchive_10);
   
   globalMap.put("tFileArchive_10_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_10).getName());

   zip_tFileArchive_10.doZip();


 


	tos_count_tFileArchive_10++;

/**
 * [tFileArchive_10 main ] stop
 */
	
	/**
	 * [tFileArchive_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_10";

	

 



/**
 * [tFileArchive_10 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_10";

	

 



/**
 * [tFileArchive_10 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_10 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_10";

	

 

ok_Hash.put("tFileArchive_10", true);
end_Hash.put("tFileArchive_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk105", 0, "ok");
				}
				tS3Put_10Process(globalMap);



/**
 * [tFileArchive_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_10 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_10";

	

 



/**
 * [tFileArchive_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_10_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_10", false);
		start_Hash.put("tS3Put_10", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_10";

	
		int tos_count_tS3Put_10 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_10 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_10 = context.nd_s3_data_lake_path_sfdc +"/targetx_srmb__application/latest/university_id="+context.university_code+"/targetx_srmb__application__c.csv.gz";
	
	int partSizeInBytes_tS3Put_10 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_10 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_10 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_10 = context.staging_S3_dir + "targetx_srmb__application__c.csv.gz";
	
	boolean useStream_tS3Put_10 = false;
	java.io.InputStream uploadStream_tS3Put_10 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_10 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_10 instanceof String){
		    useStream_tS3Put_10 = false;
		}else if(fileOrStream_tS3Put_10 instanceof java.io.InputStream){
		    useStream_tS3Put_10 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_10 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_10) {
				java.io.File inputFile_tS3Put_10 = new java.io.File((String)fileOrStream_tS3Put_10);
				
				long multipart_upload_threshold_tS3Put_10 = 5 * 1024 * 1024;
				
    		tm_tS3Put_10 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_10)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_10)
    			.withS3Client(conn_tS3Put_10)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_10 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_10, inputFile_tS3Put_10).withMetadata(objectMetadata_tS3Put_10);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_10 = tm_tS3Put_10.upload(putRequest_tS3Put_10);
  		
  			upload_tS3Put_10.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_10 = ((java.io.InputStream)fileOrStream_tS3Put_10);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_10 = new S3StreamUtil();
    		byte[] buffer_tS3Put_10 = new byte[partSizeInBytes_tS3Put_10];
    		sourceStream_tS3Put_10.read(buffer_tS3Put_10);
    		long curPartSize_tS3Put_10 = streamUtil_tS3Put_10.getLength(buffer_tS3Put_10);
    		boolean multiUpload_tS3Put_10 = curPartSize_tS3Put_10 == partSizeInBytes_tS3Put_10;
    		
    		if(!multiUpload_tS3Put_10) {
    				objectMetadata_tS3Put_10.setContentLength(curPartSize_tS3Put_10);
    				uploadStream_tS3Put_10 = new java.io.ByteArrayInputStream(buffer_tS3Put_10,0,Long.valueOf(curPartSize_tS3Put_10).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_10 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_10, uploadStream_tS3Put_10, objectMetadata_tS3Put_10);
			
    				
    				

    				
    				conn_tS3Put_10.putObject(putRequest_tS3Put_10);
    		} else {
    				uploadStream_tS3Put_10 = new java.io.ByteArrayInputStream(buffer_tS3Put_10);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_10 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_10 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_10, objectMetadata_tS3Put_10);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_10 = conn_tS3Put_10.initiateMultipartUpload(putRequest_tS3Put_10);
      			String uploadId_tS3Put_10 = initResponse_tS3Put_10.getUploadId();
      			int partNumber_tS3Put_10 = 1;
      			boolean streamHasNext_tS3Put_10 = true;
      			byte[] probeAvailability_tS3Put_10 = new byte[1];
				try {
					while (streamHasNext_tS3Put_10) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_10 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_10)
						.withUploadId(uploadId_tS3Put_10)
                    	.withPartNumber(partNumber_tS3Put_10)
						.withPartSize(curPartSize_tS3Put_10);
            		    uploadRequest_tS3Put_10.setInputStream(uploadStream_tS3Put_10);
            		    streamHasNext_tS3Put_10 = sourceStream_tS3Put_10.read(probeAvailability_tS3Put_10) != -1;
            		    if(!streamHasNext_tS3Put_10){
                    	    uploadRequest_tS3Put_10.setLastPart(true);
                    	}

                		partTags_tS3Put_10.add(conn_tS3Put_10.uploadPart(uploadRequest_tS3Put_10).getPartETag());
                  	    partNumber_tS3Put_10++;

          		     	if(uploadStream_tS3Put_10!=null){
      		         			uploadStream_tS3Put_10.close();
          		     	}
          		     	buffer_tS3Put_10 = new byte[partSizeInBytes_tS3Put_10];
          		     	sourceStream_tS3Put_10.read(buffer_tS3Put_10,1,partSizeInBytes_tS3Put_10-1);
          		     	buffer_tS3Put_10[0] = probeAvailability_tS3Put_10[0];
          		     	probeAvailability_tS3Put_10 = new byte[1];
          		     	curPartSize_tS3Put_10 = streamUtil_tS3Put_10.getLength(buffer_tS3Put_10);
          		     	uploadStream_tS3Put_10 = new java.io.ByteArrayInputStream(buffer_tS3Put_10);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_10 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_10,
                        uploadId_tS3Put_10, partTags_tS3Put_10);
            		conn_tS3Put_10.completeMultipartUpload(compRequest_tS3Put_10);
            } catch (java.lang.Exception uploadException_tS3Put_10) {
  							conn_tS3Put_10.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_10, uploadId_tS3Put_10));
    						throw uploadException_tS3Put_10;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_10){
		
			throw(e_tS3Put_10);
		
	}finally{
		if(useStream_tS3Put_10 && uploadStream_tS3Put_10!=null){
    	uploadStream_tS3Put_10.close();
    }
    
    if(tm_tS3Put_10 != null){
        tm_tS3Put_10.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_10 begin ] stop
 */
	
	/**
	 * [tS3Put_10 main ] start
	 */

	

	
	
	currentComponent="tS3Put_10";

	

 


	tos_count_tS3Put_10++;

/**
 * [tS3Put_10 main ] stop
 */
	
	/**
	 * [tS3Put_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_10";

	

 



/**
 * [tS3Put_10 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_10";

	

 



/**
 * [tS3Put_10 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_10 end ] start
	 */

	

	
	
	currentComponent="tS3Put_10";

	

 

ok_Hash.put("tS3Put_10", true);
end_Hash.put("tS3Put_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk106", 0, "ok");
				}
				tJava_40Process(globalMap);



/**
 * [tS3Put_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_10 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_10";

	

 



/**
 * [tS3Put_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_10_SUBPROCESS_STATE", 1);
	}
	

public void tJava_40Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_40_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_40 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_40", false);
		start_Hash.put("tJava_40", System.currentTimeMillis());
		
	
	currentComponent="tJava_40";

	
		int tos_count_tJava_40 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_40 begin ] stop
 */
	
	/**
	 * [tJava_40 main ] start
	 */

	

	
	
	currentComponent="tJava_40";

	

 


	tos_count_tJava_40++;

/**
 * [tJava_40 main ] stop
 */
	
	/**
	 * [tJava_40 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_40";

	

 



/**
 * [tJava_40 process_data_begin ] stop
 */
	
	/**
	 * [tJava_40 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_40";

	

 



/**
 * [tJava_40 process_data_end ] stop
 */
	
	/**
	 * [tJava_40 end ] start
	 */

	

	
	
	currentComponent="tJava_40";

	

 

ok_Hash.put("tJava_40", true);
end_Hash.put("tJava_40", System.currentTimeMillis());




/**
 * [tJava_40 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_40 finally ] start
	 */

	

	
	
	currentComponent="tJava_40";

	

 



/**
 * [tJava_40 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_40_SUBPROCESS_STATE", 1);
	}
	

public void tJava_39Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_39_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_39 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_39", false);
		start_Hash.put("tJava_39", System.currentTimeMillis());
		
	
	currentComponent="tJava_39";

	
		int tos_count_tJava_39 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_10_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");
 



/**
 * [tJava_39 begin ] stop
 */
	
	/**
	 * [tJava_39 main ] start
	 */

	

	
	
	currentComponent="tJava_39";

	

 


	tos_count_tJava_39++;

/**
 * [tJava_39 main ] stop
 */
	
	/**
	 * [tJava_39 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_39";

	

 



/**
 * [tJava_39 process_data_begin ] stop
 */
	
	/**
	 * [tJava_39 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_39";

	

 



/**
 * [tJava_39 process_data_end ] stop
 */
	
	/**
	 * [tJava_39 end ] start
	 */

	

	
	
	currentComponent="tJava_39";

	

 

ok_Hash.put("tJava_39", true);
end_Hash.put("tJava_39", System.currentTimeMillis());




/**
 * [tJava_39 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_39 finally ] start
	 */

	

	
	
	currentComponent="tJava_39";

	

 



/**
 * [tJava_39 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_39_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_11", false);
		start_Hash.put("tS3Copy_11", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_11";

	
		int tos_count_tS3Copy_11 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_11 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_11 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_11 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_11 = null;
		
		
		final String from_bucket_tS3Copy_11 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_11 = context.nd_s3_data_lake_path_sfdc+"/noodlecrm__inquiry/latest/university_id="+context.university_code+"/noodlecrm__inquiry__c.csv.gz";
		final String to_bucket_tS3Copy_11 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_11 = context.nd_s3_data_lake_path_sfdc+"/noodlecrm__inquiry/archive/university_id="+context.university_code+"/noodlecrm__inquiry__c_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_11 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_11, from_key_tS3Copy_11);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_11 = conn_tS3Copy_11.getObjectMetadata(metadataRequest_tS3Copy_11);
    long objectSize_tS3Copy_11 = metadataResult_tS3Copy_11.getContentLength();
    
    boolean multiUpload_tS3Copy_11 = objectSize_tS3Copy_11 > maxBytes4SingleCopyCall_tS3Copy_11;
    
    if(!multiUpload_tS3Copy_11) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_11 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_11, from_key_tS3Copy_11, to_bucket_tS3Copy_11, to_key_tS3Copy_11);
    		if(objectMetadata_tS3Copy_11 != null) {
    				putRequest_tS3Copy_11.setNewObjectMetadata(objectMetadata_tS3Copy_11);
    		}
    		
    		

    		
    		conn_tS3Copy_11.copyObject(putRequest_tS3Copy_11);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_11 = metadataResult_tS3Copy_11.getUserMetadata();
						if((userMetadata_tS3Copy_11!=null) && userMetadata_tS3Copy_11.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_11 = null;
    				if(objectMetadata_tS3Copy_11 != null) {
    						putRequest_tS3Copy_11 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_11, to_key_tS3Copy_11, objectMetadata_tS3Copy_11);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_11 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_11, to_key_tS3Copy_11, metadataResult_tS3Copy_11);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_11 = conn_tS3Copy_11.initiateMultipartUpload(putRequest_tS3Copy_11);
            
            long bytePosition_tS3Copy_11 = 0;
            int partNum_tS3Copy_11 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_11 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_11 < objectSize_tS3Copy_11) {
                long lastByte_tS3Copy_11 = java.lang.Math.min(bytePosition_tS3Copy_11 + partSizeInBytes_tS3Copy_11 - 1, objectSize_tS3Copy_11 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_11 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_11)
                        .withSourceKey(from_key_tS3Copy_11)
                        .withDestinationBucketName(to_bucket_tS3Copy_11)
                        .withDestinationKey(to_key_tS3Copy_11)
                        .withUploadId(initResult_tS3Copy_11.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_11)
                        .withLastByte(lastByte_tS3Copy_11)
                        .withPartNumber(partNum_tS3Copy_11++);
                partTags_tS3Copy_11.add(conn_tS3Copy_11.copyPart(copyPartRequest_tS3Copy_11).getPartETag());
                bytePosition_tS3Copy_11 += partSizeInBytes_tS3Copy_11;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_11 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_11,
                                                                        to_key_tS3Copy_11, 
                                                                        initResult_tS3Copy_11.getUploadId(),
                                                                        partTags_tS3Copy_11);
            conn_tS3Copy_11.completeMultipartUpload(completeRequest_tS3Copy_11);
    		} catch (java.lang.Exception uploadException_tS3Copy_11) {
    				conn_tS3Copy_11.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_11, to_key_tS3Copy_11, initResult_tS3Copy_11.getUploadId()));
    				throw uploadException_tS3Copy_11;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_11){
		
			System.err.println(e_tS3Copy_11.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_11 begin ] stop
 */
	
	/**
	 * [tS3Copy_11 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_11";

	

 


	tos_count_tS3Copy_11++;

/**
 * [tS3Copy_11 main ] stop
 */
	
	/**
	 * [tS3Copy_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_11";

	

 



/**
 * [tS3Copy_11 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_11";

	

 



/**
 * [tS3Copy_11 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_11 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_11";

	

 

ok_Hash.put("tS3Copy_11", true);
end_Hash.put("tS3Copy_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk119", 0, "ok");
				}
				tJava_47Process(globalMap);



/**
 * [tS3Copy_11 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Copy_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tS3Copy_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_11 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_11";

	

 



/**
 * [tS3Copy_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_11_SUBPROCESS_STATE", 1);
	}
	

public void tJava_47Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_47_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_47 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_47", false);
		start_Hash.put("tJava_47", System.currentTimeMillis());
		
	
	currentComponent="tJava_47";

	
		int tos_count_tJava_47 = 0;
		


System.out.println("Step 0: Running For Noodlecrm__Inquiry Object");
System.out.println("Step 1: Copied Previous Run File To Archive");
 



/**
 * [tJava_47 begin ] stop
 */
	
	/**
	 * [tJava_47 main ] start
	 */

	

	
	
	currentComponent="tJava_47";

	

 


	tos_count_tJava_47++;

/**
 * [tJava_47 main ] stop
 */
	
	/**
	 * [tJava_47 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_47";

	

 



/**
 * [tJava_47 process_data_begin ] stop
 */
	
	/**
	 * [tJava_47 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_47";

	

 



/**
 * [tJava_47 process_data_end ] stop
 */
	
	/**
	 * [tJava_47 end ] start
	 */

	

	
	
	currentComponent="tJava_47";

	

 

ok_Hash.put("tJava_47", true);
end_Hash.put("tJava_47", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk120", 0, "ok");
				}
				tS3Delete_11Process(globalMap);



/**
 * [tJava_47 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_47 finally ] start
	 */

	

	
	
	currentComponent="tJava_47";

	

 



/**
 * [tJava_47 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_47_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_11", false);
		start_Hash.put("tS3Delete_11", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_11";

	
		int tos_count_tS3Delete_11 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_11 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_11 = context.nd_s3_data_lake_path_sfdc +"/noodlecrm__inquiry/latest/university_id="+context.university_code+"/noodlecrm__inquiry__c.csv.gz";
		if(key_tS3Delete_11!=null && key_tS3Delete_11.trim().length()>0){
			
			conn_tS3Delete_11.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_11);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_11){
		
			System.err.println(e_tS3Delete_11.getMessage());
		
	}
	
 



/**
 * [tS3Delete_11 begin ] stop
 */
	
	/**
	 * [tS3Delete_11 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_11";

	

 


	tos_count_tS3Delete_11++;

/**
 * [tS3Delete_11 main ] stop
 */
	
	/**
	 * [tS3Delete_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_11";

	

 



/**
 * [tS3Delete_11 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_11";

	

 



/**
 * [tS3Delete_11 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_11 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_11";

	

 

ok_Hash.put("tS3Delete_11", true);
end_Hash.put("tS3Delete_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk121", 0, "ok");
				}
				tJava_48Process(globalMap);



/**
 * [tS3Delete_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_11 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_11";

	

 



/**
 * [tS3Delete_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_11_SUBPROCESS_STATE", 1);
	}
	

public void tJava_48Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_48_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_48 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_48", false);
		start_Hash.put("tJava_48", System.currentTimeMillis());
		
	
	currentComponent="tJava_48";

	
		int tos_count_tJava_48 = 0;
		


System.out.println("Step 2: Deleted Previous Run File From Latest Folder");
System.out.println("Step 3: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_48 begin ] stop
 */
	
	/**
	 * [tJava_48 main ] start
	 */

	

	
	
	currentComponent="tJava_48";

	

 


	tos_count_tJava_48++;

/**
 * [tJava_48 main ] stop
 */
	
	/**
	 * [tJava_48 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_48";

	

 



/**
 * [tJava_48 process_data_begin ] stop
 */
	
	/**
	 * [tJava_48 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_48";

	

 



/**
 * [tJava_48 process_data_end ] stop
 */
	
	/**
	 * [tJava_48 end ] start
	 */

	

	
	
	currentComponent="tJava_48";

	

 

ok_Hash.put("tJava_48", true);
end_Hash.put("tJava_48", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk126", 0, "ok");
				}
				tDBInput_11Process(globalMap);



/**
 * [tJava_48 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_48 finally ] start
	 */

	

	
	
	currentComponent="tJava_48";

	

 



/**
 * [tJava_48 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_48_SUBPROCESS_STATE", 1);
	}
	


public static class out21Struct implements routines.system.IPersistableRow<out21Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String noodlecrm__years_experience__c;

				public String getNoodlecrm__years_experience__c () {
					return this.noodlecrm__years_experience__c;
				}
				
			    public String noodlecrm__state__c;

				public String getNoodlecrm__state__c () {
					return this.noodlecrm__state__c;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public java.util.Date noodlecrm__inquiry_created_date_time__c;

				public java.util.Date getNoodlecrm__inquiry_created_date_time__c () {
					return this.noodlecrm__inquiry_created_date_time__c;
				}
				
			    public String noodlecrm__phone__c;

				public String getNoodlecrm__phone__c () {
					return this.noodlecrm__phone__c;
				}
				
			    public java.util.Date noodlecrm__dw_updated_date_time__c;

				public java.util.Date getNoodlecrm__dw_updated_date_time__c () {
					return this.noodlecrm__dw_updated_date_time__c;
				}
				
			    public String noodlecrm__utm_source__c;

				public String getNoodlecrm__utm_source__c () {
					return this.noodlecrm__utm_source__c;
				}
				
			    public String noodlecrm__city__c;

				public String getNoodlecrm__city__c () {
					return this.noodlecrm__city__c;
				}
				
			    public String noodlecrm__zip_code__c;

				public String getNoodlecrm__zip_code__c () {
					return this.noodlecrm__zip_code__c;
				}
				
			    public String noodlecrm__utm_content__c;

				public String getNoodlecrm__utm_content__c () {
					return this.noodlecrm__utm_content__c;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String noodlecrm__dw_id__c;

				public String getNoodlecrm__dw_id__c () {
					return this.noodlecrm__dw_id__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String noodlecrm__program__c;

				public String getNoodlecrm__program__c () {
					return this.noodlecrm__program__c;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public String noodlecrm__utm_medium__c;

				public String getNoodlecrm__utm_medium__c () {
					return this.noodlecrm__utm_medium__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String noodlecrm__street__c;

				public String getNoodlecrm__street__c () {
					return this.noodlecrm__street__c;
				}
				
			    public String noodlecrm__contact__c;

				public String getNoodlecrm__contact__c () {
					return this.noodlecrm__contact__c;
				}
				
			    public String noodlecrm__utm_campaign__c;

				public String getNoodlecrm__utm_campaign__c () {
					return this.noodlecrm__utm_campaign__c;
				}
				
			    public String noodlecrm__email__c;

				public String getNoodlecrm__email__c () {
					return this.noodlecrm__email__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String noodlecrm__utm_term__c;

				public String getNoodlecrm__utm_term__c () {
					return this.noodlecrm__utm_term__c;
				}
				
			    public String noodlecrm__level_of_education__c;

				public String getNoodlecrm__level_of_education__c () {
					return this.noodlecrm__level_of_education__c;
				}
				
			    public java.util.Date noodlecrm__dw_created_date_time__c;

				public java.util.Date getNoodlecrm__dw_created_date_time__c () {
					return this.noodlecrm__dw_created_date_time__c;
				}
				
			    public String noodlecrm__utm_keyword__c;

				public String getNoodlecrm__utm_keyword__c () {
					return this.noodlecrm__utm_keyword__c;
				}
				
			    public String noodlecrm__first_name__c;

				public String getNoodlecrm__first_name__c () {
					return this.noodlecrm__first_name__c;
				}
				
			    public String noodlecrm__country__c;

				public String getNoodlecrm__country__c () {
					return this.noodlecrm__country__c;
				}
				
			    public String noodlecrm__last_name__c;

				public String getNoodlecrm__last_name__c () {
					return this.noodlecrm__last_name__c;
				}
				
			    public String noodlecrm__opportunity__c;

				public String getNoodlecrm__opportunity__c () {
					return this.noodlecrm__opportunity__c;
				}
				
			    public String noodlecrm__source_system__c;

				public String getNoodlecrm__source_system__c () {
					return this.noodlecrm__source_system__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__inquiry_action__c;

				public String getNoodlecrm__inquiry_action__c () {
					return this.noodlecrm__inquiry_action__c;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out21Struct other = (out21Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out21Struct other) {

		other.noodlecrm__years_experience__c = this.noodlecrm__years_experience__c;
	            other.noodlecrm__state__c = this.noodlecrm__state__c;
	            other.noodlecrm__external_id__c = this.noodlecrm__external_id__c;
	            other.noodlecrm__inquiry_created_date_time__c = this.noodlecrm__inquiry_created_date_time__c;
	            other.noodlecrm__phone__c = this.noodlecrm__phone__c;
	            other.noodlecrm__dw_updated_date_time__c = this.noodlecrm__dw_updated_date_time__c;
	            other.noodlecrm__utm_source__c = this.noodlecrm__utm_source__c;
	            other.noodlecrm__city__c = this.noodlecrm__city__c;
	            other.noodlecrm__zip_code__c = this.noodlecrm__zip_code__c;
	            other.noodlecrm__utm_content__c = this.noodlecrm__utm_content__c;
	            other.name = this.name;
	            other.noodlecrm__dw_id__c = this.noodlecrm__dw_id__c;
	            other.lastmodifieddate = this.lastmodifieddate;
	            other.noodlecrm__program__c = this.noodlecrm__program__c;
	            other.ownerid = this.ownerid;
	            other.noodlecrm__utm_medium__c = this.noodlecrm__utm_medium__c;
	            other.isdeleted = this.isdeleted;
	            other.systemmodstamp = this.systemmodstamp;
	            other.noodlecrm__street__c = this.noodlecrm__street__c;
	            other.noodlecrm__contact__c = this.noodlecrm__contact__c;
	            other.noodlecrm__utm_campaign__c = this.noodlecrm__utm_campaign__c;
	            other.noodlecrm__email__c = this.noodlecrm__email__c;
	            other.createddate = this.createddate;
	            other.noodlecrm__utm_term__c = this.noodlecrm__utm_term__c;
	            other.noodlecrm__level_of_education__c = this.noodlecrm__level_of_education__c;
	            other.noodlecrm__dw_created_date_time__c = this.noodlecrm__dw_created_date_time__c;
	            other.noodlecrm__utm_keyword__c = this.noodlecrm__utm_keyword__c;
	            other.noodlecrm__first_name__c = this.noodlecrm__first_name__c;
	            other.noodlecrm__country__c = this.noodlecrm__country__c;
	            other.noodlecrm__last_name__c = this.noodlecrm__last_name__c;
	            other.noodlecrm__opportunity__c = this.noodlecrm__opportunity__c;
	            other.noodlecrm__source_system__c = this.noodlecrm__source_system__c;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            other.noodlecrm__inquiry_action__c = this.noodlecrm__inquiry_action__c;
	            
	}

	public void copyKeysDataTo(out21Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.noodlecrm__years_experience__c = readString(dis);
					
					this.noodlecrm__state__c = readString(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__inquiry_created_date_time__c = readDate(dis);
					
					this.noodlecrm__phone__c = readString(dis);
					
					this.noodlecrm__dw_updated_date_time__c = readDate(dis);
					
					this.noodlecrm__utm_source__c = readString(dis);
					
					this.noodlecrm__city__c = readString(dis);
					
					this.noodlecrm__zip_code__c = readString(dis);
					
					this.noodlecrm__utm_content__c = readString(dis);
					
					this.name = readString(dis);
					
					this.noodlecrm__dw_id__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__program__c = readString(dis);
					
					this.ownerid = readString(dis);
					
					this.noodlecrm__utm_medium__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.noodlecrm__street__c = readString(dis);
					
					this.noodlecrm__contact__c = readString(dis);
					
					this.noodlecrm__utm_campaign__c = readString(dis);
					
					this.noodlecrm__email__c = readString(dis);
					
					this.createddate = readDate(dis);
					
					this.noodlecrm__utm_term__c = readString(dis);
					
					this.noodlecrm__level_of_education__c = readString(dis);
					
					this.noodlecrm__dw_created_date_time__c = readDate(dis);
					
					this.noodlecrm__utm_keyword__c = readString(dis);
					
					this.noodlecrm__first_name__c = readString(dis);
					
					this.noodlecrm__country__c = readString(dis);
					
					this.noodlecrm__last_name__c = readString(dis);
					
					this.noodlecrm__opportunity__c = readString(dis);
					
					this.noodlecrm__source_system__c = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__inquiry_action__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.noodlecrm__years_experience__c,dos);
					
					// String
				
						writeString(this.noodlecrm__state__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__inquiry_created_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__phone__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__dw_updated_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_source__c,dos);
					
					// String
				
						writeString(this.noodlecrm__city__c,dos);
					
					// String
				
						writeString(this.noodlecrm__zip_code__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_content__c,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.noodlecrm__dw_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.noodlecrm__program__c,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_medium__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.noodlecrm__street__c,dos);
					
					// String
				
						writeString(this.noodlecrm__contact__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_campaign__c,dos);
					
					// String
				
						writeString(this.noodlecrm__email__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__level_of_education__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__dw_created_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_keyword__c,dos);
					
					// String
				
						writeString(this.noodlecrm__first_name__c,dos);
					
					// String
				
						writeString(this.noodlecrm__country__c,dos);
					
					// String
				
						writeString(this.noodlecrm__last_name__c,dos);
					
					// String
				
						writeString(this.noodlecrm__opportunity__c,dos);
					
					// String
				
						writeString(this.noodlecrm__source_system__c,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__inquiry_action__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("noodlecrm__years_experience__c="+noodlecrm__years_experience__c);
		sb.append(",noodlecrm__state__c="+noodlecrm__state__c);
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",noodlecrm__inquiry_created_date_time__c="+String.valueOf(noodlecrm__inquiry_created_date_time__c));
		sb.append(",noodlecrm__phone__c="+noodlecrm__phone__c);
		sb.append(",noodlecrm__dw_updated_date_time__c="+String.valueOf(noodlecrm__dw_updated_date_time__c));
		sb.append(",noodlecrm__utm_source__c="+noodlecrm__utm_source__c);
		sb.append(",noodlecrm__city__c="+noodlecrm__city__c);
		sb.append(",noodlecrm__zip_code__c="+noodlecrm__zip_code__c);
		sb.append(",noodlecrm__utm_content__c="+noodlecrm__utm_content__c);
		sb.append(",name="+name);
		sb.append(",noodlecrm__dw_id__c="+noodlecrm__dw_id__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__program__c="+noodlecrm__program__c);
		sb.append(",ownerid="+ownerid);
		sb.append(",noodlecrm__utm_medium__c="+noodlecrm__utm_medium__c);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__street__c="+noodlecrm__street__c);
		sb.append(",noodlecrm__contact__c="+noodlecrm__contact__c);
		sb.append(",noodlecrm__utm_campaign__c="+noodlecrm__utm_campaign__c);
		sb.append(",noodlecrm__email__c="+noodlecrm__email__c);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",noodlecrm__utm_term__c="+noodlecrm__utm_term__c);
		sb.append(",noodlecrm__level_of_education__c="+noodlecrm__level_of_education__c);
		sb.append(",noodlecrm__dw_created_date_time__c="+String.valueOf(noodlecrm__dw_created_date_time__c));
		sb.append(",noodlecrm__utm_keyword__c="+noodlecrm__utm_keyword__c);
		sb.append(",noodlecrm__first_name__c="+noodlecrm__first_name__c);
		sb.append(",noodlecrm__country__c="+noodlecrm__country__c);
		sb.append(",noodlecrm__last_name__c="+noodlecrm__last_name__c);
		sb.append(",noodlecrm__opportunity__c="+noodlecrm__opportunity__c);
		sb.append(",noodlecrm__source_system__c="+noodlecrm__source_system__c);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__inquiry_action__c="+noodlecrm__inquiry_action__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out22Struct implements routines.system.IPersistableRow<out22Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String noodlecrm__years_experience__c;

				public String getNoodlecrm__years_experience__c () {
					return this.noodlecrm__years_experience__c;
				}
				
			    public String noodlecrm__state__c;

				public String getNoodlecrm__state__c () {
					return this.noodlecrm__state__c;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public java.util.Date noodlecrm__inquiry_created_date_time__c;

				public java.util.Date getNoodlecrm__inquiry_created_date_time__c () {
					return this.noodlecrm__inquiry_created_date_time__c;
				}
				
			    public String noodlecrm__phone__c;

				public String getNoodlecrm__phone__c () {
					return this.noodlecrm__phone__c;
				}
				
			    public java.util.Date noodlecrm__dw_updated_date_time__c;

				public java.util.Date getNoodlecrm__dw_updated_date_time__c () {
					return this.noodlecrm__dw_updated_date_time__c;
				}
				
			    public String noodlecrm__utm_source__c;

				public String getNoodlecrm__utm_source__c () {
					return this.noodlecrm__utm_source__c;
				}
				
			    public String noodlecrm__city__c;

				public String getNoodlecrm__city__c () {
					return this.noodlecrm__city__c;
				}
				
			    public String noodlecrm__zip_code__c;

				public String getNoodlecrm__zip_code__c () {
					return this.noodlecrm__zip_code__c;
				}
				
			    public String noodlecrm__utm_content__c;

				public String getNoodlecrm__utm_content__c () {
					return this.noodlecrm__utm_content__c;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String noodlecrm__dw_id__c;

				public String getNoodlecrm__dw_id__c () {
					return this.noodlecrm__dw_id__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String noodlecrm__program__c;

				public String getNoodlecrm__program__c () {
					return this.noodlecrm__program__c;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public String noodlecrm__utm_medium__c;

				public String getNoodlecrm__utm_medium__c () {
					return this.noodlecrm__utm_medium__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String noodlecrm__street__c;

				public String getNoodlecrm__street__c () {
					return this.noodlecrm__street__c;
				}
				
			    public String noodlecrm__contact__c;

				public String getNoodlecrm__contact__c () {
					return this.noodlecrm__contact__c;
				}
				
			    public String noodlecrm__utm_campaign__c;

				public String getNoodlecrm__utm_campaign__c () {
					return this.noodlecrm__utm_campaign__c;
				}
				
			    public String noodlecrm__email__c;

				public String getNoodlecrm__email__c () {
					return this.noodlecrm__email__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String noodlecrm__utm_term__c;

				public String getNoodlecrm__utm_term__c () {
					return this.noodlecrm__utm_term__c;
				}
				
			    public String noodlecrm__level_of_education__c;

				public String getNoodlecrm__level_of_education__c () {
					return this.noodlecrm__level_of_education__c;
				}
				
			    public java.util.Date noodlecrm__dw_created_date_time__c;

				public java.util.Date getNoodlecrm__dw_created_date_time__c () {
					return this.noodlecrm__dw_created_date_time__c;
				}
				
			    public String noodlecrm__utm_keyword__c;

				public String getNoodlecrm__utm_keyword__c () {
					return this.noodlecrm__utm_keyword__c;
				}
				
			    public String noodlecrm__first_name__c;

				public String getNoodlecrm__first_name__c () {
					return this.noodlecrm__first_name__c;
				}
				
			    public String noodlecrm__country__c;

				public String getNoodlecrm__country__c () {
					return this.noodlecrm__country__c;
				}
				
			    public String noodlecrm__last_name__c;

				public String getNoodlecrm__last_name__c () {
					return this.noodlecrm__last_name__c;
				}
				
			    public String noodlecrm__opportunity__c;

				public String getNoodlecrm__opportunity__c () {
					return this.noodlecrm__opportunity__c;
				}
				
			    public String noodlecrm__source_system__c;

				public String getNoodlecrm__source_system__c () {
					return this.noodlecrm__source_system__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__inquiry_action__c;

				public String getNoodlecrm__inquiry_action__c () {
					return this.noodlecrm__inquiry_action__c;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out22Struct other = (out22Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out22Struct other) {

		other.noodlecrm__years_experience__c = this.noodlecrm__years_experience__c;
	            other.noodlecrm__state__c = this.noodlecrm__state__c;
	            other.noodlecrm__external_id__c = this.noodlecrm__external_id__c;
	            other.noodlecrm__inquiry_created_date_time__c = this.noodlecrm__inquiry_created_date_time__c;
	            other.noodlecrm__phone__c = this.noodlecrm__phone__c;
	            other.noodlecrm__dw_updated_date_time__c = this.noodlecrm__dw_updated_date_time__c;
	            other.noodlecrm__utm_source__c = this.noodlecrm__utm_source__c;
	            other.noodlecrm__city__c = this.noodlecrm__city__c;
	            other.noodlecrm__zip_code__c = this.noodlecrm__zip_code__c;
	            other.noodlecrm__utm_content__c = this.noodlecrm__utm_content__c;
	            other.name = this.name;
	            other.noodlecrm__dw_id__c = this.noodlecrm__dw_id__c;
	            other.lastmodifieddate = this.lastmodifieddate;
	            other.noodlecrm__program__c = this.noodlecrm__program__c;
	            other.ownerid = this.ownerid;
	            other.noodlecrm__utm_medium__c = this.noodlecrm__utm_medium__c;
	            other.isdeleted = this.isdeleted;
	            other.systemmodstamp = this.systemmodstamp;
	            other.noodlecrm__street__c = this.noodlecrm__street__c;
	            other.noodlecrm__contact__c = this.noodlecrm__contact__c;
	            other.noodlecrm__utm_campaign__c = this.noodlecrm__utm_campaign__c;
	            other.noodlecrm__email__c = this.noodlecrm__email__c;
	            other.createddate = this.createddate;
	            other.noodlecrm__utm_term__c = this.noodlecrm__utm_term__c;
	            other.noodlecrm__level_of_education__c = this.noodlecrm__level_of_education__c;
	            other.noodlecrm__dw_created_date_time__c = this.noodlecrm__dw_created_date_time__c;
	            other.noodlecrm__utm_keyword__c = this.noodlecrm__utm_keyword__c;
	            other.noodlecrm__first_name__c = this.noodlecrm__first_name__c;
	            other.noodlecrm__country__c = this.noodlecrm__country__c;
	            other.noodlecrm__last_name__c = this.noodlecrm__last_name__c;
	            other.noodlecrm__opportunity__c = this.noodlecrm__opportunity__c;
	            other.noodlecrm__source_system__c = this.noodlecrm__source_system__c;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            other.noodlecrm__inquiry_action__c = this.noodlecrm__inquiry_action__c;
	            
	}

	public void copyKeysDataTo(out22Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.noodlecrm__years_experience__c = readString(dis);
					
					this.noodlecrm__state__c = readString(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__inquiry_created_date_time__c = readDate(dis);
					
					this.noodlecrm__phone__c = readString(dis);
					
					this.noodlecrm__dw_updated_date_time__c = readDate(dis);
					
					this.noodlecrm__utm_source__c = readString(dis);
					
					this.noodlecrm__city__c = readString(dis);
					
					this.noodlecrm__zip_code__c = readString(dis);
					
					this.noodlecrm__utm_content__c = readString(dis);
					
					this.name = readString(dis);
					
					this.noodlecrm__dw_id__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__program__c = readString(dis);
					
					this.ownerid = readString(dis);
					
					this.noodlecrm__utm_medium__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.noodlecrm__street__c = readString(dis);
					
					this.noodlecrm__contact__c = readString(dis);
					
					this.noodlecrm__utm_campaign__c = readString(dis);
					
					this.noodlecrm__email__c = readString(dis);
					
					this.createddate = readDate(dis);
					
					this.noodlecrm__utm_term__c = readString(dis);
					
					this.noodlecrm__level_of_education__c = readString(dis);
					
					this.noodlecrm__dw_created_date_time__c = readDate(dis);
					
					this.noodlecrm__utm_keyword__c = readString(dis);
					
					this.noodlecrm__first_name__c = readString(dis);
					
					this.noodlecrm__country__c = readString(dis);
					
					this.noodlecrm__last_name__c = readString(dis);
					
					this.noodlecrm__opportunity__c = readString(dis);
					
					this.noodlecrm__source_system__c = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__inquiry_action__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.noodlecrm__years_experience__c,dos);
					
					// String
				
						writeString(this.noodlecrm__state__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__inquiry_created_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__phone__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__dw_updated_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_source__c,dos);
					
					// String
				
						writeString(this.noodlecrm__city__c,dos);
					
					// String
				
						writeString(this.noodlecrm__zip_code__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_content__c,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.noodlecrm__dw_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.noodlecrm__program__c,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_medium__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.noodlecrm__street__c,dos);
					
					// String
				
						writeString(this.noodlecrm__contact__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_campaign__c,dos);
					
					// String
				
						writeString(this.noodlecrm__email__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__level_of_education__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__dw_created_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_keyword__c,dos);
					
					// String
				
						writeString(this.noodlecrm__first_name__c,dos);
					
					// String
				
						writeString(this.noodlecrm__country__c,dos);
					
					// String
				
						writeString(this.noodlecrm__last_name__c,dos);
					
					// String
				
						writeString(this.noodlecrm__opportunity__c,dos);
					
					// String
				
						writeString(this.noodlecrm__source_system__c,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__inquiry_action__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("noodlecrm__years_experience__c="+noodlecrm__years_experience__c);
		sb.append(",noodlecrm__state__c="+noodlecrm__state__c);
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",noodlecrm__inquiry_created_date_time__c="+String.valueOf(noodlecrm__inquiry_created_date_time__c));
		sb.append(",noodlecrm__phone__c="+noodlecrm__phone__c);
		sb.append(",noodlecrm__dw_updated_date_time__c="+String.valueOf(noodlecrm__dw_updated_date_time__c));
		sb.append(",noodlecrm__utm_source__c="+noodlecrm__utm_source__c);
		sb.append(",noodlecrm__city__c="+noodlecrm__city__c);
		sb.append(",noodlecrm__zip_code__c="+noodlecrm__zip_code__c);
		sb.append(",noodlecrm__utm_content__c="+noodlecrm__utm_content__c);
		sb.append(",name="+name);
		sb.append(",noodlecrm__dw_id__c="+noodlecrm__dw_id__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__program__c="+noodlecrm__program__c);
		sb.append(",ownerid="+ownerid);
		sb.append(",noodlecrm__utm_medium__c="+noodlecrm__utm_medium__c);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__street__c="+noodlecrm__street__c);
		sb.append(",noodlecrm__contact__c="+noodlecrm__contact__c);
		sb.append(",noodlecrm__utm_campaign__c="+noodlecrm__utm_campaign__c);
		sb.append(",noodlecrm__email__c="+noodlecrm__email__c);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",noodlecrm__utm_term__c="+noodlecrm__utm_term__c);
		sb.append(",noodlecrm__level_of_education__c="+noodlecrm__level_of_education__c);
		sb.append(",noodlecrm__dw_created_date_time__c="+String.valueOf(noodlecrm__dw_created_date_time__c));
		sb.append(",noodlecrm__utm_keyword__c="+noodlecrm__utm_keyword__c);
		sb.append(",noodlecrm__first_name__c="+noodlecrm__first_name__c);
		sb.append(",noodlecrm__country__c="+noodlecrm__country__c);
		sb.append(",noodlecrm__last_name__c="+noodlecrm__last_name__c);
		sb.append(",noodlecrm__opportunity__c="+noodlecrm__opportunity__c);
		sb.append(",noodlecrm__source_system__c="+noodlecrm__source_system__c);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__inquiry_action__c="+noodlecrm__inquiry_action__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String noodlecrm__years_experience__c;

				public String getNoodlecrm__years_experience__c () {
					return this.noodlecrm__years_experience__c;
				}
				
			    public String noodlecrm__state__c;

				public String getNoodlecrm__state__c () {
					return this.noodlecrm__state__c;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public java.util.Date noodlecrm__inquiry_created_date_time__c;

				public java.util.Date getNoodlecrm__inquiry_created_date_time__c () {
					return this.noodlecrm__inquiry_created_date_time__c;
				}
				
			    public String noodlecrm__phone__c;

				public String getNoodlecrm__phone__c () {
					return this.noodlecrm__phone__c;
				}
				
			    public java.util.Date noodlecrm__dw_updated_date_time__c;

				public java.util.Date getNoodlecrm__dw_updated_date_time__c () {
					return this.noodlecrm__dw_updated_date_time__c;
				}
				
			    public String noodlecrm__utm_source__c;

				public String getNoodlecrm__utm_source__c () {
					return this.noodlecrm__utm_source__c;
				}
				
			    public String noodlecrm__city__c;

				public String getNoodlecrm__city__c () {
					return this.noodlecrm__city__c;
				}
				
			    public String noodlecrm__zip_code__c;

				public String getNoodlecrm__zip_code__c () {
					return this.noodlecrm__zip_code__c;
				}
				
			    public String noodlecrm__utm_content__c;

				public String getNoodlecrm__utm_content__c () {
					return this.noodlecrm__utm_content__c;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String noodlecrm__dw_id__c;

				public String getNoodlecrm__dw_id__c () {
					return this.noodlecrm__dw_id__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String noodlecrm__program__c;

				public String getNoodlecrm__program__c () {
					return this.noodlecrm__program__c;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public String noodlecrm__utm_medium__c;

				public String getNoodlecrm__utm_medium__c () {
					return this.noodlecrm__utm_medium__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String noodlecrm__street__c;

				public String getNoodlecrm__street__c () {
					return this.noodlecrm__street__c;
				}
				
			    public String noodlecrm__contact__c;

				public String getNoodlecrm__contact__c () {
					return this.noodlecrm__contact__c;
				}
				
			    public String noodlecrm__utm_campaign__c;

				public String getNoodlecrm__utm_campaign__c () {
					return this.noodlecrm__utm_campaign__c;
				}
				
			    public String noodlecrm__email__c;

				public String getNoodlecrm__email__c () {
					return this.noodlecrm__email__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String noodlecrm__utm_term__c;

				public String getNoodlecrm__utm_term__c () {
					return this.noodlecrm__utm_term__c;
				}
				
			    public String noodlecrm__level_of_education__c;

				public String getNoodlecrm__level_of_education__c () {
					return this.noodlecrm__level_of_education__c;
				}
				
			    public java.util.Date noodlecrm__dw_created_date_time__c;

				public java.util.Date getNoodlecrm__dw_created_date_time__c () {
					return this.noodlecrm__dw_created_date_time__c;
				}
				
			    public String noodlecrm__utm_keyword__c;

				public String getNoodlecrm__utm_keyword__c () {
					return this.noodlecrm__utm_keyword__c;
				}
				
			    public String noodlecrm__first_name__c;

				public String getNoodlecrm__first_name__c () {
					return this.noodlecrm__first_name__c;
				}
				
			    public String noodlecrm__country__c;

				public String getNoodlecrm__country__c () {
					return this.noodlecrm__country__c;
				}
				
			    public String noodlecrm__last_name__c;

				public String getNoodlecrm__last_name__c () {
					return this.noodlecrm__last_name__c;
				}
				
			    public String noodlecrm__opportunity__c;

				public String getNoodlecrm__opportunity__c () {
					return this.noodlecrm__opportunity__c;
				}
				
			    public String noodlecrm__source_system__c;

				public String getNoodlecrm__source_system__c () {
					return this.noodlecrm__source_system__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String noodlecrm__inquiry_action__c;

				public String getNoodlecrm__inquiry_action__c () {
					return this.noodlecrm__inquiry_action__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.noodlecrm__years_experience__c = readString(dis);
					
					this.noodlecrm__state__c = readString(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__inquiry_created_date_time__c = readDate(dis);
					
					this.noodlecrm__phone__c = readString(dis);
					
					this.noodlecrm__dw_updated_date_time__c = readDate(dis);
					
					this.noodlecrm__utm_source__c = readString(dis);
					
					this.noodlecrm__city__c = readString(dis);
					
					this.noodlecrm__zip_code__c = readString(dis);
					
					this.noodlecrm__utm_content__c = readString(dis);
					
					this.name = readString(dis);
					
					this.noodlecrm__dw_id__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__program__c = readString(dis);
					
					this.ownerid = readString(dis);
					
					this.noodlecrm__utm_medium__c = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.noodlecrm__street__c = readString(dis);
					
					this.noodlecrm__contact__c = readString(dis);
					
					this.noodlecrm__utm_campaign__c = readString(dis);
					
					this.noodlecrm__email__c = readString(dis);
					
					this.createddate = readDate(dis);
					
					this.noodlecrm__utm_term__c = readString(dis);
					
					this.noodlecrm__level_of_education__c = readString(dis);
					
					this.noodlecrm__dw_created_date_time__c = readDate(dis);
					
					this.noodlecrm__utm_keyword__c = readString(dis);
					
					this.noodlecrm__first_name__c = readString(dis);
					
					this.noodlecrm__country__c = readString(dis);
					
					this.noodlecrm__last_name__c = readString(dis);
					
					this.noodlecrm__opportunity__c = readString(dis);
					
					this.noodlecrm__source_system__c = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
					this.noodlecrm__inquiry_action__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.noodlecrm__years_experience__c,dos);
					
					// String
				
						writeString(this.noodlecrm__state__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__inquiry_created_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__phone__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__dw_updated_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_source__c,dos);
					
					// String
				
						writeString(this.noodlecrm__city__c,dos);
					
					// String
				
						writeString(this.noodlecrm__zip_code__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_content__c,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.noodlecrm__dw_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.noodlecrm__program__c,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_medium__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.noodlecrm__street__c,dos);
					
					// String
				
						writeString(this.noodlecrm__contact__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_campaign__c,dos);
					
					// String
				
						writeString(this.noodlecrm__email__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_term__c,dos);
					
					// String
				
						writeString(this.noodlecrm__level_of_education__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__dw_created_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__utm_keyword__c,dos);
					
					// String
				
						writeString(this.noodlecrm__first_name__c,dos);
					
					// String
				
						writeString(this.noodlecrm__country__c,dos);
					
					// String
				
						writeString(this.noodlecrm__last_name__c,dos);
					
					// String
				
						writeString(this.noodlecrm__opportunity__c,dos);
					
					// String
				
						writeString(this.noodlecrm__source_system__c,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.noodlecrm__inquiry_action__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("noodlecrm__years_experience__c="+noodlecrm__years_experience__c);
		sb.append(",noodlecrm__state__c="+noodlecrm__state__c);
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",noodlecrm__inquiry_created_date_time__c="+String.valueOf(noodlecrm__inquiry_created_date_time__c));
		sb.append(",noodlecrm__phone__c="+noodlecrm__phone__c);
		sb.append(",noodlecrm__dw_updated_date_time__c="+String.valueOf(noodlecrm__dw_updated_date_time__c));
		sb.append(",noodlecrm__utm_source__c="+noodlecrm__utm_source__c);
		sb.append(",noodlecrm__city__c="+noodlecrm__city__c);
		sb.append(",noodlecrm__zip_code__c="+noodlecrm__zip_code__c);
		sb.append(",noodlecrm__utm_content__c="+noodlecrm__utm_content__c);
		sb.append(",name="+name);
		sb.append(",noodlecrm__dw_id__c="+noodlecrm__dw_id__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__program__c="+noodlecrm__program__c);
		sb.append(",ownerid="+ownerid);
		sb.append(",noodlecrm__utm_medium__c="+noodlecrm__utm_medium__c);
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__street__c="+noodlecrm__street__c);
		sb.append(",noodlecrm__contact__c="+noodlecrm__contact__c);
		sb.append(",noodlecrm__utm_campaign__c="+noodlecrm__utm_campaign__c);
		sb.append(",noodlecrm__email__c="+noodlecrm__email__c);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",noodlecrm__utm_term__c="+noodlecrm__utm_term__c);
		sb.append(",noodlecrm__level_of_education__c="+noodlecrm__level_of_education__c);
		sb.append(",noodlecrm__dw_created_date_time__c="+String.valueOf(noodlecrm__dw_created_date_time__c));
		sb.append(",noodlecrm__utm_keyword__c="+noodlecrm__utm_keyword__c);
		sb.append(",noodlecrm__first_name__c="+noodlecrm__first_name__c);
		sb.append(",noodlecrm__country__c="+noodlecrm__country__c);
		sb.append(",noodlecrm__last_name__c="+noodlecrm__last_name__c);
		sb.append(",noodlecrm__opportunity__c="+noodlecrm__opportunity__c);
		sb.append(",noodlecrm__source_system__c="+noodlecrm__source_system__c);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",noodlecrm__inquiry_action__c="+noodlecrm__inquiry_action__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();
out21Struct out21 = new out21Struct();
out22Struct out22 = new out22Struct();





	
	/**
	 * [tFileOutputDelimited_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_11", false);
		start_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out21");
					}
				
		int tos_count_tFileOutputDelimited_11 = 0;
		

String fileName_tFileOutputDelimited_11 = "";
    fileName_tFileOutputDelimited_11 = (new java.io.File(context.staging_S3_dir + "noodlecrm__inquiry__c.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_11 = null;
    String extension_tFileOutputDelimited_11 = null;
    String directory_tFileOutputDelimited_11 = null;
    if((fileName_tFileOutputDelimited_11.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_11.lastIndexOf(".") < fileName_tFileOutputDelimited_11.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
            extension_tFileOutputDelimited_11 = "";
        } else {
            fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0, fileName_tFileOutputDelimited_11.lastIndexOf("."));
            extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(fileName_tFileOutputDelimited_11.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0, fileName_tFileOutputDelimited_11.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_11.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0, fileName_tFileOutputDelimited_11.lastIndexOf("."));
            extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(fileName_tFileOutputDelimited_11.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
            extension_tFileOutputDelimited_11 = "";
        }
        directory_tFileOutputDelimited_11 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_11 = true;
    java.io.File filetFileOutputDelimited_11 = new java.io.File(fileName_tFileOutputDelimited_11);
    globalMap.put("tFileOutputDelimited_11_FILE_NAME",fileName_tFileOutputDelimited_11);
                String[] headColutFileOutputDelimited_11=new String[35];
            class CSVBasicSet_tFileOutputDelimited_11{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_11[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_11 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_11[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_11[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_11 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_11[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_11[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_11 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_11[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_11 = 0;
            int splitedFileNo_tFileOutputDelimited_11 =0;
            int currentRow_tFileOutputDelimited_11 = 0;


            CSVBasicSet_tFileOutputDelimited_11 csvSettings_tFileOutputDelimited_11 = new CSVBasicSet_tFileOutputDelimited_11();
            csvSettings_tFileOutputDelimited_11.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_11.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_11.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_11 != null && directory_tFileOutputDelimited_11.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_11 = new java.io.File(directory_tFileOutputDelimited_11);
                        if(!dir_tFileOutputDelimited_11.exists()) {
                            dir_tFileOutputDelimited_11.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_11 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_11 = new java.io.File(fileName_tFileOutputDelimited_11);
                            if(fileToDelete_tFileOutputDelimited_11.exists()) {
                                fileToDelete_tFileOutputDelimited_11.delete();
                            }
                            CsvWritertFileOutputDelimited_11 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_11, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_11.setSeparator(csvSettings_tFileOutputDelimited_11.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_11.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_11.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_11.setLineEnd(""+csvSettings_tFileOutputDelimited_11.getRowDelim());
                    }
                        if(filetFileOutputDelimited_11.length()==0){
                                    headColutFileOutputDelimited_11[0]="noodlecrm__years_experience__c";
                                    headColutFileOutputDelimited_11[1]="noodlecrm__state__c";
                                    headColutFileOutputDelimited_11[2]="noodlecrm__external_id__c";
                                    headColutFileOutputDelimited_11[3]="noodlecrm__inquiry_created_date_time__c";
                                    headColutFileOutputDelimited_11[4]="noodlecrm__phone__c";
                                    headColutFileOutputDelimited_11[5]="noodlecrm__dw_updated_date_time__c";
                                    headColutFileOutputDelimited_11[6]="noodlecrm__utm_source__c";
                                    headColutFileOutputDelimited_11[7]="noodlecrm__city__c";
                                    headColutFileOutputDelimited_11[8]="noodlecrm__zip_code__c";
                                    headColutFileOutputDelimited_11[9]="noodlecrm__utm_content__c";
                                    headColutFileOutputDelimited_11[10]="name";
                                    headColutFileOutputDelimited_11[11]="noodlecrm__dw_id__c";
                                    headColutFileOutputDelimited_11[12]="lastmodifieddate";
                                    headColutFileOutputDelimited_11[13]="noodlecrm__program__c";
                                    headColutFileOutputDelimited_11[14]="ownerid";
                                    headColutFileOutputDelimited_11[15]="noodlecrm__utm_medium__c";
                                    headColutFileOutputDelimited_11[16]="isdeleted";
                                    headColutFileOutputDelimited_11[17]="systemmodstamp";
                                    headColutFileOutputDelimited_11[18]="noodlecrm__street__c";
                                    headColutFileOutputDelimited_11[19]="noodlecrm__contact__c";
                                    headColutFileOutputDelimited_11[20]="noodlecrm__utm_campaign__c";
                                    headColutFileOutputDelimited_11[21]="noodlecrm__email__c";
                                    headColutFileOutputDelimited_11[22]="createddate";
                                    headColutFileOutputDelimited_11[23]="noodlecrm__utm_term__c";
                                    headColutFileOutputDelimited_11[24]="noodlecrm__level_of_education__c";
                                    headColutFileOutputDelimited_11[25]="noodlecrm__dw_created_date_time__c";
                                    headColutFileOutputDelimited_11[26]="noodlecrm__utm_keyword__c";
                                    headColutFileOutputDelimited_11[27]="noodlecrm__first_name__c";
                                    headColutFileOutputDelimited_11[28]="noodlecrm__country__c";
                                    headColutFileOutputDelimited_11[29]="noodlecrm__last_name__c";
                                    headColutFileOutputDelimited_11[30]="noodlecrm__opportunity__c";
                                    headColutFileOutputDelimited_11[31]="noodlecrm__source_system__c";
                                    headColutFileOutputDelimited_11[32]="sfid";
                                    headColutFileOutputDelimited_11[33]="id";
                                    headColutFileOutputDelimited_11[34]="noodlecrm__inquiry_action__c";
                            CsvWritertFileOutputDelimited_11.writeNext(headColutFileOutputDelimited_11);
                            CsvWritertFileOutputDelimited_11.flush();
                        }
                CsvWritertFileOutputDelimited_11.setEscapeChar(csvSettings_tFileOutputDelimited_11.getEscapeChar());
                CsvWritertFileOutputDelimited_11.setQuoteChar(csvSettings_tFileOutputDelimited_11.getTextEnclosure());
                CsvWritertFileOutputDelimited_11.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_11", CsvWritertFileOutputDelimited_11);
resourceMap.put("nb_line_tFileOutputDelimited_11", nb_line_tFileOutputDelimited_11);

 



/**
 * [tFileOutputDelimited_11 begin ] stop
 */




	
	/**
	 * [tDBOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_11", false);
		start_Hash.put("tDBOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out22");
					}
				
		int tos_count_tDBOutput_11 = 0;
		





String dbschema_tDBOutput_11 = null;
	dbschema_tDBOutput_11 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_11 = null;
if(dbschema_tDBOutput_11 == null || dbschema_tDBOutput_11.trim().length() == 0) {
	tableName_tDBOutput_11 = ("noodlecrm__inquiry__c");
} else {
	tableName_tDBOutput_11 = dbschema_tDBOutput_11 + "\".\"" + ("noodlecrm__inquiry__c");
}

int nb_line_tDBOutput_11 = 0;
int nb_line_update_tDBOutput_11 = 0;
int nb_line_inserted_tDBOutput_11 = 0;
int nb_line_deleted_tDBOutput_11 = 0;
int nb_line_rejected_tDBOutput_11 = 0;

int deletedCount_tDBOutput_11=0;
int updatedCount_tDBOutput_11=0;
int insertedCount_tDBOutput_11=0;
int rejectedCount_tDBOutput_11=0;

boolean whetherReject_tDBOutput_11 = false;

java.sql.Connection conn_tDBOutput_11 = null;
String dbUser_tDBOutput_11 = null;

	conn_tDBOutput_11 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_11 = 10000;
   int batchSizeCounter_tDBOutput_11=0;

int count_tDBOutput_11=0;
            try (java.sql.Statement stmtClear_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
                stmtClear_tDBOutput_11.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_11 + "\"");
            }
	    String insert_tDBOutput_11 = "INSERT INTO \"" + tableName_tDBOutput_11 + "\" (\"noodlecrm__years_experience__c\",\"noodlecrm__state__c\",\"noodlecrm__external_id__c\",\"noodlecrm__inquiry_created_date_time__c\",\"noodlecrm__phone__c\",\"noodlecrm__dw_updated_date_time__c\",\"noodlecrm__utm_source__c\",\"noodlecrm__city__c\",\"noodlecrm__zip_code__c\",\"noodlecrm__utm_content__c\",\"name\",\"noodlecrm__dw_id__c\",\"lastmodifieddate\",\"noodlecrm__program__c\",\"ownerid\",\"noodlecrm__utm_medium__c\",\"isdeleted\",\"systemmodstamp\",\"noodlecrm__street__c\",\"noodlecrm__contact__c\",\"noodlecrm__utm_campaign__c\",\"noodlecrm__email__c\",\"createddate\",\"noodlecrm__utm_term__c\",\"noodlecrm__level_of_education__c\",\"noodlecrm__dw_created_date_time__c\",\"noodlecrm__utm_keyword__c\",\"noodlecrm__first_name__c\",\"noodlecrm__country__c\",\"noodlecrm__last_name__c\",\"noodlecrm__opportunity__c\",\"noodlecrm__source_system__c\",\"sfid\",\"id\",\"noodlecrm__inquiry_action__c\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11.prepareStatement(insert_tDBOutput_11);
	    resourceMap.put("pstmt_tDBOutput_11", pstmt_tDBOutput_11);
	    

 



/**
 * [tDBOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
out21Struct out21_tmp = new out21Struct();
out22Struct out22_tmp = new out22Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = context.ND_Heroku_Postgresql_Login;
				
				
	final String decryptedPassword_tDBInput_11 = context.ND_Heroku_Postgresql_Password; 
				
				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;
				
				String url_tDBInput_11 = "jdbc:postgresql://" + context.ND_Heroku_Postgresql_Server + ":" + context.ND_Heroku_Postgresql_Port + "/" + context.ND_Heroku_Postgresql_Database + "?" + context.ND_Heroku_Postgresql_AdditionalParams;
				
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11,dbUser_tDBInput_11,dbPwd_tDBInput_11);
		        
				conn_tDBInput_11.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "SELECT \n  noodlecrm__years_experience__c, \n  noodlecrm__state__c, \n  noodlecrm__external_id__c, \n  noodlecrm__inqui"
+"ry_created_date_time__c, \n  noodlecrm__phone__c, \n  noodlecrm__dw_updated_date_time__c, \n  noodlecrm__utm_source__c, "
+"\n  noodlecrm__city__c, \n  noodlecrm__zip_code__c, \n  noodlecrm__utm_content__c, \n  name, \n  noodlecrm__dw_id__c, \n"
+"  lastmodifieddate, \n  noodlecrm__program__c, \n  ownerid, \n  noodlecrm__utm_medium__c, \n  isdeleted, \n  systemmodst"
+"amp, \n  noodlecrm__street__c, \n  noodlecrm__contact__c, \n  noodlecrm__utm_campaign__c, \n  noodlecrm__email__c, \n  c"
+"reateddate, \n  noodlecrm__utm_term__c, \n  noodlecrm__level_of_education__c, \n  noodlecrm__dw_created_date_time__c, \n"
+"  noodlecrm__utm_keyword__c, \n  noodlecrm__first_name__c, \n  noodlecrm__country__c, \n  noodlecrm__last_name__c, \n  n"
+"oodlecrm__opportunity__c, \n  noodlecrm__source_system__c, \n  sfid, \n  id,\n  noodlecrm__inquiry_action__c\nFROM "+context.university_code+".noodlecrm__inquiry__c ";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row11.noodlecrm__years_experience__c = null;
							} else {
	                         		
        	row11.noodlecrm__years_experience__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 1, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row11.noodlecrm__state__c = null;
							} else {
	                         		
        	row11.noodlecrm__state__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 2, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								row11.noodlecrm__external_id__c = null;
							} else {
	                         		
        	row11.noodlecrm__external_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 3, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								row11.noodlecrm__inquiry_created_date_time__c = null;
							} else {
										
			row11.noodlecrm__inquiry_created_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 4);
		                    }
							if(colQtyInRs_tDBInput_11 < 5) {
								row11.noodlecrm__phone__c = null;
							} else {
	                         		
        	row11.noodlecrm__phone__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 5, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 6) {
								row11.noodlecrm__dw_updated_date_time__c = null;
							} else {
										
			row11.noodlecrm__dw_updated_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 6);
		                    }
							if(colQtyInRs_tDBInput_11 < 7) {
								row11.noodlecrm__utm_source__c = null;
							} else {
	                         		
        	row11.noodlecrm__utm_source__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 7, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 8) {
								row11.noodlecrm__city__c = null;
							} else {
	                         		
        	row11.noodlecrm__city__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 8, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 9) {
								row11.noodlecrm__zip_code__c = null;
							} else {
	                         		
        	row11.noodlecrm__zip_code__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 9, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 10) {
								row11.noodlecrm__utm_content__c = null;
							} else {
	                         		
        	row11.noodlecrm__utm_content__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 10, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 11) {
								row11.name = null;
							} else {
	                         		
        	row11.name = routines.system.JDBCUtil.getString(rs_tDBInput_11, 11, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 12) {
								row11.noodlecrm__dw_id__c = null;
							} else {
	                         		
        	row11.noodlecrm__dw_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 12, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 13) {
								row11.lastmodifieddate = null;
							} else {
										
			row11.lastmodifieddate = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 13);
		                    }
							if(colQtyInRs_tDBInput_11 < 14) {
								row11.noodlecrm__program__c = null;
							} else {
	                         		
        	row11.noodlecrm__program__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 14, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 15) {
								row11.ownerid = null;
							} else {
	                         		
        	row11.ownerid = routines.system.JDBCUtil.getString(rs_tDBInput_11, 15, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 16) {
								row11.noodlecrm__utm_medium__c = null;
							} else {
	                         		
        	row11.noodlecrm__utm_medium__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 16, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 17) {
								row11.isdeleted = null;
							} else {
	                         		
            row11.isdeleted = rs_tDBInput_11.getBoolean(17);
            if(rs_tDBInput_11.wasNull()){
                    row11.isdeleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 18) {
								row11.systemmodstamp = null;
							} else {
										
			row11.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 18);
		                    }
							if(colQtyInRs_tDBInput_11 < 19) {
								row11.noodlecrm__street__c = null;
							} else {
	                         		
        	row11.noodlecrm__street__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 19, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 20) {
								row11.noodlecrm__contact__c = null;
							} else {
	                         		
        	row11.noodlecrm__contact__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 20, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 21) {
								row11.noodlecrm__utm_campaign__c = null;
							} else {
	                         		
        	row11.noodlecrm__utm_campaign__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 21, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 22) {
								row11.noodlecrm__email__c = null;
							} else {
	                         		
        	row11.noodlecrm__email__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 22, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 23) {
								row11.createddate = null;
							} else {
										
			row11.createddate = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 23);
		                    }
							if(colQtyInRs_tDBInput_11 < 24) {
								row11.noodlecrm__utm_term__c = null;
							} else {
	                         		
        	row11.noodlecrm__utm_term__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 24, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 25) {
								row11.noodlecrm__level_of_education__c = null;
							} else {
	                         		
        	row11.noodlecrm__level_of_education__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 25, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 26) {
								row11.noodlecrm__dw_created_date_time__c = null;
							} else {
										
			row11.noodlecrm__dw_created_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 26);
		                    }
							if(colQtyInRs_tDBInput_11 < 27) {
								row11.noodlecrm__utm_keyword__c = null;
							} else {
	                         		
        	row11.noodlecrm__utm_keyword__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 27, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 28) {
								row11.noodlecrm__first_name__c = null;
							} else {
	                         		
        	row11.noodlecrm__first_name__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 28, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 29) {
								row11.noodlecrm__country__c = null;
							} else {
	                         		
        	row11.noodlecrm__country__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 29, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 30) {
								row11.noodlecrm__last_name__c = null;
							} else {
	                         		
        	row11.noodlecrm__last_name__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 30, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 31) {
								row11.noodlecrm__opportunity__c = null;
							} else {
	                         		
        	row11.noodlecrm__opportunity__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 31, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 32) {
								row11.noodlecrm__source_system__c = null;
							} else {
	                         		
        	row11.noodlecrm__source_system__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 32, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 33) {
								row11.sfid = null;
							} else {
	                         		
        	row11.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_11, 33, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 34) {
								row11.id = 0;
							} else {
		                          
            row11.id = rs_tDBInput_11.getInt(34);
            if(rs_tDBInput_11.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 35) {
								row11.noodlecrm__inquiry_action__c = null;
							} else {
	                         		
        	row11.noodlecrm__inquiry_action__c = routines.system.JDBCUtil.getString(rs_tDBInput_11, 35, false);
		                    }
					


 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

out21 = null;
out22 = null;


// # Output table : 'out21'
out21_tmp.noodlecrm__years_experience__c = row11.noodlecrm__years_experience__c ;
out21_tmp.noodlecrm__state__c = row11.noodlecrm__state__c ;
out21_tmp.noodlecrm__external_id__c = row11.noodlecrm__external_id__c ;
out21_tmp.noodlecrm__inquiry_created_date_time__c = row11.noodlecrm__inquiry_created_date_time__c ;
out21_tmp.noodlecrm__phone__c = row11.noodlecrm__phone__c ;
out21_tmp.noodlecrm__dw_updated_date_time__c = row11.noodlecrm__dw_updated_date_time__c ;
out21_tmp.noodlecrm__utm_source__c = row11.noodlecrm__utm_source__c ;
out21_tmp.noodlecrm__city__c = row11.noodlecrm__city__c ;
out21_tmp.noodlecrm__zip_code__c = row11.noodlecrm__zip_code__c ;
out21_tmp.noodlecrm__utm_content__c = row11.noodlecrm__utm_content__c ;
out21_tmp.name = row11.name ;
out21_tmp.noodlecrm__dw_id__c = row11.noodlecrm__dw_id__c ;
out21_tmp.lastmodifieddate = row11.lastmodifieddate ;
out21_tmp.noodlecrm__program__c = row11.noodlecrm__program__c ;
out21_tmp.ownerid = row11.ownerid ;
out21_tmp.noodlecrm__utm_medium__c = row11.noodlecrm__utm_medium__c ;
out21_tmp.isdeleted = row11.isdeleted ;
out21_tmp.systemmodstamp = row11.systemmodstamp ;
out21_tmp.noodlecrm__street__c = row11.noodlecrm__street__c ;
out21_tmp.noodlecrm__contact__c = row11.noodlecrm__contact__c ;
out21_tmp.noodlecrm__utm_campaign__c = row11.noodlecrm__utm_campaign__c ;
out21_tmp.noodlecrm__email__c = row11.noodlecrm__email__c ;
out21_tmp.createddate = row11.createddate ;
out21_tmp.noodlecrm__utm_term__c = row11.noodlecrm__utm_term__c ;
out21_tmp.noodlecrm__level_of_education__c = row11.noodlecrm__level_of_education__c ;
out21_tmp.noodlecrm__dw_created_date_time__c = row11.noodlecrm__dw_created_date_time__c ;
out21_tmp.noodlecrm__utm_keyword__c = row11.noodlecrm__utm_keyword__c ;
out21_tmp.noodlecrm__first_name__c = row11.noodlecrm__first_name__c ;
out21_tmp.noodlecrm__country__c = row11.noodlecrm__country__c ;
out21_tmp.noodlecrm__last_name__c = row11.noodlecrm__last_name__c ;
out21_tmp.noodlecrm__opportunity__c = row11.noodlecrm__opportunity__c ;
out21_tmp.noodlecrm__source_system__c = row11.noodlecrm__source_system__c ;
out21_tmp.sfid = row11.sfid ;
out21_tmp.id = row11.id ;
out21_tmp.noodlecrm__inquiry_action__c = row11.noodlecrm__inquiry_action__c ;
out21 = out21_tmp;

// # Output table : 'out22'
out22_tmp.noodlecrm__years_experience__c = row11.noodlecrm__years_experience__c ;
out22_tmp.noodlecrm__state__c = row11.noodlecrm__state__c ;
out22_tmp.noodlecrm__external_id__c = row11.noodlecrm__external_id__c ;
out22_tmp.noodlecrm__inquiry_created_date_time__c = row11.noodlecrm__inquiry_created_date_time__c ;
out22_tmp.noodlecrm__phone__c = row11.noodlecrm__phone__c ;
out22_tmp.noodlecrm__dw_updated_date_time__c = row11.noodlecrm__dw_updated_date_time__c ;
out22_tmp.noodlecrm__utm_source__c = row11.noodlecrm__utm_source__c ;
out22_tmp.noodlecrm__city__c = row11.noodlecrm__city__c ;
out22_tmp.noodlecrm__zip_code__c = row11.noodlecrm__zip_code__c ;
out22_tmp.noodlecrm__utm_content__c = row11.noodlecrm__utm_content__c ;
out22_tmp.name = row11.name ;
out22_tmp.noodlecrm__dw_id__c = row11.noodlecrm__dw_id__c ;
out22_tmp.lastmodifieddate = row11.lastmodifieddate ;
out22_tmp.noodlecrm__program__c = row11.noodlecrm__program__c ;
out22_tmp.ownerid = row11.ownerid ;
out22_tmp.noodlecrm__utm_medium__c = row11.noodlecrm__utm_medium__c ;
out22_tmp.isdeleted = row11.isdeleted ;
out22_tmp.systemmodstamp = row11.systemmodstamp ;
out22_tmp.noodlecrm__street__c = row11.noodlecrm__street__c ;
out22_tmp.noodlecrm__contact__c = row11.noodlecrm__contact__c ;
out22_tmp.noodlecrm__utm_campaign__c = row11.noodlecrm__utm_campaign__c ;
out22_tmp.noodlecrm__email__c = row11.noodlecrm__email__c ;
out22_tmp.createddate = row11.createddate ;
out22_tmp.noodlecrm__utm_term__c = row11.noodlecrm__utm_term__c ;
out22_tmp.noodlecrm__level_of_education__c = row11.noodlecrm__level_of_education__c ;
out22_tmp.noodlecrm__dw_created_date_time__c = row11.noodlecrm__dw_created_date_time__c ;
out22_tmp.noodlecrm__utm_keyword__c = row11.noodlecrm__utm_keyword__c ;
out22_tmp.noodlecrm__first_name__c = row11.noodlecrm__first_name__c ;
out22_tmp.noodlecrm__country__c = row11.noodlecrm__country__c ;
out22_tmp.noodlecrm__last_name__c = row11.noodlecrm__last_name__c ;
out22_tmp.noodlecrm__opportunity__c = row11.noodlecrm__opportunity__c ;
out22_tmp.noodlecrm__source_system__c = row11.noodlecrm__source_system__c ;
out22_tmp.sfid = row11.sfid ;
out22_tmp.id = row11.id ;
out22_tmp.noodlecrm__inquiry_action__c = row11.noodlecrm__inquiry_action__c ;
out22 = out22_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "out21"
if(out21 != null) { 



	
	/**
	 * [tFileOutputDelimited_11 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out21");
					}
					


                        String[] rowtFileOutputDelimited_11=new String[35];
                            rowtFileOutputDelimited_11[0]=out21.noodlecrm__years_experience__c == null ? null : out21.noodlecrm__years_experience__c;
                            rowtFileOutputDelimited_11[1]=out21.noodlecrm__state__c == null ? null : out21.noodlecrm__state__c;
                            rowtFileOutputDelimited_11[2]=out21.noodlecrm__external_id__c == null ? null : out21.noodlecrm__external_id__c;
                            rowtFileOutputDelimited_11[3]=out21.noodlecrm__inquiry_created_date_time__c == null ? null : FormatterUtils.format_Date(out21.noodlecrm__inquiry_created_date_time__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_11[4]=out21.noodlecrm__phone__c == null ? null : out21.noodlecrm__phone__c;
                            rowtFileOutputDelimited_11[5]=out21.noodlecrm__dw_updated_date_time__c == null ? null : FormatterUtils.format_Date(out21.noodlecrm__dw_updated_date_time__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_11[6]=out21.noodlecrm__utm_source__c == null ? null : out21.noodlecrm__utm_source__c;
                            rowtFileOutputDelimited_11[7]=out21.noodlecrm__city__c == null ? null : out21.noodlecrm__city__c;
                            rowtFileOutputDelimited_11[8]=out21.noodlecrm__zip_code__c == null ? null : out21.noodlecrm__zip_code__c;
                            rowtFileOutputDelimited_11[9]=out21.noodlecrm__utm_content__c == null ? null : out21.noodlecrm__utm_content__c;
                            rowtFileOutputDelimited_11[10]=out21.name == null ? null : out21.name;
                            rowtFileOutputDelimited_11[11]=out21.noodlecrm__dw_id__c == null ? null : out21.noodlecrm__dw_id__c;
                            rowtFileOutputDelimited_11[12]=out21.lastmodifieddate == null ? null : FormatterUtils.format_Date(out21.lastmodifieddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_11[13]=out21.noodlecrm__program__c == null ? null : out21.noodlecrm__program__c;
                            rowtFileOutputDelimited_11[14]=out21.ownerid == null ? null : out21.ownerid;
                            rowtFileOutputDelimited_11[15]=out21.noodlecrm__utm_medium__c == null ? null : out21.noodlecrm__utm_medium__c;
                            rowtFileOutputDelimited_11[16]=out21.isdeleted == null ? null : String.valueOf(out21.isdeleted);
                            rowtFileOutputDelimited_11[17]=out21.systemmodstamp == null ? null : FormatterUtils.format_Date(out21.systemmodstamp, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_11[18]=out21.noodlecrm__street__c == null ? null : out21.noodlecrm__street__c;
                            rowtFileOutputDelimited_11[19]=out21.noodlecrm__contact__c == null ? null : out21.noodlecrm__contact__c;
                            rowtFileOutputDelimited_11[20]=out21.noodlecrm__utm_campaign__c == null ? null : out21.noodlecrm__utm_campaign__c;
                            rowtFileOutputDelimited_11[21]=out21.noodlecrm__email__c == null ? null : out21.noodlecrm__email__c;
                            rowtFileOutputDelimited_11[22]=out21.createddate == null ? null : FormatterUtils.format_Date(out21.createddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_11[23]=out21.noodlecrm__utm_term__c == null ? null : out21.noodlecrm__utm_term__c;
                            rowtFileOutputDelimited_11[24]=out21.noodlecrm__level_of_education__c == null ? null : out21.noodlecrm__level_of_education__c;
                            rowtFileOutputDelimited_11[25]=out21.noodlecrm__dw_created_date_time__c == null ? null : FormatterUtils.format_Date(out21.noodlecrm__dw_created_date_time__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_11[26]=out21.noodlecrm__utm_keyword__c == null ? null : out21.noodlecrm__utm_keyword__c;
                            rowtFileOutputDelimited_11[27]=out21.noodlecrm__first_name__c == null ? null : out21.noodlecrm__first_name__c;
                            rowtFileOutputDelimited_11[28]=out21.noodlecrm__country__c == null ? null : out21.noodlecrm__country__c;
                            rowtFileOutputDelimited_11[29]=out21.noodlecrm__last_name__c == null ? null : out21.noodlecrm__last_name__c;
                            rowtFileOutputDelimited_11[30]=out21.noodlecrm__opportunity__c == null ? null : out21.noodlecrm__opportunity__c;
                            rowtFileOutputDelimited_11[31]=out21.noodlecrm__source_system__c == null ? null : out21.noodlecrm__source_system__c;
                            rowtFileOutputDelimited_11[32]=out21.sfid == null ? null : out21.sfid;
                            rowtFileOutputDelimited_11[33]=String.valueOf(out21.id);
                            rowtFileOutputDelimited_11[34]=out21.noodlecrm__inquiry_action__c == null ? null : out21.noodlecrm__inquiry_action__c;
                nb_line_tFileOutputDelimited_11++;
                resourceMap.put("nb_line_tFileOutputDelimited_11", nb_line_tFileOutputDelimited_11);
                                       CsvWritertFileOutputDelimited_11.writeNext(rowtFileOutputDelimited_11);




 


	tos_count_tFileOutputDelimited_11++;

/**
 * [tFileOutputDelimited_11 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_11";

	

 



/**
 * [tFileOutputDelimited_11 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_11";

	

 



/**
 * [tFileOutputDelimited_11 process_data_end ] stop
 */

} // End of branch "out21"




// Start of branch "out22"
if(out22 != null) { 



	
	/**
	 * [tDBOutput_11 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out22");
					}
					



        whetherReject_tDBOutput_11 = false;
                    if(out22.noodlecrm__years_experience__c == null) {
pstmt_tDBOutput_11.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(1, out22.noodlecrm__years_experience__c);
}

                    if(out22.noodlecrm__state__c == null) {
pstmt_tDBOutput_11.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(2, out22.noodlecrm__state__c);
}

                    if(out22.noodlecrm__external_id__c == null) {
pstmt_tDBOutput_11.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(3, out22.noodlecrm__external_id__c);
}

                    if(out22.noodlecrm__inquiry_created_date_time__c != null) {
pstmt_tDBOutput_11.setTimestamp(4, new java.sql.Timestamp(out22.noodlecrm__inquiry_created_date_time__c.getTime()));
} else {
pstmt_tDBOutput_11.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(out22.noodlecrm__phone__c == null) {
pstmt_tDBOutput_11.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(5, out22.noodlecrm__phone__c);
}

                    if(out22.noodlecrm__dw_updated_date_time__c != null) {
pstmt_tDBOutput_11.setTimestamp(6, new java.sql.Timestamp(out22.noodlecrm__dw_updated_date_time__c.getTime()));
} else {
pstmt_tDBOutput_11.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(out22.noodlecrm__utm_source__c == null) {
pstmt_tDBOutput_11.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(7, out22.noodlecrm__utm_source__c);
}

                    if(out22.noodlecrm__city__c == null) {
pstmt_tDBOutput_11.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(8, out22.noodlecrm__city__c);
}

                    if(out22.noodlecrm__zip_code__c == null) {
pstmt_tDBOutput_11.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(9, out22.noodlecrm__zip_code__c);
}

                    if(out22.noodlecrm__utm_content__c == null) {
pstmt_tDBOutput_11.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(10, out22.noodlecrm__utm_content__c);
}

                    if(out22.name == null) {
pstmt_tDBOutput_11.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(11, out22.name);
}

                    if(out22.noodlecrm__dw_id__c == null) {
pstmt_tDBOutput_11.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(12, out22.noodlecrm__dw_id__c);
}

                    if(out22.lastmodifieddate != null) {
pstmt_tDBOutput_11.setTimestamp(13, new java.sql.Timestamp(out22.lastmodifieddate.getTime()));
} else {
pstmt_tDBOutput_11.setNull(13, java.sql.Types.TIMESTAMP);
}

                    if(out22.noodlecrm__program__c == null) {
pstmt_tDBOutput_11.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(14, out22.noodlecrm__program__c);
}

                    if(out22.ownerid == null) {
pstmt_tDBOutput_11.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(15, out22.ownerid);
}

                    if(out22.noodlecrm__utm_medium__c == null) {
pstmt_tDBOutput_11.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(16, out22.noodlecrm__utm_medium__c);
}

                    if(out22.isdeleted == null) {
pstmt_tDBOutput_11.setNull(17, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_11.setBoolean(17, out22.isdeleted);
}

                    if(out22.systemmodstamp != null) {
pstmt_tDBOutput_11.setTimestamp(18, new java.sql.Timestamp(out22.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_11.setNull(18, java.sql.Types.TIMESTAMP);
}

                    if(out22.noodlecrm__street__c == null) {
pstmt_tDBOutput_11.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(19, out22.noodlecrm__street__c);
}

                    if(out22.noodlecrm__contact__c == null) {
pstmt_tDBOutput_11.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(20, out22.noodlecrm__contact__c);
}

                    if(out22.noodlecrm__utm_campaign__c == null) {
pstmt_tDBOutput_11.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(21, out22.noodlecrm__utm_campaign__c);
}

                    if(out22.noodlecrm__email__c == null) {
pstmt_tDBOutput_11.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(22, out22.noodlecrm__email__c);
}

                    if(out22.createddate != null) {
pstmt_tDBOutput_11.setTimestamp(23, new java.sql.Timestamp(out22.createddate.getTime()));
} else {
pstmt_tDBOutput_11.setNull(23, java.sql.Types.TIMESTAMP);
}

                    if(out22.noodlecrm__utm_term__c == null) {
pstmt_tDBOutput_11.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(24, out22.noodlecrm__utm_term__c);
}

                    if(out22.noodlecrm__level_of_education__c == null) {
pstmt_tDBOutput_11.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(25, out22.noodlecrm__level_of_education__c);
}

                    if(out22.noodlecrm__dw_created_date_time__c != null) {
pstmt_tDBOutput_11.setTimestamp(26, new java.sql.Timestamp(out22.noodlecrm__dw_created_date_time__c.getTime()));
} else {
pstmt_tDBOutput_11.setNull(26, java.sql.Types.TIMESTAMP);
}

                    if(out22.noodlecrm__utm_keyword__c == null) {
pstmt_tDBOutput_11.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(27, out22.noodlecrm__utm_keyword__c);
}

                    if(out22.noodlecrm__first_name__c == null) {
pstmt_tDBOutput_11.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(28, out22.noodlecrm__first_name__c);
}

                    if(out22.noodlecrm__country__c == null) {
pstmt_tDBOutput_11.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(29, out22.noodlecrm__country__c);
}

                    if(out22.noodlecrm__last_name__c == null) {
pstmt_tDBOutput_11.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(30, out22.noodlecrm__last_name__c);
}

                    if(out22.noodlecrm__opportunity__c == null) {
pstmt_tDBOutput_11.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(31, out22.noodlecrm__opportunity__c);
}

                    if(out22.noodlecrm__source_system__c == null) {
pstmt_tDBOutput_11.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(32, out22.noodlecrm__source_system__c);
}

                    if(out22.sfid == null) {
pstmt_tDBOutput_11.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(33, out22.sfid);
}

                    pstmt_tDBOutput_11.setInt(34, out22.id);

                    if(out22.noodlecrm__inquiry_action__c == null) {
pstmt_tDBOutput_11.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(35, out22.noodlecrm__inquiry_action__c);
}

			
    		pstmt_tDBOutput_11.addBatch();
    		nb_line_tDBOutput_11++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_11++;
    		  
            if(!whetherReject_tDBOutput_11) {
            }
    			if ((batchSize_tDBOutput_11 > 0) && (batchSize_tDBOutput_11 <= batchSizeCounter_tDBOutput_11)) {
                try {
						int countSum_tDBOutput_11 = 0;
						    
						for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}
				    	
				    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
				    	
            	    	batchSizeCounter_tDBOutput_11 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_11){
				    	java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),sqle_tDBOutput_11=null;
				    	String errormessage_tDBOutput_11;
						if (ne_tDBOutput_11 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_11 = new java.sql.SQLException(e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(), ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
							errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
						}else{
							errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
						}
				    	
				    	int countSum_tDBOutput_11 = 0;
						for(int countEach_tDBOutput_11: e_tDBOutput_11.getUpdateCounts()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
						}
						
				    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
				    	
				    	System.err.println(errormessage_tDBOutput_11);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_11++;

/**
 * [tDBOutput_11 main ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_end ] stop
 */

} // End of branch "out22"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
	if(conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {
		
			conn_tDBInput_11.commit();
			
		
			conn_tDBInput_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);
 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_11 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_11";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_11!=null) {
				    	CsvWritertFileOutputDelimited_11.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_11_NB_LINE",nb_line_tFileOutputDelimited_11);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_11", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out21");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_11", true);
end_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk108", 0, "ok");
				}
				tFileArchive_11Process(globalMap);



/**
 * [tFileOutputDelimited_11 end ] stop
 */




	
	/**
	 * [tDBOutput_11 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



	    try {
				int countSum_tDBOutput_11 = 0;
				if (pstmt_tDBOutput_11 != null && batchSizeCounter_tDBOutput_11 > 0) {
						
					for(int countEach_tDBOutput_11: pstmt_tDBOutput_11.executeBatch()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_11){
	    	java.sql.SQLException ne_tDBOutput_11 = e_tDBOutput_11.getNextException(),sqle_tDBOutput_11=null;
	    	String errormessage_tDBOutput_11;
			if (ne_tDBOutput_11 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_11 = new java.sql.SQLException(e_tDBOutput_11.getMessage() + "\ncaused by: " + ne_tDBOutput_11.getMessage(), ne_tDBOutput_11.getSQLState(), ne_tDBOutput_11.getErrorCode(), ne_tDBOutput_11);
				errormessage_tDBOutput_11 = sqle_tDBOutput_11.getMessage();
			}else{
				errormessage_tDBOutput_11 = e_tDBOutput_11.getMessage();
			}
	    	
	    	int countSum_tDBOutput_11 = 0;
			for(int countEach_tDBOutput_11: e_tDBOutput_11.getUpdateCounts()) {
				countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
			}
			
	    		insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
	    	
	    	System.err.println(errormessage_tDBOutput_11);
	    	
		}
	    
        if(pstmt_tDBOutput_11 != null) {
        		
            pstmt_tDBOutput_11.close();
            resourceMap.remove("pstmt_tDBOutput_11");
        }
    resourceMap.put("statementClosed_tDBOutput_11", true);

	nb_line_deleted_tDBOutput_11=nb_line_deleted_tDBOutput_11+ deletedCount_tDBOutput_11;
	nb_line_update_tDBOutput_11=nb_line_update_tDBOutput_11 + updatedCount_tDBOutput_11;
	nb_line_inserted_tDBOutput_11=nb_line_inserted_tDBOutput_11 + insertedCount_tDBOutput_11;
	nb_line_rejected_tDBOutput_11=nb_line_rejected_tDBOutput_11 + rejectedCount_tDBOutput_11;
	
        globalMap.put("tDBOutput_11_NB_LINE",nb_line_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_UPDATED",nb_line_update_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_DELETED",nb_line_deleted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_11);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out22");
			  	}
			  	
 

ok_Hash.put("tDBOutput_11", true);
end_Hash.put("tDBOutput_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk111", 0, "ok");
				}
				tJava_42Process(globalMap);



/**
 * [tDBOutput_11 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_11 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_11";

	


		if(resourceMap.get("finish_tFileOutputDelimited_11") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_11 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_11");
					
						if(CsvWritertFileOutputDelimited_11!=null) {
					    	CsvWritertFileOutputDelimited_11.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_11 finally ] stop
 */




	
	/**
	 * [tDBOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



    if (resourceMap.get("statementClosed_tDBOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_11 = null;
                if ((pstmtToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_11")) != null) {
                    pstmtToClose_tDBOutput_11.close();
                }
    }
 



/**
 * [tDBOutput_11 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_11", false);
		start_Hash.put("tFileArchive_11", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_11";

	
		int tos_count_tFileArchive_11 = 0;
		

 



/**
 * [tFileArchive_11 begin ] stop
 */
	
	/**
	 * [tFileArchive_11 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_11";

	

	

		String sourceFile_tFileArchive_11 = context.staging_S3_dir + "noodlecrm__inquiry__c.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_11), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_11 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_11 = context.staging_S3_dir + "noodlecrm__inquiry__c.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_11 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_11, zipFile_tFileArchive_11);
    zip_tFileArchive_11.setOverwriteExistTargetZip(true);
	zip_tFileArchive_11.setMakeTargetDir(true);
	zip_tFileArchive_11.setCompressLevel(9);
	zip_tFileArchive_11.setArchiveFormat("gzip");
	zip_tFileArchive_11.setAllFiles(true);
	
	
		zip_tFileArchive_11.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_11_ARCHIVE_FILEPATH",zipFile_tFileArchive_11);
   
   globalMap.put("tFileArchive_11_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_11).getName());

   zip_tFileArchive_11.doZip();


 


	tos_count_tFileArchive_11++;

/**
 * [tFileArchive_11 main ] stop
 */
	
	/**
	 * [tFileArchive_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_11";

	

 



/**
 * [tFileArchive_11 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_11";

	

 



/**
 * [tFileArchive_11 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_11 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_11";

	

 

ok_Hash.put("tFileArchive_11", true);
end_Hash.put("tFileArchive_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk109", 0, "ok");
				}
				tS3Put_11Process(globalMap);



/**
 * [tFileArchive_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_11 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_11";

	

 



/**
 * [tFileArchive_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_11_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_11", false);
		start_Hash.put("tS3Put_11", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_11";

	
		int tos_count_tS3Put_11 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_11 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_11 = context.nd_s3_data_lake_path_sfdc +"/noodlecrm__inquiry/latest/university_id="+context.university_code+"/noodlecrm__inquiry__c.csv.gz";
	
	int partSizeInBytes_tS3Put_11 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_11 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_11 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_11 = context.staging_S3_dir + "noodlecrm__inquiry__c.csv.gz";
	
	boolean useStream_tS3Put_11 = false;
	java.io.InputStream uploadStream_tS3Put_11 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_11 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_11 instanceof String){
		    useStream_tS3Put_11 = false;
		}else if(fileOrStream_tS3Put_11 instanceof java.io.InputStream){
		    useStream_tS3Put_11 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_11 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_11) {
				java.io.File inputFile_tS3Put_11 = new java.io.File((String)fileOrStream_tS3Put_11);
				
				long multipart_upload_threshold_tS3Put_11 = 5 * 1024 * 1024;
				
    		tm_tS3Put_11 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_11)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_11)
    			.withS3Client(conn_tS3Put_11)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_11 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_11, inputFile_tS3Put_11).withMetadata(objectMetadata_tS3Put_11);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_11 = tm_tS3Put_11.upload(putRequest_tS3Put_11);
  		
  			upload_tS3Put_11.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_11 = ((java.io.InputStream)fileOrStream_tS3Put_11);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_11 = new S3StreamUtil();
    		byte[] buffer_tS3Put_11 = new byte[partSizeInBytes_tS3Put_11];
    		sourceStream_tS3Put_11.read(buffer_tS3Put_11);
    		long curPartSize_tS3Put_11 = streamUtil_tS3Put_11.getLength(buffer_tS3Put_11);
    		boolean multiUpload_tS3Put_11 = curPartSize_tS3Put_11 == partSizeInBytes_tS3Put_11;
    		
    		if(!multiUpload_tS3Put_11) {
    				objectMetadata_tS3Put_11.setContentLength(curPartSize_tS3Put_11);
    				uploadStream_tS3Put_11 = new java.io.ByteArrayInputStream(buffer_tS3Put_11,0,Long.valueOf(curPartSize_tS3Put_11).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_11 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_11, uploadStream_tS3Put_11, objectMetadata_tS3Put_11);
			
    				
    				

    				
    				conn_tS3Put_11.putObject(putRequest_tS3Put_11);
    		} else {
    				uploadStream_tS3Put_11 = new java.io.ByteArrayInputStream(buffer_tS3Put_11);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_11 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_11 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_11, objectMetadata_tS3Put_11);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_11 = conn_tS3Put_11.initiateMultipartUpload(putRequest_tS3Put_11);
      			String uploadId_tS3Put_11 = initResponse_tS3Put_11.getUploadId();
      			int partNumber_tS3Put_11 = 1;
      			boolean streamHasNext_tS3Put_11 = true;
      			byte[] probeAvailability_tS3Put_11 = new byte[1];
				try {
					while (streamHasNext_tS3Put_11) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_11 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_11)
						.withUploadId(uploadId_tS3Put_11)
                    	.withPartNumber(partNumber_tS3Put_11)
						.withPartSize(curPartSize_tS3Put_11);
            		    uploadRequest_tS3Put_11.setInputStream(uploadStream_tS3Put_11);
            		    streamHasNext_tS3Put_11 = sourceStream_tS3Put_11.read(probeAvailability_tS3Put_11) != -1;
            		    if(!streamHasNext_tS3Put_11){
                    	    uploadRequest_tS3Put_11.setLastPart(true);
                    	}

                		partTags_tS3Put_11.add(conn_tS3Put_11.uploadPart(uploadRequest_tS3Put_11).getPartETag());
                  	    partNumber_tS3Put_11++;

          		     	if(uploadStream_tS3Put_11!=null){
      		         			uploadStream_tS3Put_11.close();
          		     	}
          		     	buffer_tS3Put_11 = new byte[partSizeInBytes_tS3Put_11];
          		     	sourceStream_tS3Put_11.read(buffer_tS3Put_11,1,partSizeInBytes_tS3Put_11-1);
          		     	buffer_tS3Put_11[0] = probeAvailability_tS3Put_11[0];
          		     	probeAvailability_tS3Put_11 = new byte[1];
          		     	curPartSize_tS3Put_11 = streamUtil_tS3Put_11.getLength(buffer_tS3Put_11);
          		     	uploadStream_tS3Put_11 = new java.io.ByteArrayInputStream(buffer_tS3Put_11);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_11 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_11,
                        uploadId_tS3Put_11, partTags_tS3Put_11);
            		conn_tS3Put_11.completeMultipartUpload(compRequest_tS3Put_11);
            } catch (java.lang.Exception uploadException_tS3Put_11) {
  							conn_tS3Put_11.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_11, uploadId_tS3Put_11));
    						throw uploadException_tS3Put_11;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_11){
		
			throw(e_tS3Put_11);
		
	}finally{
		if(useStream_tS3Put_11 && uploadStream_tS3Put_11!=null){
    	uploadStream_tS3Put_11.close();
    }
    
    if(tm_tS3Put_11 != null){
        tm_tS3Put_11.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_11 begin ] stop
 */
	
	/**
	 * [tS3Put_11 main ] start
	 */

	

	
	
	currentComponent="tS3Put_11";

	

 


	tos_count_tS3Put_11++;

/**
 * [tS3Put_11 main ] stop
 */
	
	/**
	 * [tS3Put_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_11";

	

 



/**
 * [tS3Put_11 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_11";

	

 



/**
 * [tS3Put_11 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_11 end ] start
	 */

	

	
	
	currentComponent="tS3Put_11";

	

 

ok_Hash.put("tS3Put_11", true);
end_Hash.put("tS3Put_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk110", 0, "ok");
				}
				tJava_41Process(globalMap);



/**
 * [tS3Put_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_11 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_11";

	

 



/**
 * [tS3Put_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_11_SUBPROCESS_STATE", 1);
	}
	

public void tJava_41Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_41_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_41 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_41", false);
		start_Hash.put("tJava_41", System.currentTimeMillis());
		
	
	currentComponent="tJava_41";

	
		int tos_count_tJava_41 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_41 begin ] stop
 */
	
	/**
	 * [tJava_41 main ] start
	 */

	

	
	
	currentComponent="tJava_41";

	

 


	tos_count_tJava_41++;

/**
 * [tJava_41 main ] stop
 */
	
	/**
	 * [tJava_41 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_41";

	

 



/**
 * [tJava_41 process_data_begin ] stop
 */
	
	/**
	 * [tJava_41 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_41";

	

 



/**
 * [tJava_41 process_data_end ] stop
 */
	
	/**
	 * [tJava_41 end ] start
	 */

	

	
	
	currentComponent="tJava_41";

	

 

ok_Hash.put("tJava_41", true);
end_Hash.put("tJava_41", System.currentTimeMillis());




/**
 * [tJava_41 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_41 finally ] start
	 */

	

	
	
	currentComponent="tJava_41";

	

 



/**
 * [tJava_41 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_41_SUBPROCESS_STATE", 1);
	}
	

public void tJava_42Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_42_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_42 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_42", false);
		start_Hash.put("tJava_42", System.currentTimeMillis());
		
	
	currentComponent="tJava_42";

	
		int tos_count_tJava_42 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_11_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");
 



/**
 * [tJava_42 begin ] stop
 */
	
	/**
	 * [tJava_42 main ] start
	 */

	

	
	
	currentComponent="tJava_42";

	

 


	tos_count_tJava_42++;

/**
 * [tJava_42 main ] stop
 */
	
	/**
	 * [tJava_42 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_42";

	

 



/**
 * [tJava_42 process_data_begin ] stop
 */
	
	/**
	 * [tJava_42 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_42";

	

 



/**
 * [tJava_42 process_data_end ] stop
 */
	
	/**
	 * [tJava_42 end ] start
	 */

	

	
	
	currentComponent="tJava_42";

	

 

ok_Hash.put("tJava_42", true);
end_Hash.put("tJava_42", System.currentTimeMillis());




/**
 * [tJava_42 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_42 finally ] start
	 */

	

	
	
	currentComponent="tJava_42";

	

 



/**
 * [tJava_42 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_42_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_15", false);
		start_Hash.put("tS3Copy_15", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_15";

	
		int tos_count_tS3Copy_15 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_15 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_15 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_15 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_15 = null;
		
		
		final String from_bucket_tS3Copy_15 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_15 = context.nd_s3_data_lake_path_sfdc+"/noodlecrm__application/latest/university_id="+context.university_code+"/noodlecrm__application__c.csv.gz";
		final String to_bucket_tS3Copy_15 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_15 = context.nd_s3_data_lake_path_sfdc+"/noodlecrm__application/archive/university_id="+context.university_code+"/noodlecrm__application__c_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_15 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_15, from_key_tS3Copy_15);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_15 = conn_tS3Copy_15.getObjectMetadata(metadataRequest_tS3Copy_15);
    long objectSize_tS3Copy_15 = metadataResult_tS3Copy_15.getContentLength();
    
    boolean multiUpload_tS3Copy_15 = objectSize_tS3Copy_15 > maxBytes4SingleCopyCall_tS3Copy_15;
    
    if(!multiUpload_tS3Copy_15) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_15 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_15, from_key_tS3Copy_15, to_bucket_tS3Copy_15, to_key_tS3Copy_15);
    		if(objectMetadata_tS3Copy_15 != null) {
    				putRequest_tS3Copy_15.setNewObjectMetadata(objectMetadata_tS3Copy_15);
    		}
    		
    		

    		
    		conn_tS3Copy_15.copyObject(putRequest_tS3Copy_15);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_15 = metadataResult_tS3Copy_15.getUserMetadata();
						if((userMetadata_tS3Copy_15!=null) && userMetadata_tS3Copy_15.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_15 = null;
    				if(objectMetadata_tS3Copy_15 != null) {
    						putRequest_tS3Copy_15 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_15, to_key_tS3Copy_15, objectMetadata_tS3Copy_15);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_15 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_15, to_key_tS3Copy_15, metadataResult_tS3Copy_15);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_15 = conn_tS3Copy_15.initiateMultipartUpload(putRequest_tS3Copy_15);
            
            long bytePosition_tS3Copy_15 = 0;
            int partNum_tS3Copy_15 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_15 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_15 < objectSize_tS3Copy_15) {
                long lastByte_tS3Copy_15 = java.lang.Math.min(bytePosition_tS3Copy_15 + partSizeInBytes_tS3Copy_15 - 1, objectSize_tS3Copy_15 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_15 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_15)
                        .withSourceKey(from_key_tS3Copy_15)
                        .withDestinationBucketName(to_bucket_tS3Copy_15)
                        .withDestinationKey(to_key_tS3Copy_15)
                        .withUploadId(initResult_tS3Copy_15.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_15)
                        .withLastByte(lastByte_tS3Copy_15)
                        .withPartNumber(partNum_tS3Copy_15++);
                partTags_tS3Copy_15.add(conn_tS3Copy_15.copyPart(copyPartRequest_tS3Copy_15).getPartETag());
                bytePosition_tS3Copy_15 += partSizeInBytes_tS3Copy_15;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_15 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_15,
                                                                        to_key_tS3Copy_15, 
                                                                        initResult_tS3Copy_15.getUploadId(),
                                                                        partTags_tS3Copy_15);
            conn_tS3Copy_15.completeMultipartUpload(completeRequest_tS3Copy_15);
    		} catch (java.lang.Exception uploadException_tS3Copy_15) {
    				conn_tS3Copy_15.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_15, to_key_tS3Copy_15, initResult_tS3Copy_15.getUploadId()));
    				throw uploadException_tS3Copy_15;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_15){
		
			System.err.println(e_tS3Copy_15.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_15 begin ] stop
 */
	
	/**
	 * [tS3Copy_15 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_15";

	

 


	tos_count_tS3Copy_15++;

/**
 * [tS3Copy_15 main ] stop
 */
	
	/**
	 * [tS3Copy_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_15";

	

 



/**
 * [tS3Copy_15 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_15";

	

 



/**
 * [tS3Copy_15 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_15 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_15";

	

 

ok_Hash.put("tS3Copy_15", true);
end_Hash.put("tS3Copy_15", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk154", 0, "ok");
				}
				tJava_59Process(globalMap);



/**
 * [tS3Copy_15 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Copy_15:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tS3Copy_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_15 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_15";

	

 



/**
 * [tS3Copy_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_15_SUBPROCESS_STATE", 1);
	}
	

public void tJava_59Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_59_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_59 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_59", false);
		start_Hash.put("tJava_59", System.currentTimeMillis());
		
	
	currentComponent="tJava_59";

	
		int tos_count_tJava_59 = 0;
		


System.out.println("Step 0: Running For Noodlecrm__Application Object");
System.out.println("Step 1: Copied Previous Run File To Archive");
 



/**
 * [tJava_59 begin ] stop
 */
	
	/**
	 * [tJava_59 main ] start
	 */

	

	
	
	currentComponent="tJava_59";

	

 


	tos_count_tJava_59++;

/**
 * [tJava_59 main ] stop
 */
	
	/**
	 * [tJava_59 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_59";

	

 



/**
 * [tJava_59 process_data_begin ] stop
 */
	
	/**
	 * [tJava_59 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_59";

	

 



/**
 * [tJava_59 process_data_end ] stop
 */
	
	/**
	 * [tJava_59 end ] start
	 */

	

	
	
	currentComponent="tJava_59";

	

 

ok_Hash.put("tJava_59", true);
end_Hash.put("tJava_59", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk155", 0, "ok");
				}
				tS3Delete_15Process(globalMap);



/**
 * [tJava_59 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_59 finally ] start
	 */

	

	
	
	currentComponent="tJava_59";

	

 



/**
 * [tJava_59 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_59_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_15", false);
		start_Hash.put("tS3Delete_15", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_15";

	
		int tos_count_tS3Delete_15 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_15 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_15 = context.nd_s3_data_lake_path_sfdc +"/noodlecrm__application/latest/university_id="+context.university_code+"/noodlecrm__application__c.csv.gz";
		if(key_tS3Delete_15!=null && key_tS3Delete_15.trim().length()>0){
			
			conn_tS3Delete_15.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_15);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_15){
		
			System.err.println(e_tS3Delete_15.getMessage());
		
	}
	
 



/**
 * [tS3Delete_15 begin ] stop
 */
	
	/**
	 * [tS3Delete_15 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_15";

	

 


	tos_count_tS3Delete_15++;

/**
 * [tS3Delete_15 main ] stop
 */
	
	/**
	 * [tS3Delete_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_15";

	

 



/**
 * [tS3Delete_15 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_15";

	

 



/**
 * [tS3Delete_15 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_15 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_15";

	

 

ok_Hash.put("tS3Delete_15", true);
end_Hash.put("tS3Delete_15", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk156", 0, "ok");
				}
				tJava_60Process(globalMap);



/**
 * [tS3Delete_15 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_15 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_15";

	

 



/**
 * [tS3Delete_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_15_SUBPROCESS_STATE", 1);
	}
	

public void tJava_60Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_60_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_60 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_60", false);
		start_Hash.put("tJava_60", System.currentTimeMillis());
		
	
	currentComponent="tJava_60";

	
		int tos_count_tJava_60 = 0;
		


System.out.println("Step 2: Deleted Previous Run File From Latest Folder");
System.out.println("Step 3: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_60 begin ] stop
 */
	
	/**
	 * [tJava_60 main ] start
	 */

	

	
	
	currentComponent="tJava_60";

	

 


	tos_count_tJava_60++;

/**
 * [tJava_60 main ] stop
 */
	
	/**
	 * [tJava_60 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_60";

	

 



/**
 * [tJava_60 process_data_begin ] stop
 */
	
	/**
	 * [tJava_60 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_60";

	

 



/**
 * [tJava_60 process_data_end ] stop
 */
	
	/**
	 * [tJava_60 end ] start
	 */

	

	
	
	currentComponent="tJava_60";

	

 

ok_Hash.put("tJava_60", true);
end_Hash.put("tJava_60", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk148", 0, "ok");
				}
				tDBInput_10Process(globalMap);



/**
 * [tJava_60 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_60 finally ] start
	 */

	

	
	
	currentComponent="tJava_60";

	

 



/**
 * [tJava_60 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_60_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout19Struct implements routines.system.IPersistableRow<copyOfout19Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String noodlecrm__unicrm_person_id__c;

				public String getNoodlecrm__unicrm_person_id__c () {
					return this.noodlecrm__unicrm_person_id__c;
				}
				
			    public String noodlecrm__years_experience__c;

				public String getNoodlecrm__years_experience__c () {
					return this.noodlecrm__years_experience__c;
				}
				
			    public String noodlecrm__state__c;

				public String getNoodlecrm__state__c () {
					return this.noodlecrm__state__c;
				}
				
			    public java.util.Date noodlecrm__last_updated_date_time__c;

				public java.util.Date getNoodlecrm__last_updated_date_time__c () {
					return this.noodlecrm__last_updated_date_time__c;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__phone__c;

				public String getNoodlecrm__phone__c () {
					return this.noodlecrm__phone__c;
				}
				
			    public java.util.Date noodlecrm__dw_updated_date_time__c;

				public java.util.Date getNoodlecrm__dw_updated_date_time__c () {
					return this.noodlecrm__dw_updated_date_time__c;
				}
				
			    public String noodlecrm__city__c;

				public String getNoodlecrm__city__c () {
					return this.noodlecrm__city__c;
				}
				
			    public String noodlecrm__zip_code__c;

				public String getNoodlecrm__zip_code__c () {
					return this.noodlecrm__zip_code__c;
				}
				
			    public String noodlecrm__start_term__c;

				public String getNoodlecrm__start_term__c () {
					return this.noodlecrm__start_term__c;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String noodlecrm__dw_id__c;

				public String getNoodlecrm__dw_id__c () {
					return this.noodlecrm__dw_id__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String noodlecrm__program__c;

				public String getNoodlecrm__program__c () {
					return this.noodlecrm__program__c;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public java.util.Date noodlecrm__app_start_date_time__c;

				public java.util.Date getNoodlecrm__app_start_date_time__c () {
					return this.noodlecrm__app_start_date_time__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String noodlecrm__street__c;

				public String getNoodlecrm__street__c () {
					return this.noodlecrm__street__c;
				}
				
			    public String noodlecrm__contact__c;

				public String getNoodlecrm__contact__c () {
					return this.noodlecrm__contact__c;
				}
				
			    public java.util.Date noodlecrm__app_deposit_date_time__c;

				public java.util.Date getNoodlecrm__app_deposit_date_time__c () {
					return this.noodlecrm__app_deposit_date_time__c;
				}
				
			    public String noodlecrm__email__c;

				public String getNoodlecrm__email__c () {
					return this.noodlecrm__email__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String noodlecrm__unicrm_application_id__c;

				public String getNoodlecrm__unicrm_application_id__c () {
					return this.noodlecrm__unicrm_application_id__c;
				}
				
			    public String noodlecrm__level_of_education__c;

				public String getNoodlecrm__level_of_education__c () {
					return this.noodlecrm__level_of_education__c;
				}
				
			    public java.util.Date noodlecrm__dw_created_date_time__c;

				public java.util.Date getNoodlecrm__dw_created_date_time__c () {
					return this.noodlecrm__dw_created_date_time__c;
				}
				
			    public java.util.Date noodlecrm__app_admitted_date_time__c;

				public java.util.Date getNoodlecrm__app_admitted_date_time__c () {
					return this.noodlecrm__app_admitted_date_time__c;
				}
				
			    public String noodlecrm__first_name__c;

				public String getNoodlecrm__first_name__c () {
					return this.noodlecrm__first_name__c;
				}
				
			    public String noodlecrm__country__c;

				public String getNoodlecrm__country__c () {
					return this.noodlecrm__country__c;
				}
				
			    public String noodlecrm__last_name__c;

				public String getNoodlecrm__last_name__c () {
					return this.noodlecrm__last_name__c;
				}
				
			    public java.util.Date noodlecrm__app_complete_date_time__c;

				public java.util.Date getNoodlecrm__app_complete_date_time__c () {
					return this.noodlecrm__app_complete_date_time__c;
				}
				
			    public String noodlecrm__opportunity__c;

				public String getNoodlecrm__opportunity__c () {
					return this.noodlecrm__opportunity__c;
				}
				
			    public java.util.Date noodlecrm__app_submit_date_time__c;

				public java.util.Date getNoodlecrm__app_submit_date_time__c () {
					return this.noodlecrm__app_submit_date_time__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfout19Struct other = (copyOfout19Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfout19Struct other) {

		other.noodlecrm__unicrm_person_id__c = this.noodlecrm__unicrm_person_id__c;
	            other.noodlecrm__years_experience__c = this.noodlecrm__years_experience__c;
	            other.noodlecrm__state__c = this.noodlecrm__state__c;
	            other.noodlecrm__last_updated_date_time__c = this.noodlecrm__last_updated_date_time__c;
	            other.noodlecrm__external_id__c = this.noodlecrm__external_id__c;
	            other.noodlecrm__phone__c = this.noodlecrm__phone__c;
	            other.noodlecrm__dw_updated_date_time__c = this.noodlecrm__dw_updated_date_time__c;
	            other.noodlecrm__city__c = this.noodlecrm__city__c;
	            other.noodlecrm__zip_code__c = this.noodlecrm__zip_code__c;
	            other.noodlecrm__start_term__c = this.noodlecrm__start_term__c;
	            other.name = this.name;
	            other.noodlecrm__dw_id__c = this.noodlecrm__dw_id__c;
	            other.lastmodifieddate = this.lastmodifieddate;
	            other.noodlecrm__program__c = this.noodlecrm__program__c;
	            other.ownerid = this.ownerid;
	            other.noodlecrm__app_start_date_time__c = this.noodlecrm__app_start_date_time__c;
	            other.isdeleted = this.isdeleted;
	            other.systemmodstamp = this.systemmodstamp;
	            other.noodlecrm__street__c = this.noodlecrm__street__c;
	            other.noodlecrm__contact__c = this.noodlecrm__contact__c;
	            other.noodlecrm__app_deposit_date_time__c = this.noodlecrm__app_deposit_date_time__c;
	            other.noodlecrm__email__c = this.noodlecrm__email__c;
	            other.createddate = this.createddate;
	            other.noodlecrm__unicrm_application_id__c = this.noodlecrm__unicrm_application_id__c;
	            other.noodlecrm__level_of_education__c = this.noodlecrm__level_of_education__c;
	            other.noodlecrm__dw_created_date_time__c = this.noodlecrm__dw_created_date_time__c;
	            other.noodlecrm__app_admitted_date_time__c = this.noodlecrm__app_admitted_date_time__c;
	            other.noodlecrm__first_name__c = this.noodlecrm__first_name__c;
	            other.noodlecrm__country__c = this.noodlecrm__country__c;
	            other.noodlecrm__last_name__c = this.noodlecrm__last_name__c;
	            other.noodlecrm__app_complete_date_time__c = this.noodlecrm__app_complete_date_time__c;
	            other.noodlecrm__opportunity__c = this.noodlecrm__opportunity__c;
	            other.noodlecrm__app_submit_date_time__c = this.noodlecrm__app_submit_date_time__c;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            
	}

	public void copyKeysDataTo(copyOfout19Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.noodlecrm__unicrm_person_id__c = readString(dis);
					
					this.noodlecrm__years_experience__c = readString(dis);
					
					this.noodlecrm__state__c = readString(dis);
					
					this.noodlecrm__last_updated_date_time__c = readDate(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__phone__c = readString(dis);
					
					this.noodlecrm__dw_updated_date_time__c = readDate(dis);
					
					this.noodlecrm__city__c = readString(dis);
					
					this.noodlecrm__zip_code__c = readString(dis);
					
					this.noodlecrm__start_term__c = readString(dis);
					
					this.name = readString(dis);
					
					this.noodlecrm__dw_id__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__program__c = readString(dis);
					
					this.ownerid = readString(dis);
					
					this.noodlecrm__app_start_date_time__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.noodlecrm__street__c = readString(dis);
					
					this.noodlecrm__contact__c = readString(dis);
					
					this.noodlecrm__app_deposit_date_time__c = readDate(dis);
					
					this.noodlecrm__email__c = readString(dis);
					
					this.createddate = readDate(dis);
					
					this.noodlecrm__unicrm_application_id__c = readString(dis);
					
					this.noodlecrm__level_of_education__c = readString(dis);
					
					this.noodlecrm__dw_created_date_time__c = readDate(dis);
					
					this.noodlecrm__app_admitted_date_time__c = readDate(dis);
					
					this.noodlecrm__first_name__c = readString(dis);
					
					this.noodlecrm__country__c = readString(dis);
					
					this.noodlecrm__last_name__c = readString(dis);
					
					this.noodlecrm__app_complete_date_time__c = readDate(dis);
					
					this.noodlecrm__opportunity__c = readString(dis);
					
					this.noodlecrm__app_submit_date_time__c = readDate(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.noodlecrm__unicrm_person_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__years_experience__c,dos);
					
					// String
				
						writeString(this.noodlecrm__state__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_updated_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__phone__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__dw_updated_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__city__c,dos);
					
					// String
				
						writeString(this.noodlecrm__zip_code__c,dos);
					
					// String
				
						writeString(this.noodlecrm__start_term__c,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.noodlecrm__dw_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.noodlecrm__program__c,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_start_date_time__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.noodlecrm__street__c,dos);
					
					// String
				
						writeString(this.noodlecrm__contact__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_deposit_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__email__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.noodlecrm__unicrm_application_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__level_of_education__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__dw_created_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_admitted_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__first_name__c,dos);
					
					// String
				
						writeString(this.noodlecrm__country__c,dos);
					
					// String
				
						writeString(this.noodlecrm__last_name__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_complete_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__opportunity__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_submit_date_time__c,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("noodlecrm__unicrm_person_id__c="+noodlecrm__unicrm_person_id__c);
		sb.append(",noodlecrm__years_experience__c="+noodlecrm__years_experience__c);
		sb.append(",noodlecrm__state__c="+noodlecrm__state__c);
		sb.append(",noodlecrm__last_updated_date_time__c="+String.valueOf(noodlecrm__last_updated_date_time__c));
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",noodlecrm__phone__c="+noodlecrm__phone__c);
		sb.append(",noodlecrm__dw_updated_date_time__c="+String.valueOf(noodlecrm__dw_updated_date_time__c));
		sb.append(",noodlecrm__city__c="+noodlecrm__city__c);
		sb.append(",noodlecrm__zip_code__c="+noodlecrm__zip_code__c);
		sb.append(",noodlecrm__start_term__c="+noodlecrm__start_term__c);
		sb.append(",name="+name);
		sb.append(",noodlecrm__dw_id__c="+noodlecrm__dw_id__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__program__c="+noodlecrm__program__c);
		sb.append(",ownerid="+ownerid);
		sb.append(",noodlecrm__app_start_date_time__c="+String.valueOf(noodlecrm__app_start_date_time__c));
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__street__c="+noodlecrm__street__c);
		sb.append(",noodlecrm__contact__c="+noodlecrm__contact__c);
		sb.append(",noodlecrm__app_deposit_date_time__c="+String.valueOf(noodlecrm__app_deposit_date_time__c));
		sb.append(",noodlecrm__email__c="+noodlecrm__email__c);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",noodlecrm__unicrm_application_id__c="+noodlecrm__unicrm_application_id__c);
		sb.append(",noodlecrm__level_of_education__c="+noodlecrm__level_of_education__c);
		sb.append(",noodlecrm__dw_created_date_time__c="+String.valueOf(noodlecrm__dw_created_date_time__c));
		sb.append(",noodlecrm__app_admitted_date_time__c="+String.valueOf(noodlecrm__app_admitted_date_time__c));
		sb.append(",noodlecrm__first_name__c="+noodlecrm__first_name__c);
		sb.append(",noodlecrm__country__c="+noodlecrm__country__c);
		sb.append(",noodlecrm__last_name__c="+noodlecrm__last_name__c);
		sb.append(",noodlecrm__app_complete_date_time__c="+String.valueOf(noodlecrm__app_complete_date_time__c));
		sb.append(",noodlecrm__opportunity__c="+noodlecrm__opportunity__c);
		sb.append(",noodlecrm__app_submit_date_time__c="+String.valueOf(noodlecrm__app_submit_date_time__c));
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout20Struct implements routines.system.IPersistableRow<copyOfout20Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String noodlecrm__unicrm_person_id__c;

				public String getNoodlecrm__unicrm_person_id__c () {
					return this.noodlecrm__unicrm_person_id__c;
				}
				
			    public String noodlecrm__years_experience__c;

				public String getNoodlecrm__years_experience__c () {
					return this.noodlecrm__years_experience__c;
				}
				
			    public String noodlecrm__state__c;

				public String getNoodlecrm__state__c () {
					return this.noodlecrm__state__c;
				}
				
			    public java.util.Date noodlecrm__last_updated_date_time__c;

				public java.util.Date getNoodlecrm__last_updated_date_time__c () {
					return this.noodlecrm__last_updated_date_time__c;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__phone__c;

				public String getNoodlecrm__phone__c () {
					return this.noodlecrm__phone__c;
				}
				
			    public java.util.Date noodlecrm__dw_updated_date_time__c;

				public java.util.Date getNoodlecrm__dw_updated_date_time__c () {
					return this.noodlecrm__dw_updated_date_time__c;
				}
				
			    public String noodlecrm__city__c;

				public String getNoodlecrm__city__c () {
					return this.noodlecrm__city__c;
				}
				
			    public String noodlecrm__zip_code__c;

				public String getNoodlecrm__zip_code__c () {
					return this.noodlecrm__zip_code__c;
				}
				
			    public String noodlecrm__start_term__c;

				public String getNoodlecrm__start_term__c () {
					return this.noodlecrm__start_term__c;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String noodlecrm__dw_id__c;

				public String getNoodlecrm__dw_id__c () {
					return this.noodlecrm__dw_id__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String noodlecrm__program__c;

				public String getNoodlecrm__program__c () {
					return this.noodlecrm__program__c;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public java.util.Date noodlecrm__app_start_date_time__c;

				public java.util.Date getNoodlecrm__app_start_date_time__c () {
					return this.noodlecrm__app_start_date_time__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String noodlecrm__street__c;

				public String getNoodlecrm__street__c () {
					return this.noodlecrm__street__c;
				}
				
			    public String noodlecrm__contact__c;

				public String getNoodlecrm__contact__c () {
					return this.noodlecrm__contact__c;
				}
				
			    public java.util.Date noodlecrm__app_deposit_date_time__c;

				public java.util.Date getNoodlecrm__app_deposit_date_time__c () {
					return this.noodlecrm__app_deposit_date_time__c;
				}
				
			    public String noodlecrm__email__c;

				public String getNoodlecrm__email__c () {
					return this.noodlecrm__email__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String noodlecrm__unicrm_application_id__c;

				public String getNoodlecrm__unicrm_application_id__c () {
					return this.noodlecrm__unicrm_application_id__c;
				}
				
			    public String noodlecrm__level_of_education__c;

				public String getNoodlecrm__level_of_education__c () {
					return this.noodlecrm__level_of_education__c;
				}
				
			    public java.util.Date noodlecrm__dw_created_date_time__c;

				public java.util.Date getNoodlecrm__dw_created_date_time__c () {
					return this.noodlecrm__dw_created_date_time__c;
				}
				
			    public java.util.Date noodlecrm__app_admitted_date_time__c;

				public java.util.Date getNoodlecrm__app_admitted_date_time__c () {
					return this.noodlecrm__app_admitted_date_time__c;
				}
				
			    public String noodlecrm__first_name__c;

				public String getNoodlecrm__first_name__c () {
					return this.noodlecrm__first_name__c;
				}
				
			    public String noodlecrm__country__c;

				public String getNoodlecrm__country__c () {
					return this.noodlecrm__country__c;
				}
				
			    public String noodlecrm__last_name__c;

				public String getNoodlecrm__last_name__c () {
					return this.noodlecrm__last_name__c;
				}
				
			    public java.util.Date noodlecrm__app_complete_date_time__c;

				public java.util.Date getNoodlecrm__app_complete_date_time__c () {
					return this.noodlecrm__app_complete_date_time__c;
				}
				
			    public String noodlecrm__opportunity__c;

				public String getNoodlecrm__opportunity__c () {
					return this.noodlecrm__opportunity__c;
				}
				
			    public java.util.Date noodlecrm__app_submit_date_time__c;

				public java.util.Date getNoodlecrm__app_submit_date_time__c () {
					return this.noodlecrm__app_submit_date_time__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfout20Struct other = (copyOfout20Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfout20Struct other) {

		other.noodlecrm__unicrm_person_id__c = this.noodlecrm__unicrm_person_id__c;
	            other.noodlecrm__years_experience__c = this.noodlecrm__years_experience__c;
	            other.noodlecrm__state__c = this.noodlecrm__state__c;
	            other.noodlecrm__last_updated_date_time__c = this.noodlecrm__last_updated_date_time__c;
	            other.noodlecrm__external_id__c = this.noodlecrm__external_id__c;
	            other.noodlecrm__phone__c = this.noodlecrm__phone__c;
	            other.noodlecrm__dw_updated_date_time__c = this.noodlecrm__dw_updated_date_time__c;
	            other.noodlecrm__city__c = this.noodlecrm__city__c;
	            other.noodlecrm__zip_code__c = this.noodlecrm__zip_code__c;
	            other.noodlecrm__start_term__c = this.noodlecrm__start_term__c;
	            other.name = this.name;
	            other.noodlecrm__dw_id__c = this.noodlecrm__dw_id__c;
	            other.lastmodifieddate = this.lastmodifieddate;
	            other.noodlecrm__program__c = this.noodlecrm__program__c;
	            other.ownerid = this.ownerid;
	            other.noodlecrm__app_start_date_time__c = this.noodlecrm__app_start_date_time__c;
	            other.isdeleted = this.isdeleted;
	            other.systemmodstamp = this.systemmodstamp;
	            other.noodlecrm__street__c = this.noodlecrm__street__c;
	            other.noodlecrm__contact__c = this.noodlecrm__contact__c;
	            other.noodlecrm__app_deposit_date_time__c = this.noodlecrm__app_deposit_date_time__c;
	            other.noodlecrm__email__c = this.noodlecrm__email__c;
	            other.createddate = this.createddate;
	            other.noodlecrm__unicrm_application_id__c = this.noodlecrm__unicrm_application_id__c;
	            other.noodlecrm__level_of_education__c = this.noodlecrm__level_of_education__c;
	            other.noodlecrm__dw_created_date_time__c = this.noodlecrm__dw_created_date_time__c;
	            other.noodlecrm__app_admitted_date_time__c = this.noodlecrm__app_admitted_date_time__c;
	            other.noodlecrm__first_name__c = this.noodlecrm__first_name__c;
	            other.noodlecrm__country__c = this.noodlecrm__country__c;
	            other.noodlecrm__last_name__c = this.noodlecrm__last_name__c;
	            other.noodlecrm__app_complete_date_time__c = this.noodlecrm__app_complete_date_time__c;
	            other.noodlecrm__opportunity__c = this.noodlecrm__opportunity__c;
	            other.noodlecrm__app_submit_date_time__c = this.noodlecrm__app_submit_date_time__c;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            
	}

	public void copyKeysDataTo(copyOfout20Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.noodlecrm__unicrm_person_id__c = readString(dis);
					
					this.noodlecrm__years_experience__c = readString(dis);
					
					this.noodlecrm__state__c = readString(dis);
					
					this.noodlecrm__last_updated_date_time__c = readDate(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__phone__c = readString(dis);
					
					this.noodlecrm__dw_updated_date_time__c = readDate(dis);
					
					this.noodlecrm__city__c = readString(dis);
					
					this.noodlecrm__zip_code__c = readString(dis);
					
					this.noodlecrm__start_term__c = readString(dis);
					
					this.name = readString(dis);
					
					this.noodlecrm__dw_id__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__program__c = readString(dis);
					
					this.ownerid = readString(dis);
					
					this.noodlecrm__app_start_date_time__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.noodlecrm__street__c = readString(dis);
					
					this.noodlecrm__contact__c = readString(dis);
					
					this.noodlecrm__app_deposit_date_time__c = readDate(dis);
					
					this.noodlecrm__email__c = readString(dis);
					
					this.createddate = readDate(dis);
					
					this.noodlecrm__unicrm_application_id__c = readString(dis);
					
					this.noodlecrm__level_of_education__c = readString(dis);
					
					this.noodlecrm__dw_created_date_time__c = readDate(dis);
					
					this.noodlecrm__app_admitted_date_time__c = readDate(dis);
					
					this.noodlecrm__first_name__c = readString(dis);
					
					this.noodlecrm__country__c = readString(dis);
					
					this.noodlecrm__last_name__c = readString(dis);
					
					this.noodlecrm__app_complete_date_time__c = readDate(dis);
					
					this.noodlecrm__opportunity__c = readString(dis);
					
					this.noodlecrm__app_submit_date_time__c = readDate(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.noodlecrm__unicrm_person_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__years_experience__c,dos);
					
					// String
				
						writeString(this.noodlecrm__state__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_updated_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__phone__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__dw_updated_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__city__c,dos);
					
					// String
				
						writeString(this.noodlecrm__zip_code__c,dos);
					
					// String
				
						writeString(this.noodlecrm__start_term__c,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.noodlecrm__dw_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.noodlecrm__program__c,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_start_date_time__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.noodlecrm__street__c,dos);
					
					// String
				
						writeString(this.noodlecrm__contact__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_deposit_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__email__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.noodlecrm__unicrm_application_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__level_of_education__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__dw_created_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_admitted_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__first_name__c,dos);
					
					// String
				
						writeString(this.noodlecrm__country__c,dos);
					
					// String
				
						writeString(this.noodlecrm__last_name__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_complete_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__opportunity__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_submit_date_time__c,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("noodlecrm__unicrm_person_id__c="+noodlecrm__unicrm_person_id__c);
		sb.append(",noodlecrm__years_experience__c="+noodlecrm__years_experience__c);
		sb.append(",noodlecrm__state__c="+noodlecrm__state__c);
		sb.append(",noodlecrm__last_updated_date_time__c="+String.valueOf(noodlecrm__last_updated_date_time__c));
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",noodlecrm__phone__c="+noodlecrm__phone__c);
		sb.append(",noodlecrm__dw_updated_date_time__c="+String.valueOf(noodlecrm__dw_updated_date_time__c));
		sb.append(",noodlecrm__city__c="+noodlecrm__city__c);
		sb.append(",noodlecrm__zip_code__c="+noodlecrm__zip_code__c);
		sb.append(",noodlecrm__start_term__c="+noodlecrm__start_term__c);
		sb.append(",name="+name);
		sb.append(",noodlecrm__dw_id__c="+noodlecrm__dw_id__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__program__c="+noodlecrm__program__c);
		sb.append(",ownerid="+ownerid);
		sb.append(",noodlecrm__app_start_date_time__c="+String.valueOf(noodlecrm__app_start_date_time__c));
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__street__c="+noodlecrm__street__c);
		sb.append(",noodlecrm__contact__c="+noodlecrm__contact__c);
		sb.append(",noodlecrm__app_deposit_date_time__c="+String.valueOf(noodlecrm__app_deposit_date_time__c));
		sb.append(",noodlecrm__email__c="+noodlecrm__email__c);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",noodlecrm__unicrm_application_id__c="+noodlecrm__unicrm_application_id__c);
		sb.append(",noodlecrm__level_of_education__c="+noodlecrm__level_of_education__c);
		sb.append(",noodlecrm__dw_created_date_time__c="+String.valueOf(noodlecrm__dw_created_date_time__c));
		sb.append(",noodlecrm__app_admitted_date_time__c="+String.valueOf(noodlecrm__app_admitted_date_time__c));
		sb.append(",noodlecrm__first_name__c="+noodlecrm__first_name__c);
		sb.append(",noodlecrm__country__c="+noodlecrm__country__c);
		sb.append(",noodlecrm__last_name__c="+noodlecrm__last_name__c);
		sb.append(",noodlecrm__app_complete_date_time__c="+String.valueOf(noodlecrm__app_complete_date_time__c));
		sb.append(",noodlecrm__opportunity__c="+noodlecrm__opportunity__c);
		sb.append(",noodlecrm__app_submit_date_time__c="+String.valueOf(noodlecrm__app_submit_date_time__c));
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout20Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public String noodlecrm__unicrm_person_id__c;

				public String getNoodlecrm__unicrm_person_id__c () {
					return this.noodlecrm__unicrm_person_id__c;
				}
				
			    public String noodlecrm__years_experience__c;

				public String getNoodlecrm__years_experience__c () {
					return this.noodlecrm__years_experience__c;
				}
				
			    public String noodlecrm__state__c;

				public String getNoodlecrm__state__c () {
					return this.noodlecrm__state__c;
				}
				
			    public java.util.Date noodlecrm__last_updated_date_time__c;

				public java.util.Date getNoodlecrm__last_updated_date_time__c () {
					return this.noodlecrm__last_updated_date_time__c;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public String noodlecrm__phone__c;

				public String getNoodlecrm__phone__c () {
					return this.noodlecrm__phone__c;
				}
				
			    public java.util.Date noodlecrm__dw_updated_date_time__c;

				public java.util.Date getNoodlecrm__dw_updated_date_time__c () {
					return this.noodlecrm__dw_updated_date_time__c;
				}
				
			    public String noodlecrm__city__c;

				public String getNoodlecrm__city__c () {
					return this.noodlecrm__city__c;
				}
				
			    public String noodlecrm__zip_code__c;

				public String getNoodlecrm__zip_code__c () {
					return this.noodlecrm__zip_code__c;
				}
				
			    public String noodlecrm__start_term__c;

				public String getNoodlecrm__start_term__c () {
					return this.noodlecrm__start_term__c;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String noodlecrm__dw_id__c;

				public String getNoodlecrm__dw_id__c () {
					return this.noodlecrm__dw_id__c;
				}
				
			    public java.util.Date lastmodifieddate;

				public java.util.Date getLastmodifieddate () {
					return this.lastmodifieddate;
				}
				
			    public String noodlecrm__program__c;

				public String getNoodlecrm__program__c () {
					return this.noodlecrm__program__c;
				}
				
			    public String ownerid;

				public String getOwnerid () {
					return this.ownerid;
				}
				
			    public java.util.Date noodlecrm__app_start_date_time__c;

				public java.util.Date getNoodlecrm__app_start_date_time__c () {
					return this.noodlecrm__app_start_date_time__c;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String noodlecrm__street__c;

				public String getNoodlecrm__street__c () {
					return this.noodlecrm__street__c;
				}
				
			    public String noodlecrm__contact__c;

				public String getNoodlecrm__contact__c () {
					return this.noodlecrm__contact__c;
				}
				
			    public java.util.Date noodlecrm__app_deposit_date_time__c;

				public java.util.Date getNoodlecrm__app_deposit_date_time__c () {
					return this.noodlecrm__app_deposit_date_time__c;
				}
				
			    public String noodlecrm__email__c;

				public String getNoodlecrm__email__c () {
					return this.noodlecrm__email__c;
				}
				
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public String noodlecrm__unicrm_application_id__c;

				public String getNoodlecrm__unicrm_application_id__c () {
					return this.noodlecrm__unicrm_application_id__c;
				}
				
			    public String noodlecrm__level_of_education__c;

				public String getNoodlecrm__level_of_education__c () {
					return this.noodlecrm__level_of_education__c;
				}
				
			    public java.util.Date noodlecrm__dw_created_date_time__c;

				public java.util.Date getNoodlecrm__dw_created_date_time__c () {
					return this.noodlecrm__dw_created_date_time__c;
				}
				
			    public java.util.Date noodlecrm__app_admitted_date_time__c;

				public java.util.Date getNoodlecrm__app_admitted_date_time__c () {
					return this.noodlecrm__app_admitted_date_time__c;
				}
				
			    public String noodlecrm__first_name__c;

				public String getNoodlecrm__first_name__c () {
					return this.noodlecrm__first_name__c;
				}
				
			    public String noodlecrm__country__c;

				public String getNoodlecrm__country__c () {
					return this.noodlecrm__country__c;
				}
				
			    public String noodlecrm__last_name__c;

				public String getNoodlecrm__last_name__c () {
					return this.noodlecrm__last_name__c;
				}
				
			    public java.util.Date noodlecrm__app_complete_date_time__c;

				public java.util.Date getNoodlecrm__app_complete_date_time__c () {
					return this.noodlecrm__app_complete_date_time__c;
				}
				
			    public String noodlecrm__opportunity__c;

				public String getNoodlecrm__opportunity__c () {
					return this.noodlecrm__opportunity__c;
				}
				
			    public java.util.Date noodlecrm__app_submit_date_time__c;

				public java.util.Date getNoodlecrm__app_submit_date_time__c () {
					return this.noodlecrm__app_submit_date_time__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.noodlecrm__unicrm_person_id__c = readString(dis);
					
					this.noodlecrm__years_experience__c = readString(dis);
					
					this.noodlecrm__state__c = readString(dis);
					
					this.noodlecrm__last_updated_date_time__c = readDate(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.noodlecrm__phone__c = readString(dis);
					
					this.noodlecrm__dw_updated_date_time__c = readDate(dis);
					
					this.noodlecrm__city__c = readString(dis);
					
					this.noodlecrm__zip_code__c = readString(dis);
					
					this.noodlecrm__start_term__c = readString(dis);
					
					this.name = readString(dis);
					
					this.noodlecrm__dw_id__c = readString(dis);
					
					this.lastmodifieddate = readDate(dis);
					
					this.noodlecrm__program__c = readString(dis);
					
					this.ownerid = readString(dis);
					
					this.noodlecrm__app_start_date_time__c = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.systemmodstamp = readDate(dis);
					
					this.noodlecrm__street__c = readString(dis);
					
					this.noodlecrm__contact__c = readString(dis);
					
					this.noodlecrm__app_deposit_date_time__c = readDate(dis);
					
					this.noodlecrm__email__c = readString(dis);
					
					this.createddate = readDate(dis);
					
					this.noodlecrm__unicrm_application_id__c = readString(dis);
					
					this.noodlecrm__level_of_education__c = readString(dis);
					
					this.noodlecrm__dw_created_date_time__c = readDate(dis);
					
					this.noodlecrm__app_admitted_date_time__c = readDate(dis);
					
					this.noodlecrm__first_name__c = readString(dis);
					
					this.noodlecrm__country__c = readString(dis);
					
					this.noodlecrm__last_name__c = readString(dis);
					
					this.noodlecrm__app_complete_date_time__c = readDate(dis);
					
					this.noodlecrm__opportunity__c = readString(dis);
					
					this.noodlecrm__app_submit_date_time__c = readDate(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.noodlecrm__unicrm_person_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__years_experience__c,dos);
					
					// String
				
						writeString(this.noodlecrm__state__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__last_updated_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__phone__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__dw_updated_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__city__c,dos);
					
					// String
				
						writeString(this.noodlecrm__zip_code__c,dos);
					
					// String
				
						writeString(this.noodlecrm__start_term__c,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.noodlecrm__dw_id__c,dos);
					
					// java.util.Date
				
						writeDate(this.lastmodifieddate,dos);
					
					// String
				
						writeString(this.noodlecrm__program__c,dos);
					
					// String
				
						writeString(this.ownerid,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_start_date_time__c,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.noodlecrm__street__c,dos);
					
					// String
				
						writeString(this.noodlecrm__contact__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_deposit_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__email__c,dos);
					
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// String
				
						writeString(this.noodlecrm__unicrm_application_id__c,dos);
					
					// String
				
						writeString(this.noodlecrm__level_of_education__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__dw_created_date_time__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_admitted_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__first_name__c,dos);
					
					// String
				
						writeString(this.noodlecrm__country__c,dos);
					
					// String
				
						writeString(this.noodlecrm__last_name__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_complete_date_time__c,dos);
					
					// String
				
						writeString(this.noodlecrm__opportunity__c,dos);
					
					// java.util.Date
				
						writeDate(this.noodlecrm__app_submit_date_time__c,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("noodlecrm__unicrm_person_id__c="+noodlecrm__unicrm_person_id__c);
		sb.append(",noodlecrm__years_experience__c="+noodlecrm__years_experience__c);
		sb.append(",noodlecrm__state__c="+noodlecrm__state__c);
		sb.append(",noodlecrm__last_updated_date_time__c="+String.valueOf(noodlecrm__last_updated_date_time__c));
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",noodlecrm__phone__c="+noodlecrm__phone__c);
		sb.append(",noodlecrm__dw_updated_date_time__c="+String.valueOf(noodlecrm__dw_updated_date_time__c));
		sb.append(",noodlecrm__city__c="+noodlecrm__city__c);
		sb.append(",noodlecrm__zip_code__c="+noodlecrm__zip_code__c);
		sb.append(",noodlecrm__start_term__c="+noodlecrm__start_term__c);
		sb.append(",name="+name);
		sb.append(",noodlecrm__dw_id__c="+noodlecrm__dw_id__c);
		sb.append(",lastmodifieddate="+String.valueOf(lastmodifieddate));
		sb.append(",noodlecrm__program__c="+noodlecrm__program__c);
		sb.append(",ownerid="+ownerid);
		sb.append(",noodlecrm__app_start_date_time__c="+String.valueOf(noodlecrm__app_start_date_time__c));
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__street__c="+noodlecrm__street__c);
		sb.append(",noodlecrm__contact__c="+noodlecrm__contact__c);
		sb.append(",noodlecrm__app_deposit_date_time__c="+String.valueOf(noodlecrm__app_deposit_date_time__c));
		sb.append(",noodlecrm__email__c="+noodlecrm__email__c);
		sb.append(",createddate="+String.valueOf(createddate));
		sb.append(",noodlecrm__unicrm_application_id__c="+noodlecrm__unicrm_application_id__c);
		sb.append(",noodlecrm__level_of_education__c="+noodlecrm__level_of_education__c);
		sb.append(",noodlecrm__dw_created_date_time__c="+String.valueOf(noodlecrm__dw_created_date_time__c));
		sb.append(",noodlecrm__app_admitted_date_time__c="+String.valueOf(noodlecrm__app_admitted_date_time__c));
		sb.append(",noodlecrm__first_name__c="+noodlecrm__first_name__c);
		sb.append(",noodlecrm__country__c="+noodlecrm__country__c);
		sb.append(",noodlecrm__last_name__c="+noodlecrm__last_name__c);
		sb.append(",noodlecrm__app_complete_date_time__c="+String.valueOf(noodlecrm__app_complete_date_time__c));
		sb.append(",noodlecrm__opportunity__c="+noodlecrm__opportunity__c);
		sb.append(",noodlecrm__app_submit_date_time__c="+String.valueOf(noodlecrm__app_submit_date_time__c));
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();
copyOfout19Struct copyOfout19 = new copyOfout19Struct();
copyOfout20Struct copyOfout20 = new copyOfout20Struct();





	
	/**
	 * [tFileOutputDelimited_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_14", false);
		start_Hash.put("tFileOutputDelimited_14", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout19");
					}
				
		int tos_count_tFileOutputDelimited_14 = 0;
		

String fileName_tFileOutputDelimited_14 = "";
    fileName_tFileOutputDelimited_14 = (new java.io.File(context.staging_S3_dir + "noodlecrm__application__c.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_14 = null;
    String extension_tFileOutputDelimited_14 = null;
    String directory_tFileOutputDelimited_14 = null;
    if((fileName_tFileOutputDelimited_14.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_14.lastIndexOf(".") < fileName_tFileOutputDelimited_14.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
            extension_tFileOutputDelimited_14 = "";
        } else {
            fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(0, fileName_tFileOutputDelimited_14.lastIndexOf("."));
            extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(fileName_tFileOutputDelimited_14.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(0, fileName_tFileOutputDelimited_14.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_14.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(0, fileName_tFileOutputDelimited_14.lastIndexOf("."));
            extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(fileName_tFileOutputDelimited_14.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
            extension_tFileOutputDelimited_14 = "";
        }
        directory_tFileOutputDelimited_14 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_14 = true;
    java.io.File filetFileOutputDelimited_14 = new java.io.File(fileName_tFileOutputDelimited_14);
    globalMap.put("tFileOutputDelimited_14_FILE_NAME",fileName_tFileOutputDelimited_14);
                String[] headColutFileOutputDelimited_14=new String[35];
            class CSVBasicSet_tFileOutputDelimited_14{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_14[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_14 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_14[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_14[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_14 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_14[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_14[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_14 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_14[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_14 = 0;
            int splitedFileNo_tFileOutputDelimited_14 =0;
            int currentRow_tFileOutputDelimited_14 = 0;


            CSVBasicSet_tFileOutputDelimited_14 csvSettings_tFileOutputDelimited_14 = new CSVBasicSet_tFileOutputDelimited_14();
            csvSettings_tFileOutputDelimited_14.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_14.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_14.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_14 != null && directory_tFileOutputDelimited_14.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_14 = new java.io.File(directory_tFileOutputDelimited_14);
                        if(!dir_tFileOutputDelimited_14.exists()) {
                            dir_tFileOutputDelimited_14.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_14 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_14 = new java.io.File(fileName_tFileOutputDelimited_14);
                            if(fileToDelete_tFileOutputDelimited_14.exists()) {
                                fileToDelete_tFileOutputDelimited_14.delete();
                            }
                            CsvWritertFileOutputDelimited_14 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_14, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_14.setSeparator(csvSettings_tFileOutputDelimited_14.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_14.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_14.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_14.setLineEnd(""+csvSettings_tFileOutputDelimited_14.getRowDelim());
                    }
                        if(filetFileOutputDelimited_14.length()==0){
                                    headColutFileOutputDelimited_14[0]="noodlecrm__unicrm_person_id__c";
                                    headColutFileOutputDelimited_14[1]="noodlecrm__years_experience__c";
                                    headColutFileOutputDelimited_14[2]="noodlecrm__state__c";
                                    headColutFileOutputDelimited_14[3]="noodlecrm__last_updated_date_time__c";
                                    headColutFileOutputDelimited_14[4]="noodlecrm__external_id__c";
                                    headColutFileOutputDelimited_14[5]="noodlecrm__phone__c";
                                    headColutFileOutputDelimited_14[6]="noodlecrm__dw_updated_date_time__c";
                                    headColutFileOutputDelimited_14[7]="noodlecrm__city__c";
                                    headColutFileOutputDelimited_14[8]="noodlecrm__zip_code__c";
                                    headColutFileOutputDelimited_14[9]="noodlecrm__start_term__c";
                                    headColutFileOutputDelimited_14[10]="name";
                                    headColutFileOutputDelimited_14[11]="noodlecrm__dw_id__c";
                                    headColutFileOutputDelimited_14[12]="lastmodifieddate";
                                    headColutFileOutputDelimited_14[13]="noodlecrm__program__c";
                                    headColutFileOutputDelimited_14[14]="ownerid";
                                    headColutFileOutputDelimited_14[15]="noodlecrm__app_start_date_time__c";
                                    headColutFileOutputDelimited_14[16]="isdeleted";
                                    headColutFileOutputDelimited_14[17]="systemmodstamp";
                                    headColutFileOutputDelimited_14[18]="noodlecrm__street__c";
                                    headColutFileOutputDelimited_14[19]="noodlecrm__contact__c";
                                    headColutFileOutputDelimited_14[20]="noodlecrm__app_deposit_date_time__c";
                                    headColutFileOutputDelimited_14[21]="noodlecrm__email__c";
                                    headColutFileOutputDelimited_14[22]="createddate";
                                    headColutFileOutputDelimited_14[23]="noodlecrm__unicrm_application_id__c";
                                    headColutFileOutputDelimited_14[24]="noodlecrm__level_of_education__c";
                                    headColutFileOutputDelimited_14[25]="noodlecrm__dw_created_date_time__c";
                                    headColutFileOutputDelimited_14[26]="noodlecrm__app_admitted_date_time__c";
                                    headColutFileOutputDelimited_14[27]="noodlecrm__first_name__c";
                                    headColutFileOutputDelimited_14[28]="noodlecrm__country__c";
                                    headColutFileOutputDelimited_14[29]="noodlecrm__last_name__c";
                                    headColutFileOutputDelimited_14[30]="noodlecrm__app_complete_date_time__c";
                                    headColutFileOutputDelimited_14[31]="noodlecrm__opportunity__c";
                                    headColutFileOutputDelimited_14[32]="noodlecrm__app_submit_date_time__c";
                                    headColutFileOutputDelimited_14[33]="sfid";
                                    headColutFileOutputDelimited_14[34]="id";
                            CsvWritertFileOutputDelimited_14.writeNext(headColutFileOutputDelimited_14);
                            CsvWritertFileOutputDelimited_14.flush();
                        }
                CsvWritertFileOutputDelimited_14.setEscapeChar(csvSettings_tFileOutputDelimited_14.getEscapeChar());
                CsvWritertFileOutputDelimited_14.setQuoteChar(csvSettings_tFileOutputDelimited_14.getTextEnclosure());
                CsvWritertFileOutputDelimited_14.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_14", CsvWritertFileOutputDelimited_14);
resourceMap.put("nb_line_tFileOutputDelimited_14", nb_line_tFileOutputDelimited_14);

 



/**
 * [tFileOutputDelimited_14 begin ] stop
 */




	
	/**
	 * [tDBOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_14", false);
		start_Hash.put("tDBOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout20");
					}
				
		int tos_count_tDBOutput_14 = 0;
		





String dbschema_tDBOutput_14 = null;
	dbschema_tDBOutput_14 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_14 = null;
if(dbschema_tDBOutput_14 == null || dbschema_tDBOutput_14.trim().length() == 0) {
	tableName_tDBOutput_14 = ("noodlecrm__application__c");
} else {
	tableName_tDBOutput_14 = dbschema_tDBOutput_14 + "\".\"" + ("noodlecrm__application__c");
}

int nb_line_tDBOutput_14 = 0;
int nb_line_update_tDBOutput_14 = 0;
int nb_line_inserted_tDBOutput_14 = 0;
int nb_line_deleted_tDBOutput_14 = 0;
int nb_line_rejected_tDBOutput_14 = 0;

int deletedCount_tDBOutput_14=0;
int updatedCount_tDBOutput_14=0;
int insertedCount_tDBOutput_14=0;
int rejectedCount_tDBOutput_14=0;

boolean whetherReject_tDBOutput_14 = false;

java.sql.Connection conn_tDBOutput_14 = null;
String dbUser_tDBOutput_14 = null;

	conn_tDBOutput_14 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_14 = 100000;
   int batchSizeCounter_tDBOutput_14=0;

int count_tDBOutput_14=0;
            try (java.sql.Statement stmtClear_tDBOutput_14 = conn_tDBOutput_14.createStatement()) {
                stmtClear_tDBOutput_14.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_14 + "\"");
            }
	    String insert_tDBOutput_14 = "INSERT INTO \"" + tableName_tDBOutput_14 + "\" (\"noodlecrm__unicrm_person_id__c\",\"noodlecrm__years_experience__c\",\"noodlecrm__state__c\",\"noodlecrm__last_updated_date_time__c\",\"noodlecrm__external_id__c\",\"noodlecrm__phone__c\",\"noodlecrm__dw_updated_date_time__c\",\"noodlecrm__city__c\",\"noodlecrm__zip_code__c\",\"noodlecrm__start_term__c\",\"name\",\"noodlecrm__dw_id__c\",\"lastmodifieddate\",\"noodlecrm__program__c\",\"ownerid\",\"noodlecrm__app_start_date_time__c\",\"isdeleted\",\"systemmodstamp\",\"noodlecrm__street__c\",\"noodlecrm__contact__c\",\"noodlecrm__app_deposit_date_time__c\",\"noodlecrm__email__c\",\"createddate\",\"noodlecrm__unicrm_application_id__c\",\"noodlecrm__level_of_education__c\",\"noodlecrm__dw_created_date_time__c\",\"noodlecrm__app_admitted_date_time__c\",\"noodlecrm__first_name__c\",\"noodlecrm__country__c\",\"noodlecrm__last_name__c\",\"noodlecrm__app_complete_date_time__c\",\"noodlecrm__opportunity__c\",\"noodlecrm__app_submit_date_time__c\",\"sfid\",\"id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_14 = conn_tDBOutput_14.prepareStatement(insert_tDBOutput_14);
	    resourceMap.put("pstmt_tDBOutput_14", pstmt_tDBOutput_14);
	    

 



/**
 * [tDBOutput_14 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout19Struct copyOfout19_tmp = new copyOfout19Struct();
copyOfout20Struct copyOfout20_tmp = new copyOfout20Struct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				conn_tDBInput_10 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "SELECT \n  noodlecrm__unicrm_person_id__c, \n  noodlecrm__years_experience__c, \n  noodlecrm__state__c, \n  noodlecrm__"
+"last_updated_date_time__c, \n  noodlecrm__external_id__c, \n  noodlecrm__phone__c, \n  noodlecrm__dw_updated_date_time__"
+"c, \n  noodlecrm__city__c, \n  noodlecrm__zip_code__c, \n  noodlecrm__start_term__c, \n  name, \n  noodlecrm__dw_id__c, "
+"\n  lastmodifieddate, \n  noodlecrm__program__c, \n  ownerid, \n  noodlecrm__app_start_date_time__c, \n  isdeleted, \n  "
+"systemmodstamp, \n  noodlecrm__street__c, \n  noodlecrm__contact__c, \n  noodlecrm__app_deposit_date_time__c, \n  noodle"
+"crm__email__c, \n  createddate, \n  noodlecrm__unicrm_application_id__c, \n  noodlecrm__level_of_education__c, \n  noodl"
+"ecrm__dw_created_date_time__c, \n  noodlecrm__app_admitted_date_time__c, \n  noodlecrm__first_name__c, \n  noodlecrm__co"
+"untry__c, \n  noodlecrm__last_name__c, \n  noodlecrm__app_complete_date_time__c, \n  noodlecrm__opportunity__c, \n  nood"
+"lecrm__app_submit_date_time__c, \n  sfid, \n  id \nFROM "+context.university_code+".noodlecrm__application__c ";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row14.noodlecrm__unicrm_person_id__c = null;
							} else {
	                         		
        	row14.noodlecrm__unicrm_person_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 1, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								row14.noodlecrm__years_experience__c = null;
							} else {
	                         		
        	row14.noodlecrm__years_experience__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 2, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								row14.noodlecrm__state__c = null;
							} else {
	                         		
        	row14.noodlecrm__state__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 3, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 4) {
								row14.noodlecrm__last_updated_date_time__c = null;
							} else {
										
			row14.noodlecrm__last_updated_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 4);
		                    }
							if(colQtyInRs_tDBInput_10 < 5) {
								row14.noodlecrm__external_id__c = null;
							} else {
	                         		
        	row14.noodlecrm__external_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 5, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 6) {
								row14.noodlecrm__phone__c = null;
							} else {
	                         		
        	row14.noodlecrm__phone__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 6, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 7) {
								row14.noodlecrm__dw_updated_date_time__c = null;
							} else {
										
			row14.noodlecrm__dw_updated_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 7);
		                    }
							if(colQtyInRs_tDBInput_10 < 8) {
								row14.noodlecrm__city__c = null;
							} else {
	                         		
        	row14.noodlecrm__city__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 8, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 9) {
								row14.noodlecrm__zip_code__c = null;
							} else {
	                         		
        	row14.noodlecrm__zip_code__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 9, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 10) {
								row14.noodlecrm__start_term__c = null;
							} else {
	                         		
        	row14.noodlecrm__start_term__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 10, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 11) {
								row14.name = null;
							} else {
	                         		
        	row14.name = routines.system.JDBCUtil.getString(rs_tDBInput_10, 11, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 12) {
								row14.noodlecrm__dw_id__c = null;
							} else {
	                         		
        	row14.noodlecrm__dw_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 12, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 13) {
								row14.lastmodifieddate = null;
							} else {
										
			row14.lastmodifieddate = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 13);
		                    }
							if(colQtyInRs_tDBInput_10 < 14) {
								row14.noodlecrm__program__c = null;
							} else {
	                         		
        	row14.noodlecrm__program__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 14, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 15) {
								row14.ownerid = null;
							} else {
	                         		
        	row14.ownerid = routines.system.JDBCUtil.getString(rs_tDBInput_10, 15, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 16) {
								row14.noodlecrm__app_start_date_time__c = null;
							} else {
										
			row14.noodlecrm__app_start_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 16);
		                    }
							if(colQtyInRs_tDBInput_10 < 17) {
								row14.isdeleted = null;
							} else {
	                         		
            row14.isdeleted = rs_tDBInput_10.getBoolean(17);
            if(rs_tDBInput_10.wasNull()){
                    row14.isdeleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 18) {
								row14.systemmodstamp = null;
							} else {
										
			row14.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 18);
		                    }
							if(colQtyInRs_tDBInput_10 < 19) {
								row14.noodlecrm__street__c = null;
							} else {
	                         		
        	row14.noodlecrm__street__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 19, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 20) {
								row14.noodlecrm__contact__c = null;
							} else {
	                         		
        	row14.noodlecrm__contact__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 20, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 21) {
								row14.noodlecrm__app_deposit_date_time__c = null;
							} else {
										
			row14.noodlecrm__app_deposit_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 21);
		                    }
							if(colQtyInRs_tDBInput_10 < 22) {
								row14.noodlecrm__email__c = null;
							} else {
	                         		
        	row14.noodlecrm__email__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 22, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 23) {
								row14.createddate = null;
							} else {
										
			row14.createddate = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 23);
		                    }
							if(colQtyInRs_tDBInput_10 < 24) {
								row14.noodlecrm__unicrm_application_id__c = null;
							} else {
	                         		
        	row14.noodlecrm__unicrm_application_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 24, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 25) {
								row14.noodlecrm__level_of_education__c = null;
							} else {
	                         		
        	row14.noodlecrm__level_of_education__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 25, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 26) {
								row14.noodlecrm__dw_created_date_time__c = null;
							} else {
										
			row14.noodlecrm__dw_created_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 26);
		                    }
							if(colQtyInRs_tDBInput_10 < 27) {
								row14.noodlecrm__app_admitted_date_time__c = null;
							} else {
										
			row14.noodlecrm__app_admitted_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 27);
		                    }
							if(colQtyInRs_tDBInput_10 < 28) {
								row14.noodlecrm__first_name__c = null;
							} else {
	                         		
        	row14.noodlecrm__first_name__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 28, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 29) {
								row14.noodlecrm__country__c = null;
							} else {
	                         		
        	row14.noodlecrm__country__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 29, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 30) {
								row14.noodlecrm__last_name__c = null;
							} else {
	                         		
        	row14.noodlecrm__last_name__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 30, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 31) {
								row14.noodlecrm__app_complete_date_time__c = null;
							} else {
										
			row14.noodlecrm__app_complete_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 31);
		                    }
							if(colQtyInRs_tDBInput_10 < 32) {
								row14.noodlecrm__opportunity__c = null;
							} else {
	                         		
        	row14.noodlecrm__opportunity__c = routines.system.JDBCUtil.getString(rs_tDBInput_10, 32, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 33) {
								row14.noodlecrm__app_submit_date_time__c = null;
							} else {
										
			row14.noodlecrm__app_submit_date_time__c = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 33);
		                    }
							if(colQtyInRs_tDBInput_10 < 34) {
								row14.sfid = null;
							} else {
	                         		
        	row14.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_10, 34, true);
		                    }
							if(colQtyInRs_tDBInput_10 < 35) {
								row14.id = 0;
							} else {
		                          
            row14.id = rs_tDBInput_10.getInt(35);
            if(rs_tDBInput_10.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_14 = false;
		  boolean mainRowRejected_tMap_14 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

copyOfout19 = null;
copyOfout20 = null;


// # Output table : 'copyOfout19'
copyOfout19_tmp.noodlecrm__unicrm_person_id__c = row14.noodlecrm__unicrm_person_id__c ;
copyOfout19_tmp.noodlecrm__years_experience__c = row14.noodlecrm__years_experience__c ;
copyOfout19_tmp.noodlecrm__state__c = row14.noodlecrm__state__c ;
copyOfout19_tmp.noodlecrm__last_updated_date_time__c = row14.noodlecrm__last_updated_date_time__c ;
copyOfout19_tmp.noodlecrm__external_id__c = row14.noodlecrm__external_id__c ;
copyOfout19_tmp.noodlecrm__phone__c = row14.noodlecrm__phone__c ;
copyOfout19_tmp.noodlecrm__dw_updated_date_time__c = row14.noodlecrm__dw_updated_date_time__c ;
copyOfout19_tmp.noodlecrm__city__c = row14.noodlecrm__city__c ;
copyOfout19_tmp.noodlecrm__zip_code__c = row14.noodlecrm__zip_code__c ;
copyOfout19_tmp.noodlecrm__start_term__c = row14.noodlecrm__start_term__c ;
copyOfout19_tmp.name = row14.name ;
copyOfout19_tmp.noodlecrm__dw_id__c = row14.noodlecrm__dw_id__c ;
copyOfout19_tmp.lastmodifieddate = row14.lastmodifieddate ;
copyOfout19_tmp.noodlecrm__program__c = row14.noodlecrm__program__c ;
copyOfout19_tmp.ownerid = row14.ownerid ;
copyOfout19_tmp.noodlecrm__app_start_date_time__c = row14.noodlecrm__app_start_date_time__c ;
copyOfout19_tmp.isdeleted = row14.isdeleted ;
copyOfout19_tmp.systemmodstamp = row14.systemmodstamp ;
copyOfout19_tmp.noodlecrm__street__c = row14.noodlecrm__street__c ;
copyOfout19_tmp.noodlecrm__contact__c = row14.noodlecrm__contact__c ;
copyOfout19_tmp.noodlecrm__app_deposit_date_time__c = row14.noodlecrm__app_deposit_date_time__c ;
copyOfout19_tmp.noodlecrm__email__c = row14.noodlecrm__email__c ;
copyOfout19_tmp.createddate = row14.createddate ;
copyOfout19_tmp.noodlecrm__unicrm_application_id__c = row14.noodlecrm__unicrm_application_id__c ;
copyOfout19_tmp.noodlecrm__level_of_education__c = row14.noodlecrm__level_of_education__c ;
copyOfout19_tmp.noodlecrm__dw_created_date_time__c = row14.noodlecrm__dw_created_date_time__c ;
copyOfout19_tmp.noodlecrm__app_admitted_date_time__c = row14.noodlecrm__app_admitted_date_time__c ;
copyOfout19_tmp.noodlecrm__first_name__c = row14.noodlecrm__first_name__c ;
copyOfout19_tmp.noodlecrm__country__c = row14.noodlecrm__country__c ;
copyOfout19_tmp.noodlecrm__last_name__c = row14.noodlecrm__last_name__c ;
copyOfout19_tmp.noodlecrm__app_complete_date_time__c = row14.noodlecrm__app_complete_date_time__c ;
copyOfout19_tmp.noodlecrm__opportunity__c = row14.noodlecrm__opportunity__c ;
copyOfout19_tmp.noodlecrm__app_submit_date_time__c = row14.noodlecrm__app_submit_date_time__c ;
copyOfout19_tmp.sfid = row14.sfid ;
copyOfout19_tmp.id = row14.id ;
copyOfout19 = copyOfout19_tmp;

// # Output table : 'copyOfout20'
copyOfout20_tmp.noodlecrm__unicrm_person_id__c = row14.noodlecrm__unicrm_person_id__c ;
copyOfout20_tmp.noodlecrm__years_experience__c = row14.noodlecrm__years_experience__c ;
copyOfout20_tmp.noodlecrm__state__c = row14.noodlecrm__state__c ;
copyOfout20_tmp.noodlecrm__last_updated_date_time__c = row14.noodlecrm__last_updated_date_time__c ;
copyOfout20_tmp.noodlecrm__external_id__c = row14.noodlecrm__external_id__c ;
copyOfout20_tmp.noodlecrm__phone__c = row14.noodlecrm__phone__c ;
copyOfout20_tmp.noodlecrm__dw_updated_date_time__c = row14.noodlecrm__dw_updated_date_time__c ;
copyOfout20_tmp.noodlecrm__city__c = row14.noodlecrm__city__c ;
copyOfout20_tmp.noodlecrm__zip_code__c = row14.noodlecrm__zip_code__c ;
copyOfout20_tmp.noodlecrm__start_term__c = row14.noodlecrm__start_term__c ;
copyOfout20_tmp.name = row14.name ;
copyOfout20_tmp.noodlecrm__dw_id__c = row14.noodlecrm__dw_id__c ;
copyOfout20_tmp.lastmodifieddate = row14.lastmodifieddate ;
copyOfout20_tmp.noodlecrm__program__c = row14.noodlecrm__program__c ;
copyOfout20_tmp.ownerid = row14.ownerid ;
copyOfout20_tmp.noodlecrm__app_start_date_time__c = row14.noodlecrm__app_start_date_time__c ;
copyOfout20_tmp.isdeleted = row14.isdeleted ;
copyOfout20_tmp.systemmodstamp = row14.systemmodstamp ;
copyOfout20_tmp.noodlecrm__street__c = row14.noodlecrm__street__c ;
copyOfout20_tmp.noodlecrm__contact__c = row14.noodlecrm__contact__c ;
copyOfout20_tmp.noodlecrm__app_deposit_date_time__c = row14.noodlecrm__app_deposit_date_time__c ;
copyOfout20_tmp.noodlecrm__email__c = row14.noodlecrm__email__c ;
copyOfout20_tmp.createddate = row14.createddate ;
copyOfout20_tmp.noodlecrm__unicrm_application_id__c = row14.noodlecrm__unicrm_application_id__c ;
copyOfout20_tmp.noodlecrm__level_of_education__c = row14.noodlecrm__level_of_education__c ;
copyOfout20_tmp.noodlecrm__dw_created_date_time__c = row14.noodlecrm__dw_created_date_time__c ;
copyOfout20_tmp.noodlecrm__app_admitted_date_time__c = row14.noodlecrm__app_admitted_date_time__c ;
copyOfout20_tmp.noodlecrm__first_name__c = row14.noodlecrm__first_name__c ;
copyOfout20_tmp.noodlecrm__country__c = row14.noodlecrm__country__c ;
copyOfout20_tmp.noodlecrm__last_name__c = row14.noodlecrm__last_name__c ;
copyOfout20_tmp.noodlecrm__app_complete_date_time__c = row14.noodlecrm__app_complete_date_time__c ;
copyOfout20_tmp.noodlecrm__opportunity__c = row14.noodlecrm__opportunity__c ;
copyOfout20_tmp.noodlecrm__app_submit_date_time__c = row14.noodlecrm__app_submit_date_time__c ;
copyOfout20_tmp.sfid = row14.sfid ;
copyOfout20_tmp.id = row14.id ;
copyOfout20 = copyOfout20_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "copyOfout19"
if(copyOfout19 != null) { 



	
	/**
	 * [tFileOutputDelimited_14 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout19");
					}
					


                        String[] rowtFileOutputDelimited_14=new String[35];
                            rowtFileOutputDelimited_14[0]=copyOfout19.noodlecrm__unicrm_person_id__c == null ? null : copyOfout19.noodlecrm__unicrm_person_id__c;
                            rowtFileOutputDelimited_14[1]=copyOfout19.noodlecrm__years_experience__c == null ? null : copyOfout19.noodlecrm__years_experience__c;
                            rowtFileOutputDelimited_14[2]=copyOfout19.noodlecrm__state__c == null ? null : copyOfout19.noodlecrm__state__c;
                            rowtFileOutputDelimited_14[3]=copyOfout19.noodlecrm__last_updated_date_time__c == null ? null : FormatterUtils.format_Date(copyOfout19.noodlecrm__last_updated_date_time__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_14[4]=copyOfout19.noodlecrm__external_id__c == null ? null : copyOfout19.noodlecrm__external_id__c;
                            rowtFileOutputDelimited_14[5]=copyOfout19.noodlecrm__phone__c == null ? null : copyOfout19.noodlecrm__phone__c;
                            rowtFileOutputDelimited_14[6]=copyOfout19.noodlecrm__dw_updated_date_time__c == null ? null : FormatterUtils.format_Date(copyOfout19.noodlecrm__dw_updated_date_time__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_14[7]=copyOfout19.noodlecrm__city__c == null ? null : copyOfout19.noodlecrm__city__c;
                            rowtFileOutputDelimited_14[8]=copyOfout19.noodlecrm__zip_code__c == null ? null : copyOfout19.noodlecrm__zip_code__c;
                            rowtFileOutputDelimited_14[9]=copyOfout19.noodlecrm__start_term__c == null ? null : copyOfout19.noodlecrm__start_term__c;
                            rowtFileOutputDelimited_14[10]=copyOfout19.name == null ? null : copyOfout19.name;
                            rowtFileOutputDelimited_14[11]=copyOfout19.noodlecrm__dw_id__c == null ? null : copyOfout19.noodlecrm__dw_id__c;
                            rowtFileOutputDelimited_14[12]=copyOfout19.lastmodifieddate == null ? null : FormatterUtils.format_Date(copyOfout19.lastmodifieddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_14[13]=copyOfout19.noodlecrm__program__c == null ? null : copyOfout19.noodlecrm__program__c;
                            rowtFileOutputDelimited_14[14]=copyOfout19.ownerid == null ? null : copyOfout19.ownerid;
                            rowtFileOutputDelimited_14[15]=copyOfout19.noodlecrm__app_start_date_time__c == null ? null : FormatterUtils.format_Date(copyOfout19.noodlecrm__app_start_date_time__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_14[16]=copyOfout19.isdeleted == null ? null : String.valueOf(copyOfout19.isdeleted);
                            rowtFileOutputDelimited_14[17]=copyOfout19.systemmodstamp == null ? null : FormatterUtils.format_Date(copyOfout19.systemmodstamp, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_14[18]=copyOfout19.noodlecrm__street__c == null ? null : copyOfout19.noodlecrm__street__c;
                            rowtFileOutputDelimited_14[19]=copyOfout19.noodlecrm__contact__c == null ? null : copyOfout19.noodlecrm__contact__c;
                            rowtFileOutputDelimited_14[20]=copyOfout19.noodlecrm__app_deposit_date_time__c == null ? null : FormatterUtils.format_Date(copyOfout19.noodlecrm__app_deposit_date_time__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_14[21]=copyOfout19.noodlecrm__email__c == null ? null : copyOfout19.noodlecrm__email__c;
                            rowtFileOutputDelimited_14[22]=copyOfout19.createddate == null ? null : FormatterUtils.format_Date(copyOfout19.createddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_14[23]=copyOfout19.noodlecrm__unicrm_application_id__c == null ? null : copyOfout19.noodlecrm__unicrm_application_id__c;
                            rowtFileOutputDelimited_14[24]=copyOfout19.noodlecrm__level_of_education__c == null ? null : copyOfout19.noodlecrm__level_of_education__c;
                            rowtFileOutputDelimited_14[25]=copyOfout19.noodlecrm__dw_created_date_time__c == null ? null : FormatterUtils.format_Date(copyOfout19.noodlecrm__dw_created_date_time__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_14[26]=copyOfout19.noodlecrm__app_admitted_date_time__c == null ? null : FormatterUtils.format_Date(copyOfout19.noodlecrm__app_admitted_date_time__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_14[27]=copyOfout19.noodlecrm__first_name__c == null ? null : copyOfout19.noodlecrm__first_name__c;
                            rowtFileOutputDelimited_14[28]=copyOfout19.noodlecrm__country__c == null ? null : copyOfout19.noodlecrm__country__c;
                            rowtFileOutputDelimited_14[29]=copyOfout19.noodlecrm__last_name__c == null ? null : copyOfout19.noodlecrm__last_name__c;
                            rowtFileOutputDelimited_14[30]=copyOfout19.noodlecrm__app_complete_date_time__c == null ? null : FormatterUtils.format_Date(copyOfout19.noodlecrm__app_complete_date_time__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_14[31]=copyOfout19.noodlecrm__opportunity__c == null ? null : copyOfout19.noodlecrm__opportunity__c;
                            rowtFileOutputDelimited_14[32]=copyOfout19.noodlecrm__app_submit_date_time__c == null ? null : FormatterUtils.format_Date(copyOfout19.noodlecrm__app_submit_date_time__c, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_14[33]=copyOfout19.sfid == null ? null : copyOfout19.sfid;
                            rowtFileOutputDelimited_14[34]=String.valueOf(copyOfout19.id);
                nb_line_tFileOutputDelimited_14++;
                resourceMap.put("nb_line_tFileOutputDelimited_14", nb_line_tFileOutputDelimited_14);
                                       CsvWritertFileOutputDelimited_14.writeNext(rowtFileOutputDelimited_14);




 


	tos_count_tFileOutputDelimited_14++;

/**
 * [tFileOutputDelimited_14 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_14";

	

 



/**
 * [tFileOutputDelimited_14 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_14";

	

 



/**
 * [tFileOutputDelimited_14 process_data_end ] stop
 */

} // End of branch "copyOfout19"




// Start of branch "copyOfout20"
if(copyOfout20 != null) { 



	
	/**
	 * [tDBOutput_14 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout20");
					}
					



        whetherReject_tDBOutput_14 = false;
                    if(copyOfout20.noodlecrm__unicrm_person_id__c == null) {
pstmt_tDBOutput_14.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(1, copyOfout20.noodlecrm__unicrm_person_id__c);
}

                    if(copyOfout20.noodlecrm__years_experience__c == null) {
pstmt_tDBOutput_14.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(2, copyOfout20.noodlecrm__years_experience__c);
}

                    if(copyOfout20.noodlecrm__state__c == null) {
pstmt_tDBOutput_14.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(3, copyOfout20.noodlecrm__state__c);
}

                    if(copyOfout20.noodlecrm__last_updated_date_time__c != null) {
pstmt_tDBOutput_14.setTimestamp(4, new java.sql.Timestamp(copyOfout20.noodlecrm__last_updated_date_time__c.getTime()));
} else {
pstmt_tDBOutput_14.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(copyOfout20.noodlecrm__external_id__c == null) {
pstmt_tDBOutput_14.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(5, copyOfout20.noodlecrm__external_id__c);
}

                    if(copyOfout20.noodlecrm__phone__c == null) {
pstmt_tDBOutput_14.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(6, copyOfout20.noodlecrm__phone__c);
}

                    if(copyOfout20.noodlecrm__dw_updated_date_time__c != null) {
pstmt_tDBOutput_14.setTimestamp(7, new java.sql.Timestamp(copyOfout20.noodlecrm__dw_updated_date_time__c.getTime()));
} else {
pstmt_tDBOutput_14.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(copyOfout20.noodlecrm__city__c == null) {
pstmt_tDBOutput_14.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(8, copyOfout20.noodlecrm__city__c);
}

                    if(copyOfout20.noodlecrm__zip_code__c == null) {
pstmt_tDBOutput_14.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(9, copyOfout20.noodlecrm__zip_code__c);
}

                    if(copyOfout20.noodlecrm__start_term__c == null) {
pstmt_tDBOutput_14.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(10, copyOfout20.noodlecrm__start_term__c);
}

                    if(copyOfout20.name == null) {
pstmt_tDBOutput_14.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(11, copyOfout20.name);
}

                    if(copyOfout20.noodlecrm__dw_id__c == null) {
pstmt_tDBOutput_14.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(12, copyOfout20.noodlecrm__dw_id__c);
}

                    if(copyOfout20.lastmodifieddate != null) {
pstmt_tDBOutput_14.setTimestamp(13, new java.sql.Timestamp(copyOfout20.lastmodifieddate.getTime()));
} else {
pstmt_tDBOutput_14.setNull(13, java.sql.Types.TIMESTAMP);
}

                    if(copyOfout20.noodlecrm__program__c == null) {
pstmt_tDBOutput_14.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(14, copyOfout20.noodlecrm__program__c);
}

                    if(copyOfout20.ownerid == null) {
pstmt_tDBOutput_14.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(15, copyOfout20.ownerid);
}

                    if(copyOfout20.noodlecrm__app_start_date_time__c != null) {
pstmt_tDBOutput_14.setTimestamp(16, new java.sql.Timestamp(copyOfout20.noodlecrm__app_start_date_time__c.getTime()));
} else {
pstmt_tDBOutput_14.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(copyOfout20.isdeleted == null) {
pstmt_tDBOutput_14.setNull(17, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_14.setBoolean(17, copyOfout20.isdeleted);
}

                    if(copyOfout20.systemmodstamp != null) {
pstmt_tDBOutput_14.setTimestamp(18, new java.sql.Timestamp(copyOfout20.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_14.setNull(18, java.sql.Types.TIMESTAMP);
}

                    if(copyOfout20.noodlecrm__street__c == null) {
pstmt_tDBOutput_14.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(19, copyOfout20.noodlecrm__street__c);
}

                    if(copyOfout20.noodlecrm__contact__c == null) {
pstmt_tDBOutput_14.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(20, copyOfout20.noodlecrm__contact__c);
}

                    if(copyOfout20.noodlecrm__app_deposit_date_time__c != null) {
pstmt_tDBOutput_14.setTimestamp(21, new java.sql.Timestamp(copyOfout20.noodlecrm__app_deposit_date_time__c.getTime()));
} else {
pstmt_tDBOutput_14.setNull(21, java.sql.Types.TIMESTAMP);
}

                    if(copyOfout20.noodlecrm__email__c == null) {
pstmt_tDBOutput_14.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(22, copyOfout20.noodlecrm__email__c);
}

                    if(copyOfout20.createddate != null) {
pstmt_tDBOutput_14.setTimestamp(23, new java.sql.Timestamp(copyOfout20.createddate.getTime()));
} else {
pstmt_tDBOutput_14.setNull(23, java.sql.Types.TIMESTAMP);
}

                    if(copyOfout20.noodlecrm__unicrm_application_id__c == null) {
pstmt_tDBOutput_14.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(24, copyOfout20.noodlecrm__unicrm_application_id__c);
}

                    if(copyOfout20.noodlecrm__level_of_education__c == null) {
pstmt_tDBOutput_14.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(25, copyOfout20.noodlecrm__level_of_education__c);
}

                    if(copyOfout20.noodlecrm__dw_created_date_time__c != null) {
pstmt_tDBOutput_14.setTimestamp(26, new java.sql.Timestamp(copyOfout20.noodlecrm__dw_created_date_time__c.getTime()));
} else {
pstmt_tDBOutput_14.setNull(26, java.sql.Types.TIMESTAMP);
}

                    if(copyOfout20.noodlecrm__app_admitted_date_time__c != null) {
pstmt_tDBOutput_14.setTimestamp(27, new java.sql.Timestamp(copyOfout20.noodlecrm__app_admitted_date_time__c.getTime()));
} else {
pstmt_tDBOutput_14.setNull(27, java.sql.Types.TIMESTAMP);
}

                    if(copyOfout20.noodlecrm__first_name__c == null) {
pstmt_tDBOutput_14.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(28, copyOfout20.noodlecrm__first_name__c);
}

                    if(copyOfout20.noodlecrm__country__c == null) {
pstmt_tDBOutput_14.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(29, copyOfout20.noodlecrm__country__c);
}

                    if(copyOfout20.noodlecrm__last_name__c == null) {
pstmt_tDBOutput_14.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(30, copyOfout20.noodlecrm__last_name__c);
}

                    if(copyOfout20.noodlecrm__app_complete_date_time__c != null) {
pstmt_tDBOutput_14.setTimestamp(31, new java.sql.Timestamp(copyOfout20.noodlecrm__app_complete_date_time__c.getTime()));
} else {
pstmt_tDBOutput_14.setNull(31, java.sql.Types.TIMESTAMP);
}

                    if(copyOfout20.noodlecrm__opportunity__c == null) {
pstmt_tDBOutput_14.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(32, copyOfout20.noodlecrm__opportunity__c);
}

                    if(copyOfout20.noodlecrm__app_submit_date_time__c != null) {
pstmt_tDBOutput_14.setTimestamp(33, new java.sql.Timestamp(copyOfout20.noodlecrm__app_submit_date_time__c.getTime()));
} else {
pstmt_tDBOutput_14.setNull(33, java.sql.Types.TIMESTAMP);
}

                    if(copyOfout20.sfid == null) {
pstmt_tDBOutput_14.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_14.setString(34, copyOfout20.sfid);
}

                    pstmt_tDBOutput_14.setInt(35, copyOfout20.id);

			
    		pstmt_tDBOutput_14.addBatch();
    		nb_line_tDBOutput_14++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_14++;
    		  
            if(!whetherReject_tDBOutput_14) {
            }
    			if ((batchSize_tDBOutput_14 > 0) && (batchSize_tDBOutput_14 <= batchSizeCounter_tDBOutput_14)) {
                try {
						int countSum_tDBOutput_14 = 0;
						    
						for(int countEach_tDBOutput_14: pstmt_tDBOutput_14.executeBatch()) {
							countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
						}
				    	
				    		insertedCount_tDBOutput_14 += countSum_tDBOutput_14;
				    	
            	    	batchSizeCounter_tDBOutput_14 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_14){
				    	java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(),sqle_tDBOutput_14=null;
				    	String errormessage_tDBOutput_14;
						if (ne_tDBOutput_14 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_14 = new java.sql.SQLException(e_tDBOutput_14.getMessage() + "\ncaused by: " + ne_tDBOutput_14.getMessage(), ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
							errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
						}else{
							errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
						}
				    	
				    	int countSum_tDBOutput_14 = 0;
						for(int countEach_tDBOutput_14: e_tDBOutput_14.getUpdateCounts()) {
							countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
						}
						
				    		insertedCount_tDBOutput_14 += countSum_tDBOutput_14;
				    	
				    	System.err.println(errormessage_tDBOutput_14);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_14++;

/**
 * [tDBOutput_14 main ] stop
 */
	
	/**
	 * [tDBOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	

 



/**
 * [tDBOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	

 



/**
 * [tDBOutput_14 process_data_end ] stop
 */

} // End of branch "copyOfout20"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_14 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_14";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_14!=null) {
				    	CsvWritertFileOutputDelimited_14.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_14_NB_LINE",nb_line_tFileOutputDelimited_14);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_14", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout19");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_14", true);
end_Hash.put("tFileOutputDelimited_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk151", 0, "ok");
				}
				tFileArchive_15Process(globalMap);



/**
 * [tFileOutputDelimited_14 end ] stop
 */




	
	/**
	 * [tDBOutput_14 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	



	    try {
				int countSum_tDBOutput_14 = 0;
				if (pstmt_tDBOutput_14 != null && batchSizeCounter_tDBOutput_14 > 0) {
						
					for(int countEach_tDBOutput_14: pstmt_tDBOutput_14.executeBatch()) {
						countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_14 += countSum_tDBOutput_14;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_14){
	    	java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(),sqle_tDBOutput_14=null;
	    	String errormessage_tDBOutput_14;
			if (ne_tDBOutput_14 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_14 = new java.sql.SQLException(e_tDBOutput_14.getMessage() + "\ncaused by: " + ne_tDBOutput_14.getMessage(), ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
				errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
			}else{
				errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
			}
	    	
	    	int countSum_tDBOutput_14 = 0;
			for(int countEach_tDBOutput_14: e_tDBOutput_14.getUpdateCounts()) {
				countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0 : countEach_tDBOutput_14);
			}
			
	    		insertedCount_tDBOutput_14 += countSum_tDBOutput_14;
	    	
	    	System.err.println(errormessage_tDBOutput_14);
	    	
		}
	    
        if(pstmt_tDBOutput_14 != null) {
        		
            pstmt_tDBOutput_14.close();
            resourceMap.remove("pstmt_tDBOutput_14");
        }
    resourceMap.put("statementClosed_tDBOutput_14", true);

	nb_line_deleted_tDBOutput_14=nb_line_deleted_tDBOutput_14+ deletedCount_tDBOutput_14;
	nb_line_update_tDBOutput_14=nb_line_update_tDBOutput_14 + updatedCount_tDBOutput_14;
	nb_line_inserted_tDBOutput_14=nb_line_inserted_tDBOutput_14 + insertedCount_tDBOutput_14;
	nb_line_rejected_tDBOutput_14=nb_line_rejected_tDBOutput_14 + rejectedCount_tDBOutput_14;
	
        globalMap.put("tDBOutput_14_NB_LINE",nb_line_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_UPDATED",nb_line_update_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_DELETED",nb_line_deleted_tDBOutput_14);
        globalMap.put("tDBOutput_14_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_14);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout20");
			  	}
			  	
 

ok_Hash.put("tDBOutput_14", true);
end_Hash.put("tDBOutput_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk152", 0, "ok");
				}
				tJava_58Process(globalMap);



/**
 * [tDBOutput_14 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_14 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_14";

	


		if(resourceMap.get("finish_tFileOutputDelimited_14") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_14 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_14");
					
						if(CsvWritertFileOutputDelimited_14!=null) {
					    	CsvWritertFileOutputDelimited_14.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_14 finally ] stop
 */




	
	/**
	 * [tDBOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_14";

	



    if (resourceMap.get("statementClosed_tDBOutput_14") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_14 = null;
                if ((pstmtToClose_tDBOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_14")) != null) {
                    pstmtToClose_tDBOutput_14.close();
                }
    }
 



/**
 * [tDBOutput_14 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_15", false);
		start_Hash.put("tFileArchive_15", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_15";

	
		int tos_count_tFileArchive_15 = 0;
		

 



/**
 * [tFileArchive_15 begin ] stop
 */
	
	/**
	 * [tFileArchive_15 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_15";

	

	

		String sourceFile_tFileArchive_15 = context.staging_S3_dir + "noodlecrm__application__c.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_15), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_15 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_15 = context.staging_S3_dir + "noodlecrm__application__c.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_15 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_15, zipFile_tFileArchive_15);
    zip_tFileArchive_15.setOverwriteExistTargetZip(true);
	zip_tFileArchive_15.setMakeTargetDir(true);
	zip_tFileArchive_15.setCompressLevel(9);
	zip_tFileArchive_15.setArchiveFormat("gzip");
	zip_tFileArchive_15.setAllFiles(true);
	
	
		zip_tFileArchive_15.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_15_ARCHIVE_FILEPATH",zipFile_tFileArchive_15);
   
   globalMap.put("tFileArchive_15_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_15).getName());

   zip_tFileArchive_15.doZip();


 


	tos_count_tFileArchive_15++;

/**
 * [tFileArchive_15 main ] stop
 */
	
	/**
	 * [tFileArchive_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_15";

	

 



/**
 * [tFileArchive_15 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_15";

	

 



/**
 * [tFileArchive_15 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_15 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_15";

	

 

ok_Hash.put("tFileArchive_15", true);
end_Hash.put("tFileArchive_15", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk149", 0, "ok");
				}
				tS3Put_15Process(globalMap);



/**
 * [tFileArchive_15 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_15 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_15";

	

 



/**
 * [tFileArchive_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_15_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_15", false);
		start_Hash.put("tS3Put_15", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_15";

	
		int tos_count_tS3Put_15 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_15 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_15 = context.nd_s3_data_lake_path_sfdc +"/noodlecrm__application/latest/university_id="+context.university_code+"/noodlecrm__application__c.csv.gz";
	
	int partSizeInBytes_tS3Put_15 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_15 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_15 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_15 = context.staging_S3_dir + "noodlecrm__application__c.csv.gz";
	
	boolean useStream_tS3Put_15 = false;
	java.io.InputStream uploadStream_tS3Put_15 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_15 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_15 instanceof String){
		    useStream_tS3Put_15 = false;
		}else if(fileOrStream_tS3Put_15 instanceof java.io.InputStream){
		    useStream_tS3Put_15 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_15 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_15) {
				java.io.File inputFile_tS3Put_15 = new java.io.File((String)fileOrStream_tS3Put_15);
				
				long multipart_upload_threshold_tS3Put_15 = 5 * 1024 * 1024;
				
    		tm_tS3Put_15 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_15)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_15)
    			.withS3Client(conn_tS3Put_15)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_15 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_15, inputFile_tS3Put_15).withMetadata(objectMetadata_tS3Put_15);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_15 = tm_tS3Put_15.upload(putRequest_tS3Put_15);
  		
  			upload_tS3Put_15.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_15 = ((java.io.InputStream)fileOrStream_tS3Put_15);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_15 = new S3StreamUtil();
    		byte[] buffer_tS3Put_15 = new byte[partSizeInBytes_tS3Put_15];
    		sourceStream_tS3Put_15.read(buffer_tS3Put_15);
    		long curPartSize_tS3Put_15 = streamUtil_tS3Put_15.getLength(buffer_tS3Put_15);
    		boolean multiUpload_tS3Put_15 = curPartSize_tS3Put_15 == partSizeInBytes_tS3Put_15;
    		
    		if(!multiUpload_tS3Put_15) {
    				objectMetadata_tS3Put_15.setContentLength(curPartSize_tS3Put_15);
    				uploadStream_tS3Put_15 = new java.io.ByteArrayInputStream(buffer_tS3Put_15,0,Long.valueOf(curPartSize_tS3Put_15).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_15 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_15, uploadStream_tS3Put_15, objectMetadata_tS3Put_15);
			
    				
    				

    				
    				conn_tS3Put_15.putObject(putRequest_tS3Put_15);
    		} else {
    				uploadStream_tS3Put_15 = new java.io.ByteArrayInputStream(buffer_tS3Put_15);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_15 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_15 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_15, objectMetadata_tS3Put_15);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_15 = conn_tS3Put_15.initiateMultipartUpload(putRequest_tS3Put_15);
      			String uploadId_tS3Put_15 = initResponse_tS3Put_15.getUploadId();
      			int partNumber_tS3Put_15 = 1;
      			boolean streamHasNext_tS3Put_15 = true;
      			byte[] probeAvailability_tS3Put_15 = new byte[1];
				try {
					while (streamHasNext_tS3Put_15) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_15 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_15)
						.withUploadId(uploadId_tS3Put_15)
                    	.withPartNumber(partNumber_tS3Put_15)
						.withPartSize(curPartSize_tS3Put_15);
            		    uploadRequest_tS3Put_15.setInputStream(uploadStream_tS3Put_15);
            		    streamHasNext_tS3Put_15 = sourceStream_tS3Put_15.read(probeAvailability_tS3Put_15) != -1;
            		    if(!streamHasNext_tS3Put_15){
                    	    uploadRequest_tS3Put_15.setLastPart(true);
                    	}

                		partTags_tS3Put_15.add(conn_tS3Put_15.uploadPart(uploadRequest_tS3Put_15).getPartETag());
                  	    partNumber_tS3Put_15++;

          		     	if(uploadStream_tS3Put_15!=null){
      		         			uploadStream_tS3Put_15.close();
          		     	}
          		     	buffer_tS3Put_15 = new byte[partSizeInBytes_tS3Put_15];
          		     	sourceStream_tS3Put_15.read(buffer_tS3Put_15,1,partSizeInBytes_tS3Put_15-1);
          		     	buffer_tS3Put_15[0] = probeAvailability_tS3Put_15[0];
          		     	probeAvailability_tS3Put_15 = new byte[1];
          		     	curPartSize_tS3Put_15 = streamUtil_tS3Put_15.getLength(buffer_tS3Put_15);
          		     	uploadStream_tS3Put_15 = new java.io.ByteArrayInputStream(buffer_tS3Put_15);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_15 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_15,
                        uploadId_tS3Put_15, partTags_tS3Put_15);
            		conn_tS3Put_15.completeMultipartUpload(compRequest_tS3Put_15);
            } catch (java.lang.Exception uploadException_tS3Put_15) {
  							conn_tS3Put_15.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_15, uploadId_tS3Put_15));
    						throw uploadException_tS3Put_15;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_15){
		
			throw(e_tS3Put_15);
		
	}finally{
		if(useStream_tS3Put_15 && uploadStream_tS3Put_15!=null){
    	uploadStream_tS3Put_15.close();
    }
    
    if(tm_tS3Put_15 != null){
        tm_tS3Put_15.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_15 begin ] stop
 */
	
	/**
	 * [tS3Put_15 main ] start
	 */

	

	
	
	currentComponent="tS3Put_15";

	

 


	tos_count_tS3Put_15++;

/**
 * [tS3Put_15 main ] stop
 */
	
	/**
	 * [tS3Put_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_15";

	

 



/**
 * [tS3Put_15 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_15";

	

 



/**
 * [tS3Put_15 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_15 end ] start
	 */

	

	
	
	currentComponent="tS3Put_15";

	

 

ok_Hash.put("tS3Put_15", true);
end_Hash.put("tS3Put_15", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk150", 0, "ok");
				}
				tJava_55Process(globalMap);



/**
 * [tS3Put_15 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_15 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_15";

	

 



/**
 * [tS3Put_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_15_SUBPROCESS_STATE", 1);
	}
	

public void tJava_55Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_55_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_55 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_55", false);
		start_Hash.put("tJava_55", System.currentTimeMillis());
		
	
	currentComponent="tJava_55";

	
		int tos_count_tJava_55 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_55 begin ] stop
 */
	
	/**
	 * [tJava_55 main ] start
	 */

	

	
	
	currentComponent="tJava_55";

	

 


	tos_count_tJava_55++;

/**
 * [tJava_55 main ] stop
 */
	
	/**
	 * [tJava_55 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_55";

	

 



/**
 * [tJava_55 process_data_begin ] stop
 */
	
	/**
	 * [tJava_55 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_55";

	

 



/**
 * [tJava_55 process_data_end ] stop
 */
	
	/**
	 * [tJava_55 end ] start
	 */

	

	
	
	currentComponent="tJava_55";

	

 

ok_Hash.put("tJava_55", true);
end_Hash.put("tJava_55", System.currentTimeMillis());




/**
 * [tJava_55 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_55 finally ] start
	 */

	

	
	
	currentComponent="tJava_55";

	

 



/**
 * [tJava_55 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_55_SUBPROCESS_STATE", 1);
	}
	

public void tJava_58Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_58_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_58 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_58", false);
		start_Hash.put("tJava_58", System.currentTimeMillis());
		
	
	currentComponent="tJava_58";

	
		int tos_count_tJava_58 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_14_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");
 



/**
 * [tJava_58 begin ] stop
 */
	
	/**
	 * [tJava_58 main ] start
	 */

	

	
	
	currentComponent="tJava_58";

	

 


	tos_count_tJava_58++;

/**
 * [tJava_58 main ] stop
 */
	
	/**
	 * [tJava_58 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_58";

	

 



/**
 * [tJava_58 process_data_begin ] stop
 */
	
	/**
	 * [tJava_58 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_58";

	

 



/**
 * [tJava_58 process_data_end ] stop
 */
	
	/**
	 * [tJava_58 end ] start
	 */

	

	
	
	currentComponent="tJava_58";

	

 

ok_Hash.put("tJava_58", true);
end_Hash.put("tJava_58", System.currentTimeMillis());




/**
 * [tJava_58 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_58 finally ] start
	 */

	

	
	
	currentComponent="tJava_58";

	

 



/**
 * [tJava_58 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_58_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_13", false);
		start_Hash.put("tS3Copy_13", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_13";

	
		int tos_count_tS3Copy_13 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_13 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_13 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_13 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_13 = null;
		
		
		final String from_bucket_tS3Copy_13 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_13 = context.nd_s3_data_lake_path_sfdc+"/hed__term/latest/university_id="+context.university_code+"/hed__term__c.csv.gz";
		final String to_bucket_tS3Copy_13 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_13 = context.nd_s3_data_lake_path_sfdc+"/hed__term/archive/university_id="+context.university_code+"/hed__term__c_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_13 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_13, from_key_tS3Copy_13);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_13 = conn_tS3Copy_13.getObjectMetadata(metadataRequest_tS3Copy_13);
    long objectSize_tS3Copy_13 = metadataResult_tS3Copy_13.getContentLength();
    
    boolean multiUpload_tS3Copy_13 = objectSize_tS3Copy_13 > maxBytes4SingleCopyCall_tS3Copy_13;
    
    if(!multiUpload_tS3Copy_13) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_13 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_13, from_key_tS3Copy_13, to_bucket_tS3Copy_13, to_key_tS3Copy_13);
    		if(objectMetadata_tS3Copy_13 != null) {
    				putRequest_tS3Copy_13.setNewObjectMetadata(objectMetadata_tS3Copy_13);
    		}
    		
    		

    		
    		conn_tS3Copy_13.copyObject(putRequest_tS3Copy_13);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_13 = metadataResult_tS3Copy_13.getUserMetadata();
						if((userMetadata_tS3Copy_13!=null) && userMetadata_tS3Copy_13.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_13 = null;
    				if(objectMetadata_tS3Copy_13 != null) {
    						putRequest_tS3Copy_13 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_13, to_key_tS3Copy_13, objectMetadata_tS3Copy_13);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_13 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_13, to_key_tS3Copy_13, metadataResult_tS3Copy_13);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_13 = conn_tS3Copy_13.initiateMultipartUpload(putRequest_tS3Copy_13);
            
            long bytePosition_tS3Copy_13 = 0;
            int partNum_tS3Copy_13 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_13 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_13 < objectSize_tS3Copy_13) {
                long lastByte_tS3Copy_13 = java.lang.Math.min(bytePosition_tS3Copy_13 + partSizeInBytes_tS3Copy_13 - 1, objectSize_tS3Copy_13 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_13 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_13)
                        .withSourceKey(from_key_tS3Copy_13)
                        .withDestinationBucketName(to_bucket_tS3Copy_13)
                        .withDestinationKey(to_key_tS3Copy_13)
                        .withUploadId(initResult_tS3Copy_13.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_13)
                        .withLastByte(lastByte_tS3Copy_13)
                        .withPartNumber(partNum_tS3Copy_13++);
                partTags_tS3Copy_13.add(conn_tS3Copy_13.copyPart(copyPartRequest_tS3Copy_13).getPartETag());
                bytePosition_tS3Copy_13 += partSizeInBytes_tS3Copy_13;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_13 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_13,
                                                                        to_key_tS3Copy_13, 
                                                                        initResult_tS3Copy_13.getUploadId(),
                                                                        partTags_tS3Copy_13);
            conn_tS3Copy_13.completeMultipartUpload(completeRequest_tS3Copy_13);
    		} catch (java.lang.Exception uploadException_tS3Copy_13) {
    				conn_tS3Copy_13.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_13, to_key_tS3Copy_13, initResult_tS3Copy_13.getUploadId()));
    				throw uploadException_tS3Copy_13;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_13){
		
			System.err.println(e_tS3Copy_13.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_13 begin ] stop
 */
	
	/**
	 * [tS3Copy_13 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_13";

	

 


	tos_count_tS3Copy_13++;

/**
 * [tS3Copy_13 main ] stop
 */
	
	/**
	 * [tS3Copy_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_13";

	

 



/**
 * [tS3Copy_13 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_13";

	

 



/**
 * [tS3Copy_13 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_13 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_13";

	

 

ok_Hash.put("tS3Copy_13", true);
end_Hash.put("tS3Copy_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk141", 0, "ok");
				}
				tJava_53Process(globalMap);



/**
 * [tS3Copy_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_13 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_13";

	

 



/**
 * [tS3Copy_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_13_SUBPROCESS_STATE", 1);
	}
	

public void tJava_53Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_53_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_53 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_53", false);
		start_Hash.put("tJava_53", System.currentTimeMillis());
		
	
	currentComponent="tJava_53";

	
		int tos_count_tJava_53 = 0;
		


System.out.println("Step 0: Running For Hed__Term Object");
System.out.println("Step 1: Copied Previous Run File To Archive");
 



/**
 * [tJava_53 begin ] stop
 */
	
	/**
	 * [tJava_53 main ] start
	 */

	

	
	
	currentComponent="tJava_53";

	

 


	tos_count_tJava_53++;

/**
 * [tJava_53 main ] stop
 */
	
	/**
	 * [tJava_53 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_53";

	

 



/**
 * [tJava_53 process_data_begin ] stop
 */
	
	/**
	 * [tJava_53 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_53";

	

 



/**
 * [tJava_53 process_data_end ] stop
 */
	
	/**
	 * [tJava_53 end ] start
	 */

	

	
	
	currentComponent="tJava_53";

	

 

ok_Hash.put("tJava_53", true);
end_Hash.put("tJava_53", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk142", 0, "ok");
				}
				tS3Delete_13Process(globalMap);



/**
 * [tJava_53 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_53 finally ] start
	 */

	

	
	
	currentComponent="tJava_53";

	

 



/**
 * [tJava_53 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_53_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_13", false);
		start_Hash.put("tS3Delete_13", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_13";

	
		int tos_count_tS3Delete_13 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_13 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_13 = context.nd_s3_data_lake_path_sfdc +"/hed__term/latest/university_id="+context.university_code+"/hed__term__c.csv.gz";
		if(key_tS3Delete_13!=null && key_tS3Delete_13.trim().length()>0){
			
			conn_tS3Delete_13.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_13);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_13){
		
			System.err.println(e_tS3Delete_13.getMessage());
		
	}
	
 



/**
 * [tS3Delete_13 begin ] stop
 */
	
	/**
	 * [tS3Delete_13 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_13";

	

 


	tos_count_tS3Delete_13++;

/**
 * [tS3Delete_13 main ] stop
 */
	
	/**
	 * [tS3Delete_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_13";

	

 



/**
 * [tS3Delete_13 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_13";

	

 



/**
 * [tS3Delete_13 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_13 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_13";

	

 

ok_Hash.put("tS3Delete_13", true);
end_Hash.put("tS3Delete_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk143", 0, "ok");
				}
				tJava_54Process(globalMap);



/**
 * [tS3Delete_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_13 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_13";

	

 



/**
 * [tS3Delete_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_13_SUBPROCESS_STATE", 1);
	}
	

public void tJava_54Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_54_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_54 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_54", false);
		start_Hash.put("tJava_54", System.currentTimeMillis());
		
	
	currentComponent="tJava_54";

	
		int tos_count_tJava_54 = 0;
		


System.out.println("Step 2: Deleted Previous Run File From Latest Folder");
System.out.println("Step 3: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_54 begin ] stop
 */
	
	/**
	 * [tJava_54 main ] start
	 */

	

	
	
	currentComponent="tJava_54";

	

 


	tos_count_tJava_54++;

/**
 * [tJava_54 main ] stop
 */
	
	/**
	 * [tJava_54 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_54";

	

 



/**
 * [tJava_54 process_data_begin ] stop
 */
	
	/**
	 * [tJava_54 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_54";

	

 



/**
 * [tJava_54 process_data_end ] stop
 */
	
	/**
	 * [tJava_54 end ] start
	 */

	

	
	
	currentComponent="tJava_54";

	

 

ok_Hash.put("tJava_54", true);
end_Hash.put("tJava_54", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk144", 0, "ok");
				}
				tDBInput_13Process(globalMap);



/**
 * [tJava_54 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_54 finally ] start
	 */

	

	
	
	currentComponent="tJava_54";

	

 



/**
 * [tJava_54 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_54_SUBPROCESS_STATE", 1);
	}
	


public static class out25Struct implements routines.system.IPersistableRow<out25Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out25Struct other = (out25Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out25Struct other) {

		other.createddate = this.createddate;
	            other.isdeleted = this.isdeleted;
	            other.name = this.name;
	            other.systemmodstamp = this.systemmodstamp;
	            other.noodlecrm__external_id__c = this.noodlecrm__external_id__c;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            
	}

	public void copyKeysDataTo(out25Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.name = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// String
				
						writeString(this.name,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("createddate="+String.valueOf(createddate));
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",name="+name);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out26Struct implements routines.system.IPersistableRow<out26Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out26Struct other = (out26Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(out26Struct other) {

		other.createddate = this.createddate;
	            other.isdeleted = this.isdeleted;
	            other.name = this.name;
	            other.systemmodstamp = this.systemmodstamp;
	            other.noodlecrm__external_id__c = this.noodlecrm__external_id__c;
	            other.sfid = this.sfid;
	            other.id = this.id;
	            
	}

	public void copyKeysDataTo(out26Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.name = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// String
				
						writeString(this.name,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("createddate="+String.valueOf(createddate));
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",name="+name);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out26Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];
    static byte[] commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[0];

	
			    public java.util.Date createddate;

				public java.util.Date getCreateddate () {
					return this.createddate;
				}
				
			    public Boolean isdeleted;

				public Boolean getIsdeleted () {
					return this.isdeleted;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public java.util.Date systemmodstamp;

				public java.util.Date getSystemmodstamp () {
					return this.systemmodstamp;
				}
				
			    public String noodlecrm__external_id__c;

				public String getNoodlecrm__external_id__c () {
					return this.noodlecrm__external_id__c;
				}
				
			    public String sfid;

				public String getSfid () {
					return this.sfid;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length) {
				if(length < 1024 && commonByteArray_T_731_noodle_sfdc_s3_sync_job_how.length == 0) {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[1024];
				} else {
   					commonByteArray_T_731_noodle_sfdc_s3_sync_job_how = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length);
			strReturn = new String(commonByteArray_T_731_noodle_sfdc_s3_sync_job_how, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_731_noodle_sfdc_s3_sync_job_how) {

        	try {

        		int length = 0;
		
					this.createddate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isdeleted = null;
           				} else {
           			    	this.isdeleted = dis.readBoolean();
           				}
					
					this.name = readString(dis);
					
					this.systemmodstamp = readDate(dis);
					
					this.noodlecrm__external_id__c = readString(dis);
					
					this.sfid = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.createddate,dos);
					
					// Boolean
				
						if(this.isdeleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isdeleted);
		            	}
					
					// String
				
						writeString(this.name,dos);
					
					// java.util.Date
				
						writeDate(this.systemmodstamp,dos);
					
					// String
				
						writeString(this.noodlecrm__external_id__c,dos);
					
					// String
				
						writeString(this.sfid,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("createddate="+String.valueOf(createddate));
		sb.append(",isdeleted="+String.valueOf(isdeleted));
		sb.append(",name="+name);
		sb.append(",systemmodstamp="+String.valueOf(systemmodstamp));
		sb.append(",noodlecrm__external_id__c="+noodlecrm__external_id__c);
		sb.append(",sfid="+sfid);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();
out25Struct out25 = new out25Struct();
out26Struct out26 = new out26Struct();





	
	/**
	 * [tFileOutputDelimited_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_13", false);
		start_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out25");
					}
				
		int tos_count_tFileOutputDelimited_13 = 0;
		

String fileName_tFileOutputDelimited_13 = "";
    fileName_tFileOutputDelimited_13 = (new java.io.File(context.staging_S3_dir + "hed__term__c.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_13 = null;
    String extension_tFileOutputDelimited_13 = null;
    String directory_tFileOutputDelimited_13 = null;
    if((fileName_tFileOutputDelimited_13.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_13.lastIndexOf(".") < fileName_tFileOutputDelimited_13.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
            extension_tFileOutputDelimited_13 = "";
        } else {
            fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0, fileName_tFileOutputDelimited_13.lastIndexOf("."));
            extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(fileName_tFileOutputDelimited_13.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0, fileName_tFileOutputDelimited_13.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_13.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0, fileName_tFileOutputDelimited_13.lastIndexOf("."));
            extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(fileName_tFileOutputDelimited_13.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
            extension_tFileOutputDelimited_13 = "";
        }
        directory_tFileOutputDelimited_13 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_13 = true;
    java.io.File filetFileOutputDelimited_13 = new java.io.File(fileName_tFileOutputDelimited_13);
    globalMap.put("tFileOutputDelimited_13_FILE_NAME",fileName_tFileOutputDelimited_13);
                String[] headColutFileOutputDelimited_13=new String[7];
            class CSVBasicSet_tFileOutputDelimited_13{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_13[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_13 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_13[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("^");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_13[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_13 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_13[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_13[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_13 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_13[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_13 = 0;
            int splitedFileNo_tFileOutputDelimited_13 =0;
            int currentRow_tFileOutputDelimited_13 = 0;


            CSVBasicSet_tFileOutputDelimited_13 csvSettings_tFileOutputDelimited_13 = new CSVBasicSet_tFileOutputDelimited_13();
            csvSettings_tFileOutputDelimited_13.setFieldSeparator("^");
            csvSettings_tFileOutputDelimited_13.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_13.setEscapeAndTextEnclosure("\\","`");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_13 != null && directory_tFileOutputDelimited_13.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_13 = new java.io.File(directory_tFileOutputDelimited_13);
                        if(!dir_tFileOutputDelimited_13.exists()) {
                            dir_tFileOutputDelimited_13.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_13 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_13 = new java.io.File(fileName_tFileOutputDelimited_13);
                            if(fileToDelete_tFileOutputDelimited_13.exists()) {
                                fileToDelete_tFileOutputDelimited_13.delete();
                            }
                            CsvWritertFileOutputDelimited_13 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_13, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_13.setSeparator(csvSettings_tFileOutputDelimited_13.getFieldDelim());
                    if(csvSettings_tFileOutputDelimited_13.isUseCRLFRecordDelimiter()) {
                        CsvWritertFileOutputDelimited_13.setLineEnd("\r\n");
                    } else {
                        CsvWritertFileOutputDelimited_13.setLineEnd(""+csvSettings_tFileOutputDelimited_13.getRowDelim());
                    }
                        if(filetFileOutputDelimited_13.length()==0){
                                    headColutFileOutputDelimited_13[0]="createddate";
                                    headColutFileOutputDelimited_13[1]="isdeleted";
                                    headColutFileOutputDelimited_13[2]="name";
                                    headColutFileOutputDelimited_13[3]="systemmodstamp";
                                    headColutFileOutputDelimited_13[4]="noodlecrm__external_id__c";
                                    headColutFileOutputDelimited_13[5]="sfid";
                                    headColutFileOutputDelimited_13[6]="id";
                            CsvWritertFileOutputDelimited_13.writeNext(headColutFileOutputDelimited_13);
                            CsvWritertFileOutputDelimited_13.flush();
                        }
                CsvWritertFileOutputDelimited_13.setEscapeChar(csvSettings_tFileOutputDelimited_13.getEscapeChar());
                CsvWritertFileOutputDelimited_13.setQuoteChar(csvSettings_tFileOutputDelimited_13.getTextEnclosure());
                CsvWritertFileOutputDelimited_13.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_13", CsvWritertFileOutputDelimited_13);
resourceMap.put("nb_line_tFileOutputDelimited_13", nb_line_tFileOutputDelimited_13);

 



/**
 * [tFileOutputDelimited_13 begin ] stop
 */




	
	/**
	 * [tDBOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_13", false);
		start_Hash.put("tDBOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out26");
					}
				
		int tos_count_tDBOutput_13 = 0;
		





String dbschema_tDBOutput_13 = null;
	dbschema_tDBOutput_13 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_13 = null;
if(dbschema_tDBOutput_13 == null || dbschema_tDBOutput_13.trim().length() == 0) {
	tableName_tDBOutput_13 = ("hed__term__c");
} else {
	tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "\".\"" + ("hed__term__c");
}

int nb_line_tDBOutput_13 = 0;
int nb_line_update_tDBOutput_13 = 0;
int nb_line_inserted_tDBOutput_13 = 0;
int nb_line_deleted_tDBOutput_13 = 0;
int nb_line_rejected_tDBOutput_13 = 0;

int deletedCount_tDBOutput_13=0;
int updatedCount_tDBOutput_13=0;
int insertedCount_tDBOutput_13=0;
int rejectedCount_tDBOutput_13=0;

boolean whetherReject_tDBOutput_13 = false;

java.sql.Connection conn_tDBOutput_13 = null;
String dbUser_tDBOutput_13 = null;

	conn_tDBOutput_13 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	


   int batchSize_tDBOutput_13 = 10000;
   int batchSizeCounter_tDBOutput_13=0;

int count_tDBOutput_13=0;
            try (java.sql.Statement stmtClear_tDBOutput_13 = conn_tDBOutput_13.createStatement()) {
                stmtClear_tDBOutput_13.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_13 + "\"");
            }
	    String insert_tDBOutput_13 = "INSERT INTO \"" + tableName_tDBOutput_13 + "\" (\"createddate\",\"isdeleted\",\"name\",\"systemmodstamp\",\"noodlecrm__external_id__c\",\"sfid\",\"id\") VALUES (?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13.prepareStatement(insert_tDBOutput_13);
	    resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);
	    

 



/**
 * [tDBOutput_13 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
out25Struct out25_tmp = new out25Struct();
out26Struct out26_tmp = new out26Struct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tDBInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_13", false);
		start_Hash.put("tDBInput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_13";

	
		int tos_count_tDBInput_13 = 0;
		
	
    
	
		    int nb_line_tDBInput_13 = 0;
		    java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_13 = java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = context.ND_Heroku_Postgresql_Login;
				
				
	final String decryptedPassword_tDBInput_13 = context.ND_Heroku_Postgresql_Password; 
				
				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;
				
				String url_tDBInput_13 = "jdbc:postgresql://" + context.ND_Heroku_Postgresql_Server + ":" + context.ND_Heroku_Postgresql_Port + "/" + context.ND_Heroku_Postgresql_Database + "?" + context.ND_Heroku_Postgresql_AdditionalParams;
				
				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13,dbUser_tDBInput_13,dbPwd_tDBInput_13);
		        
				conn_tDBInput_13.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

		    String dbquery_tDBInput_13 = "SELECT \n  createddate, \n  isdeleted, \n  name, \n  systemmodstamp, \n  noodlecrm__external_id__c, \n  sfid, \n  id\nF"
+"ROM "+context.university_code+".hed__term__c ";
			

            	globalMap.put("tDBInput_13_QUERY",dbquery_tDBInput_13);
		    java.sql.ResultSet rs_tDBInput_13 = null;

		    try {
		    	rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
		    	int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

		    String tmpContent_tDBInput_13 = null;
		    
		    
		    while (rs_tDBInput_13.next()) {
		        nb_line_tDBInput_13++;
		        
							if(colQtyInRs_tDBInput_13 < 1) {
								row13.createddate = null;
							} else {
										
			row13.createddate = routines.system.JDBCUtil.getDate(rs_tDBInput_13, 1);
		                    }
							if(colQtyInRs_tDBInput_13 < 2) {
								row13.isdeleted = null;
							} else {
	                         		
            row13.isdeleted = rs_tDBInput_13.getBoolean(2);
            if(rs_tDBInput_13.wasNull()){
                    row13.isdeleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 3) {
								row13.name = null;
							} else {
	                         		
        	row13.name = routines.system.JDBCUtil.getString(rs_tDBInput_13, 3, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 4) {
								row13.systemmodstamp = null;
							} else {
										
			row13.systemmodstamp = routines.system.JDBCUtil.getDate(rs_tDBInput_13, 4);
		                    }
							if(colQtyInRs_tDBInput_13 < 5) {
								row13.noodlecrm__external_id__c = null;
							} else {
	                         		
        	row13.noodlecrm__external_id__c = routines.system.JDBCUtil.getString(rs_tDBInput_13, 5, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 6) {
								row13.sfid = null;
							} else {
	                         		
        	row13.sfid = routines.system.JDBCUtil.getString(rs_tDBInput_13, 6, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 7) {
								row13.id = 0;
							} else {
		                          
            row13.id = rs_tDBInput_13.getInt(7);
            if(rs_tDBInput_13.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_13 begin ] stop
 */
	
	/**
	 * [tDBInput_13 main ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 


	tos_count_tDBInput_13++;

/**
 * [tDBInput_13 main ] stop
 */
	
	/**
	 * [tDBInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

out25 = null;
out26 = null;


// # Output table : 'out25'
out25_tmp.createddate = row13.createddate ;
out25_tmp.isdeleted = row13.isdeleted ;
out25_tmp.name = row13.name ;
out25_tmp.systemmodstamp = row13.systemmodstamp ;
out25_tmp.noodlecrm__external_id__c = row13.noodlecrm__external_id__c ;
out25_tmp.sfid = row13.sfid ;
out25_tmp.id = row13.id ;
out25 = out25_tmp;

// # Output table : 'out26'
out26_tmp.createddate = row13.createddate ;
out26_tmp.isdeleted = row13.isdeleted ;
out26_tmp.name = row13.name ;
out26_tmp.systemmodstamp = row13.systemmodstamp ;
out26_tmp.noodlecrm__external_id__c = row13.noodlecrm__external_id__c ;
out26_tmp.sfid = row13.sfid ;
out26_tmp.id = row13.id ;
out26 = out26_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "out25"
if(out25 != null) { 



	
	/**
	 * [tFileOutputDelimited_13 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out25");
					}
					


                        String[] rowtFileOutputDelimited_13=new String[7];
                            rowtFileOutputDelimited_13[0]=out25.createddate == null ? null : FormatterUtils.format_Date(out25.createddate, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_13[1]=out25.isdeleted == null ? null : String.valueOf(out25.isdeleted);
                            rowtFileOutputDelimited_13[2]=out25.name == null ? null : out25.name;
                            rowtFileOutputDelimited_13[3]=out25.systemmodstamp == null ? null : FormatterUtils.format_Date(out25.systemmodstamp, "yyyy-MM-dd HH:mm:ss");
                            rowtFileOutputDelimited_13[4]=out25.noodlecrm__external_id__c == null ? null : out25.noodlecrm__external_id__c;
                            rowtFileOutputDelimited_13[5]=out25.sfid == null ? null : out25.sfid;
                            rowtFileOutputDelimited_13[6]=String.valueOf(out25.id);
                nb_line_tFileOutputDelimited_13++;
                resourceMap.put("nb_line_tFileOutputDelimited_13", nb_line_tFileOutputDelimited_13);
                                       CsvWritertFileOutputDelimited_13.writeNext(rowtFileOutputDelimited_13);




 


	tos_count_tFileOutputDelimited_13++;

/**
 * [tFileOutputDelimited_13 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	

 



/**
 * [tFileOutputDelimited_13 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	

 



/**
 * [tFileOutputDelimited_13 process_data_end ] stop
 */

} // End of branch "out25"




// Start of branch "out26"
if(out26 != null) { 



	
	/**
	 * [tDBOutput_13 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out26");
					}
					



        whetherReject_tDBOutput_13 = false;
                    if(out26.createddate != null) {
pstmt_tDBOutput_13.setTimestamp(1, new java.sql.Timestamp(out26.createddate.getTime()));
} else {
pstmt_tDBOutput_13.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(out26.isdeleted == null) {
pstmt_tDBOutput_13.setNull(2, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_13.setBoolean(2, out26.isdeleted);
}

                    if(out26.name == null) {
pstmt_tDBOutput_13.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(3, out26.name);
}

                    if(out26.systemmodstamp != null) {
pstmt_tDBOutput_13.setTimestamp(4, new java.sql.Timestamp(out26.systemmodstamp.getTime()));
} else {
pstmt_tDBOutput_13.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(out26.noodlecrm__external_id__c == null) {
pstmt_tDBOutput_13.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(5, out26.noodlecrm__external_id__c);
}

                    if(out26.sfid == null) {
pstmt_tDBOutput_13.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_13.setString(6, out26.sfid);
}

                    pstmt_tDBOutput_13.setInt(7, out26.id);

			
    		pstmt_tDBOutput_13.addBatch();
    		nb_line_tDBOutput_13++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_13++;
    		  
            if(!whetherReject_tDBOutput_13) {
            }
    			if ((batchSize_tDBOutput_13 > 0) && (batchSize_tDBOutput_13 <= batchSizeCounter_tDBOutput_13)) {
                try {
						int countSum_tDBOutput_13 = 0;
						    
						for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}
				    	
				    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
				    	
            	    	batchSizeCounter_tDBOutput_13 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_13){
				    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
				    	String errormessage_tDBOutput_13;
						if (ne_tDBOutput_13 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
							errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
						}else{
							errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
						}
				    	
				    	int countSum_tDBOutput_13 = 0;
						for(int countEach_tDBOutput_13: e_tDBOutput_13.getUpdateCounts()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
						}
						
				    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
				    	
				    	System.err.println(errormessage_tDBOutput_13);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_13++;

/**
 * [tDBOutput_13 main ] stop
 */
	
	/**
	 * [tDBOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	

 



/**
 * [tDBOutput_13 process_data_end ] stop
 */

} // End of branch "out26"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_13 end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

	}
}finally{
	if (rs_tDBInput_13 != null) {
		rs_tDBInput_13.close();
	}
	if (stmt_tDBInput_13 != null) {
		stmt_tDBInput_13.close();
	}
	if(conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {
		
			conn_tDBInput_13.commit();
			
		
			conn_tDBInput_13.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_13_NB_LINE",nb_line_tDBInput_13);
 

ok_Hash.put("tDBInput_13", true);
end_Hash.put("tDBInput_13", System.currentTimeMillis());




/**
 * [tDBInput_13 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_13 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_13!=null) {
				    	CsvWritertFileOutputDelimited_13.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_13_NB_LINE",nb_line_tFileOutputDelimited_13);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_13", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out25");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_13", true);
end_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk137", 0, "ok");
				}
				tFileArchive_13Process(globalMap);



/**
 * [tFileOutputDelimited_13 end ] stop
 */




	
	/**
	 * [tDBOutput_13 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



	    try {
				int countSum_tDBOutput_13 = 0;
				if (pstmt_tDBOutput_13 != null && batchSizeCounter_tDBOutput_13 > 0) {
						
					for(int countEach_tDBOutput_13: pstmt_tDBOutput_13.executeBatch()) {
						countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_13){
	    	java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),sqle_tDBOutput_13=null;
	    	String errormessage_tDBOutput_13;
			if (ne_tDBOutput_13 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_13 = new java.sql.SQLException(e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(), ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
				errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
			}else{
				errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
			}
	    	
	    	int countSum_tDBOutput_13 = 0;
			for(int countEach_tDBOutput_13: e_tDBOutput_13.getUpdateCounts()) {
				countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0 : countEach_tDBOutput_13);
			}
			
	    		insertedCount_tDBOutput_13 += countSum_tDBOutput_13;
	    	
	    	System.err.println(errormessage_tDBOutput_13);
	    	
		}
	    
        if(pstmt_tDBOutput_13 != null) {
        		
            pstmt_tDBOutput_13.close();
            resourceMap.remove("pstmt_tDBOutput_13");
        }
    resourceMap.put("statementClosed_tDBOutput_13", true);

	nb_line_deleted_tDBOutput_13=nb_line_deleted_tDBOutput_13+ deletedCount_tDBOutput_13;
	nb_line_update_tDBOutput_13=nb_line_update_tDBOutput_13 + updatedCount_tDBOutput_13;
	nb_line_inserted_tDBOutput_13=nb_line_inserted_tDBOutput_13 + insertedCount_tDBOutput_13;
	nb_line_rejected_tDBOutput_13=nb_line_rejected_tDBOutput_13 + rejectedCount_tDBOutput_13;
	
        globalMap.put("tDBOutput_13_NB_LINE",nb_line_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_UPDATED",nb_line_update_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_DELETED",nb_line_deleted_tDBOutput_13);
        globalMap.put("tDBOutput_13_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_13);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out26");
			  	}
			  	
 

ok_Hash.put("tDBOutput_13", true);
end_Hash.put("tDBOutput_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk140", 0, "ok");
				}
				tJava_51Process(globalMap);



/**
 * [tDBOutput_13 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_13 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	


		if(resourceMap.get("finish_tFileOutputDelimited_13") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_13 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_13");
					
						if(CsvWritertFileOutputDelimited_13!=null) {
					    	CsvWritertFileOutputDelimited_13.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_13 finally ] stop
 */




	
	/**
	 * [tDBOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_13";

	



    if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
                if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_13")) != null) {
                    pstmtToClose_tDBOutput_13.close();
                }
    }
 



/**
 * [tDBOutput_13 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_13", false);
		start_Hash.put("tFileArchive_13", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_13";

	
		int tos_count_tFileArchive_13 = 0;
		

 



/**
 * [tFileArchive_13 begin ] stop
 */
	
	/**
	 * [tFileArchive_13 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_13";

	

	

		String sourceFile_tFileArchive_13 = context.staging_S3_dir + "hed__term__c.csv";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_13), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_13 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_13 = context.staging_S3_dir + "hed__term__c.csv.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_13 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_13, zipFile_tFileArchive_13);
    zip_tFileArchive_13.setOverwriteExistTargetZip(true);
	zip_tFileArchive_13.setMakeTargetDir(true);
	zip_tFileArchive_13.setCompressLevel(9);
	zip_tFileArchive_13.setArchiveFormat("gzip");
	zip_tFileArchive_13.setAllFiles(true);
	
	
		zip_tFileArchive_13.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_13_ARCHIVE_FILEPATH",zipFile_tFileArchive_13);
   
   globalMap.put("tFileArchive_13_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_13).getName());

   zip_tFileArchive_13.doZip();


 


	tos_count_tFileArchive_13++;

/**
 * [tFileArchive_13 main ] stop
 */
	
	/**
	 * [tFileArchive_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_13";

	

 



/**
 * [tFileArchive_13 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_13";

	

 



/**
 * [tFileArchive_13 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_13 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_13";

	

 

ok_Hash.put("tFileArchive_13", true);
end_Hash.put("tFileArchive_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk138", 0, "ok");
				}
				tS3Put_13Process(globalMap);



/**
 * [tFileArchive_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_13 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_13";

	

 



/**
 * [tFileArchive_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_13_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_13", false);
		start_Hash.put("tS3Put_13", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_13";

	
		int tos_count_tS3Put_13 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_13 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_13 = context.nd_s3_data_lake_path_sfdc +"/hed__term/latest/university_id="+context.university_code+"/hed__term__c.csv.gz";
	
	int partSizeInBytes_tS3Put_13 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_13 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_13 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_13 = context.staging_S3_dir + "hed__term__c.csv.gz";
	
	boolean useStream_tS3Put_13 = false;
	java.io.InputStream uploadStream_tS3Put_13 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_13 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_13 instanceof String){
		    useStream_tS3Put_13 = false;
		}else if(fileOrStream_tS3Put_13 instanceof java.io.InputStream){
		    useStream_tS3Put_13 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_13 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_13) {
				java.io.File inputFile_tS3Put_13 = new java.io.File((String)fileOrStream_tS3Put_13);
				
				long multipart_upload_threshold_tS3Put_13 = 5 * 1024 * 1024;
				
    		tm_tS3Put_13 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_13)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_13)
    			.withS3Client(conn_tS3Put_13)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_13 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_13, inputFile_tS3Put_13).withMetadata(objectMetadata_tS3Put_13);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_13 = tm_tS3Put_13.upload(putRequest_tS3Put_13);
  		
  			upload_tS3Put_13.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_13 = ((java.io.InputStream)fileOrStream_tS3Put_13);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_13 = new S3StreamUtil();
    		byte[] buffer_tS3Put_13 = new byte[partSizeInBytes_tS3Put_13];
    		sourceStream_tS3Put_13.read(buffer_tS3Put_13);
    		long curPartSize_tS3Put_13 = streamUtil_tS3Put_13.getLength(buffer_tS3Put_13);
    		boolean multiUpload_tS3Put_13 = curPartSize_tS3Put_13 == partSizeInBytes_tS3Put_13;
    		
    		if(!multiUpload_tS3Put_13) {
    				objectMetadata_tS3Put_13.setContentLength(curPartSize_tS3Put_13);
    				uploadStream_tS3Put_13 = new java.io.ByteArrayInputStream(buffer_tS3Put_13,0,Long.valueOf(curPartSize_tS3Put_13).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_13 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_13, uploadStream_tS3Put_13, objectMetadata_tS3Put_13);
			
    				
    				

    				
    				conn_tS3Put_13.putObject(putRequest_tS3Put_13);
    		} else {
    				uploadStream_tS3Put_13 = new java.io.ByteArrayInputStream(buffer_tS3Put_13);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_13 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_13 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_13, objectMetadata_tS3Put_13);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_13 = conn_tS3Put_13.initiateMultipartUpload(putRequest_tS3Put_13);
      			String uploadId_tS3Put_13 = initResponse_tS3Put_13.getUploadId();
      			int partNumber_tS3Put_13 = 1;
      			boolean streamHasNext_tS3Put_13 = true;
      			byte[] probeAvailability_tS3Put_13 = new byte[1];
				try {
					while (streamHasNext_tS3Put_13) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_13 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_13)
						.withUploadId(uploadId_tS3Put_13)
                    	.withPartNumber(partNumber_tS3Put_13)
						.withPartSize(curPartSize_tS3Put_13);
            		    uploadRequest_tS3Put_13.setInputStream(uploadStream_tS3Put_13);
            		    streamHasNext_tS3Put_13 = sourceStream_tS3Put_13.read(probeAvailability_tS3Put_13) != -1;
            		    if(!streamHasNext_tS3Put_13){
                    	    uploadRequest_tS3Put_13.setLastPart(true);
                    	}

                		partTags_tS3Put_13.add(conn_tS3Put_13.uploadPart(uploadRequest_tS3Put_13).getPartETag());
                  	    partNumber_tS3Put_13++;

          		     	if(uploadStream_tS3Put_13!=null){
      		         			uploadStream_tS3Put_13.close();
          		     	}
          		     	buffer_tS3Put_13 = new byte[partSizeInBytes_tS3Put_13];
          		     	sourceStream_tS3Put_13.read(buffer_tS3Put_13,1,partSizeInBytes_tS3Put_13-1);
          		     	buffer_tS3Put_13[0] = probeAvailability_tS3Put_13[0];
          		     	probeAvailability_tS3Put_13 = new byte[1];
          		     	curPartSize_tS3Put_13 = streamUtil_tS3Put_13.getLength(buffer_tS3Put_13);
          		     	uploadStream_tS3Put_13 = new java.io.ByteArrayInputStream(buffer_tS3Put_13);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_13 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_13,
                        uploadId_tS3Put_13, partTags_tS3Put_13);
            		conn_tS3Put_13.completeMultipartUpload(compRequest_tS3Put_13);
            } catch (java.lang.Exception uploadException_tS3Put_13) {
  							conn_tS3Put_13.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_13, uploadId_tS3Put_13));
    						throw uploadException_tS3Put_13;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_13){
		
			throw(e_tS3Put_13);
		
	}finally{
		if(useStream_tS3Put_13 && uploadStream_tS3Put_13!=null){
    	uploadStream_tS3Put_13.close();
    }
    
    if(tm_tS3Put_13 != null){
        tm_tS3Put_13.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_13 begin ] stop
 */
	
	/**
	 * [tS3Put_13 main ] start
	 */

	

	
	
	currentComponent="tS3Put_13";

	

 


	tos_count_tS3Put_13++;

/**
 * [tS3Put_13 main ] stop
 */
	
	/**
	 * [tS3Put_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_13";

	

 



/**
 * [tS3Put_13 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_13";

	

 



/**
 * [tS3Put_13 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_13 end ] start
	 */

	

	
	
	currentComponent="tS3Put_13";

	

 

ok_Hash.put("tS3Put_13", true);
end_Hash.put("tS3Put_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk139", 0, "ok");
				}
				tJava_52Process(globalMap);



/**
 * [tS3Put_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_13 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_13";

	

 



/**
 * [tS3Put_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_13_SUBPROCESS_STATE", 1);
	}
	

public void tJava_52Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_52_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_52 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_52", false);
		start_Hash.put("tJava_52", System.currentTimeMillis());
		
	
	currentComponent="tJava_52";

	
		int tos_count_tJava_52 = 0;
		


System.out.println("Step 4: Completed Uploading Latest Run File To Latest Folder");


 



/**
 * [tJava_52 begin ] stop
 */
	
	/**
	 * [tJava_52 main ] start
	 */

	

	
	
	currentComponent="tJava_52";

	

 


	tos_count_tJava_52++;

/**
 * [tJava_52 main ] stop
 */
	
	/**
	 * [tJava_52 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_52";

	

 



/**
 * [tJava_52 process_data_begin ] stop
 */
	
	/**
	 * [tJava_52 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_52";

	

 



/**
 * [tJava_52 process_data_end ] stop
 */
	
	/**
	 * [tJava_52 end ] start
	 */

	

	
	
	currentComponent="tJava_52";

	

 

ok_Hash.put("tJava_52", true);
end_Hash.put("tJava_52", System.currentTimeMillis());




/**
 * [tJava_52 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_52 finally ] start
	 */

	

	
	
	currentComponent="tJava_52";

	

 



/**
 * [tJava_52 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_52_SUBPROCESS_STATE", 1);
	}
	

public void tJava_51Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_51_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_51 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_51", false);
		start_Hash.put("tJava_51", System.currentTimeMillis());
		
	
	currentComponent="tJava_51";

	
		int tos_count_tJava_51 = 0;
		


System.out.println("Step 5: Completed Inserting To Pond Table with : "+  ((Integer)globalMap.get("tDBOutput_13_NB_LINE_INSERTED"))+ " Records");
System.out.println("************************************************************");
 



/**
 * [tJava_51 begin ] stop
 */
	
	/**
	 * [tJava_51 main ] start
	 */

	

	
	
	currentComponent="tJava_51";

	

 


	tos_count_tJava_51++;

/**
 * [tJava_51 main ] stop
 */
	
	/**
	 * [tJava_51 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_51";

	

 



/**
 * [tJava_51 process_data_begin ] stop
 */
	
	/**
	 * [tJava_51 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_51";

	

 



/**
 * [tJava_51 process_data_end ] stop
 */
	
	/**
	 * [tJava_51 end ] start
	 */

	

	
	
	currentComponent="tJava_51";

	

 

ok_Hash.put("tJava_51", true);
end_Hash.put("tJava_51", System.currentTimeMillis());




/**
 * [tJava_51 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_51 finally ] start
	 */

	

	
	
	currentComponent="tJava_51";

	

 



/**
 * [tJava_51 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_51_SUBPROCESS_STATE", 1);
	}
	

public void tS3Copy_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Copy_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Copy_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Copy_3", false);
		start_Hash.put("tS3Copy_3", System.currentTimeMillis());
		
	
	currentComponent="tS3Copy_3";

	
		int tos_count_tS3Copy_3 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Copy_3 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		
		
		long partSizeInBytes_tS3Copy_3 = 100 * 1024 * 1024;
		long maxBytes4SingleCopyCall_tS3Copy_3 = 5 * 1024 * 1024 * 1024;//5GB
		com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Copy_3 = null;
		
		
		final String from_bucket_tS3Copy_3 = context.nd_s3_bucket_QA_sfdc;
		final String from_key_tS3Copy_3 = context.nd_s3_data_lake_path_sfdc+"/account/latest/university_id="+context.university_code+"/account.csv.gz";
		final String to_bucket_tS3Copy_3 = context.nd_s3_bucket_QA_sfdc; 
		final String to_key_tS3Copy_3 = context.nd_s3_data_lake_path_sfdc+"/account/archive/university_id="+context.university_code+"/account_"+TalendDate.formatDate("yyyyMMddhhmm",TalendDate.getCurrentDate())+".csv.gz";
		
		//get the source metadata information
		com.amazonaws.services.s3.model.GetObjectMetadataRequest metadataRequest_tS3Copy_3 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest(from_bucket_tS3Copy_3, from_key_tS3Copy_3);
    com.amazonaws.services.s3.model.ObjectMetadata metadataResult_tS3Copy_3 = conn_tS3Copy_3.getObjectMetadata(metadataRequest_tS3Copy_3);
    long objectSize_tS3Copy_3 = metadataResult_tS3Copy_3.getContentLength();
    
    boolean multiUpload_tS3Copy_3 = objectSize_tS3Copy_3 > maxBytes4SingleCopyCall_tS3Copy_3;
    
    if(!multiUpload_tS3Copy_3) {
    		com.amazonaws.services.s3.model.CopyObjectRequest putRequest_tS3Copy_3 = new com.amazonaws.services.s3.model.CopyObjectRequest(from_bucket_tS3Copy_3, from_key_tS3Copy_3, to_bucket_tS3Copy_3, to_key_tS3Copy_3);
    		if(objectMetadata_tS3Copy_3 != null) {
    				putRequest_tS3Copy_3.setNewObjectMetadata(objectMetadata_tS3Copy_3);
    		}
    		
    		

    		
    		conn_tS3Copy_3.copyObject(putRequest_tS3Copy_3);
		} else {
						
						java.util.Map<String,String> userMetadata_tS3Copy_3 = metadataResult_tS3Copy_3.getUserMetadata();
						if((userMetadata_tS3Copy_3!=null) && userMetadata_tS3Copy_3.get("x-amz-iv")!=null) {
								throw new RuntimeException("the metadata key : \"x-amz-iv\" exists in the current object metadata, its value is important for client encrypt with KMS, which can't be copied as s3 service limit it");
						}
						
    				com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Copy_3 = null;
    				if(objectMetadata_tS3Copy_3 != null) {
    						putRequest_tS3Copy_3 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_3, to_key_tS3Copy_3, objectMetadata_tS3Copy_3);
    				} else {
    						//even pass the source object metadata, some metadata will change too like "x-amz-iv"
    						putRequest_tS3Copy_3 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(to_bucket_tS3Copy_3, to_key_tS3Copy_3, metadataResult_tS3Copy_3);
    				}
    				
    				

    				
            com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResult_tS3Copy_3 = conn_tS3Copy_3.initiateMultipartUpload(putRequest_tS3Copy_3);
            
            long bytePosition_tS3Copy_3 = 0;
            int partNum_tS3Copy_3 = 1;
            
            java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Copy_3 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
            
      	try {
            while (bytePosition_tS3Copy_3 < objectSize_tS3Copy_3) {
                long lastByte_tS3Copy_3 = java.lang.Math.min(bytePosition_tS3Copy_3 + partSizeInBytes_tS3Copy_3 - 1, objectSize_tS3Copy_3 - 1);
                
                com.amazonaws.services.s3.model.CopyPartRequest copyPartRequest_tS3Copy_3 = new com.amazonaws.services.s3.model.CopyPartRequest()
                        .withSourceBucketName(from_bucket_tS3Copy_3)
                        .withSourceKey(from_key_tS3Copy_3)
                        .withDestinationBucketName(to_bucket_tS3Copy_3)
                        .withDestinationKey(to_key_tS3Copy_3)
                        .withUploadId(initResult_tS3Copy_3.getUploadId())
                        .withFirstByte(bytePosition_tS3Copy_3)
                        .withLastByte(lastByte_tS3Copy_3)
                        .withPartNumber(partNum_tS3Copy_3++);
                partTags_tS3Copy_3.add(conn_tS3Copy_3.copyPart(copyPartRequest_tS3Copy_3).getPartETag());
                bytePosition_tS3Copy_3 += partSizeInBytes_tS3Copy_3;
            }
    
            com.amazonaws.services.s3.model.CompleteMultipartUploadRequest completeRequest_tS3Copy_3 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(
                                                                       	to_bucket_tS3Copy_3,
                                                                        to_key_tS3Copy_3, 
                                                                        initResult_tS3Copy_3.getUploadId(),
                                                                        partTags_tS3Copy_3);
            conn_tS3Copy_3.completeMultipartUpload(completeRequest_tS3Copy_3);
    		} catch (java.lang.Exception uploadException_tS3Copy_3) {
    				conn_tS3Copy_3.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(to_bucket_tS3Copy_3, to_key_tS3Copy_3, initResult_tS3Copy_3.getUploadId()));
    				throw uploadException_tS3Copy_3;
    		}
    }
    
		
	}catch(java.lang.Exception e_tS3Copy_3){
		
			System.err.println(e_tS3Copy_3.getMessage());
		
	}
	        

 



/**
 * [tS3Copy_3 begin ] stop
 */
	
	/**
	 * [tS3Copy_3 main ] start
	 */

	

	
	
	currentComponent="tS3Copy_3";

	

 


	tos_count_tS3Copy_3++;

/**
 * [tS3Copy_3 main ] stop
 */
	
	/**
	 * [tS3Copy_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Copy_3";

	

 



/**
 * [tS3Copy_3 process_data_begin ] stop
 */
	
	/**
	 * [tS3Copy_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Copy_3";

	

 



/**
 * [tS3Copy_3 process_data_end ] stop
 */
	
	/**
	 * [tS3Copy_3 end ] start
	 */

	

	
	
	currentComponent="tS3Copy_3";

	

 

ok_Hash.put("tS3Copy_3", true);
end_Hash.put("tS3Copy_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk23", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tS3Copy_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Copy_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tS3Copy_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Copy_3 finally ] start
	 */

	

	
	
	currentComponent="tS3Copy_3";

	

 



/**
 * [tS3Copy_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Copy_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


System.out.println("Step 1: Running For Account Object");
System.out.println("Step 2: Copied Previous Run File To Archive");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk24", 0, "ok");
				}
				tS3Delete_3Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	

public void tS3Delete_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Delete_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Delete_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Delete_3", false);
		start_Hash.put("tS3Delete_3", System.currentTimeMillis());
		
	
	currentComponent="tS3Delete_3";

	
		int tos_count_tS3Delete_3 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Delete_3 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	try{
		String key_tS3Delete_3 = context.nd_s3_data_lake_path_sfdc +"/account/latest/university_id="+context.university_code+"/account.csv.gz";
		if(key_tS3Delete_3!=null && key_tS3Delete_3.trim().length()>0){
			
			conn_tS3Delete_3.deleteObject(context.nd_s3_bucket_QA_sfdc, key_tS3Delete_3);
			
		}else{
			throw(new RuntimeException("Please set key!"));
		}
	}catch(java.lang.Exception e_tS3Delete_3){
		
			System.err.println(e_tS3Delete_3.getMessage());
		
	}
	
 



/**
 * [tS3Delete_3 begin ] stop
 */
	
	/**
	 * [tS3Delete_3 main ] start
	 */

	

	
	
	currentComponent="tS3Delete_3";

	

 


	tos_count_tS3Delete_3++;

/**
 * [tS3Delete_3 main ] stop
 */
	
	/**
	 * [tS3Delete_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Delete_3";

	

 



/**
 * [tS3Delete_3 process_data_begin ] stop
 */
	
	/**
	 * [tS3Delete_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Delete_3";

	

 



/**
 * [tS3Delete_3 process_data_end ] stop
 */
	
	/**
	 * [tS3Delete_3 end ] start
	 */

	

	
	
	currentComponent="tS3Delete_3";

	

 

ok_Hash.put("tS3Delete_3", true);
end_Hash.put("tS3Delete_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk25", 0, "ok");
				}
				tJava_11Process(globalMap);



/**
 * [tS3Delete_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Delete_3 finally ] start
	 */

	

	
	
	currentComponent="tS3Delete_3";

	

 



/**
 * [tS3Delete_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Delete_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_11", false);
		start_Hash.put("tJava_11", System.currentTimeMillis());
		
	
	currentComponent="tJava_11";

	
		int tos_count_tJava_11 = 0;
		


System.out.println("Step 3: Deleted Previous Run File From Latest Folder");
System.out.println("Step 4: Started Getting Data From Heroku PoatgreSQL To Latest Folder");
 



/**
 * [tJava_11 begin ] stop
 */
	
	/**
	 * [tJava_11 main ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 


	tos_count_tJava_11++;

/**
 * [tJava_11 main ] stop
 */
	
	/**
	 * [tJava_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 process_data_begin ] stop
 */
	
	/**
	 * [tJava_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 process_data_end ] stop
 */
	
	/**
	 * [tJava_11 end ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 

ok_Hash.put("tJava_11", true);
end_Hash.put("tJava_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk26", 0, "ok");
				}
				tDBInput_1Process(globalMap);



/**
 * [tJava_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_11 finally ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "prod";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final noodle_sfdc_s3_sync_job_how noodle_sfdc_s3_sync_job_howClass = new noodle_sfdc_s3_sync_job_how();

        int exitCode = noodle_sfdc_s3_sync_job_howClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = noodle_sfdc_s3_sync_job_how.class.getClassLoader().getResourceAsStream("t_731/noodle_sfdc_s3_sync_job_how_0_7/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = noodle_sfdc_s3_sync_job_how.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("staging_S3_dir", "id_String");
                            context.staging_S3_dir=(String) context.getProperty("staging_S3_dir");
                        context.setContextType("university_code", "id_String");
                            context.university_code=(String) context.getProperty("university_code");
                        context.setContextType("new2", "id_String");
                            context.new2=(String) context.getProperty("new2");
                        context.setContextType("email_default_from", "id_String");
                            context.email_default_from=(String) context.getProperty("email_default_from");
                        context.setContextType("email_default_to", "id_String");
                            context.email_default_to=(String) context.getProperty("email_default_to");
                        context.setContextType("email_host", "id_String");
                            context.email_host=(String) context.getProperty("email_host");
                        context.setContextType("email_port", "id_String");
                            context.email_port=(String) context.getProperty("email_port");
                        context.setContextType("email_sender_name", "id_String");
                            context.email_sender_name=(String) context.getProperty("email_sender_name");
                        context.setContextType("email_subject_stem", "id_String");
                            context.email_subject_stem=(String) context.getProperty("email_subject_stem");
                        context.setContextType("ND_Heroku_Postgresql_AdditionalParams", "id_String");
                            context.ND_Heroku_Postgresql_AdditionalParams=(String) context.getProperty("ND_Heroku_Postgresql_AdditionalParams");
                        context.setContextType("ND_Heroku_Postgresql_Database", "id_String");
                            context.ND_Heroku_Postgresql_Database=(String) context.getProperty("ND_Heroku_Postgresql_Database");
                        context.setContextType("ND_Heroku_Postgresql_Login", "id_String");
                            context.ND_Heroku_Postgresql_Login=(String) context.getProperty("ND_Heroku_Postgresql_Login");
                        context.setContextType("ND_Heroku_Postgresql_Password", "id_Password");
                            String pwd_ND_Heroku_Postgresql_Password_value = context.getProperty("ND_Heroku_Postgresql_Password");
                            context.ND_Heroku_Postgresql_Password = null;
                            if(pwd_ND_Heroku_Postgresql_Password_value!=null) {
                                if(context_param.containsKey("ND_Heroku_Postgresql_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.ND_Heroku_Postgresql_Password = pwd_ND_Heroku_Postgresql_Password_value;
                                } else if (!pwd_ND_Heroku_Postgresql_Password_value.isEmpty()) {
                                    try {
                                        context.ND_Heroku_Postgresql_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_ND_Heroku_Postgresql_Password_value);
                                        context.put("ND_Heroku_Postgresql_Password",context.ND_Heroku_Postgresql_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("ND_Heroku_Postgresql_Port", "id_String");
                            context.ND_Heroku_Postgresql_Port=(String) context.getProperty("ND_Heroku_Postgresql_Port");
                        context.setContextType("ND_Heroku_Postgresql_Schema", "id_String");
                            context.ND_Heroku_Postgresql_Schema=(String) context.getProperty("ND_Heroku_Postgresql_Schema");
                        context.setContextType("ND_Heroku_Postgresql_Server", "id_String");
                            context.ND_Heroku_Postgresql_Server=(String) context.getProperty("ND_Heroku_Postgresql_Server");
                        context.setContextType("ND_PostgreSQL_POND_AdditionalParams", "id_String");
                            context.ND_PostgreSQL_POND_AdditionalParams=(String) context.getProperty("ND_PostgreSQL_POND_AdditionalParams");
                        context.setContextType("ND_PostgreSQL_POND_Database", "id_String");
                            context.ND_PostgreSQL_POND_Database=(String) context.getProperty("ND_PostgreSQL_POND_Database");
                        context.setContextType("ND_PostgreSQL_POND_Login", "id_String");
                            context.ND_PostgreSQL_POND_Login=(String) context.getProperty("ND_PostgreSQL_POND_Login");
                        context.setContextType("ND_PostgreSQL_POND_Password", "id_Password");
                            String pwd_ND_PostgreSQL_POND_Password_value = context.getProperty("ND_PostgreSQL_POND_Password");
                            context.ND_PostgreSQL_POND_Password = null;
                            if(pwd_ND_PostgreSQL_POND_Password_value!=null) {
                                if(context_param.containsKey("ND_PostgreSQL_POND_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.ND_PostgreSQL_POND_Password = pwd_ND_PostgreSQL_POND_Password_value;
                                } else if (!pwd_ND_PostgreSQL_POND_Password_value.isEmpty()) {
                                    try {
                                        context.ND_PostgreSQL_POND_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_ND_PostgreSQL_POND_Password_value);
                                        context.put("ND_PostgreSQL_POND_Password",context.ND_PostgreSQL_POND_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("ND_PostgreSQL_POND_Port", "id_String");
                            context.ND_PostgreSQL_POND_Port=(String) context.getProperty("ND_PostgreSQL_POND_Port");
                        context.setContextType("ND_PostgreSQL_POND_Schema", "id_String");
                            context.ND_PostgreSQL_POND_Schema=(String) context.getProperty("ND_PostgreSQL_POND_Schema");
                        context.setContextType("ND_PostgreSQL_POND_Server", "id_String");
                            context.ND_PostgreSQL_POND_Server=(String) context.getProperty("ND_PostgreSQL_POND_Server");
                        context.setContextType("nd_s3_bucket_QA_sfdc", "id_String");
                            context.nd_s3_bucket_QA_sfdc=(String) context.getProperty("nd_s3_bucket_QA_sfdc");
                        context.setContextType("nd_s3_data_lake_path_sfdc", "id_String");
                            context.nd_s3_data_lake_path_sfdc=(String) context.getProperty("nd_s3_data_lake_path_sfdc");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("staging_S3_dir")) {
                context.staging_S3_dir = (String) parentContextMap.get("staging_S3_dir");
            }if (parentContextMap.containsKey("university_code")) {
                context.university_code = (String) parentContextMap.get("university_code");
            }if (parentContextMap.containsKey("new2")) {
                context.new2 = (String) parentContextMap.get("new2");
            }if (parentContextMap.containsKey("email_default_from")) {
                context.email_default_from = (String) parentContextMap.get("email_default_from");
            }if (parentContextMap.containsKey("email_default_to")) {
                context.email_default_to = (String) parentContextMap.get("email_default_to");
            }if (parentContextMap.containsKey("email_host")) {
                context.email_host = (String) parentContextMap.get("email_host");
            }if (parentContextMap.containsKey("email_port")) {
                context.email_port = (String) parentContextMap.get("email_port");
            }if (parentContextMap.containsKey("email_sender_name")) {
                context.email_sender_name = (String) parentContextMap.get("email_sender_name");
            }if (parentContextMap.containsKey("email_subject_stem")) {
                context.email_subject_stem = (String) parentContextMap.get("email_subject_stem");
            }if (parentContextMap.containsKey("ND_Heroku_Postgresql_AdditionalParams")) {
                context.ND_Heroku_Postgresql_AdditionalParams = (String) parentContextMap.get("ND_Heroku_Postgresql_AdditionalParams");
            }if (parentContextMap.containsKey("ND_Heroku_Postgresql_Database")) {
                context.ND_Heroku_Postgresql_Database = (String) parentContextMap.get("ND_Heroku_Postgresql_Database");
            }if (parentContextMap.containsKey("ND_Heroku_Postgresql_Login")) {
                context.ND_Heroku_Postgresql_Login = (String) parentContextMap.get("ND_Heroku_Postgresql_Login");
            }if (parentContextMap.containsKey("ND_Heroku_Postgresql_Password")) {
                context.ND_Heroku_Postgresql_Password = (java.lang.String) parentContextMap.get("ND_Heroku_Postgresql_Password");
            }if (parentContextMap.containsKey("ND_Heroku_Postgresql_Port")) {
                context.ND_Heroku_Postgresql_Port = (String) parentContextMap.get("ND_Heroku_Postgresql_Port");
            }if (parentContextMap.containsKey("ND_Heroku_Postgresql_Schema")) {
                context.ND_Heroku_Postgresql_Schema = (String) parentContextMap.get("ND_Heroku_Postgresql_Schema");
            }if (parentContextMap.containsKey("ND_Heroku_Postgresql_Server")) {
                context.ND_Heroku_Postgresql_Server = (String) parentContextMap.get("ND_Heroku_Postgresql_Server");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_AdditionalParams")) {
                context.ND_PostgreSQL_POND_AdditionalParams = (String) parentContextMap.get("ND_PostgreSQL_POND_AdditionalParams");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_Database")) {
                context.ND_PostgreSQL_POND_Database = (String) parentContextMap.get("ND_PostgreSQL_POND_Database");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_Login")) {
                context.ND_PostgreSQL_POND_Login = (String) parentContextMap.get("ND_PostgreSQL_POND_Login");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_Password")) {
                context.ND_PostgreSQL_POND_Password = (java.lang.String) parentContextMap.get("ND_PostgreSQL_POND_Password");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_Port")) {
                context.ND_PostgreSQL_POND_Port = (String) parentContextMap.get("ND_PostgreSQL_POND_Port");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_Schema")) {
                context.ND_PostgreSQL_POND_Schema = (String) parentContextMap.get("ND_PostgreSQL_POND_Schema");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_Server")) {
                context.ND_PostgreSQL_POND_Server = (String) parentContextMap.get("ND_PostgreSQL_POND_Server");
            }if (parentContextMap.containsKey("nd_s3_bucket_QA_sfdc")) {
                context.nd_s3_bucket_QA_sfdc = (String) parentContextMap.get("nd_s3_bucket_QA_sfdc");
            }if (parentContextMap.containsKey("nd_s3_data_lake_path_sfdc")) {
                context.nd_s3_data_lake_path_sfdc = (String) parentContextMap.get("nd_s3_data_lake_path_sfdc");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("ND_Heroku_Postgresql_Password");
			parametersToEncrypt.add("ND_PostgreSQL_POND_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tS3Copy_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tS3Copy_3) {
globalMap.put("tS3Copy_3_SUBPROCESS_STATE", -1);

e_tS3Copy_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : noodle_sfdc_s3_sync_job_how");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();
    closeS3Connections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }




    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));





        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     3109796 characters generated by Talend Open Studio for Data Integration 
 *     on the January 27, 2021 11:22:57 AM PST
 ************************************************************************************************/