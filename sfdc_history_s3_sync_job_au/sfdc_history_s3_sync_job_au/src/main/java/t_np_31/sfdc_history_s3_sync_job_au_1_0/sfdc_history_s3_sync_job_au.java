// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package t_np_31.sfdc_history_s3_sync_job_au_1_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_2
	import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Properties;
import javax.activation.*;

	//the import part of tJavaRow_2
	import java.util.concurrent.ConcurrentHashMap;

	//the import part of tJava_1
	import java.sql.Connection;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

	//the import part of tJava_42
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_9
	//import java.util.List;

	//the import part of tJava_10
	//import java.util.List;

	//the import part of tJava_11
	//import java.util.List;

	//the import part of tJava_12
	//import java.util.List;

	//the import part of tJava_13
	//import java.util.List;

	//the import part of tJava_14
	//import java.util.List;

	//the import part of tJava_15
	//import java.util.List;

	//the import part of tJava_16
	//import java.util.List;

	//the import part of tJava_17
	//import java.util.List;

	//the import part of tJava_65
	//import java.util.List;

	//the import part of tJava_18
	//import java.util.List;

	//the import part of tJava_19
	//import java.util.List;

	//the import part of tJava_64
	//import java.util.List;

	//the import part of tJava_63
	//import java.util.List;

	//the import part of tJava_62
	//import java.util.List;

	//the import part of tJava_61
	//import java.util.List;

	//the import part of tJava_60
	//import java.util.List;

	//the import part of tJava_59
	//import java.util.List;

	//the import part of tJava_58
	//import java.util.List;

	//the import part of tJava_57
	//import java.util.List;

	//the import part of tJava_56
	//import java.util.List;

	//the import part of tJava_55
	//import java.util.List;

	//the import part of tJava_54
	//import java.util.List;

	//the import part of tJava_53
	//import java.util.List;

	//the import part of tJava_49
	//import java.util.List;

	//the import part of tJava_48
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: sfdc_history_s3_sync_job_au Purpose: <br>
 * Description: 0.2 : Updated task logic for description
0.3 : Added 3 new tables
0.4 : added all History Object
1.0 : History Job <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class sfdc_history_s3_sync_job_au implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(university_code != null){
				
					this.setProperty("university_code", university_code.toString());
				
			}
			
			if(status != null){
				
					this.setProperty("status", status.toString());
				
			}
			
			if(description != null){
				
					this.setProperty("description", description.toString());
				
			}
			
			if(filter_date != null){
				
					this.setProperty("filter_date", filter_date.toString());
				
			}
			
			if(sfdc_conn_QueryCondition != null){
				
					this.setProperty("sfdc_conn_QueryCondition", sfdc_conn_QueryCondition.toString());
				
			}
			
			if(staging_S3_dir != null){
				
					this.setProperty("staging_S3_dir", staging_S3_dir.toString());
				
			}
			
			if(sfdc_subject_user != null){
				
					this.setProperty("sfdc_subject_user", sfdc_subject_user.toString());
				
			}
			
			if(sfdc_issuer_token != null){
				
					this.setProperty("sfdc_issuer_token", sfdc_issuer_token.toString());
				
			}
			
			if(sfdc_keystore_password != null){
				
					this.setProperty("sfdc_keystore_password", sfdc_keystore_password.toString());
				
			}
			
			if(nd_aws_access_key != null){
				
					this.setProperty("nd_aws_access_key", nd_aws_access_key.toString());
				
			}
			
			if(nd_aws_secret_key != null){
				
					this.setProperty("nd_aws_secret_key", nd_aws_secret_key.toString());
				
			}
			
			if(ND_PostgreSQL_POND_AdditionalParams != null){
				
					this.setProperty("ND_PostgreSQL_POND_AdditionalParams", ND_PostgreSQL_POND_AdditionalParams.toString());
				
			}
			
			if(ND_PostgreSQL_POND_Database != null){
				
					this.setProperty("ND_PostgreSQL_POND_Database", ND_PostgreSQL_POND_Database.toString());
				
			}
			
			if(ND_PostgreSQL_POND_Login != null){
				
					this.setProperty("ND_PostgreSQL_POND_Login", ND_PostgreSQL_POND_Login.toString());
				
			}
			
			if(ND_PostgreSQL_POND_Password != null){
				
					this.setProperty("ND_PostgreSQL_POND_Password", ND_PostgreSQL_POND_Password.toString());
				
			}
			
			if(ND_PostgreSQL_POND_Port != null){
				
					this.setProperty("ND_PostgreSQL_POND_Port", ND_PostgreSQL_POND_Port.toString());
				
			}
			
			if(ND_PostgreSQL_POND_Schema != null){
				
					this.setProperty("ND_PostgreSQL_POND_Schema", ND_PostgreSQL_POND_Schema.toString());
				
			}
			
			if(ND_PostgreSQL_POND_Server != null){
				
					this.setProperty("ND_PostgreSQL_POND_Server", ND_PostgreSQL_POND_Server.toString());
				
			}
			
			if(nd_s3_bucket_QA_sfdc != null){
				
					this.setProperty("nd_s3_bucket_QA_sfdc", nd_s3_bucket_QA_sfdc.toString());
				
			}
			
			if(nd_s3_data_lake_path_sfdc != null){
				
					this.setProperty("nd_s3_data_lake_path_sfdc", nd_s3_data_lake_path_sfdc.toString());
				
			}
			
			if(sfdc_audience_url != null){
				
					this.setProperty("sfdc_audience_url", sfdc_audience_url.toString());
				
			}
			
			if(sfdc_certificate_alias != null){
				
					this.setProperty("sfdc_certificate_alias", sfdc_certificate_alias.toString());
				
			}
			
			if(sfdc_keystore_path != null){
				
					this.setProperty("sfdc_keystore_path", sfdc_keystore_path.toString());
				
			}
			
		}

public String university_code;
public String getUniversity_code(){
	return this.university_code;
}
public String status;
public String getStatus(){
	return this.status;
}
public String description;
public String getDescription(){
	return this.description;
}
public String filter_date;
public String getFilter_date(){
	return this.filter_date;
}
public String sfdc_conn_QueryCondition;
public String getSfdc_conn_QueryCondition(){
	return this.sfdc_conn_QueryCondition;
}
public String staging_S3_dir;
public String getStaging_S3_dir(){
	return this.staging_S3_dir;
}
public String sfdc_subject_user;
public String getSfdc_subject_user(){
	return this.sfdc_subject_user;
}
public String sfdc_issuer_token;
public String getSfdc_issuer_token(){
	return this.sfdc_issuer_token;
}
public java.lang.String sfdc_keystore_password;
public java.lang.String getSfdc_keystore_password(){
	return this.sfdc_keystore_password;
}
public String nd_aws_access_key;
public String getNd_aws_access_key(){
	return this.nd_aws_access_key;
}
public java.lang.String nd_aws_secret_key;
public java.lang.String getNd_aws_secret_key(){
	return this.nd_aws_secret_key;
}
public String ND_PostgreSQL_POND_AdditionalParams;
public String getND_PostgreSQL_POND_AdditionalParams(){
	return this.ND_PostgreSQL_POND_AdditionalParams;
}
public String ND_PostgreSQL_POND_Database;
public String getND_PostgreSQL_POND_Database(){
	return this.ND_PostgreSQL_POND_Database;
}
public String ND_PostgreSQL_POND_Login;
public String getND_PostgreSQL_POND_Login(){
	return this.ND_PostgreSQL_POND_Login;
}
public java.lang.String ND_PostgreSQL_POND_Password;
public java.lang.String getND_PostgreSQL_POND_Password(){
	return this.ND_PostgreSQL_POND_Password;
}
public String ND_PostgreSQL_POND_Port;
public String getND_PostgreSQL_POND_Port(){
	return this.ND_PostgreSQL_POND_Port;
}
public String ND_PostgreSQL_POND_Schema;
public String getND_PostgreSQL_POND_Schema(){
	return this.ND_PostgreSQL_POND_Schema;
}
public String ND_PostgreSQL_POND_Server;
public String getND_PostgreSQL_POND_Server(){
	return this.ND_PostgreSQL_POND_Server;
}
public String nd_s3_bucket_QA_sfdc;
public String getNd_s3_bucket_QA_sfdc(){
	return this.nd_s3_bucket_QA_sfdc;
}
public String nd_s3_data_lake_path_sfdc;
public String getNd_s3_data_lake_path_sfdc(){
	return this.nd_s3_data_lake_path_sfdc;
}
public String sfdc_audience_url;
public String getSfdc_audience_url(){
	return this.sfdc_audience_url;
}
public String sfdc_certificate_alias;
public String getSfdc_certificate_alias(){
	return this.sfdc_certificate_alias;
}
public String sfdc_keystore_path;
public String getSfdc_keystore_path(){
	return this.sfdc_keystore_path;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.0";
	private final String jobName = "sfdc_history_s3_sync_job_au";
	private final String projectName = "T_NP_31";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				sfdc_history_s3_sync_job_au.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(sfdc_history_s3_sync_job_au.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tChronometerStop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tChronometerStart_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tChronometerStart_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_42_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_65_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_65_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_64_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_64_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_63_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_63_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_62_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_62_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_61_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_61_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_60_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_60_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_59_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_59_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_58_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_58_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_57_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_57_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_56_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_56_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_55_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_55_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_54_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_54_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_53_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_53_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_49_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_49_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_48_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_48_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_31_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_31_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_31_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_30_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_30_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_30_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_29_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_29_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_29_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_28_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_28_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_28_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_27_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_27_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_27_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_26_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_26_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_26_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_25_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_25_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_25_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_24_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_24_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_24_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_23_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_23_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_23_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_22_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_22_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_22_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_21_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_21_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_21_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_20_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_20_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_20_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_19_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_19_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_19_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_18_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_18_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_18_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_17_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_17_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_17_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tChronometerStop_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tChronometerStart_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_42_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_31_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_31_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_31_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_31_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_65_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_30_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_30_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_30_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_30_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_64_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_63_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_28_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_28_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_28_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_28_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_62_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_61_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_60_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_59_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_58_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_57_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_56_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_55_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_54_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_53_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_49_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_48_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_31_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_30_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_29_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_28_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_27_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_26_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_25_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_24_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_23_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_22_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_21_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_20_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_19_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_18_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_17_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tChronometerStop_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tChronometerStop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tChronometerStop_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tChronometerStop_1", false);
		start_Hash.put("tChronometerStop_1", System.currentTimeMillis());
		
	
	currentComponent="tChronometerStop_1";

	
		int tos_count_tChronometerStop_1 = 0;
		
	
	long timetChronometerStop_1;
	
	  	timetChronometerStop_1 = System.currentTimeMillis() - ((Long)globalMap.get("tChronometerStart_1")).longValue();
		
	Long currentTimetChronometerStop_1 = System.currentTimeMillis();
	globalMap.put("tChronometerStop_1", currentTimetChronometerStop_1);
	
	globalMap.put("tChronometerStop_1_STOPTIME", currentTimetChronometerStop_1);
	globalMap.put("tChronometerStop_1_DURATION", timetChronometerStop_1);
 



/**
 * [tChronometerStop_1 begin ] stop
 */
	
	/**
	 * [tChronometerStop_1 main ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 


	tos_count_tChronometerStop_1++;

/**
 * [tChronometerStop_1 main ] stop
 */
	
	/**
	 * [tChronometerStop_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 process_data_begin ] stop
 */
	
	/**
	 * [tChronometerStop_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 process_data_end ] stop
 */
	
	/**
	 * [tChronometerStop_1 end ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 

ok_Hash.put("tChronometerStop_1", true);
end_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tChronometerStop_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tChronometerStop_1 finally ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


Date start_datetime = new Date(((Long)globalMap.get("tChronometerStop_1_STOPTIME")) - ((Long)globalMap.get("tChronometerStop_1_DURATION")));
String start_time = TalendDate.formatDate("EEE, MMM dd HH:mm:ss.SSS z yyyy",start_datetime);
Date end_datetime= new Date((Long)globalMap.get("tChronometerStop_1_STOPTIME"));
String end_time = TalendDate.formatDate("EEE, MMM dd HH:mm:ss.SSS z yyyy",end_datetime);
String Duration = TalendDate.formatDate("HH:mm:ss.SSS", TalendDate.parseDate("ss SSS", String.valueOf(((Long)globalMap.get("tChronometerStop_1_DURATION"))/1000)+" "+
String.valueOf(((Long)globalMap.get("tChronometerStop_1_DURATION"))%1000)));

System.out.println("Start Time: "+start_time);
System.out.println("End Time: "+end_time);
System.out.println("Run Duration: "+Duration);
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row17.type = lcm.getType();
		row17.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row17.priority = lcm.getPriority();
		row17.message = lcm.getMessage();
		row17.code = lcm.getCode();
		
		row17.moment = java.util.Calendar.getInstance().getTime();
	
    	row17.pid = pid;
		row17.root_pid = rootPid;
		row17.father_pid = fatherPid;
	
    	row17.project = projectName;
    	row17.job = jobName;
    	row17.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					

    String msg=null;
String ChildJobStatus = (String) ((java.util.Map) globalMap.get("sharedMap")).get("Failure?");
String ParentJobStatus = (String) globalMap.get("parent_status");

if (ChildJobStatus.equals("True")) {
	msg = (String)((java.util.Map) globalMap.get("sharedMap")).get("ExceptionMsg"); 
	}
else if (ParentJobStatus.equals("running")) {
	msg = "Origin: " + row17.origin + ", Error: " + row17.message;
	}

System.out.println("The following job has failed: " + projectName + "." + jobName + ".\nPlease check the application log for more detailed information on the cause.\nException caught: \"" + msg + "\"");
globalMap.put("error_msg", msg);
globalMap.put("error_code", row17.code);
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tChronometerStart_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tChronometerStart_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tChronometerStart_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tChronometerStart_1", false);
		start_Hash.put("tChronometerStart_1", System.currentTimeMillis());
		
	
	currentComponent="tChronometerStart_1";

	
		int tos_count_tChronometerStart_1 = 0;
		

	
	
	Long currentTimetChronometerStart_1 = System.currentTimeMillis();
	
	globalMap.put("tChronometerStart_1",currentTimetChronometerStart_1);
	globalMap.put("tChronometerStart_1_STARTTIME", currentTimetChronometerStart_1);
 



/**
 * [tChronometerStart_1 begin ] stop
 */
	
	/**
	 * [tChronometerStart_1 main ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 


	tos_count_tChronometerStart_1++;

/**
 * [tChronometerStart_1 main ] stop
 */
	
	/**
	 * [tChronometerStart_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 process_data_begin ] stop
 */
	
	/**
	 * [tChronometerStart_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 process_data_end ] stop
 */
	
	/**
	 * [tChronometerStart_1 end ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 

ok_Hash.put("tChronometerStart_1", true);
end_Hash.put("tChronometerStart_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tChronometerStart_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tChronometerStart_1 finally ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


Date start_datetime = new Date((Long)globalMap.get("tChronometerStart_1_STARTTIME"));
String start_time = TalendDate.formatDate("EEE, MMM dd HH:mm:ss.SSS z yyyy",start_datetime);
System.out.println("\n*** " + jobName + " ***");
System.out.println("Start Time: "+start_time);
System.out.println("Environment: " + contextStr);
//context.email_subject_stem = "SalesForce LCV Object Refresh";

globalMap.put("datetime", TalendDate.formatDate("yyyyMMddHHmm", new Date()));
globalMap.put("compare_result", "true");

ConcurrentHashMap<String, String> CHM = new ConcurrentHashMap<String, String>();
CHM.put("Failure?", "False");
globalMap.put("sharedMap", CHM);
globalMap.put("parent_status", "running");





 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	    
    
    		
	final String decryptedPassword_tS3Connection_1 = context.nd_aws_secret_key; 

			com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials(context.nd_aws_access_key,decryptedPassword_tS3Connection_1);
			com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.internal.StaticCredentialsProvider(credentials_tS3Connection_1);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/7.3 Studio/7.3 (Talend Open Studio)");
		
				com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard()
					
		            
		            	
				        .withRegion("us-east-1") // The first region to try your request against
                        .withForceGlobalBucketAccessEnabled(true) // If a bucket is in a different region, try again in the correct region
		            
		            

                    .withCredentials(credentialsProvider_tS3Connection_1)
                    .withClientConfiguration(cc_tS3Connection_1)
                    .build();
			
	
		try{
			conn_tS3Connection_1.getBucketLoggingConfiguration("Check-Connection-Only");
	}catch(com.amazonaws.AmazonServiceException ase_tS3Connection_1){
			if(ase_tS3Connection_1.getErrorCode().equals("NoSuchBucket")){
			//ignore
			}else{
					throw ase_tS3Connection_1;
			}
	}
	
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tJava_42Process(globalMap);



/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_42Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_42_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_42 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_42", false);
		start_Hash.put("tJava_42", System.currentTimeMillis());
		
	
	currentComponent="tJava_42";

	
		int tos_count_tJava_42 = 0;
		


context.sfdc_keystore_password = System.getenv("TALEND_SFDC_JKS_PASSWORD");
//System.out.println(context.sfdc_keystore_password );
 



/**
 * [tJava_42 begin ] stop
 */
	
	/**
	 * [tJava_42 main ] start
	 */

	

	
	
	currentComponent="tJava_42";

	

 


	tos_count_tJava_42++;

/**
 * [tJava_42 main ] stop
 */
	
	/**
	 * [tJava_42 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_42";

	

 



/**
 * [tJava_42 process_data_begin ] stop
 */
	
	/**
	 * [tJava_42 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_42";

	

 



/**
 * [tJava_42 process_data_end ] stop
 */
	
	/**
	 * [tJava_42 end ] start
	 */

	

	
	
	currentComponent="tJava_42";

	

 

ok_Hash.put("tJava_42", true);
end_Hash.put("tJava_42", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk122", 0, "ok");
				}
				tSalesforceConnection_2Process(globalMap);



/**
 * [tJava_42 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_42 finally ] start
	 */

	

	
	
	currentComponent="tJava_42";

	

 



/**
 * [tJava_42 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_42_SUBPROCESS_STATE", 1);
	}
	

public void tSalesforceConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSalesforceConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceConnection_2", false);
		start_Hash.put("tSalesforceConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceConnection_2";

	
		int tos_count_tSalesforceConnection_2 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceConnection_2 =
        new org.talend.components.salesforce.tsalesforceconnection.TSalesforceConnectionDefinition();

org.talend.components.salesforce.SalesforceConnectionProperties props_tSalesforceConnection_2 =
        (org.talend.components.salesforce.SalesforceConnectionProperties) def_tSalesforceConnection_2.createRuntimeProperties();
 		                    props_tSalesforceConnection_2.setValue("endpoint",
 		                    "https://login.salesforce.com/services/oauth2");
 		                    
 		                    props_tSalesforceConnection_2.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.OAuth);
 		                    
 		                    props_tSalesforceConnection_2.setValue("bulkConnection",
 		                    true);
 		                    
 		                    props_tSalesforceConnection_2.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_2.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceConnection_2.setValue("httpTraceMessage",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_2.setValue("clientId",
 		                    "");
 		                    
 		                    props_tSalesforceConnection_2.setValue("oauth2FlowType",
 		                        org.talend.components.common.oauth.OAuth2FlowType.JWT_Flow);
 		                    
 		                    props_tSalesforceConnection_2.setValue("apiVersion",
 		                    "47.0");
 		                    
 		                    props_tSalesforceConnection_2.oauth2JwtFlow.setValue("issuer",
 		                    context.sfdc_issuer_token);
 		                    
 		                    props_tSalesforceConnection_2.oauth2JwtFlow.setValue("subject",
 		                    context.sfdc_subject_user);
 		                    
 		                    props_tSalesforceConnection_2.oauth2JwtFlow.setValue("expirationTime",
 		                    600);
 		                    
 		                    props_tSalesforceConnection_2.oauth2JwtFlow.setValue("keyStore",
 		                    context.sfdc_keystore_path);
 		                    
 		                    props_tSalesforceConnection_2.oauth2JwtFlow.setValue("keyStorePassword",
 		                    context.sfdc_keystore_password);
 		                    
 		                    props_tSalesforceConnection_2.oauth2JwtFlow.setValue("certificateAlias",
 		                    context.sfdc_certificate_alias);
 		                    
 		                    props_tSalesforceConnection_2.oauth2JwtFlow.setValue("audience",
 		                    context.sfdc_audience_url);
 		                    
 		                    props_tSalesforceConnection_2.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_2.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_2.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_2.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceConnection_2.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceConnection_2 = props_tSalesforceConnection_2.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceConnection_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceConnection_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceConnection_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceConnection_2.referencedComponent.setReference(referencedComponentProperties_tSalesforceConnection_2);
        }
    }
globalMap.put("tSalesforceConnection_2_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceConnection_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceConnection_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceConnection_2_MAPPINGS_URL", mappings_url_tSalesforceConnection_2);

org.talend.components.api.container.RuntimeContainer container_tSalesforceConnection_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceConnection_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceConnection_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceConnection_2 = null;
topology_tSalesforceConnection_2 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceConnection_2 = def_tSalesforceConnection_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceConnection_2, topology_tSalesforceConnection_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceConnection_2 = def_tSalesforceConnection_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceConnection_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceConnection_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceConnection_2 = componentRuntime_tSalesforceConnection_2.initialize(container_tSalesforceConnection_2, props_tSalesforceConnection_2);

if (initVr_tSalesforceConnection_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceConnection_2.getMessage());
}

if(componentRuntime_tSalesforceConnection_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceConnection_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceConnection_2;
	compDriverInitialization_tSalesforceConnection_2.runAtDriver(container_tSalesforceConnection_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceConnection_2 = null;
if(componentRuntime_tSalesforceConnection_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceConnection_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceConnection_2;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceConnection_2 = sourceOrSink_tSalesforceConnection_2.validate(container_tSalesforceConnection_2);
	if (vr_tSalesforceConnection_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceConnection_2.getMessage());
	}
}

 



/**
 * [tSalesforceConnection_2 begin ] stop
 */
	
	/**
	 * [tSalesforceConnection_2 main ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_2";

	


 


	tos_count_tSalesforceConnection_2++;

/**
 * [tSalesforceConnection_2 main ] stop
 */
	
	/**
	 * [tSalesforceConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_2";

	


 



/**
 * [tSalesforceConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tSalesforceConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_2";

	


 



/**
 * [tSalesforceConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceConnection_2 end ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_2";

	
// end of generic

 

ok_Hash.put("tSalesforceConnection_2", true);
end_Hash.put("tSalesforceConnection_2", System.currentTimeMillis());




/**
 * [tSalesforceConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_2";

	
// finally of generic

 



/**
 * [tSalesforceConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		



System.out.println("Running For SFDC Object OpportunityHistory: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 




System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tSalesforceInput_17Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tJava_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		



System.out.println("Running For SFDC Object hed__Program_Enrollment__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}


if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 


System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tSalesforceInput_18Process(globalMap);



/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tJava_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";

	
		int tos_count_tJava_5 = 0;
		



System.out.println("Running For SFDC Object hed__Term__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 



System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tSalesforceInput_19Process(globalMap);



/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tJava_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	

public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";

	
		int tos_count_tJava_6 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Application__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 




System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tSalesforceInput_20Process(globalMap);



/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tJava_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	

public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";

	
		int tos_count_tJava_7 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Application_Decision__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 




System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tSalesforceInput_21Process(globalMap);



/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tJava_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	

public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";

	
		int tos_count_tJava_8 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Application_Item__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 




System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 process_data_begin ] stop
 */
	
	/**
	 * [tJava_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 process_data_end ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tSalesforceInput_22Process(globalMap);



/**
 * [tJava_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tJava_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}
	

public void tJava_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_9", false);
		start_Hash.put("tJava_9", System.currentTimeMillis());
		
	
	currentComponent="tJava_9";

	
		int tos_count_tJava_9 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Application_Item_Legacy__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 




System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_9 begin ] stop
 */
	
	/**
	 * [tJava_9 main ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 


	tos_count_tJava_9++;

/**
 * [tJava_9 main ] stop
 */
	
	/**
	 * [tJava_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 process_data_begin ] stop
 */
	
	/**
	 * [tJava_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 process_data_end ] stop
 */
	
	/**
	 * [tJava_9 end ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 

ok_Hash.put("tJava_9", true);
end_Hash.put("tJava_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tSalesforceInput_23Process(globalMap);



/**
 * [tJava_9 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tJava_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_9 finally ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}
	

public void tJava_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_10", false);
		start_Hash.put("tJava_10", System.currentTimeMillis());
		
	
	currentComponent="tJava_10";

	
		int tos_count_tJava_10 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Inquiry__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 



System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_10 begin ] stop
 */
	
	/**
	 * [tJava_10 main ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 


	tos_count_tJava_10++;

/**
 * [tJava_10 main ] stop
 */
	
	/**
	 * [tJava_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 



/**
 * [tJava_10 process_data_begin ] stop
 */
	
	/**
	 * [tJava_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 



/**
 * [tJava_10 process_data_end ] stop
 */
	
	/**
	 * [tJava_10 end ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 

ok_Hash.put("tJava_10", true);
end_Hash.put("tJava_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tSalesforceInput_24Process(globalMap);



/**
 * [tJava_10 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tJava_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_10 finally ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 



/**
 * [tJava_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}
	

public void tJava_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_11", false);
		start_Hash.put("tJava_11", System.currentTimeMillis());
		
	
	currentComponent="tJava_11";

	
		int tos_count_tJava_11 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Locator__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 




System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_11 begin ] stop
 */
	
	/**
	 * [tJava_11 main ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 


	tos_count_tJava_11++;

/**
 * [tJava_11 main ] stop
 */
	
	/**
	 * [tJava_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 process_data_begin ] stop
 */
	
	/**
	 * [tJava_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 process_data_end ] stop
 */
	
	/**
	 * [tJava_11 end ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 

ok_Hash.put("tJava_11", true);
end_Hash.put("tJava_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tSalesforceInput_25Process(globalMap);



/**
 * [tJava_11 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tJava_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_11 finally ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}
	

public void tJava_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_12", false);
		start_Hash.put("tJava_12", System.currentTimeMillis());
		
	
	currentComponent="tJava_12";

	
		int tos_count_tJava_12 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Log_Record__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 



System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_12 begin ] stop
 */
	
	/**
	 * [tJava_12 main ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 


	tos_count_tJava_12++;

/**
 * [tJava_12 main ] stop
 */
	
	/**
	 * [tJava_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 



/**
 * [tJava_12 process_data_begin ] stop
 */
	
	/**
	 * [tJava_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 



/**
 * [tJava_12 process_data_end ] stop
 */
	
	/**
	 * [tJava_12 end ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 

ok_Hash.put("tJava_12", true);
end_Hash.put("tJava_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tSalesforceInput_26Process(globalMap);



/**
 * [tJava_12 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tJava_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_12 finally ] start
	 */

	

	
	
	currentComponent="tJava_12";

	

 



/**
 * [tJava_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}
	

public void tJava_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_13", false);
		start_Hash.put("tJava_13", System.currentTimeMillis());
		
	
	currentComponent="tJava_13";

	
		int tos_count_tJava_13 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Program__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 




System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_13 begin ] stop
 */
	
	/**
	 * [tJava_13 main ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 


	tos_count_tJava_13++;

/**
 * [tJava_13 main ] stop
 */
	
	/**
	 * [tJava_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 



/**
 * [tJava_13 process_data_begin ] stop
 */
	
	/**
	 * [tJava_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 



/**
 * [tJava_13 process_data_end ] stop
 */
	
	/**
	 * [tJava_13 end ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 

ok_Hash.put("tJava_13", true);
end_Hash.put("tJava_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tSalesforceInput_27Process(globalMap);



/**
 * [tJava_13 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tJava_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_13 finally ] start
	 */

	

	
	
	currentComponent="tJava_13";

	

 



/**
 * [tJava_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}
	

public void tJava_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_14", false);
		start_Hash.put("tJava_14", System.currentTimeMillis());
		
	
	currentComponent="tJava_14";

	
		int tos_count_tJava_14 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Program_Assignment__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 




System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_14 begin ] stop
 */
	
	/**
	 * [tJava_14 main ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 


	tos_count_tJava_14++;

/**
 * [tJava_14 main ] stop
 */
	
	/**
	 * [tJava_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 



/**
 * [tJava_14 process_data_begin ] stop
 */
	
	/**
	 * [tJava_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 



/**
 * [tJava_14 process_data_end ] stop
 */
	
	/**
	 * [tJava_14 end ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 

ok_Hash.put("tJava_14", true);
end_Hash.put("tJava_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tSalesforceInput_28Process(globalMap);



/**
 * [tJava_14 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_14:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tJava_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_14 finally ] start
	 */

	

	
	
	currentComponent="tJava_14";

	

 



/**
 * [tJava_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}
	

public void tJava_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_15", false);
		start_Hash.put("tJava_15", System.currentTimeMillis());
		
	
	currentComponent="tJava_15";

	
		int tos_count_tJava_15 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Program_Concentration__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 



System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_15 begin ] stop
 */
	
	/**
	 * [tJava_15 main ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 


	tos_count_tJava_15++;

/**
 * [tJava_15 main ] stop
 */
	
	/**
	 * [tJava_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 



/**
 * [tJava_15 process_data_begin ] stop
 */
	
	/**
	 * [tJava_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 



/**
 * [tJava_15 process_data_end ] stop
 */
	
	/**
	 * [tJava_15 end ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 

ok_Hash.put("tJava_15", true);
end_Hash.put("tJava_15", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk21", 0, "ok");
				}
				tSalesforceInput_29Process(globalMap);



/**
 * [tJava_15 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_15:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tJava_16Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_15 finally ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 



/**
 * [tJava_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}
	

public void tJava_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_16", false);
		start_Hash.put("tJava_16", System.currentTimeMillis());
		
	
	currentComponent="tJava_16";

	
		int tos_count_tJava_16 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Program_Term_Enrollment__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 



System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_16 begin ] stop
 */
	
	/**
	 * [tJava_16 main ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 


	tos_count_tJava_16++;

/**
 * [tJava_16 main ] stop
 */
	
	/**
	 * [tJava_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 



/**
 * [tJava_16 process_data_begin ] stop
 */
	
	/**
	 * [tJava_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 



/**
 * [tJava_16 process_data_end ] stop
 */
	
	/**
	 * [tJava_16 end ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 

ok_Hash.put("tJava_16", true);
end_Hash.put("tJava_16", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk22", 0, "ok");
				}
				tSalesforceInput_30Process(globalMap);



/**
 * [tJava_16 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_16:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
								} 
							
							tJava_17Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_16 finally ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 



/**
 * [tJava_16 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_16_SUBPROCESS_STATE", 1);
	}
	

public void tJava_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_17", false);
		start_Hash.put("tJava_17", System.currentTimeMillis());
		
	
	currentComponent="tJava_17";

	
		int tos_count_tJava_17 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Student_Contact_Staging__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 




System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_17 begin ] stop
 */
	
	/**
	 * [tJava_17 main ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 


	tos_count_tJava_17++;

/**
 * [tJava_17 main ] stop
 */
	
	/**
	 * [tJava_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 



/**
 * [tJava_17 process_data_begin ] stop
 */
	
	/**
	 * [tJava_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 



/**
 * [tJava_17 process_data_end ] stop
 */
	
	/**
	 * [tJava_17 end ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 

ok_Hash.put("tJava_17", true);
end_Hash.put("tJava_17", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk23", 0, "ok");
				}
				tSalesforceInput_31Process(globalMap);



/**
 * [tJava_17 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tJava_18Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_17 finally ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 



/**
 * [tJava_17 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_17_SUBPROCESS_STATE", 1);
	}
	


public static class out31Struct implements routines.system.IPersistableRow<out31Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row63Struct implements routines.system.IPersistableRow<row63Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row63Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row63Struct row63 = new row63Struct();
out31Struct out31 = new out31Struct();





	
	/**
	 * [tWriteJSONField_31_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_31_Out", false);
		start_Hash.put("tWriteJSONField_31_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_31";
	
	currentComponent="tWriteJSONField_31_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out31");
					}
				
		int tos_count_tWriteJSONField_31_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_31_Out = 0;
				boolean needRoot_tWriteJSONField_31_Out  = true;
				
				String  strCompCache_tWriteJSONField_31_Out= null;		
				
						        java.util.Queue<row62Struct> listGroupby_tWriteJSONField_31_Out = new java.util.concurrent.ConcurrentLinkedQueue<row62Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_31_Out extends Thread {
						
									    java.util.Queue<row62Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_31_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_31_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_31_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_31_In", queue);
							globalMap.put("flows_tWriteJSONField_31_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_31_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_31_Out txf_tWriteJSONField_31_Out = new ThreadXMLField_tWriteJSONField_31_Out(listGroupby_tWriteJSONField_31_Out);
					
					txf_tWriteJSONField_31_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_31_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_31_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_31_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_31_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_31_Out nestXMLTool_tWriteJSONField_31_Out = new NestXMLTool_tWriteJSONField_31_Out();

out31Struct  rowStructOutput_tWriteJSONField_31_Out = new out31Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_31_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_31_Out = null;
org.dom4j.Document doc_tWriteJSONField_31_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_31_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_31_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_31_Out.setTrimText(false);
format_tWriteJSONField_31_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_31_Out = new int[1];

 



/**
 * [tWriteJSONField_31_Out begin ] stop
 */



	
	/**
	 * [tMap_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_31", false);
		start_Hash.put("tMap_31", System.currentTimeMillis());
		
	
	currentComponent="tMap_31";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row63");
					}
				
		int tos_count_tMap_31 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_31__Struct  {
}
Var__tMap_31__Struct Var__tMap_31 = new Var__tMap_31__Struct();
// ###############################

// ###############################
// # Outputs initialization
out31Struct out31_tmp = new out31Struct();
// ###############################

        
        



        









 



/**
 * [tMap_31 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_31", false);
		start_Hash.put("tSalesforceInput_31", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_31";

	
		int tos_count_tSalesforceInput_31 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_31 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_31 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_31.createRuntimeProperties();
 		                    props_tSalesforceInput_31.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_31.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_31.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_31.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_31.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_31.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_31.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_31.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_31.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_31.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_31.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_31.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_31.module.setValue("moduleName",
 		                    "NoodleCRM__Student_Contact_Staging__History");
 		                    
 		                    props_tSalesforceInput_31.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_31.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_31.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_31.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_31.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_31_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Student_Contact_Staging__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Student_Contact_Staging__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_31_1_fisrt sst_tSalesforceInput_31_1_fisrt = new SchemaSettingTool_tSalesforceInput_31_1_fisrt();
 		                    
 		                    props_tSalesforceInput_31.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_31_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_31.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_31 = props_tSalesforceInput_31.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_31 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_31 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_31 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_31.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_31);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_31.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_31 = props_tSalesforceInput_31.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_31 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_31 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_31 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_31.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_31);
        }
    }
globalMap.put("tSalesforceInput_31_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_31);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_31= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_31_MAPPINGS_URL", mappings_url_tSalesforceInput_31);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_31 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_31";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_31 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_31 = null;
topology_tSalesforceInput_31 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_31 = def_tSalesforceInput_31.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_31, topology_tSalesforceInput_31);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_31 = def_tSalesforceInput_31.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_31 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_31.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_31 = componentRuntime_tSalesforceInput_31.initialize(container_tSalesforceInput_31, props_tSalesforceInput_31);

if (initVr_tSalesforceInput_31.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_31.getMessage());
}

if(componentRuntime_tSalesforceInput_31 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_31 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_31;
	compDriverInitialization_tSalesforceInput_31.runAtDriver(container_tSalesforceInput_31);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_31 = null;
if(componentRuntime_tSalesforceInput_31 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_31 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_31;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_31 = sourceOrSink_tSalesforceInput_31.validate(container_tSalesforceInput_31);
	if (vr_tSalesforceInput_31.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_31.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_31 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_31;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_31 =
            source_tSalesforceInput_31.createReader(container_tSalesforceInput_31);
	reader_tSalesforceInput_31 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_31, container_tSalesforceInput_31);

        boolean multi_output_is_allowed_tSalesforceInput_31 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_31 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_31.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_31 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_31 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_31 = props_tSalesforceInput_31.getSchema(c_tSalesforceInput_31, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_31 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_31, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_31 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_31 = reader_tSalesforceInput_31.start();

    resourceMap.put("reader_tSalesforceInput_31", reader_tSalesforceInput_31);

    for (; available_tSalesforceInput_31; available_tSalesforceInput_31 = reader_tSalesforceInput_31.advance()) {
    	nb_line_tSalesforceInput_31++;

    	
        if (multi_output_is_allowed_tSalesforceInput_31) {
                row63 = null;

        }

        try {
            Object data_tSalesforceInput_31 = reader_tSalesforceInput_31.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_31) {
                    row63 = new row63Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_31 == null) {
            factory_tSalesforceInput_31 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_31.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_31.setWrapped(factory_tSalesforceInput_31.convertToAvro(data_tSalesforceInput_31));
                Object columnValue_0_tSalesforceInput_31 = outgoingEnforcer_tSalesforceInput_31.get(0);
                        row63.Id = (String) (columnValue_0_tSalesforceInput_31);
                Object columnValue_1_tSalesforceInput_31 = outgoingEnforcer_tSalesforceInput_31.get(1);
                    if (columnValue_1_tSalesforceInput_31 == null) {
                        row63.IsDeleted = false;
                    } else {
                            row63.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_31);
                    }
                Object columnValue_2_tSalesforceInput_31 = outgoingEnforcer_tSalesforceInput_31.get(2);
                        row63.ParentId = (String) (columnValue_2_tSalesforceInput_31);
                Object columnValue_3_tSalesforceInput_31 = outgoingEnforcer_tSalesforceInput_31.get(3);
                        row63.CreatedById = (String) (columnValue_3_tSalesforceInput_31);
                Object columnValue_4_tSalesforceInput_31 = outgoingEnforcer_tSalesforceInput_31.get(4);
                        row63.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_31);
                Object columnValue_5_tSalesforceInput_31 = outgoingEnforcer_tSalesforceInput_31.get(5);
                        row63.Field = (String) (columnValue_5_tSalesforceInput_31);
                Object columnValue_6_tSalesforceInput_31 = outgoingEnforcer_tSalesforceInput_31.get(6);
                        row63.OldValue = (String) (columnValue_6_tSalesforceInput_31);
                Object columnValue_7_tSalesforceInput_31 = outgoingEnforcer_tSalesforceInput_31.get(7);
                        row63.NewValue = (String) (columnValue_7_tSalesforceInput_31);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_31) {
        	java.util.Map<String,Object> info_tSalesforceInput_31 = e_tSalesforceInput_31.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_31 = null;
            	if(info_tSalesforceInput_31.containsKey("error")){
            		errorMessage_tSalesforceInput_31 = info_tSalesforceInput_31.get("error");
        		}else if(info_tSalesforceInput_31.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_31 = info_tSalesforceInput_31.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_31 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_31 = "Row "+ nb_line_tSalesforceInput_31 + ": "+errorMessage_tSalesforceInput_31;
    			System.err.println(errorMessage_tSalesforceInput_31);
            	// If the record is reject, the main line record should put NULL
            	row63 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_31 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_31 = null;


 



/**
 * [tSalesforceInput_31 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_31 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_31";

	


 


	tos_count_tSalesforceInput_31++;

/**
 * [tSalesforceInput_31 main ] stop
 */
	
	/**
	 * [tSalesforceInput_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_31";

	


 



/**
 * [tSalesforceInput_31 process_data_begin ] stop
 */

	
	/**
	 * [tMap_31 main ] start
	 */

	

	
	
	currentComponent="tMap_31";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row63");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_31 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_31 = false;
		  boolean mainRowRejected_tMap_31 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_31__Struct Var = Var__tMap_31;// ###############################
        // ###############################
        // # Output tables

out31 = null;


// # Output table : 'out31'
out31_tmp.Id = row63.Id ;
out31_tmp.IsDeleted = row63.IsDeleted ;
out31_tmp.ParentId = row63.ParentId ;
out31_tmp.CreatedById = row63.CreatedById ;
out31_tmp.CreatedDate = (row63.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row63.CreatedDate))).getTime())/1000 ;
out31_tmp.Field = row63.Field ;
out31_tmp.OldValue = row63.OldValue ;
out31_tmp.NewValue = row63.NewValue ;
out31 = out31_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_31 = false;










 


	tos_count_tMap_31++;

/**
 * [tMap_31 main ] stop
 */
	
	/**
	 * [tMap_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

 



/**
 * [tMap_31 process_data_begin ] stop
 */
// Start of branch "out31"
if(out31 != null) { 



	
	/**
	 * [tWriteJSONField_31_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_31";
	
	currentComponent="tWriteJSONField_31_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out31");
					}
					

	if(txf_tWriteJSONField_31_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_31_Out.getCurrentComponent();
		throw txf_tWriteJSONField_31_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_31_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_31_Out.getLastError();
	}
	nb_line_tWriteJSONField_31_Out++;
	valueMap_tWriteJSONField_31_Out.clear();
	arraysValueMap_tWriteJSONField_31_Out.clear();
	valueMap_tWriteJSONField_31_Out.put("Id",
	(
            out31.Id.toString()
		));
	arraysValueMap_tWriteJSONField_31_Out.put("Id",
	(
            out31.Id.toString()
		));
	valueMap_tWriteJSONField_31_Out.put("IsDeleted",
	(
            String.valueOf(out31.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_31_Out.put("IsDeleted",
	(
            String.valueOf(out31.IsDeleted)
		));
	valueMap_tWriteJSONField_31_Out.put("ParentId",
	(
            out31.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_31_Out.put("ParentId",
	(
            out31.ParentId.toString()
		));
	valueMap_tWriteJSONField_31_Out.put("CreatedById",
	(
            out31.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_31_Out.put("CreatedById",
	(
            out31.CreatedById.toString()
		));
	valueMap_tWriteJSONField_31_Out.put("CreatedDate",
	(
            String.valueOf(out31.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_31_Out.put("CreatedDate",
	(
            String.valueOf(out31.CreatedDate)
		));
	valueMap_tWriteJSONField_31_Out.put("Field",
	(
            out31.Field.toString()
		));
	arraysValueMap_tWriteJSONField_31_Out.put("Field",
	(
            out31.Field.toString()
		));
	valueMap_tWriteJSONField_31_Out.put("OldValue",
	(
		out31.OldValue != null?
            out31.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_31_Out.put("OldValue",
	(
		out31.OldValue != null?
            out31.OldValue.toString():null
		));
	valueMap_tWriteJSONField_31_Out.put("NewValue",
	(
		out31.NewValue != null?
            out31.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_31_Out.put("NewValue",
	(
		out31.NewValue != null?
            out31.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_31_Out = "";
	if(strCompCache_tWriteJSONField_31_Out==null){
		strCompCache_tWriteJSONField_31_Out=strTemp_tWriteJSONField_31_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_31_Out.replaceDefaultNameSpace(doc_tWriteJSONField_31_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_31_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_31_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_31_Out, format_tWriteJSONField_31_Out);
			output_tWriteJSONField_31_Out.write(doc_tWriteJSONField_31_Out);
		    output_tWriteJSONField_31_Out.close();
			
				  		  row62Struct row_tWriteJSONField_31_Out = new row62Struct();
						  
					     		row_tWriteJSONField_31_Out.data = strWriter_tWriteJSONField_31_Out.toString();
					     		listGroupby_tWriteJSONField_31_Out.add(row_tWriteJSONField_31_Out);
					
		    doc_tWriteJSONField_31_Out.clearContent();
			needRoot_tWriteJSONField_31_Out = true;
			for(int i_tWriteJSONField_31_Out=0;i_tWriteJSONField_31_Out<orders_tWriteJSONField_31_Out.length;i_tWriteJSONField_31_Out++){
				orders_tWriteJSONField_31_Out[i_tWriteJSONField_31_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_31_Out != null && groupbyList_tWriteJSONField_31_Out.size() >= 0){
				groupbyList_tWriteJSONField_31_Out.clear();
			}
			strCompCache_tWriteJSONField_31_Out=strTemp_tWriteJSONField_31_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_31_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_31_Out) {
		needRoot_tWriteJSONField_31_Out=false;
		org.dom4j.Element root_tWriteJSONField_31_Out = doc_tWriteJSONField_31_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_31_Out = root_tWriteJSONField_31_Out;
		org.dom4j.Element root_0_tWriteJSONField_31_Out = root_tWriteJSONField_31_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_31_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_31_Out .setText(root_0_tWriteJSONField_31_Out,
		valueMap_tWriteJSONField_31_Out.get("IsDeleted"));
            root_0_tWriteJSONField_31_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_31_Out .setText(root_0_tWriteJSONField_31_Out,"null");
			root_0_tWriteJSONField_31_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_31_Out = root_tWriteJSONField_31_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_31_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_31_Out .setText(root_1_tWriteJSONField_31_Out,
		valueMap_tWriteJSONField_31_Out.get("ParentId"));
			root_1_tWriteJSONField_31_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_31_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_31_Out .setText(root_1_tWriteJSONField_31_Out,"null");
			root_1_tWriteJSONField_31_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_31_Out = root_tWriteJSONField_31_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_31_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_31_Out .setText(root_2_tWriteJSONField_31_Out,
		valueMap_tWriteJSONField_31_Out.get("CreatedById"));
			root_2_tWriteJSONField_31_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_31_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_31_Out .setText(root_2_tWriteJSONField_31_Out,"null");
			root_2_tWriteJSONField_31_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_31_Out = root_tWriteJSONField_31_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_31_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_31_Out .setText(root_3_tWriteJSONField_31_Out,
		valueMap_tWriteJSONField_31_Out.get("CreatedDate"));
            root_3_tWriteJSONField_31_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_31_Out .setText(root_3_tWriteJSONField_31_Out,"null");
			root_3_tWriteJSONField_31_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_31_Out = root_tWriteJSONField_31_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_31_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_31_Out .setText(root_4_tWriteJSONField_31_Out,
		valueMap_tWriteJSONField_31_Out.get("Field"));
			root_4_tWriteJSONField_31_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_31_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_31_Out .setText(root_4_tWriteJSONField_31_Out,"null");
			root_4_tWriteJSONField_31_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_31_Out = root_tWriteJSONField_31_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_31_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_31_Out .setText(root_5_tWriteJSONField_31_Out,
		valueMap_tWriteJSONField_31_Out.get("OldValue"));
			root_5_tWriteJSONField_31_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_31_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_31_Out .setText(root_5_tWriteJSONField_31_Out,"null");
			root_5_tWriteJSONField_31_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_31_Out = root_tWriteJSONField_31_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_31_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_31_Out .setText(root_6_tWriteJSONField_31_Out,
		valueMap_tWriteJSONField_31_Out.get("NewValue"));
			root_6_tWriteJSONField_31_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_31_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_31_Out .setText(root_6_tWriteJSONField_31_Out,"null");
			root_6_tWriteJSONField_31_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_31_Out = subTreeRootParent_tWriteJSONField_31_Out;
	}else{
		subTreeRootParent_tWriteJSONField_31_Out=root4Group_tWriteJSONField_31_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_31_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_31_Out[0]==0){
        	orders_tWriteJSONField_31_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_31_Out.length){
        		orders_tWriteJSONField_31_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_31_Out.elements().add(orders_tWriteJSONField_31_Out[0]++,loop_tWriteJSONField_31_Out);
		if(
		valueMap_tWriteJSONField_31_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_31_Out .setText(loop_tWriteJSONField_31_Out,
		valueMap_tWriteJSONField_31_Out.get("Id"));
			loop_tWriteJSONField_31_Out.addAttribute("type", "string");
			loop_tWriteJSONField_31_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_31_Out .setText(loop_tWriteJSONField_31_Out,"null");
			loop_tWriteJSONField_31_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_31_Out++;

/**
 * [tWriteJSONField_31_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_31_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_31";
	
	currentComponent="tWriteJSONField_31_Out";

	

 



/**
 * [tWriteJSONField_31_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_31_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_31";
	
	currentComponent="tWriteJSONField_31_Out";

	

 



/**
 * [tWriteJSONField_31_Out process_data_end ] stop
 */

} // End of branch "out31"




	
	/**
	 * [tMap_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

 



/**
 * [tMap_31 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_31";

	


 



/**
 * [tSalesforceInput_31 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_31 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_31";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_31", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_31.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_31 = reader_tSalesforceInput_31.getReturnValues();
if(resultMap_tSalesforceInput_31!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_31 : resultMap_tSalesforceInput_31.entrySet()) {
		switch(entry_tSalesforceInput_31.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_31.setComponentData("tSalesforceInput_31", "ERROR_MESSAGE", entry_tSalesforceInput_31.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_31.setComponentData("tSalesforceInput_31", "NB_LINE", entry_tSalesforceInput_31.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_31.setComponentData("tSalesforceInput_31", "NB_SUCCESS", entry_tSalesforceInput_31.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_31.setComponentData("tSalesforceInput_31", "NB_REJECT", entry_tSalesforceInput_31.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_31 = new StringBuilder();
            for (int i_tSalesforceInput_31 = 0; i_tSalesforceInput_31 < entry_tSalesforceInput_31.getKey().length(); i_tSalesforceInput_31++) {
                char ch_tSalesforceInput_31 = entry_tSalesforceInput_31.getKey().charAt(i_tSalesforceInput_31);
                if(Character.isUpperCase(ch_tSalesforceInput_31) && i_tSalesforceInput_31> 0) {
                	studio_key_tSalesforceInput_31.append('_');
                }
                studio_key_tSalesforceInput_31.append(ch_tSalesforceInput_31);
            }
			container_tSalesforceInput_31.setComponentData("tSalesforceInput_31", studio_key_tSalesforceInput_31.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_31.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_31", true);
end_Hash.put("tSalesforceInput_31", System.currentTimeMillis());




/**
 * [tSalesforceInput_31 end ] stop
 */

	
	/**
	 * [tMap_31 end ] start
	 */

	

	
	
	currentComponent="tMap_31";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row63");
			  	}
			  	
 

ok_Hash.put("tMap_31", true);
end_Hash.put("tMap_31", System.currentTimeMillis());




/**
 * [tMap_31 end ] stop
 */

	
	/**
	 * [tWriteJSONField_31_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_31";
	
	currentComponent="tWriteJSONField_31_Out";

	

if(nb_line_tWriteJSONField_31_Out > 0){  
    nestXMLTool_tWriteJSONField_31_Out.replaceDefaultNameSpace(doc_tWriteJSONField_31_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_31_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_31_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_31_Out, format_tWriteJSONField_31_Out);
	output_tWriteJSONField_31_Out.write(doc_tWriteJSONField_31_Out);
    output_tWriteJSONField_31_Out.close();
					row62Struct row_tWriteJSONField_31_Out = new row62Struct();
						  
					     		row_tWriteJSONField_31_Out.data = strWriter_tWriteJSONField_31_Out.toString();
					     		listGroupby_tWriteJSONField_31_Out.add(row_tWriteJSONField_31_Out);
		    		

}
globalMap.put("tWriteJSONField_31_Out_NB_LINE",nb_line_tWriteJSONField_31_Out);
globalMap.put("tWriteJSONField_31_In_FINISH" + (listGroupby_tWriteJSONField_31_Out==null?"":listGroupby_tWriteJSONField_31_Out.hashCode()), "true");
	
		txf_tWriteJSONField_31_Out.join();
		
		if(txf_tWriteJSONField_31_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_31_Out.getCurrentComponent();
			throw txf_tWriteJSONField_31_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_31_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_31_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_31_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out31");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_31_Out", true);
end_Hash.put("tWriteJSONField_31_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_31_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_31 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_31";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_31")==null){
    if(resourceMap.get("reader_tSalesforceInput_31")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_31")).close();
		} catch (java.io.IOException e_tSalesforceInput_31) {
			String errorMessage_tSalesforceInput_31 = "failed to release the resource in tSalesforceInput_31 :" + e_tSalesforceInput_31.getMessage();
			System.err.println(errorMessage_tSalesforceInput_31);
		}
	}
}
 



/**
 * [tSalesforceInput_31 finally ] stop
 */

	
	/**
	 * [tMap_31 finally ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

 



/**
 * [tMap_31 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_31_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_31";
	
	currentComponent="tWriteJSONField_31_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_31_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_31_In");
		if(resourceMap.get("finish_tWriteJSONField_31_Out") == null){
			globalMap.put("tWriteJSONField_31_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_31_Out==null?"":listGroupby_tWriteJSONField_31_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_31_Out != null) {
		globalMap.put("tWriteJSONField_31_In_FINISH" + (listGroupby_tWriteJSONField_31_Out==null?"":listGroupby_tWriteJSONField_31_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_31_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_31_SUBPROCESS_STATE", 1);
	}
	

public void tDie_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_31", false);
		start_Hash.put("tDie_31", System.currentTimeMillis());
		
	
	currentComponent="tDie_31";

	
		int tos_count_tDie_31 = 0;
		

 



/**
 * [tDie_31 begin ] stop
 */
	
	/**
	 * [tDie_31 main ] start
	 */

	

	
	
	currentComponent="tDie_31";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_31", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_31_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_31_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_31_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_31) {
		logIgnoredError(String.format("tDie_31 - tDie failed to log message due to internal error: %s", e_tDie_31), e_tDie_31);
	}
	
	currentComponent = "tDie_31";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_31_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_31++;

/**
 * [tDie_31 main ] stop
 */
	
	/**
	 * [tDie_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_31";

	

 



/**
 * [tDie_31 process_data_begin ] stop
 */
	
	/**
	 * [tDie_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_31";

	

 



/**
 * [tDie_31 process_data_end ] stop
 */
	
	/**
	 * [tDie_31 end ] start
	 */

	

	
	
	currentComponent="tDie_31";

	

 

ok_Hash.put("tDie_31", true);
end_Hash.put("tDie_31", System.currentTimeMillis());




/**
 * [tDie_31 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_31 finally ] start
	 */

	

	
	
	currentComponent="tDie_31";

	

 



/**
 * [tDie_31 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_31_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_31", false);
		start_Hash.put("tFileArchive_31", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_31";

	
		int tos_count_tFileArchive_31 = 0;
		

 



/**
 * [tFileArchive_31 begin ] stop
 */
	
	/**
	 * [tFileArchive_31 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_31";

	

	

		String sourceFile_tFileArchive_31 = context.staging_S3_dir + "noodlecrm__student_contact_staging__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_31), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_31 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_31 = context.staging_S3_dir + "noodlecrm__student_contact_staging__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_31 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_31, zipFile_tFileArchive_31);
    zip_tFileArchive_31.setOverwriteExistTargetZip(true);
	zip_tFileArchive_31.setMakeTargetDir(true);
	zip_tFileArchive_31.setCompressLevel(9);
	zip_tFileArchive_31.setArchiveFormat("gzip");
	zip_tFileArchive_31.setAllFiles(true);
	
	
		zip_tFileArchive_31.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_31_ARCHIVE_FILEPATH",zipFile_tFileArchive_31);
   
   globalMap.put("tFileArchive_31_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_31).getName());

   zip_tFileArchive_31.doZip();


 


	tos_count_tFileArchive_31++;

/**
 * [tFileArchive_31 main ] stop
 */
	
	/**
	 * [tFileArchive_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_31";

	

 



/**
 * [tFileArchive_31 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_31";

	

 



/**
 * [tFileArchive_31 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_31 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_31";

	

 

ok_Hash.put("tFileArchive_31", true);
end_Hash.put("tFileArchive_31", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk201", 0, "ok");
				}
				tS3Put_31Process(globalMap);



/**
 * [tFileArchive_31 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_31 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_31";

	

 



/**
 * [tFileArchive_31 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_31_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_31", false);
		start_Hash.put("tS3Put_31", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_31";

	
		int tos_count_tS3Put_31 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_31 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_31 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__student_contact_staging__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__student_contact_staging__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_31 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_31 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_31 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_31 = context.staging_S3_dir + "noodlecrm__student_contact_staging__history.json.gz";
	
	boolean useStream_tS3Put_31 = false;
	java.io.InputStream uploadStream_tS3Put_31 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_31 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_31 instanceof String){
		    useStream_tS3Put_31 = false;
		}else if(fileOrStream_tS3Put_31 instanceof java.io.InputStream){
		    useStream_tS3Put_31 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_31 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_31) {
				java.io.File inputFile_tS3Put_31 = new java.io.File((String)fileOrStream_tS3Put_31);
				
				long multipart_upload_threshold_tS3Put_31 = 5 * 1024 * 1024;
				
    		tm_tS3Put_31 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_31)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_31)
    			.withS3Client(conn_tS3Put_31)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_31 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_31, inputFile_tS3Put_31).withMetadata(objectMetadata_tS3Put_31);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_31 = tm_tS3Put_31.upload(putRequest_tS3Put_31);
  		
  			upload_tS3Put_31.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_31 = ((java.io.InputStream)fileOrStream_tS3Put_31);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_31 = new S3StreamUtil();
    		byte[] buffer_tS3Put_31 = new byte[partSizeInBytes_tS3Put_31];
    		sourceStream_tS3Put_31.read(buffer_tS3Put_31);
    		long curPartSize_tS3Put_31 = streamUtil_tS3Put_31.getLength(buffer_tS3Put_31);
    		boolean multiUpload_tS3Put_31 = curPartSize_tS3Put_31 == partSizeInBytes_tS3Put_31;
    		
    		if(!multiUpload_tS3Put_31) {
    				objectMetadata_tS3Put_31.setContentLength(curPartSize_tS3Put_31);
    				uploadStream_tS3Put_31 = new java.io.ByteArrayInputStream(buffer_tS3Put_31,0,Long.valueOf(curPartSize_tS3Put_31).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_31 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_31, uploadStream_tS3Put_31, objectMetadata_tS3Put_31);
			
    				
    				

    				
    				conn_tS3Put_31.putObject(putRequest_tS3Put_31);
    		} else {
    				uploadStream_tS3Put_31 = new java.io.ByteArrayInputStream(buffer_tS3Put_31);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_31 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_31 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_31, objectMetadata_tS3Put_31);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_31 = conn_tS3Put_31.initiateMultipartUpload(putRequest_tS3Put_31);
      			String uploadId_tS3Put_31 = initResponse_tS3Put_31.getUploadId();
      			int partNumber_tS3Put_31 = 1;
      			boolean streamHasNext_tS3Put_31 = true;
      			byte[] probeAvailability_tS3Put_31 = new byte[1];
				try {
					while (streamHasNext_tS3Put_31) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_31 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_31)
						.withUploadId(uploadId_tS3Put_31)
                    	.withPartNumber(partNumber_tS3Put_31)
						.withPartSize(curPartSize_tS3Put_31);
            		    uploadRequest_tS3Put_31.setInputStream(uploadStream_tS3Put_31);
            		    streamHasNext_tS3Put_31 = sourceStream_tS3Put_31.read(probeAvailability_tS3Put_31) != -1;
            		    if(!streamHasNext_tS3Put_31){
                    	    uploadRequest_tS3Put_31.setLastPart(true);
                    	}

                		partTags_tS3Put_31.add(conn_tS3Put_31.uploadPart(uploadRequest_tS3Put_31).getPartETag());
                  	    partNumber_tS3Put_31++;

          		     	if(uploadStream_tS3Put_31!=null){
      		         			uploadStream_tS3Put_31.close();
          		     	}
          		     	buffer_tS3Put_31 = new byte[partSizeInBytes_tS3Put_31];
          		     	sourceStream_tS3Put_31.read(buffer_tS3Put_31,1,partSizeInBytes_tS3Put_31-1);
          		     	buffer_tS3Put_31[0] = probeAvailability_tS3Put_31[0];
          		     	probeAvailability_tS3Put_31 = new byte[1];
          		     	curPartSize_tS3Put_31 = streamUtil_tS3Put_31.getLength(buffer_tS3Put_31);
          		     	uploadStream_tS3Put_31 = new java.io.ByteArrayInputStream(buffer_tS3Put_31);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_31 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_31,
                        uploadId_tS3Put_31, partTags_tS3Put_31);
            		conn_tS3Put_31.completeMultipartUpload(compRequest_tS3Put_31);
            } catch (java.lang.Exception uploadException_tS3Put_31) {
  							conn_tS3Put_31.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_31, uploadId_tS3Put_31));
    						throw uploadException_tS3Put_31;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_31){
		
			throw(e_tS3Put_31);
		
	}finally{
		if(useStream_tS3Put_31 && uploadStream_tS3Put_31!=null){
    	uploadStream_tS3Put_31.close();
    }
    
    if(tm_tS3Put_31 != null){
        tm_tS3Put_31.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_31 begin ] stop
 */
	
	/**
	 * [tS3Put_31 main ] start
	 */

	

	
	
	currentComponent="tS3Put_31";

	

 


	tos_count_tS3Put_31++;

/**
 * [tS3Put_31 main ] stop
 */
	
	/**
	 * [tS3Put_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_31";

	

 



/**
 * [tS3Put_31 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_31";

	

 



/**
 * [tS3Put_31 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_31 end ] start
	 */

	

	
	
	currentComponent="tS3Put_31";

	

 

ok_Hash.put("tS3Put_31", true);
end_Hash.put("tS3Put_31", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk202", 0, "ok");
				}
				tJava_65Process(globalMap);



/**
 * [tS3Put_31 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_31 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_31";

	

 



/**
 * [tS3Put_31 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_31_SUBPROCESS_STATE", 1);
	}
	

public void tJava_65Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_65_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_65 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_65", false);
		start_Hash.put("tJava_65", System.currentTimeMillis());
		
	
	currentComponent="tJava_65";

	
		int tos_count_tJava_65 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_31_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_31_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_65 begin ] stop
 */
	
	/**
	 * [tJava_65 main ] start
	 */

	

	
	
	currentComponent="tJava_65";

	

 


	tos_count_tJava_65++;

/**
 * [tJava_65 main ] stop
 */
	
	/**
	 * [tJava_65 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_65";

	

 



/**
 * [tJava_65 process_data_begin ] stop
 */
	
	/**
	 * [tJava_65 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_65";

	

 



/**
 * [tJava_65 process_data_end ] stop
 */
	
	/**
	 * [tJava_65 end ] start
	 */

	

	
	
	currentComponent="tJava_65";

	

 

ok_Hash.put("tJava_65", true);
end_Hash.put("tJava_65", System.currentTimeMillis());




/**
 * [tJava_65 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_65 finally ] start
	 */

	

	
	
	currentComponent="tJava_65";

	

 



/**
 * [tJava_65 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_65_SUBPROCESS_STATE", 1);
	}
	

public void tJava_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_18", false);
		start_Hash.put("tJava_18", System.currentTimeMillis());
		
	
	currentComponent="tJava_18";

	
		int tos_count_tJava_18 = 0;
		



System.out.println("Running For SFDC Object ContactHistory: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 



System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_18 begin ] stop
 */
	
	/**
	 * [tJava_18 main ] start
	 */

	

	
	
	currentComponent="tJava_18";

	

 


	tos_count_tJava_18++;

/**
 * [tJava_18 main ] stop
 */
	
	/**
	 * [tJava_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_18";

	

 



/**
 * [tJava_18 process_data_begin ] stop
 */
	
	/**
	 * [tJava_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_18";

	

 



/**
 * [tJava_18 process_data_end ] stop
 */
	
	/**
	 * [tJava_18 end ] start
	 */

	

	
	
	currentComponent="tJava_18";

	

 

ok_Hash.put("tJava_18", true);
end_Hash.put("tJava_18", System.currentTimeMillis());




/**
 * [tJava_18 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_18:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tSalesforceInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_18 finally ] start
	 */

	

	
	
	currentComponent="tJava_18";

	

 



/**
 * [tJava_18 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_18_SUBPROCESS_STATE", 1);
	}
	


public static class out33Struct implements routines.system.IPersistableRow<out33Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ContactId;

				public String getContactId () {
					return this.ContactId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ContactId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ContactId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ContactId="+ContactId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row68Struct implements routines.system.IPersistableRow<row68Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ContactId;

				public String getContactId () {
					return this.ContactId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ContactId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ContactId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ContactId="+ContactId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row68Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row68Struct row68 = new row68Struct();
out33Struct out33 = new out33Struct();





	
	/**
	 * [tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_1_Out", false);
		start_Hash.put("tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out33");
					}
				
		int tos_count_tWriteJSONField_1_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_1_Out = 0;
				boolean needRoot_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<row67Struct> listGroupby_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<row67Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_1_Out extends Thread {
						
									    java.util.Queue<row67Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_1_In", queue);
							globalMap.put("flows_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_1_Out txf_tWriteJSONField_1_Out = new ThreadXMLField_tWriteJSONField_1_Out(listGroupby_tWriteJSONField_1_Out);
					
					txf_tWriteJSONField_1_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_1_Out nestXMLTool_tWriteJSONField_1_Out = new NestXMLTool_tWriteJSONField_1_Out();

out33Struct  rowStructOutput_tWriteJSONField_1_Out = new out33Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_1_Out.setTrimText(false);
format_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_1_Out = new int[1];

 



/**
 * [tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row68");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out33Struct out33_tmp = new out33Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_1", false);
		start_Hash.put("tSalesforceInput_1", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_1";

	
		int tos_count_tSalesforceInput_1 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_1 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_1 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_1.createRuntimeProperties();
 		                    props_tSalesforceInput_1.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_1.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_1.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_1.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_1.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_1.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_1.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_1.module.setValue("moduleName",
 		                    "ContactHistory");
 		                    
 		                    props_tSalesforceInput_1.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_1.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_1.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"ContactHistory\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ContactId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ContactId\",\"talend.field.dbColumnName\":\"ContactId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ContactId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"ContactHistory\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_1_1_fisrt sst_tSalesforceInput_1_1_fisrt = new SchemaSettingTool_tSalesforceInput_1_1_fisrt();
 		                    
 		                    props_tSalesforceInput_1.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_1_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_1.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_1);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_1.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_1);
        }
    }
globalMap.put("tSalesforceInput_1_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_1_MAPPINGS_URL", mappings_url_tSalesforceInput_1);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_1 = null;
topology_tSalesforceInput_1 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_1 = def_tSalesforceInput_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_1, topology_tSalesforceInput_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_1 = def_tSalesforceInput_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_1 = componentRuntime_tSalesforceInput_1.initialize(container_tSalesforceInput_1, props_tSalesforceInput_1);

if (initVr_tSalesforceInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_1.getMessage());
}

if(componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_1;
	compDriverInitialization_tSalesforceInput_1.runAtDriver(container_tSalesforceInput_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_1 = null;
if(componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_1;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_1 = sourceOrSink_tSalesforceInput_1.validate(container_tSalesforceInput_1);
	if (vr_tSalesforceInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_1.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_1 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_1;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_1 =
            source_tSalesforceInput_1.createReader(container_tSalesforceInput_1);
	reader_tSalesforceInput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_1, container_tSalesforceInput_1);

        boolean multi_output_is_allowed_tSalesforceInput_1 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_1 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_1.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_1 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_1 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_1 = props_tSalesforceInput_1.getSchema(c_tSalesforceInput_1, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_1 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_1, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_1 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_1 = reader_tSalesforceInput_1.start();

    resourceMap.put("reader_tSalesforceInput_1", reader_tSalesforceInput_1);

    for (; available_tSalesforceInput_1; available_tSalesforceInput_1 = reader_tSalesforceInput_1.advance()) {
    	nb_line_tSalesforceInput_1++;

    	
        if (multi_output_is_allowed_tSalesforceInput_1) {
                row68 = null;

        }

        try {
            Object data_tSalesforceInput_1 = reader_tSalesforceInput_1.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_1) {
                    row68 = new row68Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_1 == null) {
            factory_tSalesforceInput_1 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_1.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_1.setWrapped(factory_tSalesforceInput_1.convertToAvro(data_tSalesforceInput_1));
                Object columnValue_0_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(0);
                        row68.Id = (String) (columnValue_0_tSalesforceInput_1);
                Object columnValue_1_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(1);
                    if (columnValue_1_tSalesforceInput_1 == null) {
                        row68.IsDeleted = false;
                    } else {
                            row68.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_1);
                    }
                Object columnValue_2_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(2);
                        row68.ContactId = (String) (columnValue_2_tSalesforceInput_1);
                Object columnValue_3_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(3);
                        row68.CreatedById = (String) (columnValue_3_tSalesforceInput_1);
                Object columnValue_4_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(4);
                        row68.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_1);
                Object columnValue_5_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(5);
                        row68.Field = (String) (columnValue_5_tSalesforceInput_1);
                Object columnValue_6_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(6);
                        row68.OldValue = (String) (columnValue_6_tSalesforceInput_1);
                Object columnValue_7_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(7);
                        row68.NewValue = (String) (columnValue_7_tSalesforceInput_1);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_1) {
        	java.util.Map<String,Object> info_tSalesforceInput_1 = e_tSalesforceInput_1.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_1 = null;
            	if(info_tSalesforceInput_1.containsKey("error")){
            		errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("error");
        		}else if(info_tSalesforceInput_1.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_1 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_1 = "Row "+ nb_line_tSalesforceInput_1 + ": "+errorMessage_tSalesforceInput_1;
    			System.err.println(errorMessage_tSalesforceInput_1);
            	// If the record is reject, the main line record should put NULL
            	row68 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_1 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_1 = null;


 



/**
 * [tSalesforceInput_1 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_1 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 


	tos_count_tSalesforceInput_1++;

/**
 * [tSalesforceInput_1 main ] stop
 */
	
	/**
	 * [tSalesforceInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 



/**
 * [tSalesforceInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row68");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out33 = null;


// # Output table : 'out33'
out33_tmp.Id = row68.Id ;
out33_tmp.IsDeleted = row68.IsDeleted ;
out33_tmp.ContactId = row68.ContactId ;
out33_tmp.CreatedById = row68.CreatedById ;
out33_tmp.CreatedDate = (row68.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row68.CreatedDate))).getTime())/1000 ;
out33_tmp.Field = row68.Field ;
out33_tmp.OldValue = row68.OldValue ;
out33_tmp.NewValue = row68.NewValue ;
out33 = out33_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out33"
if(out33 != null) { 



	
	/**
	 * [tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out33");
					}
					

	if(txf_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_tWriteJSONField_1_Out++;
	valueMap_tWriteJSONField_1_Out.clear();
	arraysValueMap_tWriteJSONField_1_Out.clear();
	valueMap_tWriteJSONField_1_Out.put("Id",
	(
            out33.Id.toString()
		));
	arraysValueMap_tWriteJSONField_1_Out.put("Id",
	(
            out33.Id.toString()
		));
	valueMap_tWriteJSONField_1_Out.put("IsDeleted",
	(
            String.valueOf(out33.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_1_Out.put("IsDeleted",
	(
            String.valueOf(out33.IsDeleted)
		));
	valueMap_tWriteJSONField_1_Out.put("ContactId",
	(
            out33.ContactId.toString()
		));
	arraysValueMap_tWriteJSONField_1_Out.put("ContactId",
	(
            out33.ContactId.toString()
		));
	valueMap_tWriteJSONField_1_Out.put("CreatedById",
	(
            out33.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_1_Out.put("CreatedById",
	(
            out33.CreatedById.toString()
		));
	valueMap_tWriteJSONField_1_Out.put("CreatedDate",
	(
            String.valueOf(out33.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_1_Out.put("CreatedDate",
	(
            String.valueOf(out33.CreatedDate)
		));
	valueMap_tWriteJSONField_1_Out.put("Field",
	(
            out33.Field.toString()
		));
	arraysValueMap_tWriteJSONField_1_Out.put("Field",
	(
            out33.Field.toString()
		));
	valueMap_tWriteJSONField_1_Out.put("OldValue",
	(
		out33.OldValue != null?
            out33.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_1_Out.put("OldValue",
	(
		out33.OldValue != null?
            out33.OldValue.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("NewValue",
	(
		out33.NewValue != null?
            out33.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_1_Out.put("NewValue",
	(
		out33.NewValue != null?
            out33.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_1_Out = "";
	if(strCompCache_tWriteJSONField_1_Out==null){
		strCompCache_tWriteJSONField_1_Out=strTemp_tWriteJSONField_1_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_1_Out, format_tWriteJSONField_1_Out);
			output_tWriteJSONField_1_Out.write(doc_tWriteJSONField_1_Out);
		    output_tWriteJSONField_1_Out.close();
			
				  		  row67Struct row_tWriteJSONField_1_Out = new row67Struct();
						  
					     		row_tWriteJSONField_1_Out.data = strWriter_tWriteJSONField_1_Out.toString();
					     		listGroupby_tWriteJSONField_1_Out.add(row_tWriteJSONField_1_Out);
					
		    doc_tWriteJSONField_1_Out.clearContent();
			needRoot_tWriteJSONField_1_Out = true;
			for(int i_tWriteJSONField_1_Out=0;i_tWriteJSONField_1_Out<orders_tWriteJSONField_1_Out.length;i_tWriteJSONField_1_Out++){
				orders_tWriteJSONField_1_Out[i_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_1_Out != null && groupbyList_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_tWriteJSONField_1_Out.clear();
			}
			strCompCache_tWriteJSONField_1_Out=strTemp_tWriteJSONField_1_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_1_Out) {
		needRoot_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_tWriteJSONField_1_Out = doc_tWriteJSONField_1_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out;
		org.dom4j.Element root_0_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_1_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_0_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("IsDeleted"));
            root_0_tWriteJSONField_1_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_0_tWriteJSONField_1_Out,"null");
			root_0_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("ContactId");
		if(
		valueMap_tWriteJSONField_1_Out.get("ContactId")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_1_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("ContactId"));
			root_1_tWriteJSONField_1_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_1_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_1_tWriteJSONField_1_Out,"null");
			root_1_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_1_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_2_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("CreatedById"));
			root_2_tWriteJSONField_1_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_1_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_2_tWriteJSONField_1_Out,"null");
			root_2_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_1_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_3_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("CreatedDate"));
            root_3_tWriteJSONField_1_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_3_tWriteJSONField_1_Out,"null");
			root_3_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_1_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_4_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("Field"));
			root_4_tWriteJSONField_1_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_1_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_4_tWriteJSONField_1_Out,"null");
			root_4_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_1_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_5_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("OldValue"));
			root_5_tWriteJSONField_1_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_1_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_5_tWriteJSONField_1_Out,"null");
			root_5_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_1_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_6_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("NewValue"));
			root_6_tWriteJSONField_1_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_1_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_6_tWriteJSONField_1_Out,"null");
			root_6_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_1_Out = subTreeRootParent_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_tWriteJSONField_1_Out=root4Group_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_1_Out[0]==0){
        	orders_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_1_Out.length){
        		orders_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_1_Out.elements().add(orders_tWriteJSONField_1_Out[0]++,loop_tWriteJSONField_1_Out);
		if(
		valueMap_tWriteJSONField_1_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(loop_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("Id"));
			loop_tWriteJSONField_1_Out.addAttribute("type", "string");
			loop_tWriteJSONField_1_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(loop_tWriteJSONField_1_Out,"null");
			loop_tWriteJSONField_1_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_1_Out++;

/**
 * [tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

 



/**
 * [tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

 



/**
 * [tWriteJSONField_1_Out process_data_end ] stop
 */

} // End of branch "out33"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 



/**
 * [tSalesforceInput_1 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_1 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_1", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_1.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_1 = reader_tSalesforceInput_1.getReturnValues();
if(resultMap_tSalesforceInput_1!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_1 : resultMap_tSalesforceInput_1.entrySet()) {
		switch(entry_tSalesforceInput_1.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "ERROR_MESSAGE", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_LINE", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_SUCCESS", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_REJECT", entry_tSalesforceInput_1.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_1 = new StringBuilder();
            for (int i_tSalesforceInput_1 = 0; i_tSalesforceInput_1 < entry_tSalesforceInput_1.getKey().length(); i_tSalesforceInput_1++) {
                char ch_tSalesforceInput_1 = entry_tSalesforceInput_1.getKey().charAt(i_tSalesforceInput_1);
                if(Character.isUpperCase(ch_tSalesforceInput_1) && i_tSalesforceInput_1> 0) {
                	studio_key_tSalesforceInput_1.append('_');
                }
                studio_key_tSalesforceInput_1.append(ch_tSalesforceInput_1);
            }
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", studio_key_tSalesforceInput_1.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_1.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_1", true);
end_Hash.put("tSalesforceInput_1", System.currentTimeMillis());




/**
 * [tSalesforceInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row68");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

if(nb_line_tWriteJSONField_1_Out > 0){  
    nestXMLTool_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_1_Out, format_tWriteJSONField_1_Out);
	output_tWriteJSONField_1_Out.write(doc_tWriteJSONField_1_Out);
    output_tWriteJSONField_1_Out.close();
					row67Struct row_tWriteJSONField_1_Out = new row67Struct();
						  
					     		row_tWriteJSONField_1_Out.data = strWriter_tWriteJSONField_1_Out.toString();
					     		listGroupby_tWriteJSONField_1_Out.add(row_tWriteJSONField_1_Out);
		    		

}
globalMap.put("tWriteJSONField_1_Out_NB_LINE",nb_line_tWriteJSONField_1_Out);
globalMap.put("tWriteJSONField_1_In_FINISH" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
	
		txf_tWriteJSONField_1_Out.join();
		
		if(txf_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_1_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out33");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_1_Out", true);
end_Hash.put("tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_1_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_1 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_1")==null){
    if(resourceMap.get("reader_tSalesforceInput_1")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_1")).close();
		} catch (java.io.IOException e_tSalesforceInput_1) {
			String errorMessage_tSalesforceInput_1 = "failed to release the resource in tSalesforceInput_1 :" + e_tSalesforceInput_1.getMessage();
			System.err.println(errorMessage_tSalesforceInput_1);
		}
	}
}
 



/**
 * [tSalesforceInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_1_In");
		if(resourceMap.get("finish_tWriteJSONField_1_Out") == null){
			globalMap.put("tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_1_Out != null) {
		globalMap.put("tWriteJSONField_1_In_FINISH" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_1_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_1", false);
		start_Hash.put("tFileArchive_1", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_1";

	
		int tos_count_tFileArchive_1 = 0;
		

 



/**
 * [tFileArchive_1 begin ] stop
 */
	
	/**
	 * [tFileArchive_1 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

	

		String sourceFile_tFileArchive_1 = context.staging_S3_dir + "contacthistory.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_1), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_1 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_1 = context.staging_S3_dir + "contacthistory.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_1 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_1, zipFile_tFileArchive_1);
    zip_tFileArchive_1.setOverwriteExistTargetZip(true);
	zip_tFileArchive_1.setMakeTargetDir(true);
	zip_tFileArchive_1.setCompressLevel(9);
	zip_tFileArchive_1.setArchiveFormat("gzip");
	zip_tFileArchive_1.setAllFiles(true);
	
	
		zip_tFileArchive_1.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_1_ARCHIVE_FILEPATH",zipFile_tFileArchive_1);
   
   globalMap.put("tFileArchive_1_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_1).getName());

   zip_tFileArchive_1.doZip();


 


	tos_count_tFileArchive_1++;

/**
 * [tFileArchive_1 main ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_1 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 

ok_Hash.put("tFileArchive_1", true);
end_Hash.put("tFileArchive_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk75", 0, "ok");
				}
				tS3Put_1Process(globalMap);



/**
 * [tFileArchive_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_1 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/contacthistory/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/contacthistory_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = context.staging_S3_dir + "contacthistory.json.gz";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		sourceStream_tS3Put_1.read(buffer_tS3Put_1);
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.getLength(buffer_tS3Put_1);
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				

    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = sourceStream_tS3Put_1.read(probeAvailability_tS3Put_1) != -1;
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	sourceStream_tS3Put_1.read(buffer_tS3Put_1,1,partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	curPartSize_tS3Put_1 = streamUtil_tS3Put_1.getLength(buffer_tS3Put_1);
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
		
			throw(e_tS3Put_1);
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk76", 0, "ok");
				}
				tJava_19Process(globalMap);



/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_19", false);
		start_Hash.put("tJava_19", System.currentTimeMillis());
		
	
	currentComponent="tJava_19";

	
		int tos_count_tJava_19 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_1_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_1_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_19 begin ] stop
 */
	
	/**
	 * [tJava_19 main ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 


	tos_count_tJava_19++;

/**
 * [tJava_19 main ] stop
 */
	
	/**
	 * [tJava_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 



/**
 * [tJava_19 process_data_begin ] stop
 */
	
	/**
	 * [tJava_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 



/**
 * [tJava_19 process_data_end ] stop
 */
	
	/**
	 * [tJava_19 end ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 

ok_Hash.put("tJava_19", true);
end_Hash.put("tJava_19", System.currentTimeMillis());




/**
 * [tJava_19 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_19 finally ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 



/**
 * [tJava_19 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_19_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_1_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class out30Struct implements routines.system.IPersistableRow<out30Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row61Struct implements routines.system.IPersistableRow<row61Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row61Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row61Struct row61 = new row61Struct();
out30Struct out30 = new out30Struct();





	
	/**
	 * [tWriteJSONField_30_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_30_Out", false);
		start_Hash.put("tWriteJSONField_30_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_30";
	
	currentComponent="tWriteJSONField_30_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out30");
					}
				
		int tos_count_tWriteJSONField_30_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_30_Out = 0;
				boolean needRoot_tWriteJSONField_30_Out  = true;
				
				String  strCompCache_tWriteJSONField_30_Out= null;		
				
						        java.util.Queue<row60Struct> listGroupby_tWriteJSONField_30_Out = new java.util.concurrent.ConcurrentLinkedQueue<row60Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_30_Out extends Thread {
						
									    java.util.Queue<row60Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_30_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_30_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_30_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_30_In", queue);
							globalMap.put("flows_tWriteJSONField_30_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_30_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_30_Out txf_tWriteJSONField_30_Out = new ThreadXMLField_tWriteJSONField_30_Out(listGroupby_tWriteJSONField_30_Out);
					
					txf_tWriteJSONField_30_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_30_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_30_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_30_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_30_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_30_Out nestXMLTool_tWriteJSONField_30_Out = new NestXMLTool_tWriteJSONField_30_Out();

out30Struct  rowStructOutput_tWriteJSONField_30_Out = new out30Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_30_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_30_Out = null;
org.dom4j.Document doc_tWriteJSONField_30_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_30_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_30_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_30_Out.setTrimText(false);
format_tWriteJSONField_30_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_30_Out = new int[1];

 



/**
 * [tWriteJSONField_30_Out begin ] stop
 */



	
	/**
	 * [tMap_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_30", false);
		start_Hash.put("tMap_30", System.currentTimeMillis());
		
	
	currentComponent="tMap_30";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row61");
					}
				
		int tos_count_tMap_30 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_30__Struct  {
}
Var__tMap_30__Struct Var__tMap_30 = new Var__tMap_30__Struct();
// ###############################

// ###############################
// # Outputs initialization
out30Struct out30_tmp = new out30Struct();
// ###############################

        
        



        









 



/**
 * [tMap_30 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_30", false);
		start_Hash.put("tSalesforceInput_30", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_30";

	
		int tos_count_tSalesforceInput_30 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_30 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_30 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_30.createRuntimeProperties();
 		                    props_tSalesforceInput_30.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_30.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_30.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_30.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_30.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_30.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_30.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_30.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_30.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_30.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_30.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_30.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_30.module.setValue("moduleName",
 		                    "NoodleCRM__Program_Term_Enrollment__History");
 		                    
 		                    props_tSalesforceInput_30.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_30.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_30.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_30.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_30.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_30_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Program_Term_Enrollment__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Program_Term_Enrollment__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_30_1_fisrt sst_tSalesforceInput_30_1_fisrt = new SchemaSettingTool_tSalesforceInput_30_1_fisrt();
 		                    
 		                    props_tSalesforceInput_30.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_30_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_30.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_30 = props_tSalesforceInput_30.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_30 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_30 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_30 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_30.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_30);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_30.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_30 = props_tSalesforceInput_30.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_30 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_30 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_30 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_30.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_30);
        }
    }
globalMap.put("tSalesforceInput_30_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_30);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_30= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_30_MAPPINGS_URL", mappings_url_tSalesforceInput_30);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_30 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_30";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_30 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_30 = null;
topology_tSalesforceInput_30 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_30 = def_tSalesforceInput_30.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_30, topology_tSalesforceInput_30);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_30 = def_tSalesforceInput_30.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_30 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_30.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_30 = componentRuntime_tSalesforceInput_30.initialize(container_tSalesforceInput_30, props_tSalesforceInput_30);

if (initVr_tSalesforceInput_30.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_30.getMessage());
}

if(componentRuntime_tSalesforceInput_30 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_30 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_30;
	compDriverInitialization_tSalesforceInput_30.runAtDriver(container_tSalesforceInput_30);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_30 = null;
if(componentRuntime_tSalesforceInput_30 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_30 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_30;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_30 = sourceOrSink_tSalesforceInput_30.validate(container_tSalesforceInput_30);
	if (vr_tSalesforceInput_30.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_30.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_30 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_30;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_30 =
            source_tSalesforceInput_30.createReader(container_tSalesforceInput_30);
	reader_tSalesforceInput_30 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_30, container_tSalesforceInput_30);

        boolean multi_output_is_allowed_tSalesforceInput_30 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_30 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_30.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_30 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_30 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_30 = props_tSalesforceInput_30.getSchema(c_tSalesforceInput_30, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_30 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_30, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_30 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_30 = reader_tSalesforceInput_30.start();

    resourceMap.put("reader_tSalesforceInput_30", reader_tSalesforceInput_30);

    for (; available_tSalesforceInput_30; available_tSalesforceInput_30 = reader_tSalesforceInput_30.advance()) {
    	nb_line_tSalesforceInput_30++;

    	
        if (multi_output_is_allowed_tSalesforceInput_30) {
                row61 = null;

        }

        try {
            Object data_tSalesforceInput_30 = reader_tSalesforceInput_30.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_30) {
                    row61 = new row61Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_30 == null) {
            factory_tSalesforceInput_30 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_30.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_30.setWrapped(factory_tSalesforceInput_30.convertToAvro(data_tSalesforceInput_30));
                Object columnValue_0_tSalesforceInput_30 = outgoingEnforcer_tSalesforceInput_30.get(0);
                        row61.Id = (String) (columnValue_0_tSalesforceInput_30);
                Object columnValue_1_tSalesforceInput_30 = outgoingEnforcer_tSalesforceInput_30.get(1);
                    if (columnValue_1_tSalesforceInput_30 == null) {
                        row61.IsDeleted = false;
                    } else {
                            row61.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_30);
                    }
                Object columnValue_2_tSalesforceInput_30 = outgoingEnforcer_tSalesforceInput_30.get(2);
                        row61.ParentId = (String) (columnValue_2_tSalesforceInput_30);
                Object columnValue_3_tSalesforceInput_30 = outgoingEnforcer_tSalesforceInput_30.get(3);
                        row61.CreatedById = (String) (columnValue_3_tSalesforceInput_30);
                Object columnValue_4_tSalesforceInput_30 = outgoingEnforcer_tSalesforceInput_30.get(4);
                        row61.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_30);
                Object columnValue_5_tSalesforceInput_30 = outgoingEnforcer_tSalesforceInput_30.get(5);
                        row61.Field = (String) (columnValue_5_tSalesforceInput_30);
                Object columnValue_6_tSalesforceInput_30 = outgoingEnforcer_tSalesforceInput_30.get(6);
                        row61.OldValue = (String) (columnValue_6_tSalesforceInput_30);
                Object columnValue_7_tSalesforceInput_30 = outgoingEnforcer_tSalesforceInput_30.get(7);
                        row61.NewValue = (String) (columnValue_7_tSalesforceInput_30);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_30) {
        	java.util.Map<String,Object> info_tSalesforceInput_30 = e_tSalesforceInput_30.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_30 = null;
            	if(info_tSalesforceInput_30.containsKey("error")){
            		errorMessage_tSalesforceInput_30 = info_tSalesforceInput_30.get("error");
        		}else if(info_tSalesforceInput_30.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_30 = info_tSalesforceInput_30.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_30 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_30 = "Row "+ nb_line_tSalesforceInput_30 + ": "+errorMessage_tSalesforceInput_30;
    			System.err.println(errorMessage_tSalesforceInput_30);
            	// If the record is reject, the main line record should put NULL
            	row61 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_30 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_30 = null;


 



/**
 * [tSalesforceInput_30 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_30 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_30";

	


 


	tos_count_tSalesforceInput_30++;

/**
 * [tSalesforceInput_30 main ] stop
 */
	
	/**
	 * [tSalesforceInput_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_30";

	


 



/**
 * [tSalesforceInput_30 process_data_begin ] stop
 */

	
	/**
	 * [tMap_30 main ] start
	 */

	

	
	
	currentComponent="tMap_30";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row61");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_30 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_30 = false;
		  boolean mainRowRejected_tMap_30 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_30__Struct Var = Var__tMap_30;// ###############################
        // ###############################
        // # Output tables

out30 = null;


// # Output table : 'out30'
out30_tmp.Id = row61.Id ;
out30_tmp.IsDeleted = row61.IsDeleted ;
out30_tmp.ParentId = row61.ParentId ;
out30_tmp.CreatedById = row61.CreatedById ;
out30_tmp.CreatedDate = (row61.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row61.CreatedDate))).getTime())/1000 ;
out30_tmp.Field = row61.Field ;
out30_tmp.OldValue = row61.OldValue ;
out30_tmp.NewValue = row61.NewValue ;
out30 = out30_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_30 = false;










 


	tos_count_tMap_30++;

/**
 * [tMap_30 main ] stop
 */
	
	/**
	 * [tMap_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

 



/**
 * [tMap_30 process_data_begin ] stop
 */
// Start of branch "out30"
if(out30 != null) { 



	
	/**
	 * [tWriteJSONField_30_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_30";
	
	currentComponent="tWriteJSONField_30_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out30");
					}
					

	if(txf_tWriteJSONField_30_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_30_Out.getCurrentComponent();
		throw txf_tWriteJSONField_30_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_30_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_30_Out.getLastError();
	}
	nb_line_tWriteJSONField_30_Out++;
	valueMap_tWriteJSONField_30_Out.clear();
	arraysValueMap_tWriteJSONField_30_Out.clear();
	valueMap_tWriteJSONField_30_Out.put("Id",
	(
            out30.Id.toString()
		));
	arraysValueMap_tWriteJSONField_30_Out.put("Id",
	(
            out30.Id.toString()
		));
	valueMap_tWriteJSONField_30_Out.put("IsDeleted",
	(
            String.valueOf(out30.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_30_Out.put("IsDeleted",
	(
            String.valueOf(out30.IsDeleted)
		));
	valueMap_tWriteJSONField_30_Out.put("ParentId",
	(
            out30.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_30_Out.put("ParentId",
	(
            out30.ParentId.toString()
		));
	valueMap_tWriteJSONField_30_Out.put("CreatedById",
	(
            out30.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_30_Out.put("CreatedById",
	(
            out30.CreatedById.toString()
		));
	valueMap_tWriteJSONField_30_Out.put("CreatedDate",
	(
            String.valueOf(out30.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_30_Out.put("CreatedDate",
	(
            String.valueOf(out30.CreatedDate)
		));
	valueMap_tWriteJSONField_30_Out.put("Field",
	(
            out30.Field.toString()
		));
	arraysValueMap_tWriteJSONField_30_Out.put("Field",
	(
            out30.Field.toString()
		));
	valueMap_tWriteJSONField_30_Out.put("OldValue",
	(
		out30.OldValue != null?
            out30.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_30_Out.put("OldValue",
	(
		out30.OldValue != null?
            out30.OldValue.toString():null
		));
	valueMap_tWriteJSONField_30_Out.put("NewValue",
	(
		out30.NewValue != null?
            out30.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_30_Out.put("NewValue",
	(
		out30.NewValue != null?
            out30.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_30_Out = "";
	if(strCompCache_tWriteJSONField_30_Out==null){
		strCompCache_tWriteJSONField_30_Out=strTemp_tWriteJSONField_30_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_30_Out.replaceDefaultNameSpace(doc_tWriteJSONField_30_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_30_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_30_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_30_Out, format_tWriteJSONField_30_Out);
			output_tWriteJSONField_30_Out.write(doc_tWriteJSONField_30_Out);
		    output_tWriteJSONField_30_Out.close();
			
				  		  row60Struct row_tWriteJSONField_30_Out = new row60Struct();
						  
					     		row_tWriteJSONField_30_Out.data = strWriter_tWriteJSONField_30_Out.toString();
					     		listGroupby_tWriteJSONField_30_Out.add(row_tWriteJSONField_30_Out);
					
		    doc_tWriteJSONField_30_Out.clearContent();
			needRoot_tWriteJSONField_30_Out = true;
			for(int i_tWriteJSONField_30_Out=0;i_tWriteJSONField_30_Out<orders_tWriteJSONField_30_Out.length;i_tWriteJSONField_30_Out++){
				orders_tWriteJSONField_30_Out[i_tWriteJSONField_30_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_30_Out != null && groupbyList_tWriteJSONField_30_Out.size() >= 0){
				groupbyList_tWriteJSONField_30_Out.clear();
			}
			strCompCache_tWriteJSONField_30_Out=strTemp_tWriteJSONField_30_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_30_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_30_Out) {
		needRoot_tWriteJSONField_30_Out=false;
		org.dom4j.Element root_tWriteJSONField_30_Out = doc_tWriteJSONField_30_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_30_Out = root_tWriteJSONField_30_Out;
		org.dom4j.Element root_0_tWriteJSONField_30_Out = root_tWriteJSONField_30_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_30_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_30_Out .setText(root_0_tWriteJSONField_30_Out,
		valueMap_tWriteJSONField_30_Out.get("IsDeleted"));
            root_0_tWriteJSONField_30_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_30_Out .setText(root_0_tWriteJSONField_30_Out,"null");
			root_0_tWriteJSONField_30_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_30_Out = root_tWriteJSONField_30_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_30_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_30_Out .setText(root_1_tWriteJSONField_30_Out,
		valueMap_tWriteJSONField_30_Out.get("ParentId"));
			root_1_tWriteJSONField_30_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_30_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_30_Out .setText(root_1_tWriteJSONField_30_Out,"null");
			root_1_tWriteJSONField_30_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_30_Out = root_tWriteJSONField_30_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_30_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_30_Out .setText(root_2_tWriteJSONField_30_Out,
		valueMap_tWriteJSONField_30_Out.get("CreatedById"));
			root_2_tWriteJSONField_30_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_30_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_30_Out .setText(root_2_tWriteJSONField_30_Out,"null");
			root_2_tWriteJSONField_30_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_30_Out = root_tWriteJSONField_30_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_30_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_30_Out .setText(root_3_tWriteJSONField_30_Out,
		valueMap_tWriteJSONField_30_Out.get("CreatedDate"));
            root_3_tWriteJSONField_30_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_30_Out .setText(root_3_tWriteJSONField_30_Out,"null");
			root_3_tWriteJSONField_30_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_30_Out = root_tWriteJSONField_30_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_30_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_30_Out .setText(root_4_tWriteJSONField_30_Out,
		valueMap_tWriteJSONField_30_Out.get("Field"));
			root_4_tWriteJSONField_30_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_30_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_30_Out .setText(root_4_tWriteJSONField_30_Out,"null");
			root_4_tWriteJSONField_30_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_30_Out = root_tWriteJSONField_30_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_30_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_30_Out .setText(root_5_tWriteJSONField_30_Out,
		valueMap_tWriteJSONField_30_Out.get("OldValue"));
			root_5_tWriteJSONField_30_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_30_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_30_Out .setText(root_5_tWriteJSONField_30_Out,"null");
			root_5_tWriteJSONField_30_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_30_Out = root_tWriteJSONField_30_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_30_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_30_Out .setText(root_6_tWriteJSONField_30_Out,
		valueMap_tWriteJSONField_30_Out.get("NewValue"));
			root_6_tWriteJSONField_30_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_30_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_30_Out .setText(root_6_tWriteJSONField_30_Out,"null");
			root_6_tWriteJSONField_30_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_30_Out = subTreeRootParent_tWriteJSONField_30_Out;
	}else{
		subTreeRootParent_tWriteJSONField_30_Out=root4Group_tWriteJSONField_30_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_30_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_30_Out[0]==0){
        	orders_tWriteJSONField_30_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_30_Out.length){
        		orders_tWriteJSONField_30_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_30_Out.elements().add(orders_tWriteJSONField_30_Out[0]++,loop_tWriteJSONField_30_Out);
		if(
		valueMap_tWriteJSONField_30_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_30_Out .setText(loop_tWriteJSONField_30_Out,
		valueMap_tWriteJSONField_30_Out.get("Id"));
			loop_tWriteJSONField_30_Out.addAttribute("type", "string");
			loop_tWriteJSONField_30_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_30_Out .setText(loop_tWriteJSONField_30_Out,"null");
			loop_tWriteJSONField_30_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_30_Out++;

/**
 * [tWriteJSONField_30_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_30_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_30";
	
	currentComponent="tWriteJSONField_30_Out";

	

 



/**
 * [tWriteJSONField_30_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_30_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_30";
	
	currentComponent="tWriteJSONField_30_Out";

	

 



/**
 * [tWriteJSONField_30_Out process_data_end ] stop
 */

} // End of branch "out30"




	
	/**
	 * [tMap_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

 



/**
 * [tMap_30 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_30";

	


 



/**
 * [tSalesforceInput_30 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_30 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_30";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_30", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_30.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_30 = reader_tSalesforceInput_30.getReturnValues();
if(resultMap_tSalesforceInput_30!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_30 : resultMap_tSalesforceInput_30.entrySet()) {
		switch(entry_tSalesforceInput_30.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_30.setComponentData("tSalesforceInput_30", "ERROR_MESSAGE", entry_tSalesforceInput_30.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_30.setComponentData("tSalesforceInput_30", "NB_LINE", entry_tSalesforceInput_30.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_30.setComponentData("tSalesforceInput_30", "NB_SUCCESS", entry_tSalesforceInput_30.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_30.setComponentData("tSalesforceInput_30", "NB_REJECT", entry_tSalesforceInput_30.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_30 = new StringBuilder();
            for (int i_tSalesforceInput_30 = 0; i_tSalesforceInput_30 < entry_tSalesforceInput_30.getKey().length(); i_tSalesforceInput_30++) {
                char ch_tSalesforceInput_30 = entry_tSalesforceInput_30.getKey().charAt(i_tSalesforceInput_30);
                if(Character.isUpperCase(ch_tSalesforceInput_30) && i_tSalesforceInput_30> 0) {
                	studio_key_tSalesforceInput_30.append('_');
                }
                studio_key_tSalesforceInput_30.append(ch_tSalesforceInput_30);
            }
			container_tSalesforceInput_30.setComponentData("tSalesforceInput_30", studio_key_tSalesforceInput_30.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_30.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_30", true);
end_Hash.put("tSalesforceInput_30", System.currentTimeMillis());




/**
 * [tSalesforceInput_30 end ] stop
 */

	
	/**
	 * [tMap_30 end ] start
	 */

	

	
	
	currentComponent="tMap_30";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row61");
			  	}
			  	
 

ok_Hash.put("tMap_30", true);
end_Hash.put("tMap_30", System.currentTimeMillis());




/**
 * [tMap_30 end ] stop
 */

	
	/**
	 * [tWriteJSONField_30_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_30";
	
	currentComponent="tWriteJSONField_30_Out";

	

if(nb_line_tWriteJSONField_30_Out > 0){  
    nestXMLTool_tWriteJSONField_30_Out.replaceDefaultNameSpace(doc_tWriteJSONField_30_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_30_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_30_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_30_Out, format_tWriteJSONField_30_Out);
	output_tWriteJSONField_30_Out.write(doc_tWriteJSONField_30_Out);
    output_tWriteJSONField_30_Out.close();
					row60Struct row_tWriteJSONField_30_Out = new row60Struct();
						  
					     		row_tWriteJSONField_30_Out.data = strWriter_tWriteJSONField_30_Out.toString();
					     		listGroupby_tWriteJSONField_30_Out.add(row_tWriteJSONField_30_Out);
		    		

}
globalMap.put("tWriteJSONField_30_Out_NB_LINE",nb_line_tWriteJSONField_30_Out);
globalMap.put("tWriteJSONField_30_In_FINISH" + (listGroupby_tWriteJSONField_30_Out==null?"":listGroupby_tWriteJSONField_30_Out.hashCode()), "true");
	
		txf_tWriteJSONField_30_Out.join();
		
		if(txf_tWriteJSONField_30_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_30_Out.getCurrentComponent();
			throw txf_tWriteJSONField_30_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_30_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_30_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_30_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out30");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_30_Out", true);
end_Hash.put("tWriteJSONField_30_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_30_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_30 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_30";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_30")==null){
    if(resourceMap.get("reader_tSalesforceInput_30")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_30")).close();
		} catch (java.io.IOException e_tSalesforceInput_30) {
			String errorMessage_tSalesforceInput_30 = "failed to release the resource in tSalesforceInput_30 :" + e_tSalesforceInput_30.getMessage();
			System.err.println(errorMessage_tSalesforceInput_30);
		}
	}
}
 



/**
 * [tSalesforceInput_30 finally ] stop
 */

	
	/**
	 * [tMap_30 finally ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

 



/**
 * [tMap_30 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_30_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_30";
	
	currentComponent="tWriteJSONField_30_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_30_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_30_In");
		if(resourceMap.get("finish_tWriteJSONField_30_Out") == null){
			globalMap.put("tWriteJSONField_30_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_30_Out==null?"":listGroupby_tWriteJSONField_30_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_30_Out != null) {
		globalMap.put("tWriteJSONField_30_In_FINISH" + (listGroupby_tWriteJSONField_30_Out==null?"":listGroupby_tWriteJSONField_30_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_30_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_30_SUBPROCESS_STATE", 1);
	}
	

public void tDie_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_30", false);
		start_Hash.put("tDie_30", System.currentTimeMillis());
		
	
	currentComponent="tDie_30";

	
		int tos_count_tDie_30 = 0;
		

 



/**
 * [tDie_30 begin ] stop
 */
	
	/**
	 * [tDie_30 main ] start
	 */

	

	
	
	currentComponent="tDie_30";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_30", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_30_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_30_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_30_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_30) {
		logIgnoredError(String.format("tDie_30 - tDie failed to log message due to internal error: %s", e_tDie_30), e_tDie_30);
	}
	
	currentComponent = "tDie_30";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_30_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_30++;

/**
 * [tDie_30 main ] stop
 */
	
	/**
	 * [tDie_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_30";

	

 



/**
 * [tDie_30 process_data_begin ] stop
 */
	
	/**
	 * [tDie_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_30";

	

 



/**
 * [tDie_30 process_data_end ] stop
 */
	
	/**
	 * [tDie_30 end ] start
	 */

	

	
	
	currentComponent="tDie_30";

	

 

ok_Hash.put("tDie_30", true);
end_Hash.put("tDie_30", System.currentTimeMillis());




/**
 * [tDie_30 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_30 finally ] start
	 */

	

	
	
	currentComponent="tDie_30";

	

 



/**
 * [tDie_30 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_30_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_30", false);
		start_Hash.put("tFileArchive_30", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_30";

	
		int tos_count_tFileArchive_30 = 0;
		

 



/**
 * [tFileArchive_30 begin ] stop
 */
	
	/**
	 * [tFileArchive_30 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_30";

	

	

		String sourceFile_tFileArchive_30 = context.staging_S3_dir + "noodlecrm__program_term_enrollment__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_30), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_30 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_30 = context.staging_S3_dir + "noodlecrm__program_term_enrollment__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_30 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_30, zipFile_tFileArchive_30);
    zip_tFileArchive_30.setOverwriteExistTargetZip(true);
	zip_tFileArchive_30.setMakeTargetDir(true);
	zip_tFileArchive_30.setCompressLevel(9);
	zip_tFileArchive_30.setArchiveFormat("gzip");
	zip_tFileArchive_30.setAllFiles(true);
	
	
		zip_tFileArchive_30.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_30_ARCHIVE_FILEPATH",zipFile_tFileArchive_30);
   
   globalMap.put("tFileArchive_30_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_30).getName());

   zip_tFileArchive_30.doZip();


 


	tos_count_tFileArchive_30++;

/**
 * [tFileArchive_30 main ] stop
 */
	
	/**
	 * [tFileArchive_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_30";

	

 



/**
 * [tFileArchive_30 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_30";

	

 



/**
 * [tFileArchive_30 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_30 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_30";

	

 

ok_Hash.put("tFileArchive_30", true);
end_Hash.put("tFileArchive_30", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk197", 0, "ok");
				}
				tS3Put_30Process(globalMap);



/**
 * [tFileArchive_30 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_30 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_30";

	

 



/**
 * [tFileArchive_30 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_30_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_30", false);
		start_Hash.put("tS3Put_30", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_30";

	
		int tos_count_tS3Put_30 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_30 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_30 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__program_term_enrollment__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__program_term_enrollment__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_30 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_30 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_30 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_30 = context.staging_S3_dir + "noodlecrm__program_term_enrollment__history.json.gz";
	
	boolean useStream_tS3Put_30 = false;
	java.io.InputStream uploadStream_tS3Put_30 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_30 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_30 instanceof String){
		    useStream_tS3Put_30 = false;
		}else if(fileOrStream_tS3Put_30 instanceof java.io.InputStream){
		    useStream_tS3Put_30 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_30 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_30) {
				java.io.File inputFile_tS3Put_30 = new java.io.File((String)fileOrStream_tS3Put_30);
				
				long multipart_upload_threshold_tS3Put_30 = 5 * 1024 * 1024;
				
    		tm_tS3Put_30 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_30)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_30)
    			.withS3Client(conn_tS3Put_30)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_30 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_30, inputFile_tS3Put_30).withMetadata(objectMetadata_tS3Put_30);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_30 = tm_tS3Put_30.upload(putRequest_tS3Put_30);
  		
  			upload_tS3Put_30.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_30 = ((java.io.InputStream)fileOrStream_tS3Put_30);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_30 = new S3StreamUtil();
    		byte[] buffer_tS3Put_30 = new byte[partSizeInBytes_tS3Put_30];
    		sourceStream_tS3Put_30.read(buffer_tS3Put_30);
    		long curPartSize_tS3Put_30 = streamUtil_tS3Put_30.getLength(buffer_tS3Put_30);
    		boolean multiUpload_tS3Put_30 = curPartSize_tS3Put_30 == partSizeInBytes_tS3Put_30;
    		
    		if(!multiUpload_tS3Put_30) {
    				objectMetadata_tS3Put_30.setContentLength(curPartSize_tS3Put_30);
    				uploadStream_tS3Put_30 = new java.io.ByteArrayInputStream(buffer_tS3Put_30,0,Long.valueOf(curPartSize_tS3Put_30).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_30 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_30, uploadStream_tS3Put_30, objectMetadata_tS3Put_30);
			
    				
    				

    				
    				conn_tS3Put_30.putObject(putRequest_tS3Put_30);
    		} else {
    				uploadStream_tS3Put_30 = new java.io.ByteArrayInputStream(buffer_tS3Put_30);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_30 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_30 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_30, objectMetadata_tS3Put_30);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_30 = conn_tS3Put_30.initiateMultipartUpload(putRequest_tS3Put_30);
      			String uploadId_tS3Put_30 = initResponse_tS3Put_30.getUploadId();
      			int partNumber_tS3Put_30 = 1;
      			boolean streamHasNext_tS3Put_30 = true;
      			byte[] probeAvailability_tS3Put_30 = new byte[1];
				try {
					while (streamHasNext_tS3Put_30) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_30 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_30)
						.withUploadId(uploadId_tS3Put_30)
                    	.withPartNumber(partNumber_tS3Put_30)
						.withPartSize(curPartSize_tS3Put_30);
            		    uploadRequest_tS3Put_30.setInputStream(uploadStream_tS3Put_30);
            		    streamHasNext_tS3Put_30 = sourceStream_tS3Put_30.read(probeAvailability_tS3Put_30) != -1;
            		    if(!streamHasNext_tS3Put_30){
                    	    uploadRequest_tS3Put_30.setLastPart(true);
                    	}

                		partTags_tS3Put_30.add(conn_tS3Put_30.uploadPart(uploadRequest_tS3Put_30).getPartETag());
                  	    partNumber_tS3Put_30++;

          		     	if(uploadStream_tS3Put_30!=null){
      		         			uploadStream_tS3Put_30.close();
          		     	}
          		     	buffer_tS3Put_30 = new byte[partSizeInBytes_tS3Put_30];
          		     	sourceStream_tS3Put_30.read(buffer_tS3Put_30,1,partSizeInBytes_tS3Put_30-1);
          		     	buffer_tS3Put_30[0] = probeAvailability_tS3Put_30[0];
          		     	probeAvailability_tS3Put_30 = new byte[1];
          		     	curPartSize_tS3Put_30 = streamUtil_tS3Put_30.getLength(buffer_tS3Put_30);
          		     	uploadStream_tS3Put_30 = new java.io.ByteArrayInputStream(buffer_tS3Put_30);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_30 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_30,
                        uploadId_tS3Put_30, partTags_tS3Put_30);
            		conn_tS3Put_30.completeMultipartUpload(compRequest_tS3Put_30);
            } catch (java.lang.Exception uploadException_tS3Put_30) {
  							conn_tS3Put_30.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_30, uploadId_tS3Put_30));
    						throw uploadException_tS3Put_30;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_30){
		
			throw(e_tS3Put_30);
		
	}finally{
		if(useStream_tS3Put_30 && uploadStream_tS3Put_30!=null){
    	uploadStream_tS3Put_30.close();
    }
    
    if(tm_tS3Put_30 != null){
        tm_tS3Put_30.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_30 begin ] stop
 */
	
	/**
	 * [tS3Put_30 main ] start
	 */

	

	
	
	currentComponent="tS3Put_30";

	

 


	tos_count_tS3Put_30++;

/**
 * [tS3Put_30 main ] stop
 */
	
	/**
	 * [tS3Put_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_30";

	

 



/**
 * [tS3Put_30 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_30";

	

 



/**
 * [tS3Put_30 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_30 end ] start
	 */

	

	
	
	currentComponent="tS3Put_30";

	

 

ok_Hash.put("tS3Put_30", true);
end_Hash.put("tS3Put_30", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk198", 0, "ok");
				}
				tJava_64Process(globalMap);



/**
 * [tS3Put_30 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_30 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_30";

	

 



/**
 * [tS3Put_30 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_30_SUBPROCESS_STATE", 1);
	}
	

public void tJava_64Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_64_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_64 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_64", false);
		start_Hash.put("tJava_64", System.currentTimeMillis());
		
	
	currentComponent="tJava_64";

	
		int tos_count_tJava_64 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_30_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_30_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_64 begin ] stop
 */
	
	/**
	 * [tJava_64 main ] start
	 */

	

	
	
	currentComponent="tJava_64";

	

 


	tos_count_tJava_64++;

/**
 * [tJava_64 main ] stop
 */
	
	/**
	 * [tJava_64 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_64";

	

 



/**
 * [tJava_64 process_data_begin ] stop
 */
	
	/**
	 * [tJava_64 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_64";

	

 



/**
 * [tJava_64 process_data_end ] stop
 */
	
	/**
	 * [tJava_64 end ] start
	 */

	

	
	
	currentComponent="tJava_64";

	

 

ok_Hash.put("tJava_64", true);
end_Hash.put("tJava_64", System.currentTimeMillis());




/**
 * [tJava_64 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_64 finally ] start
	 */

	

	
	
	currentComponent="tJava_64";

	

 



/**
 * [tJava_64 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_64_SUBPROCESS_STATE", 1);
	}
	


public static class out29Struct implements routines.system.IPersistableRow<out29Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row59Struct implements routines.system.IPersistableRow<row59Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row59Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row59Struct row59 = new row59Struct();
out29Struct out29 = new out29Struct();





	
	/**
	 * [tWriteJSONField_29_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_29_Out", false);
		start_Hash.put("tWriteJSONField_29_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_29";
	
	currentComponent="tWriteJSONField_29_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out29");
					}
				
		int tos_count_tWriteJSONField_29_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_29_Out = 0;
				boolean needRoot_tWriteJSONField_29_Out  = true;
				
				String  strCompCache_tWriteJSONField_29_Out= null;		
				
						        java.util.Queue<row58Struct> listGroupby_tWriteJSONField_29_Out = new java.util.concurrent.ConcurrentLinkedQueue<row58Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_29_Out extends Thread {
						
									    java.util.Queue<row58Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_29_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_29_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_29_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_29_In", queue);
							globalMap.put("flows_tWriteJSONField_29_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_29_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_29_Out txf_tWriteJSONField_29_Out = new ThreadXMLField_tWriteJSONField_29_Out(listGroupby_tWriteJSONField_29_Out);
					
					txf_tWriteJSONField_29_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_29_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_29_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_29_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_29_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_29_Out nestXMLTool_tWriteJSONField_29_Out = new NestXMLTool_tWriteJSONField_29_Out();

out29Struct  rowStructOutput_tWriteJSONField_29_Out = new out29Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_29_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_29_Out = null;
org.dom4j.Document doc_tWriteJSONField_29_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_29_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_29_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_29_Out.setTrimText(false);
format_tWriteJSONField_29_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_29_Out = new int[1];

 



/**
 * [tWriteJSONField_29_Out begin ] stop
 */



	
	/**
	 * [tMap_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_29", false);
		start_Hash.put("tMap_29", System.currentTimeMillis());
		
	
	currentComponent="tMap_29";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row59");
					}
				
		int tos_count_tMap_29 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_29__Struct  {
}
Var__tMap_29__Struct Var__tMap_29 = new Var__tMap_29__Struct();
// ###############################

// ###############################
// # Outputs initialization
out29Struct out29_tmp = new out29Struct();
// ###############################

        
        



        









 



/**
 * [tMap_29 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_29", false);
		start_Hash.put("tSalesforceInput_29", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_29";

	
		int tos_count_tSalesforceInput_29 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_29 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_29 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_29.createRuntimeProperties();
 		                    props_tSalesforceInput_29.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_29.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_29.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_29.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_29.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_29.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_29.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_29.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_29.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_29.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_29.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_29.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_29.module.setValue("moduleName",
 		                    "NoodleCRM__Program_Concentration__History");
 		                    
 		                    props_tSalesforceInput_29.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_29.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_29.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_29.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_29.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_29_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Program_Concentration__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Program_Concentration__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_29_1_fisrt sst_tSalesforceInput_29_1_fisrt = new SchemaSettingTool_tSalesforceInput_29_1_fisrt();
 		                    
 		                    props_tSalesforceInput_29.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_29_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_29.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_29 = props_tSalesforceInput_29.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_29 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_29 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_29 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_29.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_29);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_29.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_29 = props_tSalesforceInput_29.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_29 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_29 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_29 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_29.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_29);
        }
    }
globalMap.put("tSalesforceInput_29_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_29);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_29= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_29_MAPPINGS_URL", mappings_url_tSalesforceInput_29);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_29 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_29";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_29 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_29 = null;
topology_tSalesforceInput_29 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_29 = def_tSalesforceInput_29.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_29, topology_tSalesforceInput_29);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_29 = def_tSalesforceInput_29.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_29 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_29.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_29 = componentRuntime_tSalesforceInput_29.initialize(container_tSalesforceInput_29, props_tSalesforceInput_29);

if (initVr_tSalesforceInput_29.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_29.getMessage());
}

if(componentRuntime_tSalesforceInput_29 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_29 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_29;
	compDriverInitialization_tSalesforceInput_29.runAtDriver(container_tSalesforceInput_29);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_29 = null;
if(componentRuntime_tSalesforceInput_29 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_29 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_29;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_29 = sourceOrSink_tSalesforceInput_29.validate(container_tSalesforceInput_29);
	if (vr_tSalesforceInput_29.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_29.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_29 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_29;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_29 =
            source_tSalesforceInput_29.createReader(container_tSalesforceInput_29);
	reader_tSalesforceInput_29 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_29, container_tSalesforceInput_29);

        boolean multi_output_is_allowed_tSalesforceInput_29 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_29 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_29.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_29 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_29 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_29 = props_tSalesforceInput_29.getSchema(c_tSalesforceInput_29, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_29 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_29, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_29 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_29 = reader_tSalesforceInput_29.start();

    resourceMap.put("reader_tSalesforceInput_29", reader_tSalesforceInput_29);

    for (; available_tSalesforceInput_29; available_tSalesforceInput_29 = reader_tSalesforceInput_29.advance()) {
    	nb_line_tSalesforceInput_29++;

    	
        if (multi_output_is_allowed_tSalesforceInput_29) {
                row59 = null;

        }

        try {
            Object data_tSalesforceInput_29 = reader_tSalesforceInput_29.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_29) {
                    row59 = new row59Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_29 == null) {
            factory_tSalesforceInput_29 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_29.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_29.setWrapped(factory_tSalesforceInput_29.convertToAvro(data_tSalesforceInput_29));
                Object columnValue_0_tSalesforceInput_29 = outgoingEnforcer_tSalesforceInput_29.get(0);
                        row59.Id = (String) (columnValue_0_tSalesforceInput_29);
                Object columnValue_1_tSalesforceInput_29 = outgoingEnforcer_tSalesforceInput_29.get(1);
                    if (columnValue_1_tSalesforceInput_29 == null) {
                        row59.IsDeleted = false;
                    } else {
                            row59.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_29);
                    }
                Object columnValue_2_tSalesforceInput_29 = outgoingEnforcer_tSalesforceInput_29.get(2);
                        row59.ParentId = (String) (columnValue_2_tSalesforceInput_29);
                Object columnValue_3_tSalesforceInput_29 = outgoingEnforcer_tSalesforceInput_29.get(3);
                        row59.CreatedById = (String) (columnValue_3_tSalesforceInput_29);
                Object columnValue_4_tSalesforceInput_29 = outgoingEnforcer_tSalesforceInput_29.get(4);
                        row59.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_29);
                Object columnValue_5_tSalesforceInput_29 = outgoingEnforcer_tSalesforceInput_29.get(5);
                        row59.Field = (String) (columnValue_5_tSalesforceInput_29);
                Object columnValue_6_tSalesforceInput_29 = outgoingEnforcer_tSalesforceInput_29.get(6);
                        row59.OldValue = (String) (columnValue_6_tSalesforceInput_29);
                Object columnValue_7_tSalesforceInput_29 = outgoingEnforcer_tSalesforceInput_29.get(7);
                        row59.NewValue = (String) (columnValue_7_tSalesforceInput_29);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_29) {
        	java.util.Map<String,Object> info_tSalesforceInput_29 = e_tSalesforceInput_29.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_29 = null;
            	if(info_tSalesforceInput_29.containsKey("error")){
            		errorMessage_tSalesforceInput_29 = info_tSalesforceInput_29.get("error");
        		}else if(info_tSalesforceInput_29.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_29 = info_tSalesforceInput_29.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_29 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_29 = "Row "+ nb_line_tSalesforceInput_29 + ": "+errorMessage_tSalesforceInput_29;
    			System.err.println(errorMessage_tSalesforceInput_29);
            	// If the record is reject, the main line record should put NULL
            	row59 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_29 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_29 = null;


 



/**
 * [tSalesforceInput_29 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_29 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_29";

	


 


	tos_count_tSalesforceInput_29++;

/**
 * [tSalesforceInput_29 main ] stop
 */
	
	/**
	 * [tSalesforceInput_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_29";

	


 



/**
 * [tSalesforceInput_29 process_data_begin ] stop
 */

	
	/**
	 * [tMap_29 main ] start
	 */

	

	
	
	currentComponent="tMap_29";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row59");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_29 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_29 = false;
		  boolean mainRowRejected_tMap_29 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_29__Struct Var = Var__tMap_29;// ###############################
        // ###############################
        // # Output tables

out29 = null;


// # Output table : 'out29'
out29_tmp.Id = row59.Id ;
out29_tmp.IsDeleted = row59.IsDeleted ;
out29_tmp.ParentId = row59.ParentId ;
out29_tmp.CreatedById = row59.CreatedById ;
out29_tmp.CreatedDate = (row59.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row59.CreatedDate))).getTime())/1000 ;
out29_tmp.Field = row59.Field ;
out29_tmp.OldValue = row59.OldValue ;
out29_tmp.NewValue = row59.NewValue ;
out29 = out29_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_29 = false;










 


	tos_count_tMap_29++;

/**
 * [tMap_29 main ] stop
 */
	
	/**
	 * [tMap_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

 



/**
 * [tMap_29 process_data_begin ] stop
 */
// Start of branch "out29"
if(out29 != null) { 



	
	/**
	 * [tWriteJSONField_29_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_29";
	
	currentComponent="tWriteJSONField_29_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out29");
					}
					

	if(txf_tWriteJSONField_29_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_29_Out.getCurrentComponent();
		throw txf_tWriteJSONField_29_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_29_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_29_Out.getLastError();
	}
	nb_line_tWriteJSONField_29_Out++;
	valueMap_tWriteJSONField_29_Out.clear();
	arraysValueMap_tWriteJSONField_29_Out.clear();
	valueMap_tWriteJSONField_29_Out.put("Id",
	(
            out29.Id.toString()
		));
	arraysValueMap_tWriteJSONField_29_Out.put("Id",
	(
            out29.Id.toString()
		));
	valueMap_tWriteJSONField_29_Out.put("IsDeleted",
	(
            String.valueOf(out29.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_29_Out.put("IsDeleted",
	(
            String.valueOf(out29.IsDeleted)
		));
	valueMap_tWriteJSONField_29_Out.put("ParentId",
	(
            out29.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_29_Out.put("ParentId",
	(
            out29.ParentId.toString()
		));
	valueMap_tWriteJSONField_29_Out.put("CreatedById",
	(
            out29.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_29_Out.put("CreatedById",
	(
            out29.CreatedById.toString()
		));
	valueMap_tWriteJSONField_29_Out.put("CreatedDate",
	(
            String.valueOf(out29.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_29_Out.put("CreatedDate",
	(
            String.valueOf(out29.CreatedDate)
		));
	valueMap_tWriteJSONField_29_Out.put("Field",
	(
            out29.Field.toString()
		));
	arraysValueMap_tWriteJSONField_29_Out.put("Field",
	(
            out29.Field.toString()
		));
	valueMap_tWriteJSONField_29_Out.put("OldValue",
	(
		out29.OldValue != null?
            out29.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_29_Out.put("OldValue",
	(
		out29.OldValue != null?
            out29.OldValue.toString():null
		));
	valueMap_tWriteJSONField_29_Out.put("NewValue",
	(
		out29.NewValue != null?
            out29.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_29_Out.put("NewValue",
	(
		out29.NewValue != null?
            out29.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_29_Out = "";
	if(strCompCache_tWriteJSONField_29_Out==null){
		strCompCache_tWriteJSONField_29_Out=strTemp_tWriteJSONField_29_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_29_Out.replaceDefaultNameSpace(doc_tWriteJSONField_29_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_29_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_29_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_29_Out, format_tWriteJSONField_29_Out);
			output_tWriteJSONField_29_Out.write(doc_tWriteJSONField_29_Out);
		    output_tWriteJSONField_29_Out.close();
			
				  		  row58Struct row_tWriteJSONField_29_Out = new row58Struct();
						  
					     		row_tWriteJSONField_29_Out.data = strWriter_tWriteJSONField_29_Out.toString();
					     		listGroupby_tWriteJSONField_29_Out.add(row_tWriteJSONField_29_Out);
					
		    doc_tWriteJSONField_29_Out.clearContent();
			needRoot_tWriteJSONField_29_Out = true;
			for(int i_tWriteJSONField_29_Out=0;i_tWriteJSONField_29_Out<orders_tWriteJSONField_29_Out.length;i_tWriteJSONField_29_Out++){
				orders_tWriteJSONField_29_Out[i_tWriteJSONField_29_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_29_Out != null && groupbyList_tWriteJSONField_29_Out.size() >= 0){
				groupbyList_tWriteJSONField_29_Out.clear();
			}
			strCompCache_tWriteJSONField_29_Out=strTemp_tWriteJSONField_29_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_29_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_29_Out) {
		needRoot_tWriteJSONField_29_Out=false;
		org.dom4j.Element root_tWriteJSONField_29_Out = doc_tWriteJSONField_29_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_29_Out = root_tWriteJSONField_29_Out;
		org.dom4j.Element root_0_tWriteJSONField_29_Out = root_tWriteJSONField_29_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_29_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_29_Out .setText(root_0_tWriteJSONField_29_Out,
		valueMap_tWriteJSONField_29_Out.get("IsDeleted"));
            root_0_tWriteJSONField_29_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_29_Out .setText(root_0_tWriteJSONField_29_Out,"null");
			root_0_tWriteJSONField_29_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_29_Out = root_tWriteJSONField_29_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_29_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_29_Out .setText(root_1_tWriteJSONField_29_Out,
		valueMap_tWriteJSONField_29_Out.get("ParentId"));
			root_1_tWriteJSONField_29_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_29_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_29_Out .setText(root_1_tWriteJSONField_29_Out,"null");
			root_1_tWriteJSONField_29_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_29_Out = root_tWriteJSONField_29_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_29_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_29_Out .setText(root_2_tWriteJSONField_29_Out,
		valueMap_tWriteJSONField_29_Out.get("CreatedById"));
			root_2_tWriteJSONField_29_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_29_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_29_Out .setText(root_2_tWriteJSONField_29_Out,"null");
			root_2_tWriteJSONField_29_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_29_Out = root_tWriteJSONField_29_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_29_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_29_Out .setText(root_3_tWriteJSONField_29_Out,
		valueMap_tWriteJSONField_29_Out.get("CreatedDate"));
            root_3_tWriteJSONField_29_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_29_Out .setText(root_3_tWriteJSONField_29_Out,"null");
			root_3_tWriteJSONField_29_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_29_Out = root_tWriteJSONField_29_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_29_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_29_Out .setText(root_4_tWriteJSONField_29_Out,
		valueMap_tWriteJSONField_29_Out.get("Field"));
			root_4_tWriteJSONField_29_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_29_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_29_Out .setText(root_4_tWriteJSONField_29_Out,"null");
			root_4_tWriteJSONField_29_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_29_Out = root_tWriteJSONField_29_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_29_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_29_Out .setText(root_5_tWriteJSONField_29_Out,
		valueMap_tWriteJSONField_29_Out.get("OldValue"));
			root_5_tWriteJSONField_29_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_29_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_29_Out .setText(root_5_tWriteJSONField_29_Out,"null");
			root_5_tWriteJSONField_29_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_29_Out = root_tWriteJSONField_29_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_29_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_29_Out .setText(root_6_tWriteJSONField_29_Out,
		valueMap_tWriteJSONField_29_Out.get("NewValue"));
			root_6_tWriteJSONField_29_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_29_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_29_Out .setText(root_6_tWriteJSONField_29_Out,"null");
			root_6_tWriteJSONField_29_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_29_Out = subTreeRootParent_tWriteJSONField_29_Out;
	}else{
		subTreeRootParent_tWriteJSONField_29_Out=root4Group_tWriteJSONField_29_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_29_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_29_Out[0]==0){
        	orders_tWriteJSONField_29_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_29_Out.length){
        		orders_tWriteJSONField_29_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_29_Out.elements().add(orders_tWriteJSONField_29_Out[0]++,loop_tWriteJSONField_29_Out);
		if(
		valueMap_tWriteJSONField_29_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_29_Out .setText(loop_tWriteJSONField_29_Out,
		valueMap_tWriteJSONField_29_Out.get("Id"));
			loop_tWriteJSONField_29_Out.addAttribute("type", "string");
			loop_tWriteJSONField_29_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_29_Out .setText(loop_tWriteJSONField_29_Out,"null");
			loop_tWriteJSONField_29_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_29_Out++;

/**
 * [tWriteJSONField_29_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_29_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_29";
	
	currentComponent="tWriteJSONField_29_Out";

	

 



/**
 * [tWriteJSONField_29_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_29_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_29";
	
	currentComponent="tWriteJSONField_29_Out";

	

 



/**
 * [tWriteJSONField_29_Out process_data_end ] stop
 */

} // End of branch "out29"




	
	/**
	 * [tMap_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

 



/**
 * [tMap_29 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_29";

	


 



/**
 * [tSalesforceInput_29 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_29 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_29";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_29", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_29.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_29 = reader_tSalesforceInput_29.getReturnValues();
if(resultMap_tSalesforceInput_29!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_29 : resultMap_tSalesforceInput_29.entrySet()) {
		switch(entry_tSalesforceInput_29.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_29.setComponentData("tSalesforceInput_29", "ERROR_MESSAGE", entry_tSalesforceInput_29.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_29.setComponentData("tSalesforceInput_29", "NB_LINE", entry_tSalesforceInput_29.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_29.setComponentData("tSalesforceInput_29", "NB_SUCCESS", entry_tSalesforceInput_29.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_29.setComponentData("tSalesforceInput_29", "NB_REJECT", entry_tSalesforceInput_29.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_29 = new StringBuilder();
            for (int i_tSalesforceInput_29 = 0; i_tSalesforceInput_29 < entry_tSalesforceInput_29.getKey().length(); i_tSalesforceInput_29++) {
                char ch_tSalesforceInput_29 = entry_tSalesforceInput_29.getKey().charAt(i_tSalesforceInput_29);
                if(Character.isUpperCase(ch_tSalesforceInput_29) && i_tSalesforceInput_29> 0) {
                	studio_key_tSalesforceInput_29.append('_');
                }
                studio_key_tSalesforceInput_29.append(ch_tSalesforceInput_29);
            }
			container_tSalesforceInput_29.setComponentData("tSalesforceInput_29", studio_key_tSalesforceInput_29.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_29.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_29", true);
end_Hash.put("tSalesforceInput_29", System.currentTimeMillis());




/**
 * [tSalesforceInput_29 end ] stop
 */

	
	/**
	 * [tMap_29 end ] start
	 */

	

	
	
	currentComponent="tMap_29";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row59");
			  	}
			  	
 

ok_Hash.put("tMap_29", true);
end_Hash.put("tMap_29", System.currentTimeMillis());




/**
 * [tMap_29 end ] stop
 */

	
	/**
	 * [tWriteJSONField_29_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_29";
	
	currentComponent="tWriteJSONField_29_Out";

	

if(nb_line_tWriteJSONField_29_Out > 0){  
    nestXMLTool_tWriteJSONField_29_Out.replaceDefaultNameSpace(doc_tWriteJSONField_29_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_29_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_29_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_29_Out, format_tWriteJSONField_29_Out);
	output_tWriteJSONField_29_Out.write(doc_tWriteJSONField_29_Out);
    output_tWriteJSONField_29_Out.close();
					row58Struct row_tWriteJSONField_29_Out = new row58Struct();
						  
					     		row_tWriteJSONField_29_Out.data = strWriter_tWriteJSONField_29_Out.toString();
					     		listGroupby_tWriteJSONField_29_Out.add(row_tWriteJSONField_29_Out);
		    		

}
globalMap.put("tWriteJSONField_29_Out_NB_LINE",nb_line_tWriteJSONField_29_Out);
globalMap.put("tWriteJSONField_29_In_FINISH" + (listGroupby_tWriteJSONField_29_Out==null?"":listGroupby_tWriteJSONField_29_Out.hashCode()), "true");
	
		txf_tWriteJSONField_29_Out.join();
		
		if(txf_tWriteJSONField_29_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_29_Out.getCurrentComponent();
			throw txf_tWriteJSONField_29_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_29_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_29_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_29_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out29");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_29_Out", true);
end_Hash.put("tWriteJSONField_29_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_29_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_29 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_29";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_29")==null){
    if(resourceMap.get("reader_tSalesforceInput_29")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_29")).close();
		} catch (java.io.IOException e_tSalesforceInput_29) {
			String errorMessage_tSalesforceInput_29 = "failed to release the resource in tSalesforceInput_29 :" + e_tSalesforceInput_29.getMessage();
			System.err.println(errorMessage_tSalesforceInput_29);
		}
	}
}
 



/**
 * [tSalesforceInput_29 finally ] stop
 */

	
	/**
	 * [tMap_29 finally ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

 



/**
 * [tMap_29 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_29_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_29";
	
	currentComponent="tWriteJSONField_29_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_29_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_29_In");
		if(resourceMap.get("finish_tWriteJSONField_29_Out") == null){
			globalMap.put("tWriteJSONField_29_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_29_Out==null?"":listGroupby_tWriteJSONField_29_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_29_Out != null) {
		globalMap.put("tWriteJSONField_29_In_FINISH" + (listGroupby_tWriteJSONField_29_Out==null?"":listGroupby_tWriteJSONField_29_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_29_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_29_SUBPROCESS_STATE", 1);
	}
	

public void tDie_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_29", false);
		start_Hash.put("tDie_29", System.currentTimeMillis());
		
	
	currentComponent="tDie_29";

	
		int tos_count_tDie_29 = 0;
		

 



/**
 * [tDie_29 begin ] stop
 */
	
	/**
	 * [tDie_29 main ] start
	 */

	

	
	
	currentComponent="tDie_29";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_29", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_29_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_29_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_29_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_29) {
		logIgnoredError(String.format("tDie_29 - tDie failed to log message due to internal error: %s", e_tDie_29), e_tDie_29);
	}
	
	currentComponent = "tDie_29";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_29_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_29++;

/**
 * [tDie_29 main ] stop
 */
	
	/**
	 * [tDie_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_29";

	

 



/**
 * [tDie_29 process_data_begin ] stop
 */
	
	/**
	 * [tDie_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_29";

	

 



/**
 * [tDie_29 process_data_end ] stop
 */
	
	/**
	 * [tDie_29 end ] start
	 */

	

	
	
	currentComponent="tDie_29";

	

 

ok_Hash.put("tDie_29", true);
end_Hash.put("tDie_29", System.currentTimeMillis());




/**
 * [tDie_29 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_29 finally ] start
	 */

	

	
	
	currentComponent="tDie_29";

	

 



/**
 * [tDie_29 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_29_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_29", false);
		start_Hash.put("tFileArchive_29", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_29";

	
		int tos_count_tFileArchive_29 = 0;
		

 



/**
 * [tFileArchive_29 begin ] stop
 */
	
	/**
	 * [tFileArchive_29 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_29";

	

	

		String sourceFile_tFileArchive_29 = context.staging_S3_dir + "noodlecrm__program_concentration__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_29), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_29 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_29 = context.staging_S3_dir + "noodlecrm__program_concentration__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_29 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_29, zipFile_tFileArchive_29);
    zip_tFileArchive_29.setOverwriteExistTargetZip(true);
	zip_tFileArchive_29.setMakeTargetDir(true);
	zip_tFileArchive_29.setCompressLevel(9);
	zip_tFileArchive_29.setArchiveFormat("gzip");
	zip_tFileArchive_29.setAllFiles(true);
	
	
		zip_tFileArchive_29.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_29_ARCHIVE_FILEPATH",zipFile_tFileArchive_29);
   
   globalMap.put("tFileArchive_29_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_29).getName());

   zip_tFileArchive_29.doZip();


 


	tos_count_tFileArchive_29++;

/**
 * [tFileArchive_29 main ] stop
 */
	
	/**
	 * [tFileArchive_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_29";

	

 



/**
 * [tFileArchive_29 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_29";

	

 



/**
 * [tFileArchive_29 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_29 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_29";

	

 

ok_Hash.put("tFileArchive_29", true);
end_Hash.put("tFileArchive_29", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk193", 0, "ok");
				}
				tS3Put_29Process(globalMap);



/**
 * [tFileArchive_29 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_29 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_29";

	

 



/**
 * [tFileArchive_29 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_29_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_29", false);
		start_Hash.put("tS3Put_29", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_29";

	
		int tos_count_tS3Put_29 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_29 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_29 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__program_concentration__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__program_concentration__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_29 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_29 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_29 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_29 = context.staging_S3_dir + "noodlecrm__program_concentration__history.json.gz";
	
	boolean useStream_tS3Put_29 = false;
	java.io.InputStream uploadStream_tS3Put_29 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_29 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_29 instanceof String){
		    useStream_tS3Put_29 = false;
		}else if(fileOrStream_tS3Put_29 instanceof java.io.InputStream){
		    useStream_tS3Put_29 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_29 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_29) {
				java.io.File inputFile_tS3Put_29 = new java.io.File((String)fileOrStream_tS3Put_29);
				
				long multipart_upload_threshold_tS3Put_29 = 5 * 1024 * 1024;
				
    		tm_tS3Put_29 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_29)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_29)
    			.withS3Client(conn_tS3Put_29)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_29 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_29, inputFile_tS3Put_29).withMetadata(objectMetadata_tS3Put_29);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_29 = tm_tS3Put_29.upload(putRequest_tS3Put_29);
  		
  			upload_tS3Put_29.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_29 = ((java.io.InputStream)fileOrStream_tS3Put_29);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_29 = new S3StreamUtil();
    		byte[] buffer_tS3Put_29 = new byte[partSizeInBytes_tS3Put_29];
    		sourceStream_tS3Put_29.read(buffer_tS3Put_29);
    		long curPartSize_tS3Put_29 = streamUtil_tS3Put_29.getLength(buffer_tS3Put_29);
    		boolean multiUpload_tS3Put_29 = curPartSize_tS3Put_29 == partSizeInBytes_tS3Put_29;
    		
    		if(!multiUpload_tS3Put_29) {
    				objectMetadata_tS3Put_29.setContentLength(curPartSize_tS3Put_29);
    				uploadStream_tS3Put_29 = new java.io.ByteArrayInputStream(buffer_tS3Put_29,0,Long.valueOf(curPartSize_tS3Put_29).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_29 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_29, uploadStream_tS3Put_29, objectMetadata_tS3Put_29);
			
    				
    				

    				
    				conn_tS3Put_29.putObject(putRequest_tS3Put_29);
    		} else {
    				uploadStream_tS3Put_29 = new java.io.ByteArrayInputStream(buffer_tS3Put_29);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_29 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_29 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_29, objectMetadata_tS3Put_29);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_29 = conn_tS3Put_29.initiateMultipartUpload(putRequest_tS3Put_29);
      			String uploadId_tS3Put_29 = initResponse_tS3Put_29.getUploadId();
      			int partNumber_tS3Put_29 = 1;
      			boolean streamHasNext_tS3Put_29 = true;
      			byte[] probeAvailability_tS3Put_29 = new byte[1];
				try {
					while (streamHasNext_tS3Put_29) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_29 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_29)
						.withUploadId(uploadId_tS3Put_29)
                    	.withPartNumber(partNumber_tS3Put_29)
						.withPartSize(curPartSize_tS3Put_29);
            		    uploadRequest_tS3Put_29.setInputStream(uploadStream_tS3Put_29);
            		    streamHasNext_tS3Put_29 = sourceStream_tS3Put_29.read(probeAvailability_tS3Put_29) != -1;
            		    if(!streamHasNext_tS3Put_29){
                    	    uploadRequest_tS3Put_29.setLastPart(true);
                    	}

                		partTags_tS3Put_29.add(conn_tS3Put_29.uploadPart(uploadRequest_tS3Put_29).getPartETag());
                  	    partNumber_tS3Put_29++;

          		     	if(uploadStream_tS3Put_29!=null){
      		         			uploadStream_tS3Put_29.close();
          		     	}
          		     	buffer_tS3Put_29 = new byte[partSizeInBytes_tS3Put_29];
          		     	sourceStream_tS3Put_29.read(buffer_tS3Put_29,1,partSizeInBytes_tS3Put_29-1);
          		     	buffer_tS3Put_29[0] = probeAvailability_tS3Put_29[0];
          		     	probeAvailability_tS3Put_29 = new byte[1];
          		     	curPartSize_tS3Put_29 = streamUtil_tS3Put_29.getLength(buffer_tS3Put_29);
          		     	uploadStream_tS3Put_29 = new java.io.ByteArrayInputStream(buffer_tS3Put_29);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_29 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_29,
                        uploadId_tS3Put_29, partTags_tS3Put_29);
            		conn_tS3Put_29.completeMultipartUpload(compRequest_tS3Put_29);
            } catch (java.lang.Exception uploadException_tS3Put_29) {
  							conn_tS3Put_29.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_29, uploadId_tS3Put_29));
    						throw uploadException_tS3Put_29;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_29){
		
			throw(e_tS3Put_29);
		
	}finally{
		if(useStream_tS3Put_29 && uploadStream_tS3Put_29!=null){
    	uploadStream_tS3Put_29.close();
    }
    
    if(tm_tS3Put_29 != null){
        tm_tS3Put_29.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_29 begin ] stop
 */
	
	/**
	 * [tS3Put_29 main ] start
	 */

	

	
	
	currentComponent="tS3Put_29";

	

 


	tos_count_tS3Put_29++;

/**
 * [tS3Put_29 main ] stop
 */
	
	/**
	 * [tS3Put_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_29";

	

 



/**
 * [tS3Put_29 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_29";

	

 



/**
 * [tS3Put_29 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_29 end ] start
	 */

	

	
	
	currentComponent="tS3Put_29";

	

 

ok_Hash.put("tS3Put_29", true);
end_Hash.put("tS3Put_29", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk194", 0, "ok");
				}
				tJava_63Process(globalMap);



/**
 * [tS3Put_29 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_29 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_29";

	

 



/**
 * [tS3Put_29 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_29_SUBPROCESS_STATE", 1);
	}
	

public void tJava_63Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_63_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_63 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_63", false);
		start_Hash.put("tJava_63", System.currentTimeMillis());
		
	
	currentComponent="tJava_63";

	
		int tos_count_tJava_63 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_29_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_29_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_63 begin ] stop
 */
	
	/**
	 * [tJava_63 main ] start
	 */

	

	
	
	currentComponent="tJava_63";

	

 


	tos_count_tJava_63++;

/**
 * [tJava_63 main ] stop
 */
	
	/**
	 * [tJava_63 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_63";

	

 



/**
 * [tJava_63 process_data_begin ] stop
 */
	
	/**
	 * [tJava_63 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_63";

	

 



/**
 * [tJava_63 process_data_end ] stop
 */
	
	/**
	 * [tJava_63 end ] start
	 */

	

	
	
	currentComponent="tJava_63";

	

 

ok_Hash.put("tJava_63", true);
end_Hash.put("tJava_63", System.currentTimeMillis());




/**
 * [tJava_63 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_63 finally ] start
	 */

	

	
	
	currentComponent="tJava_63";

	

 



/**
 * [tJava_63 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_63_SUBPROCESS_STATE", 1);
	}
	


public static class out28Struct implements routines.system.IPersistableRow<out28Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row57Struct implements routines.system.IPersistableRow<row57Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row57Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row57Struct row57 = new row57Struct();
out28Struct out28 = new out28Struct();





	
	/**
	 * [tWriteJSONField_28_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_28_Out", false);
		start_Hash.put("tWriteJSONField_28_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_28";
	
	currentComponent="tWriteJSONField_28_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out28");
					}
				
		int tos_count_tWriteJSONField_28_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_28_Out = 0;
				boolean needRoot_tWriteJSONField_28_Out  = true;
				
				String  strCompCache_tWriteJSONField_28_Out= null;		
				
						        java.util.Queue<row56Struct> listGroupby_tWriteJSONField_28_Out = new java.util.concurrent.ConcurrentLinkedQueue<row56Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_28_Out extends Thread {
						
									    java.util.Queue<row56Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_28_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_28_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_28_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_28_In", queue);
							globalMap.put("flows_tWriteJSONField_28_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_28_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_28_Out txf_tWriteJSONField_28_Out = new ThreadXMLField_tWriteJSONField_28_Out(listGroupby_tWriteJSONField_28_Out);
					
					txf_tWriteJSONField_28_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_28_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_28_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_28_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_28_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_28_Out nestXMLTool_tWriteJSONField_28_Out = new NestXMLTool_tWriteJSONField_28_Out();

out28Struct  rowStructOutput_tWriteJSONField_28_Out = new out28Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_28_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_28_Out = null;
org.dom4j.Document doc_tWriteJSONField_28_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_28_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_28_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_28_Out.setTrimText(false);
format_tWriteJSONField_28_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_28_Out = new int[1];

 



/**
 * [tWriteJSONField_28_Out begin ] stop
 */



	
	/**
	 * [tMap_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_28", false);
		start_Hash.put("tMap_28", System.currentTimeMillis());
		
	
	currentComponent="tMap_28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row57");
					}
				
		int tos_count_tMap_28 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_28__Struct  {
}
Var__tMap_28__Struct Var__tMap_28 = new Var__tMap_28__Struct();
// ###############################

// ###############################
// # Outputs initialization
out28Struct out28_tmp = new out28Struct();
// ###############################

        
        



        









 



/**
 * [tMap_28 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_28", false);
		start_Hash.put("tSalesforceInput_28", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_28";

	
		int tos_count_tSalesforceInput_28 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_28 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_28 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_28.createRuntimeProperties();
 		                    props_tSalesforceInput_28.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_28.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_28.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_28.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_28.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_28.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_28.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_28.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_28.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_28.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_28.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_28.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_28.module.setValue("moduleName",
 		                    "NoodleCRM__Program_Assignment__History");
 		                    
 		                    props_tSalesforceInput_28.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_28.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_28.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_28.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_28.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_28_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Program_Assignment__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Program_Assignment__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_28_1_fisrt sst_tSalesforceInput_28_1_fisrt = new SchemaSettingTool_tSalesforceInput_28_1_fisrt();
 		                    
 		                    props_tSalesforceInput_28.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_28_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_28.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_28 = props_tSalesforceInput_28.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_28 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_28 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_28 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_28.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_28);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_28.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_28 = props_tSalesforceInput_28.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_28 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_28 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_28 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_28.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_28);
        }
    }
globalMap.put("tSalesforceInput_28_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_28);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_28= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_28_MAPPINGS_URL", mappings_url_tSalesforceInput_28);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_28 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_28";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_28 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_28 = null;
topology_tSalesforceInput_28 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_28 = def_tSalesforceInput_28.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_28, topology_tSalesforceInput_28);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_28 = def_tSalesforceInput_28.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_28 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_28.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_28 = componentRuntime_tSalesforceInput_28.initialize(container_tSalesforceInput_28, props_tSalesforceInput_28);

if (initVr_tSalesforceInput_28.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_28.getMessage());
}

if(componentRuntime_tSalesforceInput_28 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_28 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_28;
	compDriverInitialization_tSalesforceInput_28.runAtDriver(container_tSalesforceInput_28);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_28 = null;
if(componentRuntime_tSalesforceInput_28 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_28 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_28;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_28 = sourceOrSink_tSalesforceInput_28.validate(container_tSalesforceInput_28);
	if (vr_tSalesforceInput_28.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_28.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_28 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_28;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_28 =
            source_tSalesforceInput_28.createReader(container_tSalesforceInput_28);
	reader_tSalesforceInput_28 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_28, container_tSalesforceInput_28);

        boolean multi_output_is_allowed_tSalesforceInput_28 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_28 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_28.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_28 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_28 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_28 = props_tSalesforceInput_28.getSchema(c_tSalesforceInput_28, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_28 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_28, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_28 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_28 = reader_tSalesforceInput_28.start();

    resourceMap.put("reader_tSalesforceInput_28", reader_tSalesforceInput_28);

    for (; available_tSalesforceInput_28; available_tSalesforceInput_28 = reader_tSalesforceInput_28.advance()) {
    	nb_line_tSalesforceInput_28++;

    	
        if (multi_output_is_allowed_tSalesforceInput_28) {
                row57 = null;

        }

        try {
            Object data_tSalesforceInput_28 = reader_tSalesforceInput_28.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_28) {
                    row57 = new row57Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_28 == null) {
            factory_tSalesforceInput_28 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_28.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_28.setWrapped(factory_tSalesforceInput_28.convertToAvro(data_tSalesforceInput_28));
                Object columnValue_0_tSalesforceInput_28 = outgoingEnforcer_tSalesforceInput_28.get(0);
                        row57.Id = (String) (columnValue_0_tSalesforceInput_28);
                Object columnValue_1_tSalesforceInput_28 = outgoingEnforcer_tSalesforceInput_28.get(1);
                    if (columnValue_1_tSalesforceInput_28 == null) {
                        row57.IsDeleted = false;
                    } else {
                            row57.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_28);
                    }
                Object columnValue_2_tSalesforceInput_28 = outgoingEnforcer_tSalesforceInput_28.get(2);
                        row57.ParentId = (String) (columnValue_2_tSalesforceInput_28);
                Object columnValue_3_tSalesforceInput_28 = outgoingEnforcer_tSalesforceInput_28.get(3);
                        row57.CreatedById = (String) (columnValue_3_tSalesforceInput_28);
                Object columnValue_4_tSalesforceInput_28 = outgoingEnforcer_tSalesforceInput_28.get(4);
                        row57.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_28);
                Object columnValue_5_tSalesforceInput_28 = outgoingEnforcer_tSalesforceInput_28.get(5);
                        row57.Field = (String) (columnValue_5_tSalesforceInput_28);
                Object columnValue_6_tSalesforceInput_28 = outgoingEnforcer_tSalesforceInput_28.get(6);
                        row57.OldValue = (String) (columnValue_6_tSalesforceInput_28);
                Object columnValue_7_tSalesforceInput_28 = outgoingEnforcer_tSalesforceInput_28.get(7);
                        row57.NewValue = (String) (columnValue_7_tSalesforceInput_28);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_28) {
        	java.util.Map<String,Object> info_tSalesforceInput_28 = e_tSalesforceInput_28.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_28 = null;
            	if(info_tSalesforceInput_28.containsKey("error")){
            		errorMessage_tSalesforceInput_28 = info_tSalesforceInput_28.get("error");
        		}else if(info_tSalesforceInput_28.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_28 = info_tSalesforceInput_28.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_28 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_28 = "Row "+ nb_line_tSalesforceInput_28 + ": "+errorMessage_tSalesforceInput_28;
    			System.err.println(errorMessage_tSalesforceInput_28);
            	// If the record is reject, the main line record should put NULL
            	row57 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_28 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_28 = null;


 



/**
 * [tSalesforceInput_28 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_28 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_28";

	


 


	tos_count_tSalesforceInput_28++;

/**
 * [tSalesforceInput_28 main ] stop
 */
	
	/**
	 * [tSalesforceInput_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_28";

	


 



/**
 * [tSalesforceInput_28 process_data_begin ] stop
 */

	
	/**
	 * [tMap_28 main ] start
	 */

	

	
	
	currentComponent="tMap_28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row57");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_28 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_28 = false;
		  boolean mainRowRejected_tMap_28 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_28__Struct Var = Var__tMap_28;// ###############################
        // ###############################
        // # Output tables

out28 = null;


// # Output table : 'out28'
out28_tmp.Id = row57.Id ;
out28_tmp.IsDeleted = row57.IsDeleted ;
out28_tmp.ParentId = row57.ParentId ;
out28_tmp.CreatedById = row57.CreatedById ;
out28_tmp.CreatedDate = (row57.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row57.CreatedDate))).getTime())/1000 ;
out28_tmp.Field = row57.Field ;
out28_tmp.OldValue = row57.OldValue ;
out28_tmp.NewValue = row57.NewValue ;
out28 = out28_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_28 = false;










 


	tos_count_tMap_28++;

/**
 * [tMap_28 main ] stop
 */
	
	/**
	 * [tMap_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

 



/**
 * [tMap_28 process_data_begin ] stop
 */
// Start of branch "out28"
if(out28 != null) { 



	
	/**
	 * [tWriteJSONField_28_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_28";
	
	currentComponent="tWriteJSONField_28_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out28");
					}
					

	if(txf_tWriteJSONField_28_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_28_Out.getCurrentComponent();
		throw txf_tWriteJSONField_28_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_28_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_28_Out.getLastError();
	}
	nb_line_tWriteJSONField_28_Out++;
	valueMap_tWriteJSONField_28_Out.clear();
	arraysValueMap_tWriteJSONField_28_Out.clear();
	valueMap_tWriteJSONField_28_Out.put("Id",
	(
            out28.Id.toString()
		));
	arraysValueMap_tWriteJSONField_28_Out.put("Id",
	(
            out28.Id.toString()
		));
	valueMap_tWriteJSONField_28_Out.put("IsDeleted",
	(
            String.valueOf(out28.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_28_Out.put("IsDeleted",
	(
            String.valueOf(out28.IsDeleted)
		));
	valueMap_tWriteJSONField_28_Out.put("ParentId",
	(
            out28.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_28_Out.put("ParentId",
	(
            out28.ParentId.toString()
		));
	valueMap_tWriteJSONField_28_Out.put("CreatedById",
	(
            out28.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_28_Out.put("CreatedById",
	(
            out28.CreatedById.toString()
		));
	valueMap_tWriteJSONField_28_Out.put("CreatedDate",
	(
            String.valueOf(out28.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_28_Out.put("CreatedDate",
	(
            String.valueOf(out28.CreatedDate)
		));
	valueMap_tWriteJSONField_28_Out.put("Field",
	(
            out28.Field.toString()
		));
	arraysValueMap_tWriteJSONField_28_Out.put("Field",
	(
            out28.Field.toString()
		));
	valueMap_tWriteJSONField_28_Out.put("OldValue",
	(
		out28.OldValue != null?
            out28.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_28_Out.put("OldValue",
	(
		out28.OldValue != null?
            out28.OldValue.toString():null
		));
	valueMap_tWriteJSONField_28_Out.put("NewValue",
	(
		out28.NewValue != null?
            out28.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_28_Out.put("NewValue",
	(
		out28.NewValue != null?
            out28.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_28_Out = "";
	if(strCompCache_tWriteJSONField_28_Out==null){
		strCompCache_tWriteJSONField_28_Out=strTemp_tWriteJSONField_28_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_28_Out.replaceDefaultNameSpace(doc_tWriteJSONField_28_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_28_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_28_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_28_Out, format_tWriteJSONField_28_Out);
			output_tWriteJSONField_28_Out.write(doc_tWriteJSONField_28_Out);
		    output_tWriteJSONField_28_Out.close();
			
				  		  row56Struct row_tWriteJSONField_28_Out = new row56Struct();
						  
					     		row_tWriteJSONField_28_Out.data = strWriter_tWriteJSONField_28_Out.toString();
					     		listGroupby_tWriteJSONField_28_Out.add(row_tWriteJSONField_28_Out);
					
		    doc_tWriteJSONField_28_Out.clearContent();
			needRoot_tWriteJSONField_28_Out = true;
			for(int i_tWriteJSONField_28_Out=0;i_tWriteJSONField_28_Out<orders_tWriteJSONField_28_Out.length;i_tWriteJSONField_28_Out++){
				orders_tWriteJSONField_28_Out[i_tWriteJSONField_28_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_28_Out != null && groupbyList_tWriteJSONField_28_Out.size() >= 0){
				groupbyList_tWriteJSONField_28_Out.clear();
			}
			strCompCache_tWriteJSONField_28_Out=strTemp_tWriteJSONField_28_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_28_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_28_Out) {
		needRoot_tWriteJSONField_28_Out=false;
		org.dom4j.Element root_tWriteJSONField_28_Out = doc_tWriteJSONField_28_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_28_Out = root_tWriteJSONField_28_Out;
		org.dom4j.Element root_0_tWriteJSONField_28_Out = root_tWriteJSONField_28_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_28_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_28_Out .setText(root_0_tWriteJSONField_28_Out,
		valueMap_tWriteJSONField_28_Out.get("IsDeleted"));
            root_0_tWriteJSONField_28_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_28_Out .setText(root_0_tWriteJSONField_28_Out,"null");
			root_0_tWriteJSONField_28_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_28_Out = root_tWriteJSONField_28_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_28_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_28_Out .setText(root_1_tWriteJSONField_28_Out,
		valueMap_tWriteJSONField_28_Out.get("ParentId"));
			root_1_tWriteJSONField_28_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_28_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_28_Out .setText(root_1_tWriteJSONField_28_Out,"null");
			root_1_tWriteJSONField_28_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_28_Out = root_tWriteJSONField_28_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_28_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_28_Out .setText(root_2_tWriteJSONField_28_Out,
		valueMap_tWriteJSONField_28_Out.get("CreatedById"));
			root_2_tWriteJSONField_28_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_28_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_28_Out .setText(root_2_tWriteJSONField_28_Out,"null");
			root_2_tWriteJSONField_28_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_28_Out = root_tWriteJSONField_28_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_28_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_28_Out .setText(root_3_tWriteJSONField_28_Out,
		valueMap_tWriteJSONField_28_Out.get("CreatedDate"));
            root_3_tWriteJSONField_28_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_28_Out .setText(root_3_tWriteJSONField_28_Out,"null");
			root_3_tWriteJSONField_28_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_28_Out = root_tWriteJSONField_28_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_28_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_28_Out .setText(root_4_tWriteJSONField_28_Out,
		valueMap_tWriteJSONField_28_Out.get("Field"));
			root_4_tWriteJSONField_28_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_28_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_28_Out .setText(root_4_tWriteJSONField_28_Out,"null");
			root_4_tWriteJSONField_28_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_28_Out = root_tWriteJSONField_28_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_28_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_28_Out .setText(root_5_tWriteJSONField_28_Out,
		valueMap_tWriteJSONField_28_Out.get("OldValue"));
			root_5_tWriteJSONField_28_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_28_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_28_Out .setText(root_5_tWriteJSONField_28_Out,"null");
			root_5_tWriteJSONField_28_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_28_Out = root_tWriteJSONField_28_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_28_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_28_Out .setText(root_6_tWriteJSONField_28_Out,
		valueMap_tWriteJSONField_28_Out.get("NewValue"));
			root_6_tWriteJSONField_28_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_28_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_28_Out .setText(root_6_tWriteJSONField_28_Out,"null");
			root_6_tWriteJSONField_28_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_28_Out = subTreeRootParent_tWriteJSONField_28_Out;
	}else{
		subTreeRootParent_tWriteJSONField_28_Out=root4Group_tWriteJSONField_28_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_28_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_28_Out[0]==0){
        	orders_tWriteJSONField_28_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_28_Out.length){
        		orders_tWriteJSONField_28_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_28_Out.elements().add(orders_tWriteJSONField_28_Out[0]++,loop_tWriteJSONField_28_Out);
		if(
		valueMap_tWriteJSONField_28_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_28_Out .setText(loop_tWriteJSONField_28_Out,
		valueMap_tWriteJSONField_28_Out.get("Id"));
			loop_tWriteJSONField_28_Out.addAttribute("type", "string");
			loop_tWriteJSONField_28_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_28_Out .setText(loop_tWriteJSONField_28_Out,"null");
			loop_tWriteJSONField_28_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_28_Out++;

/**
 * [tWriteJSONField_28_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_28_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_28";
	
	currentComponent="tWriteJSONField_28_Out";

	

 



/**
 * [tWriteJSONField_28_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_28_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_28";
	
	currentComponent="tWriteJSONField_28_Out";

	

 



/**
 * [tWriteJSONField_28_Out process_data_end ] stop
 */

} // End of branch "out28"




	
	/**
	 * [tMap_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

 



/**
 * [tMap_28 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_28";

	


 



/**
 * [tSalesforceInput_28 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_28 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_28";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_28", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_28.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_28 = reader_tSalesforceInput_28.getReturnValues();
if(resultMap_tSalesforceInput_28!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_28 : resultMap_tSalesforceInput_28.entrySet()) {
		switch(entry_tSalesforceInput_28.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_28.setComponentData("tSalesforceInput_28", "ERROR_MESSAGE", entry_tSalesforceInput_28.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_28.setComponentData("tSalesforceInput_28", "NB_LINE", entry_tSalesforceInput_28.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_28.setComponentData("tSalesforceInput_28", "NB_SUCCESS", entry_tSalesforceInput_28.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_28.setComponentData("tSalesforceInput_28", "NB_REJECT", entry_tSalesforceInput_28.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_28 = new StringBuilder();
            for (int i_tSalesforceInput_28 = 0; i_tSalesforceInput_28 < entry_tSalesforceInput_28.getKey().length(); i_tSalesforceInput_28++) {
                char ch_tSalesforceInput_28 = entry_tSalesforceInput_28.getKey().charAt(i_tSalesforceInput_28);
                if(Character.isUpperCase(ch_tSalesforceInput_28) && i_tSalesforceInput_28> 0) {
                	studio_key_tSalesforceInput_28.append('_');
                }
                studio_key_tSalesforceInput_28.append(ch_tSalesforceInput_28);
            }
			container_tSalesforceInput_28.setComponentData("tSalesforceInput_28", studio_key_tSalesforceInput_28.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_28.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_28", true);
end_Hash.put("tSalesforceInput_28", System.currentTimeMillis());




/**
 * [tSalesforceInput_28 end ] stop
 */

	
	/**
	 * [tMap_28 end ] start
	 */

	

	
	
	currentComponent="tMap_28";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row57");
			  	}
			  	
 

ok_Hash.put("tMap_28", true);
end_Hash.put("tMap_28", System.currentTimeMillis());




/**
 * [tMap_28 end ] stop
 */

	
	/**
	 * [tWriteJSONField_28_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_28";
	
	currentComponent="tWriteJSONField_28_Out";

	

if(nb_line_tWriteJSONField_28_Out > 0){  
    nestXMLTool_tWriteJSONField_28_Out.replaceDefaultNameSpace(doc_tWriteJSONField_28_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_28_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_28_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_28_Out, format_tWriteJSONField_28_Out);
	output_tWriteJSONField_28_Out.write(doc_tWriteJSONField_28_Out);
    output_tWriteJSONField_28_Out.close();
					row56Struct row_tWriteJSONField_28_Out = new row56Struct();
						  
					     		row_tWriteJSONField_28_Out.data = strWriter_tWriteJSONField_28_Out.toString();
					     		listGroupby_tWriteJSONField_28_Out.add(row_tWriteJSONField_28_Out);
		    		

}
globalMap.put("tWriteJSONField_28_Out_NB_LINE",nb_line_tWriteJSONField_28_Out);
globalMap.put("tWriteJSONField_28_In_FINISH" + (listGroupby_tWriteJSONField_28_Out==null?"":listGroupby_tWriteJSONField_28_Out.hashCode()), "true");
	
		txf_tWriteJSONField_28_Out.join();
		
		if(txf_tWriteJSONField_28_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_28_Out.getCurrentComponent();
			throw txf_tWriteJSONField_28_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_28_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_28_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_28_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out28");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_28_Out", true);
end_Hash.put("tWriteJSONField_28_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_28_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_28 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_28";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_28")==null){
    if(resourceMap.get("reader_tSalesforceInput_28")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_28")).close();
		} catch (java.io.IOException e_tSalesforceInput_28) {
			String errorMessage_tSalesforceInput_28 = "failed to release the resource in tSalesforceInput_28 :" + e_tSalesforceInput_28.getMessage();
			System.err.println(errorMessage_tSalesforceInput_28);
		}
	}
}
 



/**
 * [tSalesforceInput_28 finally ] stop
 */

	
	/**
	 * [tMap_28 finally ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

 



/**
 * [tMap_28 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_28_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_28";
	
	currentComponent="tWriteJSONField_28_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_28_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_28_In");
		if(resourceMap.get("finish_tWriteJSONField_28_Out") == null){
			globalMap.put("tWriteJSONField_28_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_28_Out==null?"":listGroupby_tWriteJSONField_28_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_28_Out != null) {
		globalMap.put("tWriteJSONField_28_In_FINISH" + (listGroupby_tWriteJSONField_28_Out==null?"":listGroupby_tWriteJSONField_28_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_28_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_28_SUBPROCESS_STATE", 1);
	}
	

public void tDie_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_28", false);
		start_Hash.put("tDie_28", System.currentTimeMillis());
		
	
	currentComponent="tDie_28";

	
		int tos_count_tDie_28 = 0;
		

 



/**
 * [tDie_28 begin ] stop
 */
	
	/**
	 * [tDie_28 main ] start
	 */

	

	
	
	currentComponent="tDie_28";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_28", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_28_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_28_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_28_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_28) {
		logIgnoredError(String.format("tDie_28 - tDie failed to log message due to internal error: %s", e_tDie_28), e_tDie_28);
	}
	
	currentComponent = "tDie_28";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_28_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_28++;

/**
 * [tDie_28 main ] stop
 */
	
	/**
	 * [tDie_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_28";

	

 



/**
 * [tDie_28 process_data_begin ] stop
 */
	
	/**
	 * [tDie_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_28";

	

 



/**
 * [tDie_28 process_data_end ] stop
 */
	
	/**
	 * [tDie_28 end ] start
	 */

	

	
	
	currentComponent="tDie_28";

	

 

ok_Hash.put("tDie_28", true);
end_Hash.put("tDie_28", System.currentTimeMillis());




/**
 * [tDie_28 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_28 finally ] start
	 */

	

	
	
	currentComponent="tDie_28";

	

 



/**
 * [tDie_28 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_28_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_28", false);
		start_Hash.put("tFileArchive_28", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_28";

	
		int tos_count_tFileArchive_28 = 0;
		

 



/**
 * [tFileArchive_28 begin ] stop
 */
	
	/**
	 * [tFileArchive_28 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_28";

	

	

		String sourceFile_tFileArchive_28 = context.staging_S3_dir + "noodlecrm__program_assignment__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_28), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_28 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_28 = context.staging_S3_dir + "noodlecrm__program_assignment__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_28 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_28, zipFile_tFileArchive_28);
    zip_tFileArchive_28.setOverwriteExistTargetZip(true);
	zip_tFileArchive_28.setMakeTargetDir(true);
	zip_tFileArchive_28.setCompressLevel(9);
	zip_tFileArchive_28.setArchiveFormat("gzip");
	zip_tFileArchive_28.setAllFiles(true);
	
	
		zip_tFileArchive_28.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_28_ARCHIVE_FILEPATH",zipFile_tFileArchive_28);
   
   globalMap.put("tFileArchive_28_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_28).getName());

   zip_tFileArchive_28.doZip();


 


	tos_count_tFileArchive_28++;

/**
 * [tFileArchive_28 main ] stop
 */
	
	/**
	 * [tFileArchive_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_28";

	

 



/**
 * [tFileArchive_28 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_28";

	

 



/**
 * [tFileArchive_28 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_28 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_28";

	

 

ok_Hash.put("tFileArchive_28", true);
end_Hash.put("tFileArchive_28", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk189", 0, "ok");
				}
				tS3Put_28Process(globalMap);



/**
 * [tFileArchive_28 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_28 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_28";

	

 



/**
 * [tFileArchive_28 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_28_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_28", false);
		start_Hash.put("tS3Put_28", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_28";

	
		int tos_count_tS3Put_28 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_28 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_28 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__program_assignment__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__program_assignment__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_28 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_28 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_28 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_28 = context.staging_S3_dir + "noodlecrm__program_assignment__history.json.gz";
	
	boolean useStream_tS3Put_28 = false;
	java.io.InputStream uploadStream_tS3Put_28 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_28 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_28 instanceof String){
		    useStream_tS3Put_28 = false;
		}else if(fileOrStream_tS3Put_28 instanceof java.io.InputStream){
		    useStream_tS3Put_28 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_28 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_28) {
				java.io.File inputFile_tS3Put_28 = new java.io.File((String)fileOrStream_tS3Put_28);
				
				long multipart_upload_threshold_tS3Put_28 = 5 * 1024 * 1024;
				
    		tm_tS3Put_28 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_28)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_28)
    			.withS3Client(conn_tS3Put_28)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_28 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_28, inputFile_tS3Put_28).withMetadata(objectMetadata_tS3Put_28);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_28 = tm_tS3Put_28.upload(putRequest_tS3Put_28);
  		
  			upload_tS3Put_28.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_28 = ((java.io.InputStream)fileOrStream_tS3Put_28);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_28 = new S3StreamUtil();
    		byte[] buffer_tS3Put_28 = new byte[partSizeInBytes_tS3Put_28];
    		sourceStream_tS3Put_28.read(buffer_tS3Put_28);
    		long curPartSize_tS3Put_28 = streamUtil_tS3Put_28.getLength(buffer_tS3Put_28);
    		boolean multiUpload_tS3Put_28 = curPartSize_tS3Put_28 == partSizeInBytes_tS3Put_28;
    		
    		if(!multiUpload_tS3Put_28) {
    				objectMetadata_tS3Put_28.setContentLength(curPartSize_tS3Put_28);
    				uploadStream_tS3Put_28 = new java.io.ByteArrayInputStream(buffer_tS3Put_28,0,Long.valueOf(curPartSize_tS3Put_28).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_28 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_28, uploadStream_tS3Put_28, objectMetadata_tS3Put_28);
			
    				
    				

    				
    				conn_tS3Put_28.putObject(putRequest_tS3Put_28);
    		} else {
    				uploadStream_tS3Put_28 = new java.io.ByteArrayInputStream(buffer_tS3Put_28);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_28 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_28 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_28, objectMetadata_tS3Put_28);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_28 = conn_tS3Put_28.initiateMultipartUpload(putRequest_tS3Put_28);
      			String uploadId_tS3Put_28 = initResponse_tS3Put_28.getUploadId();
      			int partNumber_tS3Put_28 = 1;
      			boolean streamHasNext_tS3Put_28 = true;
      			byte[] probeAvailability_tS3Put_28 = new byte[1];
				try {
					while (streamHasNext_tS3Put_28) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_28 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_28)
						.withUploadId(uploadId_tS3Put_28)
                    	.withPartNumber(partNumber_tS3Put_28)
						.withPartSize(curPartSize_tS3Put_28);
            		    uploadRequest_tS3Put_28.setInputStream(uploadStream_tS3Put_28);
            		    streamHasNext_tS3Put_28 = sourceStream_tS3Put_28.read(probeAvailability_tS3Put_28) != -1;
            		    if(!streamHasNext_tS3Put_28){
                    	    uploadRequest_tS3Put_28.setLastPart(true);
                    	}

                		partTags_tS3Put_28.add(conn_tS3Put_28.uploadPart(uploadRequest_tS3Put_28).getPartETag());
                  	    partNumber_tS3Put_28++;

          		     	if(uploadStream_tS3Put_28!=null){
      		         			uploadStream_tS3Put_28.close();
          		     	}
          		     	buffer_tS3Put_28 = new byte[partSizeInBytes_tS3Put_28];
          		     	sourceStream_tS3Put_28.read(buffer_tS3Put_28,1,partSizeInBytes_tS3Put_28-1);
          		     	buffer_tS3Put_28[0] = probeAvailability_tS3Put_28[0];
          		     	probeAvailability_tS3Put_28 = new byte[1];
          		     	curPartSize_tS3Put_28 = streamUtil_tS3Put_28.getLength(buffer_tS3Put_28);
          		     	uploadStream_tS3Put_28 = new java.io.ByteArrayInputStream(buffer_tS3Put_28);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_28 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_28,
                        uploadId_tS3Put_28, partTags_tS3Put_28);
            		conn_tS3Put_28.completeMultipartUpload(compRequest_tS3Put_28);
            } catch (java.lang.Exception uploadException_tS3Put_28) {
  							conn_tS3Put_28.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_28, uploadId_tS3Put_28));
    						throw uploadException_tS3Put_28;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_28){
		
			throw(e_tS3Put_28);
		
	}finally{
		if(useStream_tS3Put_28 && uploadStream_tS3Put_28!=null){
    	uploadStream_tS3Put_28.close();
    }
    
    if(tm_tS3Put_28 != null){
        tm_tS3Put_28.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_28 begin ] stop
 */
	
	/**
	 * [tS3Put_28 main ] start
	 */

	

	
	
	currentComponent="tS3Put_28";

	

 


	tos_count_tS3Put_28++;

/**
 * [tS3Put_28 main ] stop
 */
	
	/**
	 * [tS3Put_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_28";

	

 



/**
 * [tS3Put_28 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_28";

	

 



/**
 * [tS3Put_28 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_28 end ] start
	 */

	

	
	
	currentComponent="tS3Put_28";

	

 

ok_Hash.put("tS3Put_28", true);
end_Hash.put("tS3Put_28", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk190", 0, "ok");
				}
				tJava_62Process(globalMap);



/**
 * [tS3Put_28 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_28 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_28";

	

 



/**
 * [tS3Put_28 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_28_SUBPROCESS_STATE", 1);
	}
	

public void tJava_62Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_62_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_62 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_62", false);
		start_Hash.put("tJava_62", System.currentTimeMillis());
		
	
	currentComponent="tJava_62";

	
		int tos_count_tJava_62 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_28_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_28_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_62 begin ] stop
 */
	
	/**
	 * [tJava_62 main ] start
	 */

	

	
	
	currentComponent="tJava_62";

	

 


	tos_count_tJava_62++;

/**
 * [tJava_62 main ] stop
 */
	
	/**
	 * [tJava_62 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_62";

	

 



/**
 * [tJava_62 process_data_begin ] stop
 */
	
	/**
	 * [tJava_62 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_62";

	

 



/**
 * [tJava_62 process_data_end ] stop
 */
	
	/**
	 * [tJava_62 end ] start
	 */

	

	
	
	currentComponent="tJava_62";

	

 

ok_Hash.put("tJava_62", true);
end_Hash.put("tJava_62", System.currentTimeMillis());




/**
 * [tJava_62 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_62 finally ] start
	 */

	

	
	
	currentComponent="tJava_62";

	

 



/**
 * [tJava_62 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_62_SUBPROCESS_STATE", 1);
	}
	


public static class out27Struct implements routines.system.IPersistableRow<out27Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row55Struct implements routines.system.IPersistableRow<row55Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row55Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row55Struct row55 = new row55Struct();
out27Struct out27 = new out27Struct();





	
	/**
	 * [tWriteJSONField_27_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_27_Out", false);
		start_Hash.put("tWriteJSONField_27_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_27";
	
	currentComponent="tWriteJSONField_27_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out27");
					}
				
		int tos_count_tWriteJSONField_27_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_27_Out = 0;
				boolean needRoot_tWriteJSONField_27_Out  = true;
				
				String  strCompCache_tWriteJSONField_27_Out= null;		
				
						        java.util.Queue<row54Struct> listGroupby_tWriteJSONField_27_Out = new java.util.concurrent.ConcurrentLinkedQueue<row54Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_27_Out extends Thread {
						
									    java.util.Queue<row54Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_27_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_27_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_27_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_27_In", queue);
							globalMap.put("flows_tWriteJSONField_27_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_27_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_27_Out txf_tWriteJSONField_27_Out = new ThreadXMLField_tWriteJSONField_27_Out(listGroupby_tWriteJSONField_27_Out);
					
					txf_tWriteJSONField_27_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_27_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_27_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_27_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_27_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_27_Out nestXMLTool_tWriteJSONField_27_Out = new NestXMLTool_tWriteJSONField_27_Out();

out27Struct  rowStructOutput_tWriteJSONField_27_Out = new out27Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_27_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_27_Out = null;
org.dom4j.Document doc_tWriteJSONField_27_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_27_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_27_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_27_Out.setTrimText(false);
format_tWriteJSONField_27_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_27_Out = new int[1];

 



/**
 * [tWriteJSONField_27_Out begin ] stop
 */



	
	/**
	 * [tMap_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_27", false);
		start_Hash.put("tMap_27", System.currentTimeMillis());
		
	
	currentComponent="tMap_27";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row55");
					}
				
		int tos_count_tMap_27 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_27__Struct  {
}
Var__tMap_27__Struct Var__tMap_27 = new Var__tMap_27__Struct();
// ###############################

// ###############################
// # Outputs initialization
out27Struct out27_tmp = new out27Struct();
// ###############################

        
        



        









 



/**
 * [tMap_27 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_27", false);
		start_Hash.put("tSalesforceInput_27", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_27";

	
		int tos_count_tSalesforceInput_27 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_27 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_27 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_27.createRuntimeProperties();
 		                    props_tSalesforceInput_27.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_27.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_27.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_27.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_27.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_27.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_27.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_27.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_27.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_27.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_27.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_27.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_27.module.setValue("moduleName",
 		                    "NoodleCRM__Program__History");
 		                    
 		                    props_tSalesforceInput_27.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_27.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_27.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_27.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_27.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_27_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Program__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Program__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_27_1_fisrt sst_tSalesforceInput_27_1_fisrt = new SchemaSettingTool_tSalesforceInput_27_1_fisrt();
 		                    
 		                    props_tSalesforceInput_27.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_27_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_27.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_27 = props_tSalesforceInput_27.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_27 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_27 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_27 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_27.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_27);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_27.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_27 = props_tSalesforceInput_27.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_27 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_27 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_27 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_27.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_27);
        }
    }
globalMap.put("tSalesforceInput_27_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_27);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_27= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_27_MAPPINGS_URL", mappings_url_tSalesforceInput_27);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_27 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_27";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_27 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_27 = null;
topology_tSalesforceInput_27 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_27 = def_tSalesforceInput_27.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_27, topology_tSalesforceInput_27);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_27 = def_tSalesforceInput_27.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_27 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_27.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_27 = componentRuntime_tSalesforceInput_27.initialize(container_tSalesforceInput_27, props_tSalesforceInput_27);

if (initVr_tSalesforceInput_27.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_27.getMessage());
}

if(componentRuntime_tSalesforceInput_27 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_27 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_27;
	compDriverInitialization_tSalesforceInput_27.runAtDriver(container_tSalesforceInput_27);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_27 = null;
if(componentRuntime_tSalesforceInput_27 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_27 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_27;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_27 = sourceOrSink_tSalesforceInput_27.validate(container_tSalesforceInput_27);
	if (vr_tSalesforceInput_27.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_27.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_27 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_27;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_27 =
            source_tSalesforceInput_27.createReader(container_tSalesforceInput_27);
	reader_tSalesforceInput_27 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_27, container_tSalesforceInput_27);

        boolean multi_output_is_allowed_tSalesforceInput_27 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_27 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_27.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_27 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_27 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_27 = props_tSalesforceInput_27.getSchema(c_tSalesforceInput_27, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_27 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_27, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_27 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_27 = reader_tSalesforceInput_27.start();

    resourceMap.put("reader_tSalesforceInput_27", reader_tSalesforceInput_27);

    for (; available_tSalesforceInput_27; available_tSalesforceInput_27 = reader_tSalesforceInput_27.advance()) {
    	nb_line_tSalesforceInput_27++;

    	
        if (multi_output_is_allowed_tSalesforceInput_27) {
                row55 = null;

        }

        try {
            Object data_tSalesforceInput_27 = reader_tSalesforceInput_27.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_27) {
                    row55 = new row55Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_27 == null) {
            factory_tSalesforceInput_27 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_27.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_27.setWrapped(factory_tSalesforceInput_27.convertToAvro(data_tSalesforceInput_27));
                Object columnValue_0_tSalesforceInput_27 = outgoingEnforcer_tSalesforceInput_27.get(0);
                        row55.Id = (String) (columnValue_0_tSalesforceInput_27);
                Object columnValue_1_tSalesforceInput_27 = outgoingEnforcer_tSalesforceInput_27.get(1);
                    if (columnValue_1_tSalesforceInput_27 == null) {
                        row55.IsDeleted = false;
                    } else {
                            row55.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_27);
                    }
                Object columnValue_2_tSalesforceInput_27 = outgoingEnforcer_tSalesforceInput_27.get(2);
                        row55.ParentId = (String) (columnValue_2_tSalesforceInput_27);
                Object columnValue_3_tSalesforceInput_27 = outgoingEnforcer_tSalesforceInput_27.get(3);
                        row55.CreatedById = (String) (columnValue_3_tSalesforceInput_27);
                Object columnValue_4_tSalesforceInput_27 = outgoingEnforcer_tSalesforceInput_27.get(4);
                        row55.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_27);
                Object columnValue_5_tSalesforceInput_27 = outgoingEnforcer_tSalesforceInput_27.get(5);
                        row55.Field = (String) (columnValue_5_tSalesforceInput_27);
                Object columnValue_6_tSalesforceInput_27 = outgoingEnforcer_tSalesforceInput_27.get(6);
                        row55.OldValue = (String) (columnValue_6_tSalesforceInput_27);
                Object columnValue_7_tSalesforceInput_27 = outgoingEnforcer_tSalesforceInput_27.get(7);
                        row55.NewValue = (String) (columnValue_7_tSalesforceInput_27);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_27) {
        	java.util.Map<String,Object> info_tSalesforceInput_27 = e_tSalesforceInput_27.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_27 = null;
            	if(info_tSalesforceInput_27.containsKey("error")){
            		errorMessage_tSalesforceInput_27 = info_tSalesforceInput_27.get("error");
        		}else if(info_tSalesforceInput_27.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_27 = info_tSalesforceInput_27.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_27 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_27 = "Row "+ nb_line_tSalesforceInput_27 + ": "+errorMessage_tSalesforceInput_27;
    			System.err.println(errorMessage_tSalesforceInput_27);
            	// If the record is reject, the main line record should put NULL
            	row55 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_27 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_27 = null;


 



/**
 * [tSalesforceInput_27 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_27 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_27";

	


 


	tos_count_tSalesforceInput_27++;

/**
 * [tSalesforceInput_27 main ] stop
 */
	
	/**
	 * [tSalesforceInput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_27";

	


 



/**
 * [tSalesforceInput_27 process_data_begin ] stop
 */

	
	/**
	 * [tMap_27 main ] start
	 */

	

	
	
	currentComponent="tMap_27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row55");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_27 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_27 = false;
		  boolean mainRowRejected_tMap_27 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_27__Struct Var = Var__tMap_27;// ###############################
        // ###############################
        // # Output tables

out27 = null;


// # Output table : 'out27'
out27_tmp.Id = row55.Id ;
out27_tmp.IsDeleted = row55.IsDeleted ;
out27_tmp.ParentId = row55.ParentId ;
out27_tmp.CreatedById = row55.CreatedById ;
out27_tmp.CreatedDate = (row55.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row55.CreatedDate))).getTime())/1000 ;
out27_tmp.Field = row55.Field ;
out27_tmp.OldValue = row55.OldValue ;
out27_tmp.NewValue = row55.NewValue ;
out27 = out27_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_27 = false;










 


	tos_count_tMap_27++;

/**
 * [tMap_27 main ] stop
 */
	
	/**
	 * [tMap_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 process_data_begin ] stop
 */
// Start of branch "out27"
if(out27 != null) { 



	
	/**
	 * [tWriteJSONField_27_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_27";
	
	currentComponent="tWriteJSONField_27_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out27");
					}
					

	if(txf_tWriteJSONField_27_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_27_Out.getCurrentComponent();
		throw txf_tWriteJSONField_27_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_27_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_27_Out.getLastError();
	}
	nb_line_tWriteJSONField_27_Out++;
	valueMap_tWriteJSONField_27_Out.clear();
	arraysValueMap_tWriteJSONField_27_Out.clear();
	valueMap_tWriteJSONField_27_Out.put("Id",
	(
            out27.Id.toString()
		));
	arraysValueMap_tWriteJSONField_27_Out.put("Id",
	(
            out27.Id.toString()
		));
	valueMap_tWriteJSONField_27_Out.put("IsDeleted",
	(
            String.valueOf(out27.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_27_Out.put("IsDeleted",
	(
            String.valueOf(out27.IsDeleted)
		));
	valueMap_tWriteJSONField_27_Out.put("ParentId",
	(
            out27.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_27_Out.put("ParentId",
	(
            out27.ParentId.toString()
		));
	valueMap_tWriteJSONField_27_Out.put("CreatedById",
	(
            out27.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_27_Out.put("CreatedById",
	(
            out27.CreatedById.toString()
		));
	valueMap_tWriteJSONField_27_Out.put("CreatedDate",
	(
            String.valueOf(out27.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_27_Out.put("CreatedDate",
	(
            String.valueOf(out27.CreatedDate)
		));
	valueMap_tWriteJSONField_27_Out.put("Field",
	(
            out27.Field.toString()
		));
	arraysValueMap_tWriteJSONField_27_Out.put("Field",
	(
            out27.Field.toString()
		));
	valueMap_tWriteJSONField_27_Out.put("OldValue",
	(
		out27.OldValue != null?
            out27.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_27_Out.put("OldValue",
	(
		out27.OldValue != null?
            out27.OldValue.toString():null
		));
	valueMap_tWriteJSONField_27_Out.put("NewValue",
	(
		out27.NewValue != null?
            out27.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_27_Out.put("NewValue",
	(
		out27.NewValue != null?
            out27.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_27_Out = "";
	if(strCompCache_tWriteJSONField_27_Out==null){
		strCompCache_tWriteJSONField_27_Out=strTemp_tWriteJSONField_27_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_27_Out.replaceDefaultNameSpace(doc_tWriteJSONField_27_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_27_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_27_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_27_Out, format_tWriteJSONField_27_Out);
			output_tWriteJSONField_27_Out.write(doc_tWriteJSONField_27_Out);
		    output_tWriteJSONField_27_Out.close();
			
				  		  row54Struct row_tWriteJSONField_27_Out = new row54Struct();
						  
					     		row_tWriteJSONField_27_Out.data = strWriter_tWriteJSONField_27_Out.toString();
					     		listGroupby_tWriteJSONField_27_Out.add(row_tWriteJSONField_27_Out);
					
		    doc_tWriteJSONField_27_Out.clearContent();
			needRoot_tWriteJSONField_27_Out = true;
			for(int i_tWriteJSONField_27_Out=0;i_tWriteJSONField_27_Out<orders_tWriteJSONField_27_Out.length;i_tWriteJSONField_27_Out++){
				orders_tWriteJSONField_27_Out[i_tWriteJSONField_27_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_27_Out != null && groupbyList_tWriteJSONField_27_Out.size() >= 0){
				groupbyList_tWriteJSONField_27_Out.clear();
			}
			strCompCache_tWriteJSONField_27_Out=strTemp_tWriteJSONField_27_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_27_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_27_Out) {
		needRoot_tWriteJSONField_27_Out=false;
		org.dom4j.Element root_tWriteJSONField_27_Out = doc_tWriteJSONField_27_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_27_Out = root_tWriteJSONField_27_Out;
		org.dom4j.Element root_0_tWriteJSONField_27_Out = root_tWriteJSONField_27_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_27_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_27_Out .setText(root_0_tWriteJSONField_27_Out,
		valueMap_tWriteJSONField_27_Out.get("IsDeleted"));
            root_0_tWriteJSONField_27_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_27_Out .setText(root_0_tWriteJSONField_27_Out,"null");
			root_0_tWriteJSONField_27_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_27_Out = root_tWriteJSONField_27_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_27_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_27_Out .setText(root_1_tWriteJSONField_27_Out,
		valueMap_tWriteJSONField_27_Out.get("ParentId"));
			root_1_tWriteJSONField_27_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_27_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_27_Out .setText(root_1_tWriteJSONField_27_Out,"null");
			root_1_tWriteJSONField_27_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_27_Out = root_tWriteJSONField_27_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_27_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_27_Out .setText(root_2_tWriteJSONField_27_Out,
		valueMap_tWriteJSONField_27_Out.get("CreatedById"));
			root_2_tWriteJSONField_27_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_27_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_27_Out .setText(root_2_tWriteJSONField_27_Out,"null");
			root_2_tWriteJSONField_27_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_27_Out = root_tWriteJSONField_27_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_27_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_27_Out .setText(root_3_tWriteJSONField_27_Out,
		valueMap_tWriteJSONField_27_Out.get("CreatedDate"));
            root_3_tWriteJSONField_27_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_27_Out .setText(root_3_tWriteJSONField_27_Out,"null");
			root_3_tWriteJSONField_27_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_27_Out = root_tWriteJSONField_27_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_27_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_27_Out .setText(root_4_tWriteJSONField_27_Out,
		valueMap_tWriteJSONField_27_Out.get("Field"));
			root_4_tWriteJSONField_27_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_27_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_27_Out .setText(root_4_tWriteJSONField_27_Out,"null");
			root_4_tWriteJSONField_27_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_27_Out = root_tWriteJSONField_27_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_27_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_27_Out .setText(root_5_tWriteJSONField_27_Out,
		valueMap_tWriteJSONField_27_Out.get("OldValue"));
			root_5_tWriteJSONField_27_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_27_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_27_Out .setText(root_5_tWriteJSONField_27_Out,"null");
			root_5_tWriteJSONField_27_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_27_Out = root_tWriteJSONField_27_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_27_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_27_Out .setText(root_6_tWriteJSONField_27_Out,
		valueMap_tWriteJSONField_27_Out.get("NewValue"));
			root_6_tWriteJSONField_27_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_27_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_27_Out .setText(root_6_tWriteJSONField_27_Out,"null");
			root_6_tWriteJSONField_27_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_27_Out = subTreeRootParent_tWriteJSONField_27_Out;
	}else{
		subTreeRootParent_tWriteJSONField_27_Out=root4Group_tWriteJSONField_27_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_27_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_27_Out[0]==0){
        	orders_tWriteJSONField_27_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_27_Out.length){
        		orders_tWriteJSONField_27_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_27_Out.elements().add(orders_tWriteJSONField_27_Out[0]++,loop_tWriteJSONField_27_Out);
		if(
		valueMap_tWriteJSONField_27_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_27_Out .setText(loop_tWriteJSONField_27_Out,
		valueMap_tWriteJSONField_27_Out.get("Id"));
			loop_tWriteJSONField_27_Out.addAttribute("type", "string");
			loop_tWriteJSONField_27_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_27_Out .setText(loop_tWriteJSONField_27_Out,"null");
			loop_tWriteJSONField_27_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_27_Out++;

/**
 * [tWriteJSONField_27_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_27_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_27";
	
	currentComponent="tWriteJSONField_27_Out";

	

 



/**
 * [tWriteJSONField_27_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_27_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_27";
	
	currentComponent="tWriteJSONField_27_Out";

	

 



/**
 * [tWriteJSONField_27_Out process_data_end ] stop
 */

} // End of branch "out27"




	
	/**
	 * [tMap_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_27";

	


 



/**
 * [tSalesforceInput_27 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_27 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_27";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_27", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_27.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_27 = reader_tSalesforceInput_27.getReturnValues();
if(resultMap_tSalesforceInput_27!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_27 : resultMap_tSalesforceInput_27.entrySet()) {
		switch(entry_tSalesforceInput_27.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_27.setComponentData("tSalesforceInput_27", "ERROR_MESSAGE", entry_tSalesforceInput_27.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_27.setComponentData("tSalesforceInput_27", "NB_LINE", entry_tSalesforceInput_27.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_27.setComponentData("tSalesforceInput_27", "NB_SUCCESS", entry_tSalesforceInput_27.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_27.setComponentData("tSalesforceInput_27", "NB_REJECT", entry_tSalesforceInput_27.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_27 = new StringBuilder();
            for (int i_tSalesforceInput_27 = 0; i_tSalesforceInput_27 < entry_tSalesforceInput_27.getKey().length(); i_tSalesforceInput_27++) {
                char ch_tSalesforceInput_27 = entry_tSalesforceInput_27.getKey().charAt(i_tSalesforceInput_27);
                if(Character.isUpperCase(ch_tSalesforceInput_27) && i_tSalesforceInput_27> 0) {
                	studio_key_tSalesforceInput_27.append('_');
                }
                studio_key_tSalesforceInput_27.append(ch_tSalesforceInput_27);
            }
			container_tSalesforceInput_27.setComponentData("tSalesforceInput_27", studio_key_tSalesforceInput_27.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_27.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_27", true);
end_Hash.put("tSalesforceInput_27", System.currentTimeMillis());




/**
 * [tSalesforceInput_27 end ] stop
 */

	
	/**
	 * [tMap_27 end ] start
	 */

	

	
	
	currentComponent="tMap_27";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row55");
			  	}
			  	
 

ok_Hash.put("tMap_27", true);
end_Hash.put("tMap_27", System.currentTimeMillis());




/**
 * [tMap_27 end ] stop
 */

	
	/**
	 * [tWriteJSONField_27_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_27";
	
	currentComponent="tWriteJSONField_27_Out";

	

if(nb_line_tWriteJSONField_27_Out > 0){  
    nestXMLTool_tWriteJSONField_27_Out.replaceDefaultNameSpace(doc_tWriteJSONField_27_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_27_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_27_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_27_Out, format_tWriteJSONField_27_Out);
	output_tWriteJSONField_27_Out.write(doc_tWriteJSONField_27_Out);
    output_tWriteJSONField_27_Out.close();
					row54Struct row_tWriteJSONField_27_Out = new row54Struct();
						  
					     		row_tWriteJSONField_27_Out.data = strWriter_tWriteJSONField_27_Out.toString();
					     		listGroupby_tWriteJSONField_27_Out.add(row_tWriteJSONField_27_Out);
		    		

}
globalMap.put("tWriteJSONField_27_Out_NB_LINE",nb_line_tWriteJSONField_27_Out);
globalMap.put("tWriteJSONField_27_In_FINISH" + (listGroupby_tWriteJSONField_27_Out==null?"":listGroupby_tWriteJSONField_27_Out.hashCode()), "true");
	
		txf_tWriteJSONField_27_Out.join();
		
		if(txf_tWriteJSONField_27_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_27_Out.getCurrentComponent();
			throw txf_tWriteJSONField_27_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_27_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_27_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_27_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out27");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_27_Out", true);
end_Hash.put("tWriteJSONField_27_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_27_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_27 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_27";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_27")==null){
    if(resourceMap.get("reader_tSalesforceInput_27")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_27")).close();
		} catch (java.io.IOException e_tSalesforceInput_27) {
			String errorMessage_tSalesforceInput_27 = "failed to release the resource in tSalesforceInput_27 :" + e_tSalesforceInput_27.getMessage();
			System.err.println(errorMessage_tSalesforceInput_27);
		}
	}
}
 



/**
 * [tSalesforceInput_27 finally ] stop
 */

	
	/**
	 * [tMap_27 finally ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_27_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_27";
	
	currentComponent="tWriteJSONField_27_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_27_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_27_In");
		if(resourceMap.get("finish_tWriteJSONField_27_Out") == null){
			globalMap.put("tWriteJSONField_27_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_27_Out==null?"":listGroupby_tWriteJSONField_27_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_27_Out != null) {
		globalMap.put("tWriteJSONField_27_In_FINISH" + (listGroupby_tWriteJSONField_27_Out==null?"":listGroupby_tWriteJSONField_27_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_27_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_27_SUBPROCESS_STATE", 1);
	}
	

public void tDie_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_27", false);
		start_Hash.put("tDie_27", System.currentTimeMillis());
		
	
	currentComponent="tDie_27";

	
		int tos_count_tDie_27 = 0;
		

 



/**
 * [tDie_27 begin ] stop
 */
	
	/**
	 * [tDie_27 main ] start
	 */

	

	
	
	currentComponent="tDie_27";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_27", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_27_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_27_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_27_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_27) {
		logIgnoredError(String.format("tDie_27 - tDie failed to log message due to internal error: %s", e_tDie_27), e_tDie_27);
	}
	
	currentComponent = "tDie_27";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_27_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_27++;

/**
 * [tDie_27 main ] stop
 */
	
	/**
	 * [tDie_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_27";

	

 



/**
 * [tDie_27 process_data_begin ] stop
 */
	
	/**
	 * [tDie_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_27";

	

 



/**
 * [tDie_27 process_data_end ] stop
 */
	
	/**
	 * [tDie_27 end ] start
	 */

	

	
	
	currentComponent="tDie_27";

	

 

ok_Hash.put("tDie_27", true);
end_Hash.put("tDie_27", System.currentTimeMillis());




/**
 * [tDie_27 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_27 finally ] start
	 */

	

	
	
	currentComponent="tDie_27";

	

 



/**
 * [tDie_27 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_27_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_27", false);
		start_Hash.put("tFileArchive_27", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_27";

	
		int tos_count_tFileArchive_27 = 0;
		

 



/**
 * [tFileArchive_27 begin ] stop
 */
	
	/**
	 * [tFileArchive_27 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_27";

	

	

		String sourceFile_tFileArchive_27 = context.staging_S3_dir + "noodlecrm__program__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_27), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_27 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_27 = context.staging_S3_dir + "noodlecrm__program__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_27 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_27, zipFile_tFileArchive_27);
    zip_tFileArchive_27.setOverwriteExistTargetZip(true);
	zip_tFileArchive_27.setMakeTargetDir(true);
	zip_tFileArchive_27.setCompressLevel(9);
	zip_tFileArchive_27.setArchiveFormat("gzip");
	zip_tFileArchive_27.setAllFiles(true);
	
	
		zip_tFileArchive_27.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_27_ARCHIVE_FILEPATH",zipFile_tFileArchive_27);
   
   globalMap.put("tFileArchive_27_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_27).getName());

   zip_tFileArchive_27.doZip();


 


	tos_count_tFileArchive_27++;

/**
 * [tFileArchive_27 main ] stop
 */
	
	/**
	 * [tFileArchive_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_27";

	

 



/**
 * [tFileArchive_27 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_27";

	

 



/**
 * [tFileArchive_27 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_27 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_27";

	

 

ok_Hash.put("tFileArchive_27", true);
end_Hash.put("tFileArchive_27", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk185", 0, "ok");
				}
				tS3Put_27Process(globalMap);



/**
 * [tFileArchive_27 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_27 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_27";

	

 



/**
 * [tFileArchive_27 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_27_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_27", false);
		start_Hash.put("tS3Put_27", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_27";

	
		int tos_count_tS3Put_27 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_27 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_27 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__program__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__program__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_27 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_27 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_27 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_27 = context.staging_S3_dir + "noodlecrm__program__history.json.gz";
	
	boolean useStream_tS3Put_27 = false;
	java.io.InputStream uploadStream_tS3Put_27 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_27 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_27 instanceof String){
		    useStream_tS3Put_27 = false;
		}else if(fileOrStream_tS3Put_27 instanceof java.io.InputStream){
		    useStream_tS3Put_27 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_27 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_27) {
				java.io.File inputFile_tS3Put_27 = new java.io.File((String)fileOrStream_tS3Put_27);
				
				long multipart_upload_threshold_tS3Put_27 = 5 * 1024 * 1024;
				
    		tm_tS3Put_27 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_27)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_27)
    			.withS3Client(conn_tS3Put_27)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_27 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_27, inputFile_tS3Put_27).withMetadata(objectMetadata_tS3Put_27);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_27 = tm_tS3Put_27.upload(putRequest_tS3Put_27);
  		
  			upload_tS3Put_27.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_27 = ((java.io.InputStream)fileOrStream_tS3Put_27);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_27 = new S3StreamUtil();
    		byte[] buffer_tS3Put_27 = new byte[partSizeInBytes_tS3Put_27];
    		sourceStream_tS3Put_27.read(buffer_tS3Put_27);
    		long curPartSize_tS3Put_27 = streamUtil_tS3Put_27.getLength(buffer_tS3Put_27);
    		boolean multiUpload_tS3Put_27 = curPartSize_tS3Put_27 == partSizeInBytes_tS3Put_27;
    		
    		if(!multiUpload_tS3Put_27) {
    				objectMetadata_tS3Put_27.setContentLength(curPartSize_tS3Put_27);
    				uploadStream_tS3Put_27 = new java.io.ByteArrayInputStream(buffer_tS3Put_27,0,Long.valueOf(curPartSize_tS3Put_27).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_27 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_27, uploadStream_tS3Put_27, objectMetadata_tS3Put_27);
			
    				
    				

    				
    				conn_tS3Put_27.putObject(putRequest_tS3Put_27);
    		} else {
    				uploadStream_tS3Put_27 = new java.io.ByteArrayInputStream(buffer_tS3Put_27);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_27 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_27 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_27, objectMetadata_tS3Put_27);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_27 = conn_tS3Put_27.initiateMultipartUpload(putRequest_tS3Put_27);
      			String uploadId_tS3Put_27 = initResponse_tS3Put_27.getUploadId();
      			int partNumber_tS3Put_27 = 1;
      			boolean streamHasNext_tS3Put_27 = true;
      			byte[] probeAvailability_tS3Put_27 = new byte[1];
				try {
					while (streamHasNext_tS3Put_27) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_27 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_27)
						.withUploadId(uploadId_tS3Put_27)
                    	.withPartNumber(partNumber_tS3Put_27)
						.withPartSize(curPartSize_tS3Put_27);
            		    uploadRequest_tS3Put_27.setInputStream(uploadStream_tS3Put_27);
            		    streamHasNext_tS3Put_27 = sourceStream_tS3Put_27.read(probeAvailability_tS3Put_27) != -1;
            		    if(!streamHasNext_tS3Put_27){
                    	    uploadRequest_tS3Put_27.setLastPart(true);
                    	}

                		partTags_tS3Put_27.add(conn_tS3Put_27.uploadPart(uploadRequest_tS3Put_27).getPartETag());
                  	    partNumber_tS3Put_27++;

          		     	if(uploadStream_tS3Put_27!=null){
      		         			uploadStream_tS3Put_27.close();
          		     	}
          		     	buffer_tS3Put_27 = new byte[partSizeInBytes_tS3Put_27];
          		     	sourceStream_tS3Put_27.read(buffer_tS3Put_27,1,partSizeInBytes_tS3Put_27-1);
          		     	buffer_tS3Put_27[0] = probeAvailability_tS3Put_27[0];
          		     	probeAvailability_tS3Put_27 = new byte[1];
          		     	curPartSize_tS3Put_27 = streamUtil_tS3Put_27.getLength(buffer_tS3Put_27);
          		     	uploadStream_tS3Put_27 = new java.io.ByteArrayInputStream(buffer_tS3Put_27);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_27 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_27,
                        uploadId_tS3Put_27, partTags_tS3Put_27);
            		conn_tS3Put_27.completeMultipartUpload(compRequest_tS3Put_27);
            } catch (java.lang.Exception uploadException_tS3Put_27) {
  							conn_tS3Put_27.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_27, uploadId_tS3Put_27));
    						throw uploadException_tS3Put_27;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_27){
		
			throw(e_tS3Put_27);
		
	}finally{
		if(useStream_tS3Put_27 && uploadStream_tS3Put_27!=null){
    	uploadStream_tS3Put_27.close();
    }
    
    if(tm_tS3Put_27 != null){
        tm_tS3Put_27.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_27 begin ] stop
 */
	
	/**
	 * [tS3Put_27 main ] start
	 */

	

	
	
	currentComponent="tS3Put_27";

	

 


	tos_count_tS3Put_27++;

/**
 * [tS3Put_27 main ] stop
 */
	
	/**
	 * [tS3Put_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_27";

	

 



/**
 * [tS3Put_27 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_27";

	

 



/**
 * [tS3Put_27 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_27 end ] start
	 */

	

	
	
	currentComponent="tS3Put_27";

	

 

ok_Hash.put("tS3Put_27", true);
end_Hash.put("tS3Put_27", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk186", 0, "ok");
				}
				tJava_61Process(globalMap);



/**
 * [tS3Put_27 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_27 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_27";

	

 



/**
 * [tS3Put_27 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_27_SUBPROCESS_STATE", 1);
	}
	

public void tJava_61Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_61_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_61 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_61", false);
		start_Hash.put("tJava_61", System.currentTimeMillis());
		
	
	currentComponent="tJava_61";

	
		int tos_count_tJava_61 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_27_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_27_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_61 begin ] stop
 */
	
	/**
	 * [tJava_61 main ] start
	 */

	

	
	
	currentComponent="tJava_61";

	

 


	tos_count_tJava_61++;

/**
 * [tJava_61 main ] stop
 */
	
	/**
	 * [tJava_61 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_61";

	

 



/**
 * [tJava_61 process_data_begin ] stop
 */
	
	/**
	 * [tJava_61 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_61";

	

 



/**
 * [tJava_61 process_data_end ] stop
 */
	
	/**
	 * [tJava_61 end ] start
	 */

	

	
	
	currentComponent="tJava_61";

	

 

ok_Hash.put("tJava_61", true);
end_Hash.put("tJava_61", System.currentTimeMillis());




/**
 * [tJava_61 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_61 finally ] start
	 */

	

	
	
	currentComponent="tJava_61";

	

 



/**
 * [tJava_61 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_61_SUBPROCESS_STATE", 1);
	}
	


public static class out26Struct implements routines.system.IPersistableRow<out26Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row53Struct implements routines.system.IPersistableRow<row53Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row53Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row53Struct row53 = new row53Struct();
out26Struct out26 = new out26Struct();





	
	/**
	 * [tWriteJSONField_26_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_26_Out", false);
		start_Hash.put("tWriteJSONField_26_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_26";
	
	currentComponent="tWriteJSONField_26_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out26");
					}
				
		int tos_count_tWriteJSONField_26_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_26_Out = 0;
				boolean needRoot_tWriteJSONField_26_Out  = true;
				
				String  strCompCache_tWriteJSONField_26_Out= null;		
				
						        java.util.Queue<row52Struct> listGroupby_tWriteJSONField_26_Out = new java.util.concurrent.ConcurrentLinkedQueue<row52Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_26_Out extends Thread {
						
									    java.util.Queue<row52Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_26_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_26_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_26_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_26_In", queue);
							globalMap.put("flows_tWriteJSONField_26_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_26_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_26_Out txf_tWriteJSONField_26_Out = new ThreadXMLField_tWriteJSONField_26_Out(listGroupby_tWriteJSONField_26_Out);
					
					txf_tWriteJSONField_26_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_26_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_26_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_26_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_26_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_26_Out nestXMLTool_tWriteJSONField_26_Out = new NestXMLTool_tWriteJSONField_26_Out();

out26Struct  rowStructOutput_tWriteJSONField_26_Out = new out26Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_26_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_26_Out = null;
org.dom4j.Document doc_tWriteJSONField_26_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_26_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_26_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_26_Out.setTrimText(false);
format_tWriteJSONField_26_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_26_Out = new int[1];

 



/**
 * [tWriteJSONField_26_Out begin ] stop
 */



	
	/**
	 * [tMap_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_26", false);
		start_Hash.put("tMap_26", System.currentTimeMillis());
		
	
	currentComponent="tMap_26";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row53");
					}
				
		int tos_count_tMap_26 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_26__Struct  {
}
Var__tMap_26__Struct Var__tMap_26 = new Var__tMap_26__Struct();
// ###############################

// ###############################
// # Outputs initialization
out26Struct out26_tmp = new out26Struct();
// ###############################

        
        



        









 



/**
 * [tMap_26 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_26", false);
		start_Hash.put("tSalesforceInput_26", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_26";

	
		int tos_count_tSalesforceInput_26 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_26 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_26 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_26.createRuntimeProperties();
 		                    props_tSalesforceInput_26.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_26.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_26.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_26.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_26.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_26.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_26.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_26.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_26.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_26.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_26.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_26.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_26.module.setValue("moduleName",
 		                    "NoodleCRM__Log_Record__History");
 		                    
 		                    props_tSalesforceInput_26.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_26.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_26.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_26.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_26.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_26_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Log_Record__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Log_Record__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_26_1_fisrt sst_tSalesforceInput_26_1_fisrt = new SchemaSettingTool_tSalesforceInput_26_1_fisrt();
 		                    
 		                    props_tSalesforceInput_26.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_26_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_26.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_26 = props_tSalesforceInput_26.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_26 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_26 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_26 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_26.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_26);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_26.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_26 = props_tSalesforceInput_26.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_26 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_26 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_26 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_26.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_26);
        }
    }
globalMap.put("tSalesforceInput_26_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_26);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_26= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_26_MAPPINGS_URL", mappings_url_tSalesforceInput_26);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_26 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_26";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_26 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_26 = null;
topology_tSalesforceInput_26 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_26 = def_tSalesforceInput_26.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_26, topology_tSalesforceInput_26);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_26 = def_tSalesforceInput_26.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_26 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_26.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_26 = componentRuntime_tSalesforceInput_26.initialize(container_tSalesforceInput_26, props_tSalesforceInput_26);

if (initVr_tSalesforceInput_26.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_26.getMessage());
}

if(componentRuntime_tSalesforceInput_26 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_26 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_26;
	compDriverInitialization_tSalesforceInput_26.runAtDriver(container_tSalesforceInput_26);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_26 = null;
if(componentRuntime_tSalesforceInput_26 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_26 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_26;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_26 = sourceOrSink_tSalesforceInput_26.validate(container_tSalesforceInput_26);
	if (vr_tSalesforceInput_26.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_26.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_26 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_26;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_26 =
            source_tSalesforceInput_26.createReader(container_tSalesforceInput_26);
	reader_tSalesforceInput_26 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_26, container_tSalesforceInput_26);

        boolean multi_output_is_allowed_tSalesforceInput_26 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_26 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_26.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_26 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_26 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_26 = props_tSalesforceInput_26.getSchema(c_tSalesforceInput_26, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_26 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_26, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_26 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_26 = reader_tSalesforceInput_26.start();

    resourceMap.put("reader_tSalesforceInput_26", reader_tSalesforceInput_26);

    for (; available_tSalesforceInput_26; available_tSalesforceInput_26 = reader_tSalesforceInput_26.advance()) {
    	nb_line_tSalesforceInput_26++;

    	
        if (multi_output_is_allowed_tSalesforceInput_26) {
                row53 = null;

        }

        try {
            Object data_tSalesforceInput_26 = reader_tSalesforceInput_26.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_26) {
                    row53 = new row53Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_26 == null) {
            factory_tSalesforceInput_26 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_26.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_26.setWrapped(factory_tSalesforceInput_26.convertToAvro(data_tSalesforceInput_26));
                Object columnValue_0_tSalesforceInput_26 = outgoingEnforcer_tSalesforceInput_26.get(0);
                        row53.Id = (String) (columnValue_0_tSalesforceInput_26);
                Object columnValue_1_tSalesforceInput_26 = outgoingEnforcer_tSalesforceInput_26.get(1);
                    if (columnValue_1_tSalesforceInput_26 == null) {
                        row53.IsDeleted = false;
                    } else {
                            row53.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_26);
                    }
                Object columnValue_2_tSalesforceInput_26 = outgoingEnforcer_tSalesforceInput_26.get(2);
                        row53.ParentId = (String) (columnValue_2_tSalesforceInput_26);
                Object columnValue_3_tSalesforceInput_26 = outgoingEnforcer_tSalesforceInput_26.get(3);
                        row53.CreatedById = (String) (columnValue_3_tSalesforceInput_26);
                Object columnValue_4_tSalesforceInput_26 = outgoingEnforcer_tSalesforceInput_26.get(4);
                        row53.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_26);
                Object columnValue_5_tSalesforceInput_26 = outgoingEnforcer_tSalesforceInput_26.get(5);
                        row53.Field = (String) (columnValue_5_tSalesforceInput_26);
                Object columnValue_6_tSalesforceInput_26 = outgoingEnforcer_tSalesforceInput_26.get(6);
                        row53.OldValue = (String) (columnValue_6_tSalesforceInput_26);
                Object columnValue_7_tSalesforceInput_26 = outgoingEnforcer_tSalesforceInput_26.get(7);
                        row53.NewValue = (String) (columnValue_7_tSalesforceInput_26);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_26) {
        	java.util.Map<String,Object> info_tSalesforceInput_26 = e_tSalesforceInput_26.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_26 = null;
            	if(info_tSalesforceInput_26.containsKey("error")){
            		errorMessage_tSalesforceInput_26 = info_tSalesforceInput_26.get("error");
        		}else if(info_tSalesforceInput_26.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_26 = info_tSalesforceInput_26.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_26 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_26 = "Row "+ nb_line_tSalesforceInput_26 + ": "+errorMessage_tSalesforceInput_26;
    			System.err.println(errorMessage_tSalesforceInput_26);
            	// If the record is reject, the main line record should put NULL
            	row53 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_26 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_26 = null;


 



/**
 * [tSalesforceInput_26 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_26 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_26";

	


 


	tos_count_tSalesforceInput_26++;

/**
 * [tSalesforceInput_26 main ] stop
 */
	
	/**
	 * [tSalesforceInput_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_26";

	


 



/**
 * [tSalesforceInput_26 process_data_begin ] stop
 */

	
	/**
	 * [tMap_26 main ] start
	 */

	

	
	
	currentComponent="tMap_26";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row53");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_26 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_26 = false;
		  boolean mainRowRejected_tMap_26 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_26__Struct Var = Var__tMap_26;// ###############################
        // ###############################
        // # Output tables

out26 = null;


// # Output table : 'out26'
out26_tmp.Id = row53.Id ;
out26_tmp.IsDeleted = row53.IsDeleted ;
out26_tmp.ParentId = row53.ParentId ;
out26_tmp.CreatedById = row53.CreatedById ;
out26_tmp.CreatedDate = (row53.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row53.CreatedDate))).getTime())/1000 ;
out26_tmp.Field = row53.Field ;
out26_tmp.OldValue = row53.OldValue ;
out26_tmp.NewValue = row53.NewValue ;
out26 = out26_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_26 = false;










 


	tos_count_tMap_26++;

/**
 * [tMap_26 main ] stop
 */
	
	/**
	 * [tMap_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 process_data_begin ] stop
 */
// Start of branch "out26"
if(out26 != null) { 



	
	/**
	 * [tWriteJSONField_26_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_26";
	
	currentComponent="tWriteJSONField_26_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out26");
					}
					

	if(txf_tWriteJSONField_26_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_26_Out.getCurrentComponent();
		throw txf_tWriteJSONField_26_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_26_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_26_Out.getLastError();
	}
	nb_line_tWriteJSONField_26_Out++;
	valueMap_tWriteJSONField_26_Out.clear();
	arraysValueMap_tWriteJSONField_26_Out.clear();
	valueMap_tWriteJSONField_26_Out.put("Id",
	(
            out26.Id.toString()
		));
	arraysValueMap_tWriteJSONField_26_Out.put("Id",
	(
            out26.Id.toString()
		));
	valueMap_tWriteJSONField_26_Out.put("IsDeleted",
	(
            String.valueOf(out26.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_26_Out.put("IsDeleted",
	(
            String.valueOf(out26.IsDeleted)
		));
	valueMap_tWriteJSONField_26_Out.put("ParentId",
	(
            out26.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_26_Out.put("ParentId",
	(
            out26.ParentId.toString()
		));
	valueMap_tWriteJSONField_26_Out.put("CreatedById",
	(
            out26.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_26_Out.put("CreatedById",
	(
            out26.CreatedById.toString()
		));
	valueMap_tWriteJSONField_26_Out.put("CreatedDate",
	(
            String.valueOf(out26.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_26_Out.put("CreatedDate",
	(
            String.valueOf(out26.CreatedDate)
		));
	valueMap_tWriteJSONField_26_Out.put("Field",
	(
            out26.Field.toString()
		));
	arraysValueMap_tWriteJSONField_26_Out.put("Field",
	(
            out26.Field.toString()
		));
	valueMap_tWriteJSONField_26_Out.put("OldValue",
	(
		out26.OldValue != null?
            out26.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_26_Out.put("OldValue",
	(
		out26.OldValue != null?
            out26.OldValue.toString():null
		));
	valueMap_tWriteJSONField_26_Out.put("NewValue",
	(
		out26.NewValue != null?
            out26.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_26_Out.put("NewValue",
	(
		out26.NewValue != null?
            out26.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_26_Out = "";
	if(strCompCache_tWriteJSONField_26_Out==null){
		strCompCache_tWriteJSONField_26_Out=strTemp_tWriteJSONField_26_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_26_Out.replaceDefaultNameSpace(doc_tWriteJSONField_26_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_26_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_26_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_26_Out, format_tWriteJSONField_26_Out);
			output_tWriteJSONField_26_Out.write(doc_tWriteJSONField_26_Out);
		    output_tWriteJSONField_26_Out.close();
			
				  		  row52Struct row_tWriteJSONField_26_Out = new row52Struct();
						  
					     		row_tWriteJSONField_26_Out.data = strWriter_tWriteJSONField_26_Out.toString();
					     		listGroupby_tWriteJSONField_26_Out.add(row_tWriteJSONField_26_Out);
					
		    doc_tWriteJSONField_26_Out.clearContent();
			needRoot_tWriteJSONField_26_Out = true;
			for(int i_tWriteJSONField_26_Out=0;i_tWriteJSONField_26_Out<orders_tWriteJSONField_26_Out.length;i_tWriteJSONField_26_Out++){
				orders_tWriteJSONField_26_Out[i_tWriteJSONField_26_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_26_Out != null && groupbyList_tWriteJSONField_26_Out.size() >= 0){
				groupbyList_tWriteJSONField_26_Out.clear();
			}
			strCompCache_tWriteJSONField_26_Out=strTemp_tWriteJSONField_26_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_26_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_26_Out) {
		needRoot_tWriteJSONField_26_Out=false;
		org.dom4j.Element root_tWriteJSONField_26_Out = doc_tWriteJSONField_26_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_26_Out = root_tWriteJSONField_26_Out;
		org.dom4j.Element root_0_tWriteJSONField_26_Out = root_tWriteJSONField_26_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_26_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_26_Out .setText(root_0_tWriteJSONField_26_Out,
		valueMap_tWriteJSONField_26_Out.get("IsDeleted"));
            root_0_tWriteJSONField_26_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_26_Out .setText(root_0_tWriteJSONField_26_Out,"null");
			root_0_tWriteJSONField_26_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_26_Out = root_tWriteJSONField_26_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_26_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_26_Out .setText(root_1_tWriteJSONField_26_Out,
		valueMap_tWriteJSONField_26_Out.get("ParentId"));
			root_1_tWriteJSONField_26_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_26_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_26_Out .setText(root_1_tWriteJSONField_26_Out,"null");
			root_1_tWriteJSONField_26_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_26_Out = root_tWriteJSONField_26_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_26_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_26_Out .setText(root_2_tWriteJSONField_26_Out,
		valueMap_tWriteJSONField_26_Out.get("CreatedById"));
			root_2_tWriteJSONField_26_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_26_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_26_Out .setText(root_2_tWriteJSONField_26_Out,"null");
			root_2_tWriteJSONField_26_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_26_Out = root_tWriteJSONField_26_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_26_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_26_Out .setText(root_3_tWriteJSONField_26_Out,
		valueMap_tWriteJSONField_26_Out.get("CreatedDate"));
            root_3_tWriteJSONField_26_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_26_Out .setText(root_3_tWriteJSONField_26_Out,"null");
			root_3_tWriteJSONField_26_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_26_Out = root_tWriteJSONField_26_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_26_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_26_Out .setText(root_4_tWriteJSONField_26_Out,
		valueMap_tWriteJSONField_26_Out.get("Field"));
			root_4_tWriteJSONField_26_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_26_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_26_Out .setText(root_4_tWriteJSONField_26_Out,"null");
			root_4_tWriteJSONField_26_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_26_Out = root_tWriteJSONField_26_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_26_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_26_Out .setText(root_5_tWriteJSONField_26_Out,
		valueMap_tWriteJSONField_26_Out.get("OldValue"));
			root_5_tWriteJSONField_26_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_26_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_26_Out .setText(root_5_tWriteJSONField_26_Out,"null");
			root_5_tWriteJSONField_26_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_26_Out = root_tWriteJSONField_26_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_26_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_26_Out .setText(root_6_tWriteJSONField_26_Out,
		valueMap_tWriteJSONField_26_Out.get("NewValue"));
			root_6_tWriteJSONField_26_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_26_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_26_Out .setText(root_6_tWriteJSONField_26_Out,"null");
			root_6_tWriteJSONField_26_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_26_Out = subTreeRootParent_tWriteJSONField_26_Out;
	}else{
		subTreeRootParent_tWriteJSONField_26_Out=root4Group_tWriteJSONField_26_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_26_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_26_Out[0]==0){
        	orders_tWriteJSONField_26_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_26_Out.length){
        		orders_tWriteJSONField_26_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_26_Out.elements().add(orders_tWriteJSONField_26_Out[0]++,loop_tWriteJSONField_26_Out);
		if(
		valueMap_tWriteJSONField_26_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_26_Out .setText(loop_tWriteJSONField_26_Out,
		valueMap_tWriteJSONField_26_Out.get("Id"));
			loop_tWriteJSONField_26_Out.addAttribute("type", "string");
			loop_tWriteJSONField_26_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_26_Out .setText(loop_tWriteJSONField_26_Out,"null");
			loop_tWriteJSONField_26_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_26_Out++;

/**
 * [tWriteJSONField_26_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_26_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_26";
	
	currentComponent="tWriteJSONField_26_Out";

	

 



/**
 * [tWriteJSONField_26_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_26_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_26";
	
	currentComponent="tWriteJSONField_26_Out";

	

 



/**
 * [tWriteJSONField_26_Out process_data_end ] stop
 */

} // End of branch "out26"




	
	/**
	 * [tMap_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_26";

	


 



/**
 * [tSalesforceInput_26 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_26 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_26";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_26", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_26.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_26 = reader_tSalesforceInput_26.getReturnValues();
if(resultMap_tSalesforceInput_26!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_26 : resultMap_tSalesforceInput_26.entrySet()) {
		switch(entry_tSalesforceInput_26.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_26.setComponentData("tSalesforceInput_26", "ERROR_MESSAGE", entry_tSalesforceInput_26.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_26.setComponentData("tSalesforceInput_26", "NB_LINE", entry_tSalesforceInput_26.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_26.setComponentData("tSalesforceInput_26", "NB_SUCCESS", entry_tSalesforceInput_26.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_26.setComponentData("tSalesforceInput_26", "NB_REJECT", entry_tSalesforceInput_26.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_26 = new StringBuilder();
            for (int i_tSalesforceInput_26 = 0; i_tSalesforceInput_26 < entry_tSalesforceInput_26.getKey().length(); i_tSalesforceInput_26++) {
                char ch_tSalesforceInput_26 = entry_tSalesforceInput_26.getKey().charAt(i_tSalesforceInput_26);
                if(Character.isUpperCase(ch_tSalesforceInput_26) && i_tSalesforceInput_26> 0) {
                	studio_key_tSalesforceInput_26.append('_');
                }
                studio_key_tSalesforceInput_26.append(ch_tSalesforceInput_26);
            }
			container_tSalesforceInput_26.setComponentData("tSalesforceInput_26", studio_key_tSalesforceInput_26.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_26.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_26", true);
end_Hash.put("tSalesforceInput_26", System.currentTimeMillis());




/**
 * [tSalesforceInput_26 end ] stop
 */

	
	/**
	 * [tMap_26 end ] start
	 */

	

	
	
	currentComponent="tMap_26";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row53");
			  	}
			  	
 

ok_Hash.put("tMap_26", true);
end_Hash.put("tMap_26", System.currentTimeMillis());




/**
 * [tMap_26 end ] stop
 */

	
	/**
	 * [tWriteJSONField_26_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_26";
	
	currentComponent="tWriteJSONField_26_Out";

	

if(nb_line_tWriteJSONField_26_Out > 0){  
    nestXMLTool_tWriteJSONField_26_Out.replaceDefaultNameSpace(doc_tWriteJSONField_26_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_26_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_26_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_26_Out, format_tWriteJSONField_26_Out);
	output_tWriteJSONField_26_Out.write(doc_tWriteJSONField_26_Out);
    output_tWriteJSONField_26_Out.close();
					row52Struct row_tWriteJSONField_26_Out = new row52Struct();
						  
					     		row_tWriteJSONField_26_Out.data = strWriter_tWriteJSONField_26_Out.toString();
					     		listGroupby_tWriteJSONField_26_Out.add(row_tWriteJSONField_26_Out);
		    		

}
globalMap.put("tWriteJSONField_26_Out_NB_LINE",nb_line_tWriteJSONField_26_Out);
globalMap.put("tWriteJSONField_26_In_FINISH" + (listGroupby_tWriteJSONField_26_Out==null?"":listGroupby_tWriteJSONField_26_Out.hashCode()), "true");
	
		txf_tWriteJSONField_26_Out.join();
		
		if(txf_tWriteJSONField_26_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_26_Out.getCurrentComponent();
			throw txf_tWriteJSONField_26_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_26_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_26_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_26_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out26");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_26_Out", true);
end_Hash.put("tWriteJSONField_26_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_26_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_26 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_26";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_26")==null){
    if(resourceMap.get("reader_tSalesforceInput_26")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_26")).close();
		} catch (java.io.IOException e_tSalesforceInput_26) {
			String errorMessage_tSalesforceInput_26 = "failed to release the resource in tSalesforceInput_26 :" + e_tSalesforceInput_26.getMessage();
			System.err.println(errorMessage_tSalesforceInput_26);
		}
	}
}
 



/**
 * [tSalesforceInput_26 finally ] stop
 */

	
	/**
	 * [tMap_26 finally ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_26_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_26";
	
	currentComponent="tWriteJSONField_26_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_26_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_26_In");
		if(resourceMap.get("finish_tWriteJSONField_26_Out") == null){
			globalMap.put("tWriteJSONField_26_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_26_Out==null?"":listGroupby_tWriteJSONField_26_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_26_Out != null) {
		globalMap.put("tWriteJSONField_26_In_FINISH" + (listGroupby_tWriteJSONField_26_Out==null?"":listGroupby_tWriteJSONField_26_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_26_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_26_SUBPROCESS_STATE", 1);
	}
	

public void tDie_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_26", false);
		start_Hash.put("tDie_26", System.currentTimeMillis());
		
	
	currentComponent="tDie_26";

	
		int tos_count_tDie_26 = 0;
		

 



/**
 * [tDie_26 begin ] stop
 */
	
	/**
	 * [tDie_26 main ] start
	 */

	

	
	
	currentComponent="tDie_26";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_26", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_26_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_26_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_26_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_26) {
		logIgnoredError(String.format("tDie_26 - tDie failed to log message due to internal error: %s", e_tDie_26), e_tDie_26);
	}
	
	currentComponent = "tDie_26";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_26_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_26++;

/**
 * [tDie_26 main ] stop
 */
	
	/**
	 * [tDie_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_26";

	

 



/**
 * [tDie_26 process_data_begin ] stop
 */
	
	/**
	 * [tDie_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_26";

	

 



/**
 * [tDie_26 process_data_end ] stop
 */
	
	/**
	 * [tDie_26 end ] start
	 */

	

	
	
	currentComponent="tDie_26";

	

 

ok_Hash.put("tDie_26", true);
end_Hash.put("tDie_26", System.currentTimeMillis());




/**
 * [tDie_26 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_26 finally ] start
	 */

	

	
	
	currentComponent="tDie_26";

	

 



/**
 * [tDie_26 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_26_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_26", false);
		start_Hash.put("tFileArchive_26", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_26";

	
		int tos_count_tFileArchive_26 = 0;
		

 



/**
 * [tFileArchive_26 begin ] stop
 */
	
	/**
	 * [tFileArchive_26 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_26";

	

	

		String sourceFile_tFileArchive_26 = context.staging_S3_dir + "noodlecrm__log_record__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_26), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_26 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_26 = context.staging_S3_dir + "noodlecrm__log_record__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_26 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_26, zipFile_tFileArchive_26);
    zip_tFileArchive_26.setOverwriteExistTargetZip(true);
	zip_tFileArchive_26.setMakeTargetDir(true);
	zip_tFileArchive_26.setCompressLevel(9);
	zip_tFileArchive_26.setArchiveFormat("gzip");
	zip_tFileArchive_26.setAllFiles(true);
	
	
		zip_tFileArchive_26.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_26_ARCHIVE_FILEPATH",zipFile_tFileArchive_26);
   
   globalMap.put("tFileArchive_26_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_26).getName());

   zip_tFileArchive_26.doZip();


 


	tos_count_tFileArchive_26++;

/**
 * [tFileArchive_26 main ] stop
 */
	
	/**
	 * [tFileArchive_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_26";

	

 



/**
 * [tFileArchive_26 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_26";

	

 



/**
 * [tFileArchive_26 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_26 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_26";

	

 

ok_Hash.put("tFileArchive_26", true);
end_Hash.put("tFileArchive_26", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk181", 0, "ok");
				}
				tS3Put_26Process(globalMap);



/**
 * [tFileArchive_26 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_26 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_26";

	

 



/**
 * [tFileArchive_26 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_26_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_26", false);
		start_Hash.put("tS3Put_26", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_26";

	
		int tos_count_tS3Put_26 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_26 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_26 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__log_record__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__log_record__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_26 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_26 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_26 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_26 = context.staging_S3_dir + "noodlecrm__log_record__history.json.gz";
	
	boolean useStream_tS3Put_26 = false;
	java.io.InputStream uploadStream_tS3Put_26 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_26 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_26 instanceof String){
		    useStream_tS3Put_26 = false;
		}else if(fileOrStream_tS3Put_26 instanceof java.io.InputStream){
		    useStream_tS3Put_26 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_26 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_26) {
				java.io.File inputFile_tS3Put_26 = new java.io.File((String)fileOrStream_tS3Put_26);
				
				long multipart_upload_threshold_tS3Put_26 = 5 * 1024 * 1024;
				
    		tm_tS3Put_26 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_26)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_26)
    			.withS3Client(conn_tS3Put_26)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_26 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_26, inputFile_tS3Put_26).withMetadata(objectMetadata_tS3Put_26);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_26 = tm_tS3Put_26.upload(putRequest_tS3Put_26);
  		
  			upload_tS3Put_26.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_26 = ((java.io.InputStream)fileOrStream_tS3Put_26);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_26 = new S3StreamUtil();
    		byte[] buffer_tS3Put_26 = new byte[partSizeInBytes_tS3Put_26];
    		sourceStream_tS3Put_26.read(buffer_tS3Put_26);
    		long curPartSize_tS3Put_26 = streamUtil_tS3Put_26.getLength(buffer_tS3Put_26);
    		boolean multiUpload_tS3Put_26 = curPartSize_tS3Put_26 == partSizeInBytes_tS3Put_26;
    		
    		if(!multiUpload_tS3Put_26) {
    				objectMetadata_tS3Put_26.setContentLength(curPartSize_tS3Put_26);
    				uploadStream_tS3Put_26 = new java.io.ByteArrayInputStream(buffer_tS3Put_26,0,Long.valueOf(curPartSize_tS3Put_26).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_26 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_26, uploadStream_tS3Put_26, objectMetadata_tS3Put_26);
			
    				
    				

    				
    				conn_tS3Put_26.putObject(putRequest_tS3Put_26);
    		} else {
    				uploadStream_tS3Put_26 = new java.io.ByteArrayInputStream(buffer_tS3Put_26);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_26 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_26 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_26, objectMetadata_tS3Put_26);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_26 = conn_tS3Put_26.initiateMultipartUpload(putRequest_tS3Put_26);
      			String uploadId_tS3Put_26 = initResponse_tS3Put_26.getUploadId();
      			int partNumber_tS3Put_26 = 1;
      			boolean streamHasNext_tS3Put_26 = true;
      			byte[] probeAvailability_tS3Put_26 = new byte[1];
				try {
					while (streamHasNext_tS3Put_26) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_26 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_26)
						.withUploadId(uploadId_tS3Put_26)
                    	.withPartNumber(partNumber_tS3Put_26)
						.withPartSize(curPartSize_tS3Put_26);
            		    uploadRequest_tS3Put_26.setInputStream(uploadStream_tS3Put_26);
            		    streamHasNext_tS3Put_26 = sourceStream_tS3Put_26.read(probeAvailability_tS3Put_26) != -1;
            		    if(!streamHasNext_tS3Put_26){
                    	    uploadRequest_tS3Put_26.setLastPart(true);
                    	}

                		partTags_tS3Put_26.add(conn_tS3Put_26.uploadPart(uploadRequest_tS3Put_26).getPartETag());
                  	    partNumber_tS3Put_26++;

          		     	if(uploadStream_tS3Put_26!=null){
      		         			uploadStream_tS3Put_26.close();
          		     	}
          		     	buffer_tS3Put_26 = new byte[partSizeInBytes_tS3Put_26];
          		     	sourceStream_tS3Put_26.read(buffer_tS3Put_26,1,partSizeInBytes_tS3Put_26-1);
          		     	buffer_tS3Put_26[0] = probeAvailability_tS3Put_26[0];
          		     	probeAvailability_tS3Put_26 = new byte[1];
          		     	curPartSize_tS3Put_26 = streamUtil_tS3Put_26.getLength(buffer_tS3Put_26);
          		     	uploadStream_tS3Put_26 = new java.io.ByteArrayInputStream(buffer_tS3Put_26);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_26 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_26,
                        uploadId_tS3Put_26, partTags_tS3Put_26);
            		conn_tS3Put_26.completeMultipartUpload(compRequest_tS3Put_26);
            } catch (java.lang.Exception uploadException_tS3Put_26) {
  							conn_tS3Put_26.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_26, uploadId_tS3Put_26));
    						throw uploadException_tS3Put_26;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_26){
		
			throw(e_tS3Put_26);
		
	}finally{
		if(useStream_tS3Put_26 && uploadStream_tS3Put_26!=null){
    	uploadStream_tS3Put_26.close();
    }
    
    if(tm_tS3Put_26 != null){
        tm_tS3Put_26.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_26 begin ] stop
 */
	
	/**
	 * [tS3Put_26 main ] start
	 */

	

	
	
	currentComponent="tS3Put_26";

	

 


	tos_count_tS3Put_26++;

/**
 * [tS3Put_26 main ] stop
 */
	
	/**
	 * [tS3Put_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_26";

	

 



/**
 * [tS3Put_26 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_26";

	

 



/**
 * [tS3Put_26 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_26 end ] start
	 */

	

	
	
	currentComponent="tS3Put_26";

	

 

ok_Hash.put("tS3Put_26", true);
end_Hash.put("tS3Put_26", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk182", 0, "ok");
				}
				tJava_60Process(globalMap);



/**
 * [tS3Put_26 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_26 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_26";

	

 



/**
 * [tS3Put_26 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_26_SUBPROCESS_STATE", 1);
	}
	

public void tJava_60Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_60_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_60 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_60", false);
		start_Hash.put("tJava_60", System.currentTimeMillis());
		
	
	currentComponent="tJava_60";

	
		int tos_count_tJava_60 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_26_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_26_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_60 begin ] stop
 */
	
	/**
	 * [tJava_60 main ] start
	 */

	

	
	
	currentComponent="tJava_60";

	

 


	tos_count_tJava_60++;

/**
 * [tJava_60 main ] stop
 */
	
	/**
	 * [tJava_60 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_60";

	

 



/**
 * [tJava_60 process_data_begin ] stop
 */
	
	/**
	 * [tJava_60 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_60";

	

 



/**
 * [tJava_60 process_data_end ] stop
 */
	
	/**
	 * [tJava_60 end ] start
	 */

	

	
	
	currentComponent="tJava_60";

	

 

ok_Hash.put("tJava_60", true);
end_Hash.put("tJava_60", System.currentTimeMillis());




/**
 * [tJava_60 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_60 finally ] start
	 */

	

	
	
	currentComponent="tJava_60";

	

 



/**
 * [tJava_60 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_60_SUBPROCESS_STATE", 1);
	}
	


public static class out25Struct implements routines.system.IPersistableRow<out25Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row51Struct implements routines.system.IPersistableRow<row51Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row51Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row51Struct row51 = new row51Struct();
out25Struct out25 = new out25Struct();





	
	/**
	 * [tWriteJSONField_25_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_25_Out", false);
		start_Hash.put("tWriteJSONField_25_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_25";
	
	currentComponent="tWriteJSONField_25_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out25");
					}
				
		int tos_count_tWriteJSONField_25_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_25_Out = 0;
				boolean needRoot_tWriteJSONField_25_Out  = true;
				
				String  strCompCache_tWriteJSONField_25_Out= null;		
				
						        java.util.Queue<row50Struct> listGroupby_tWriteJSONField_25_Out = new java.util.concurrent.ConcurrentLinkedQueue<row50Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_25_Out extends Thread {
						
									    java.util.Queue<row50Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_25_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_25_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_25_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_25_In", queue);
							globalMap.put("flows_tWriteJSONField_25_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_25_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_25_Out txf_tWriteJSONField_25_Out = new ThreadXMLField_tWriteJSONField_25_Out(listGroupby_tWriteJSONField_25_Out);
					
					txf_tWriteJSONField_25_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_25_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_25_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_25_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_25_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_25_Out nestXMLTool_tWriteJSONField_25_Out = new NestXMLTool_tWriteJSONField_25_Out();

out25Struct  rowStructOutput_tWriteJSONField_25_Out = new out25Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_25_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_25_Out = null;
org.dom4j.Document doc_tWriteJSONField_25_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_25_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_25_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_25_Out.setTrimText(false);
format_tWriteJSONField_25_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_25_Out = new int[1];

 



/**
 * [tWriteJSONField_25_Out begin ] stop
 */



	
	/**
	 * [tMap_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_25", false);
		start_Hash.put("tMap_25", System.currentTimeMillis());
		
	
	currentComponent="tMap_25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row51");
					}
				
		int tos_count_tMap_25 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_25__Struct  {
}
Var__tMap_25__Struct Var__tMap_25 = new Var__tMap_25__Struct();
// ###############################

// ###############################
// # Outputs initialization
out25Struct out25_tmp = new out25Struct();
// ###############################

        
        



        









 



/**
 * [tMap_25 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_25", false);
		start_Hash.put("tSalesforceInput_25", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_25";

	
		int tos_count_tSalesforceInput_25 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_25 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_25 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_25.createRuntimeProperties();
 		                    props_tSalesforceInput_25.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_25.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_25.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_25.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_25.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_25.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_25.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_25.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_25.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_25.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_25.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_25.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_25.module.setValue("moduleName",
 		                    "NoodleCRM__Locator__History");
 		                    
 		                    props_tSalesforceInput_25.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_25.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_25.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_25.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_25.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_25_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Locator__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Locator__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_25_1_fisrt sst_tSalesforceInput_25_1_fisrt = new SchemaSettingTool_tSalesforceInput_25_1_fisrt();
 		                    
 		                    props_tSalesforceInput_25.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_25_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_25.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_25 = props_tSalesforceInput_25.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_25 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_25 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_25 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_25.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_25);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_25.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_25 = props_tSalesforceInput_25.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_25 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_25 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_25 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_25.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_25);
        }
    }
globalMap.put("tSalesforceInput_25_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_25);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_25= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_25_MAPPINGS_URL", mappings_url_tSalesforceInput_25);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_25 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_25";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_25 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_25 = null;
topology_tSalesforceInput_25 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_25 = def_tSalesforceInput_25.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_25, topology_tSalesforceInput_25);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_25 = def_tSalesforceInput_25.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_25 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_25.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_25 = componentRuntime_tSalesforceInput_25.initialize(container_tSalesforceInput_25, props_tSalesforceInput_25);

if (initVr_tSalesforceInput_25.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_25.getMessage());
}

if(componentRuntime_tSalesforceInput_25 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_25 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_25;
	compDriverInitialization_tSalesforceInput_25.runAtDriver(container_tSalesforceInput_25);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_25 = null;
if(componentRuntime_tSalesforceInput_25 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_25 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_25;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_25 = sourceOrSink_tSalesforceInput_25.validate(container_tSalesforceInput_25);
	if (vr_tSalesforceInput_25.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_25.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_25 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_25;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_25 =
            source_tSalesforceInput_25.createReader(container_tSalesforceInput_25);
	reader_tSalesforceInput_25 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_25, container_tSalesforceInput_25);

        boolean multi_output_is_allowed_tSalesforceInput_25 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_25 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_25.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_25 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_25 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_25 = props_tSalesforceInput_25.getSchema(c_tSalesforceInput_25, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_25 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_25, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_25 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_25 = reader_tSalesforceInput_25.start();

    resourceMap.put("reader_tSalesforceInput_25", reader_tSalesforceInput_25);

    for (; available_tSalesforceInput_25; available_tSalesforceInput_25 = reader_tSalesforceInput_25.advance()) {
    	nb_line_tSalesforceInput_25++;

    	
        if (multi_output_is_allowed_tSalesforceInput_25) {
                row51 = null;

        }

        try {
            Object data_tSalesforceInput_25 = reader_tSalesforceInput_25.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_25) {
                    row51 = new row51Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_25 == null) {
            factory_tSalesforceInput_25 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_25.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_25.setWrapped(factory_tSalesforceInput_25.convertToAvro(data_tSalesforceInput_25));
                Object columnValue_0_tSalesforceInput_25 = outgoingEnforcer_tSalesforceInput_25.get(0);
                        row51.Id = (String) (columnValue_0_tSalesforceInput_25);
                Object columnValue_1_tSalesforceInput_25 = outgoingEnforcer_tSalesforceInput_25.get(1);
                    if (columnValue_1_tSalesforceInput_25 == null) {
                        row51.IsDeleted = false;
                    } else {
                            row51.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_25);
                    }
                Object columnValue_2_tSalesforceInput_25 = outgoingEnforcer_tSalesforceInput_25.get(2);
                        row51.ParentId = (String) (columnValue_2_tSalesforceInput_25);
                Object columnValue_3_tSalesforceInput_25 = outgoingEnforcer_tSalesforceInput_25.get(3);
                        row51.CreatedById = (String) (columnValue_3_tSalesforceInput_25);
                Object columnValue_4_tSalesforceInput_25 = outgoingEnforcer_tSalesforceInput_25.get(4);
                        row51.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_25);
                Object columnValue_5_tSalesforceInput_25 = outgoingEnforcer_tSalesforceInput_25.get(5);
                        row51.Field = (String) (columnValue_5_tSalesforceInput_25);
                Object columnValue_6_tSalesforceInput_25 = outgoingEnforcer_tSalesforceInput_25.get(6);
                        row51.OldValue = (String) (columnValue_6_tSalesforceInput_25);
                Object columnValue_7_tSalesforceInput_25 = outgoingEnforcer_tSalesforceInput_25.get(7);
                        row51.NewValue = (String) (columnValue_7_tSalesforceInput_25);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_25) {
        	java.util.Map<String,Object> info_tSalesforceInput_25 = e_tSalesforceInput_25.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_25 = null;
            	if(info_tSalesforceInput_25.containsKey("error")){
            		errorMessage_tSalesforceInput_25 = info_tSalesforceInput_25.get("error");
        		}else if(info_tSalesforceInput_25.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_25 = info_tSalesforceInput_25.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_25 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_25 = "Row "+ nb_line_tSalesforceInput_25 + ": "+errorMessage_tSalesforceInput_25;
    			System.err.println(errorMessage_tSalesforceInput_25);
            	// If the record is reject, the main line record should put NULL
            	row51 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_25 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_25 = null;


 



/**
 * [tSalesforceInput_25 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_25 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_25";

	


 


	tos_count_tSalesforceInput_25++;

/**
 * [tSalesforceInput_25 main ] stop
 */
	
	/**
	 * [tSalesforceInput_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_25";

	


 



/**
 * [tSalesforceInput_25 process_data_begin ] stop
 */

	
	/**
	 * [tMap_25 main ] start
	 */

	

	
	
	currentComponent="tMap_25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row51");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_25 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_25 = false;
		  boolean mainRowRejected_tMap_25 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_25__Struct Var = Var__tMap_25;// ###############################
        // ###############################
        // # Output tables

out25 = null;


// # Output table : 'out25'
out25_tmp.Id = row51.Id ;
out25_tmp.IsDeleted = row51.IsDeleted ;
out25_tmp.ParentId = row51.ParentId ;
out25_tmp.CreatedById = row51.CreatedById ;
out25_tmp.CreatedDate = (row51.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row51.CreatedDate))).getTime())/1000 ;
out25_tmp.Field = row51.Field ;
out25_tmp.OldValue = row51.OldValue ;
out25_tmp.NewValue = row51.NewValue ;
out25 = out25_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_25 = false;










 


	tos_count_tMap_25++;

/**
 * [tMap_25 main ] stop
 */
	
	/**
	 * [tMap_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 process_data_begin ] stop
 */
// Start of branch "out25"
if(out25 != null) { 



	
	/**
	 * [tWriteJSONField_25_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_25";
	
	currentComponent="tWriteJSONField_25_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out25");
					}
					

	if(txf_tWriteJSONField_25_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_25_Out.getCurrentComponent();
		throw txf_tWriteJSONField_25_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_25_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_25_Out.getLastError();
	}
	nb_line_tWriteJSONField_25_Out++;
	valueMap_tWriteJSONField_25_Out.clear();
	arraysValueMap_tWriteJSONField_25_Out.clear();
	valueMap_tWriteJSONField_25_Out.put("Id",
	(
            out25.Id.toString()
		));
	arraysValueMap_tWriteJSONField_25_Out.put("Id",
	(
            out25.Id.toString()
		));
	valueMap_tWriteJSONField_25_Out.put("IsDeleted",
	(
            String.valueOf(out25.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_25_Out.put("IsDeleted",
	(
            String.valueOf(out25.IsDeleted)
		));
	valueMap_tWriteJSONField_25_Out.put("ParentId",
	(
            out25.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_25_Out.put("ParentId",
	(
            out25.ParentId.toString()
		));
	valueMap_tWriteJSONField_25_Out.put("CreatedById",
	(
            out25.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_25_Out.put("CreatedById",
	(
            out25.CreatedById.toString()
		));
	valueMap_tWriteJSONField_25_Out.put("CreatedDate",
	(
            String.valueOf(out25.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_25_Out.put("CreatedDate",
	(
            String.valueOf(out25.CreatedDate)
		));
	valueMap_tWriteJSONField_25_Out.put("Field",
	(
            out25.Field.toString()
		));
	arraysValueMap_tWriteJSONField_25_Out.put("Field",
	(
            out25.Field.toString()
		));
	valueMap_tWriteJSONField_25_Out.put("OldValue",
	(
		out25.OldValue != null?
            out25.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_25_Out.put("OldValue",
	(
		out25.OldValue != null?
            out25.OldValue.toString():null
		));
	valueMap_tWriteJSONField_25_Out.put("NewValue",
	(
		out25.NewValue != null?
            out25.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_25_Out.put("NewValue",
	(
		out25.NewValue != null?
            out25.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_25_Out = "";
	if(strCompCache_tWriteJSONField_25_Out==null){
		strCompCache_tWriteJSONField_25_Out=strTemp_tWriteJSONField_25_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_25_Out.replaceDefaultNameSpace(doc_tWriteJSONField_25_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_25_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_25_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_25_Out, format_tWriteJSONField_25_Out);
			output_tWriteJSONField_25_Out.write(doc_tWriteJSONField_25_Out);
		    output_tWriteJSONField_25_Out.close();
			
				  		  row50Struct row_tWriteJSONField_25_Out = new row50Struct();
						  
					     		row_tWriteJSONField_25_Out.data = strWriter_tWriteJSONField_25_Out.toString();
					     		listGroupby_tWriteJSONField_25_Out.add(row_tWriteJSONField_25_Out);
					
		    doc_tWriteJSONField_25_Out.clearContent();
			needRoot_tWriteJSONField_25_Out = true;
			for(int i_tWriteJSONField_25_Out=0;i_tWriteJSONField_25_Out<orders_tWriteJSONField_25_Out.length;i_tWriteJSONField_25_Out++){
				orders_tWriteJSONField_25_Out[i_tWriteJSONField_25_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_25_Out != null && groupbyList_tWriteJSONField_25_Out.size() >= 0){
				groupbyList_tWriteJSONField_25_Out.clear();
			}
			strCompCache_tWriteJSONField_25_Out=strTemp_tWriteJSONField_25_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_25_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_25_Out) {
		needRoot_tWriteJSONField_25_Out=false;
		org.dom4j.Element root_tWriteJSONField_25_Out = doc_tWriteJSONField_25_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_25_Out = root_tWriteJSONField_25_Out;
		org.dom4j.Element root_0_tWriteJSONField_25_Out = root_tWriteJSONField_25_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_25_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_25_Out .setText(root_0_tWriteJSONField_25_Out,
		valueMap_tWriteJSONField_25_Out.get("IsDeleted"));
            root_0_tWriteJSONField_25_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_25_Out .setText(root_0_tWriteJSONField_25_Out,"null");
			root_0_tWriteJSONField_25_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_25_Out = root_tWriteJSONField_25_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_25_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_25_Out .setText(root_1_tWriteJSONField_25_Out,
		valueMap_tWriteJSONField_25_Out.get("ParentId"));
			root_1_tWriteJSONField_25_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_25_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_25_Out .setText(root_1_tWriteJSONField_25_Out,"null");
			root_1_tWriteJSONField_25_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_25_Out = root_tWriteJSONField_25_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_25_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_25_Out .setText(root_2_tWriteJSONField_25_Out,
		valueMap_tWriteJSONField_25_Out.get("CreatedById"));
			root_2_tWriteJSONField_25_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_25_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_25_Out .setText(root_2_tWriteJSONField_25_Out,"null");
			root_2_tWriteJSONField_25_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_25_Out = root_tWriteJSONField_25_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_25_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_25_Out .setText(root_3_tWriteJSONField_25_Out,
		valueMap_tWriteJSONField_25_Out.get("CreatedDate"));
            root_3_tWriteJSONField_25_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_25_Out .setText(root_3_tWriteJSONField_25_Out,"null");
			root_3_tWriteJSONField_25_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_25_Out = root_tWriteJSONField_25_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_25_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_25_Out .setText(root_4_tWriteJSONField_25_Out,
		valueMap_tWriteJSONField_25_Out.get("Field"));
			root_4_tWriteJSONField_25_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_25_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_25_Out .setText(root_4_tWriteJSONField_25_Out,"null");
			root_4_tWriteJSONField_25_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_25_Out = root_tWriteJSONField_25_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_25_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_25_Out .setText(root_5_tWriteJSONField_25_Out,
		valueMap_tWriteJSONField_25_Out.get("OldValue"));
			root_5_tWriteJSONField_25_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_25_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_25_Out .setText(root_5_tWriteJSONField_25_Out,"null");
			root_5_tWriteJSONField_25_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_25_Out = root_tWriteJSONField_25_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_25_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_25_Out .setText(root_6_tWriteJSONField_25_Out,
		valueMap_tWriteJSONField_25_Out.get("NewValue"));
			root_6_tWriteJSONField_25_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_25_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_25_Out .setText(root_6_tWriteJSONField_25_Out,"null");
			root_6_tWriteJSONField_25_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_25_Out = subTreeRootParent_tWriteJSONField_25_Out;
	}else{
		subTreeRootParent_tWriteJSONField_25_Out=root4Group_tWriteJSONField_25_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_25_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_25_Out[0]==0){
        	orders_tWriteJSONField_25_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_25_Out.length){
        		orders_tWriteJSONField_25_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_25_Out.elements().add(orders_tWriteJSONField_25_Out[0]++,loop_tWriteJSONField_25_Out);
		if(
		valueMap_tWriteJSONField_25_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_25_Out .setText(loop_tWriteJSONField_25_Out,
		valueMap_tWriteJSONField_25_Out.get("Id"));
			loop_tWriteJSONField_25_Out.addAttribute("type", "string");
			loop_tWriteJSONField_25_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_25_Out .setText(loop_tWriteJSONField_25_Out,"null");
			loop_tWriteJSONField_25_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_25_Out++;

/**
 * [tWriteJSONField_25_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_25_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_25";
	
	currentComponent="tWriteJSONField_25_Out";

	

 



/**
 * [tWriteJSONField_25_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_25_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_25";
	
	currentComponent="tWriteJSONField_25_Out";

	

 



/**
 * [tWriteJSONField_25_Out process_data_end ] stop
 */

} // End of branch "out25"




	
	/**
	 * [tMap_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_25";

	


 



/**
 * [tSalesforceInput_25 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_25 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_25";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_25", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_25.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_25 = reader_tSalesforceInput_25.getReturnValues();
if(resultMap_tSalesforceInput_25!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_25 : resultMap_tSalesforceInput_25.entrySet()) {
		switch(entry_tSalesforceInput_25.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_25.setComponentData("tSalesforceInput_25", "ERROR_MESSAGE", entry_tSalesforceInput_25.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_25.setComponentData("tSalesforceInput_25", "NB_LINE", entry_tSalesforceInput_25.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_25.setComponentData("tSalesforceInput_25", "NB_SUCCESS", entry_tSalesforceInput_25.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_25.setComponentData("tSalesforceInput_25", "NB_REJECT", entry_tSalesforceInput_25.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_25 = new StringBuilder();
            for (int i_tSalesforceInput_25 = 0; i_tSalesforceInput_25 < entry_tSalesforceInput_25.getKey().length(); i_tSalesforceInput_25++) {
                char ch_tSalesforceInput_25 = entry_tSalesforceInput_25.getKey().charAt(i_tSalesforceInput_25);
                if(Character.isUpperCase(ch_tSalesforceInput_25) && i_tSalesforceInput_25> 0) {
                	studio_key_tSalesforceInput_25.append('_');
                }
                studio_key_tSalesforceInput_25.append(ch_tSalesforceInput_25);
            }
			container_tSalesforceInput_25.setComponentData("tSalesforceInput_25", studio_key_tSalesforceInput_25.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_25.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_25", true);
end_Hash.put("tSalesforceInput_25", System.currentTimeMillis());




/**
 * [tSalesforceInput_25 end ] stop
 */

	
	/**
	 * [tMap_25 end ] start
	 */

	

	
	
	currentComponent="tMap_25";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row51");
			  	}
			  	
 

ok_Hash.put("tMap_25", true);
end_Hash.put("tMap_25", System.currentTimeMillis());




/**
 * [tMap_25 end ] stop
 */

	
	/**
	 * [tWriteJSONField_25_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_25";
	
	currentComponent="tWriteJSONField_25_Out";

	

if(nb_line_tWriteJSONField_25_Out > 0){  
    nestXMLTool_tWriteJSONField_25_Out.replaceDefaultNameSpace(doc_tWriteJSONField_25_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_25_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_25_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_25_Out, format_tWriteJSONField_25_Out);
	output_tWriteJSONField_25_Out.write(doc_tWriteJSONField_25_Out);
    output_tWriteJSONField_25_Out.close();
					row50Struct row_tWriteJSONField_25_Out = new row50Struct();
						  
					     		row_tWriteJSONField_25_Out.data = strWriter_tWriteJSONField_25_Out.toString();
					     		listGroupby_tWriteJSONField_25_Out.add(row_tWriteJSONField_25_Out);
		    		

}
globalMap.put("tWriteJSONField_25_Out_NB_LINE",nb_line_tWriteJSONField_25_Out);
globalMap.put("tWriteJSONField_25_In_FINISH" + (listGroupby_tWriteJSONField_25_Out==null?"":listGroupby_tWriteJSONField_25_Out.hashCode()), "true");
	
		txf_tWriteJSONField_25_Out.join();
		
		if(txf_tWriteJSONField_25_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_25_Out.getCurrentComponent();
			throw txf_tWriteJSONField_25_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_25_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_25_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_25_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out25");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_25_Out", true);
end_Hash.put("tWriteJSONField_25_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_25_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_25 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_25";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_25")==null){
    if(resourceMap.get("reader_tSalesforceInput_25")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_25")).close();
		} catch (java.io.IOException e_tSalesforceInput_25) {
			String errorMessage_tSalesforceInput_25 = "failed to release the resource in tSalesforceInput_25 :" + e_tSalesforceInput_25.getMessage();
			System.err.println(errorMessage_tSalesforceInput_25);
		}
	}
}
 



/**
 * [tSalesforceInput_25 finally ] stop
 */

	
	/**
	 * [tMap_25 finally ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_25_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_25";
	
	currentComponent="tWriteJSONField_25_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_25_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_25_In");
		if(resourceMap.get("finish_tWriteJSONField_25_Out") == null){
			globalMap.put("tWriteJSONField_25_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_25_Out==null?"":listGroupby_tWriteJSONField_25_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_25_Out != null) {
		globalMap.put("tWriteJSONField_25_In_FINISH" + (listGroupby_tWriteJSONField_25_Out==null?"":listGroupby_tWriteJSONField_25_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_25_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_25_SUBPROCESS_STATE", 1);
	}
	

public void tDie_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_25", false);
		start_Hash.put("tDie_25", System.currentTimeMillis());
		
	
	currentComponent="tDie_25";

	
		int tos_count_tDie_25 = 0;
		

 



/**
 * [tDie_25 begin ] stop
 */
	
	/**
	 * [tDie_25 main ] start
	 */

	

	
	
	currentComponent="tDie_25";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_25", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_25_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_25_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_25_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_25) {
		logIgnoredError(String.format("tDie_25 - tDie failed to log message due to internal error: %s", e_tDie_25), e_tDie_25);
	}
	
	currentComponent = "tDie_25";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_25_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_25++;

/**
 * [tDie_25 main ] stop
 */
	
	/**
	 * [tDie_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_25";

	

 



/**
 * [tDie_25 process_data_begin ] stop
 */
	
	/**
	 * [tDie_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_25";

	

 



/**
 * [tDie_25 process_data_end ] stop
 */
	
	/**
	 * [tDie_25 end ] start
	 */

	

	
	
	currentComponent="tDie_25";

	

 

ok_Hash.put("tDie_25", true);
end_Hash.put("tDie_25", System.currentTimeMillis());




/**
 * [tDie_25 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_25 finally ] start
	 */

	

	
	
	currentComponent="tDie_25";

	

 



/**
 * [tDie_25 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_25_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_25", false);
		start_Hash.put("tFileArchive_25", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_25";

	
		int tos_count_tFileArchive_25 = 0;
		

 



/**
 * [tFileArchive_25 begin ] stop
 */
	
	/**
	 * [tFileArchive_25 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_25";

	

	

		String sourceFile_tFileArchive_25 = context.staging_S3_dir + "noodlecrm__locator__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_25), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_25 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_25 = context.staging_S3_dir + "noodlecrm__locator__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_25 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_25, zipFile_tFileArchive_25);
    zip_tFileArchive_25.setOverwriteExistTargetZip(true);
	zip_tFileArchive_25.setMakeTargetDir(true);
	zip_tFileArchive_25.setCompressLevel(9);
	zip_tFileArchive_25.setArchiveFormat("gzip");
	zip_tFileArchive_25.setAllFiles(true);
	
	
		zip_tFileArchive_25.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_25_ARCHIVE_FILEPATH",zipFile_tFileArchive_25);
   
   globalMap.put("tFileArchive_25_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_25).getName());

   zip_tFileArchive_25.doZip();


 


	tos_count_tFileArchive_25++;

/**
 * [tFileArchive_25 main ] stop
 */
	
	/**
	 * [tFileArchive_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_25";

	

 



/**
 * [tFileArchive_25 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_25";

	

 



/**
 * [tFileArchive_25 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_25 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_25";

	

 

ok_Hash.put("tFileArchive_25", true);
end_Hash.put("tFileArchive_25", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk177", 0, "ok");
				}
				tS3Put_25Process(globalMap);



/**
 * [tFileArchive_25 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_25 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_25";

	

 



/**
 * [tFileArchive_25 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_25_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_25", false);
		start_Hash.put("tS3Put_25", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_25";

	
		int tos_count_tS3Put_25 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_25 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_25 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__locator__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__locator__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_25 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_25 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_25 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_25 = context.staging_S3_dir + "noodlecrm__locator__history.json.gz";
	
	boolean useStream_tS3Put_25 = false;
	java.io.InputStream uploadStream_tS3Put_25 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_25 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_25 instanceof String){
		    useStream_tS3Put_25 = false;
		}else if(fileOrStream_tS3Put_25 instanceof java.io.InputStream){
		    useStream_tS3Put_25 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_25 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_25) {
				java.io.File inputFile_tS3Put_25 = new java.io.File((String)fileOrStream_tS3Put_25);
				
				long multipart_upload_threshold_tS3Put_25 = 5 * 1024 * 1024;
				
    		tm_tS3Put_25 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_25)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_25)
    			.withS3Client(conn_tS3Put_25)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_25 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_25, inputFile_tS3Put_25).withMetadata(objectMetadata_tS3Put_25);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_25 = tm_tS3Put_25.upload(putRequest_tS3Put_25);
  		
  			upload_tS3Put_25.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_25 = ((java.io.InputStream)fileOrStream_tS3Put_25);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_25 = new S3StreamUtil();
    		byte[] buffer_tS3Put_25 = new byte[partSizeInBytes_tS3Put_25];
    		sourceStream_tS3Put_25.read(buffer_tS3Put_25);
    		long curPartSize_tS3Put_25 = streamUtil_tS3Put_25.getLength(buffer_tS3Put_25);
    		boolean multiUpload_tS3Put_25 = curPartSize_tS3Put_25 == partSizeInBytes_tS3Put_25;
    		
    		if(!multiUpload_tS3Put_25) {
    				objectMetadata_tS3Put_25.setContentLength(curPartSize_tS3Put_25);
    				uploadStream_tS3Put_25 = new java.io.ByteArrayInputStream(buffer_tS3Put_25,0,Long.valueOf(curPartSize_tS3Put_25).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_25 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_25, uploadStream_tS3Put_25, objectMetadata_tS3Put_25);
			
    				
    				

    				
    				conn_tS3Put_25.putObject(putRequest_tS3Put_25);
    		} else {
    				uploadStream_tS3Put_25 = new java.io.ByteArrayInputStream(buffer_tS3Put_25);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_25 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_25 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_25, objectMetadata_tS3Put_25);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_25 = conn_tS3Put_25.initiateMultipartUpload(putRequest_tS3Put_25);
      			String uploadId_tS3Put_25 = initResponse_tS3Put_25.getUploadId();
      			int partNumber_tS3Put_25 = 1;
      			boolean streamHasNext_tS3Put_25 = true;
      			byte[] probeAvailability_tS3Put_25 = new byte[1];
				try {
					while (streamHasNext_tS3Put_25) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_25 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_25)
						.withUploadId(uploadId_tS3Put_25)
                    	.withPartNumber(partNumber_tS3Put_25)
						.withPartSize(curPartSize_tS3Put_25);
            		    uploadRequest_tS3Put_25.setInputStream(uploadStream_tS3Put_25);
            		    streamHasNext_tS3Put_25 = sourceStream_tS3Put_25.read(probeAvailability_tS3Put_25) != -1;
            		    if(!streamHasNext_tS3Put_25){
                    	    uploadRequest_tS3Put_25.setLastPart(true);
                    	}

                		partTags_tS3Put_25.add(conn_tS3Put_25.uploadPart(uploadRequest_tS3Put_25).getPartETag());
                  	    partNumber_tS3Put_25++;

          		     	if(uploadStream_tS3Put_25!=null){
      		         			uploadStream_tS3Put_25.close();
          		     	}
          		     	buffer_tS3Put_25 = new byte[partSizeInBytes_tS3Put_25];
          		     	sourceStream_tS3Put_25.read(buffer_tS3Put_25,1,partSizeInBytes_tS3Put_25-1);
          		     	buffer_tS3Put_25[0] = probeAvailability_tS3Put_25[0];
          		     	probeAvailability_tS3Put_25 = new byte[1];
          		     	curPartSize_tS3Put_25 = streamUtil_tS3Put_25.getLength(buffer_tS3Put_25);
          		     	uploadStream_tS3Put_25 = new java.io.ByteArrayInputStream(buffer_tS3Put_25);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_25 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_25,
                        uploadId_tS3Put_25, partTags_tS3Put_25);
            		conn_tS3Put_25.completeMultipartUpload(compRequest_tS3Put_25);
            } catch (java.lang.Exception uploadException_tS3Put_25) {
  							conn_tS3Put_25.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_25, uploadId_tS3Put_25));
    						throw uploadException_tS3Put_25;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_25){
		
			throw(e_tS3Put_25);
		
	}finally{
		if(useStream_tS3Put_25 && uploadStream_tS3Put_25!=null){
    	uploadStream_tS3Put_25.close();
    }
    
    if(tm_tS3Put_25 != null){
        tm_tS3Put_25.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_25 begin ] stop
 */
	
	/**
	 * [tS3Put_25 main ] start
	 */

	

	
	
	currentComponent="tS3Put_25";

	

 


	tos_count_tS3Put_25++;

/**
 * [tS3Put_25 main ] stop
 */
	
	/**
	 * [tS3Put_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_25";

	

 



/**
 * [tS3Put_25 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_25";

	

 



/**
 * [tS3Put_25 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_25 end ] start
	 */

	

	
	
	currentComponent="tS3Put_25";

	

 

ok_Hash.put("tS3Put_25", true);
end_Hash.put("tS3Put_25", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk178", 0, "ok");
				}
				tJava_59Process(globalMap);



/**
 * [tS3Put_25 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_25 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_25";

	

 



/**
 * [tS3Put_25 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_25_SUBPROCESS_STATE", 1);
	}
	

public void tJava_59Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_59_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_59 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_59", false);
		start_Hash.put("tJava_59", System.currentTimeMillis());
		
	
	currentComponent="tJava_59";

	
		int tos_count_tJava_59 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_25_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_25_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_59 begin ] stop
 */
	
	/**
	 * [tJava_59 main ] start
	 */

	

	
	
	currentComponent="tJava_59";

	

 


	tos_count_tJava_59++;

/**
 * [tJava_59 main ] stop
 */
	
	/**
	 * [tJava_59 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_59";

	

 



/**
 * [tJava_59 process_data_begin ] stop
 */
	
	/**
	 * [tJava_59 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_59";

	

 



/**
 * [tJava_59 process_data_end ] stop
 */
	
	/**
	 * [tJava_59 end ] start
	 */

	

	
	
	currentComponent="tJava_59";

	

 

ok_Hash.put("tJava_59", true);
end_Hash.put("tJava_59", System.currentTimeMillis());




/**
 * [tJava_59 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_59 finally ] start
	 */

	

	
	
	currentComponent="tJava_59";

	

 



/**
 * [tJava_59 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_59_SUBPROCESS_STATE", 1);
	}
	


public static class out24Struct implements routines.system.IPersistableRow<out24Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row49Struct row49 = new row49Struct();
out24Struct out24 = new out24Struct();





	
	/**
	 * [tWriteJSONField_24_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_24_Out", false);
		start_Hash.put("tWriteJSONField_24_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_24";
	
	currentComponent="tWriteJSONField_24_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out24");
					}
				
		int tos_count_tWriteJSONField_24_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_24_Out = 0;
				boolean needRoot_tWriteJSONField_24_Out  = true;
				
				String  strCompCache_tWriteJSONField_24_Out= null;		
				
						        java.util.Queue<row48Struct> listGroupby_tWriteJSONField_24_Out = new java.util.concurrent.ConcurrentLinkedQueue<row48Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_24_Out extends Thread {
						
									    java.util.Queue<row48Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_24_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_24_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_24_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_24_In", queue);
							globalMap.put("flows_tWriteJSONField_24_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_24_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_24_Out txf_tWriteJSONField_24_Out = new ThreadXMLField_tWriteJSONField_24_Out(listGroupby_tWriteJSONField_24_Out);
					
					txf_tWriteJSONField_24_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_24_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_24_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_24_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_24_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_24_Out nestXMLTool_tWriteJSONField_24_Out = new NestXMLTool_tWriteJSONField_24_Out();

out24Struct  rowStructOutput_tWriteJSONField_24_Out = new out24Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_24_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_24_Out = null;
org.dom4j.Document doc_tWriteJSONField_24_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_24_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_24_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_24_Out.setTrimText(false);
format_tWriteJSONField_24_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_24_Out = new int[1];

 



/**
 * [tWriteJSONField_24_Out begin ] stop
 */



	
	/**
	 * [tMap_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_24", false);
		start_Hash.put("tMap_24", System.currentTimeMillis());
		
	
	currentComponent="tMap_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row49");
					}
				
		int tos_count_tMap_24 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_24__Struct  {
}
Var__tMap_24__Struct Var__tMap_24 = new Var__tMap_24__Struct();
// ###############################

// ###############################
// # Outputs initialization
out24Struct out24_tmp = new out24Struct();
// ###############################

        
        



        









 



/**
 * [tMap_24 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_24", false);
		start_Hash.put("tSalesforceInput_24", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_24";

	
		int tos_count_tSalesforceInput_24 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_24 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_24 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_24.createRuntimeProperties();
 		                    props_tSalesforceInput_24.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_24.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_24.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_24.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_24.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_24.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_24.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_24.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_24.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_24.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_24.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_24.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_24.module.setValue("moduleName",
 		                    "NoodleCRM__Inquiry__History");
 		                    
 		                    props_tSalesforceInput_24.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_24.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_24.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_24.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_24.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_24_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Inquiry__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Inquiry__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_24_1_fisrt sst_tSalesforceInput_24_1_fisrt = new SchemaSettingTool_tSalesforceInput_24_1_fisrt();
 		                    
 		                    props_tSalesforceInput_24.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_24_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_24.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_24 = props_tSalesforceInput_24.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_24 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_24 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_24 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_24.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_24);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_24.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_24 = props_tSalesforceInput_24.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_24 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_24 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_24 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_24.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_24);
        }
    }
globalMap.put("tSalesforceInput_24_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_24);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_24= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_24_MAPPINGS_URL", mappings_url_tSalesforceInput_24);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_24 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_24";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_24 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_24 = null;
topology_tSalesforceInput_24 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_24 = def_tSalesforceInput_24.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_24, topology_tSalesforceInput_24);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_24 = def_tSalesforceInput_24.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_24 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_24.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_24 = componentRuntime_tSalesforceInput_24.initialize(container_tSalesforceInput_24, props_tSalesforceInput_24);

if (initVr_tSalesforceInput_24.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_24.getMessage());
}

if(componentRuntime_tSalesforceInput_24 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_24 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_24;
	compDriverInitialization_tSalesforceInput_24.runAtDriver(container_tSalesforceInput_24);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_24 = null;
if(componentRuntime_tSalesforceInput_24 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_24 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_24;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_24 = sourceOrSink_tSalesforceInput_24.validate(container_tSalesforceInput_24);
	if (vr_tSalesforceInput_24.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_24.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_24 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_24;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_24 =
            source_tSalesforceInput_24.createReader(container_tSalesforceInput_24);
	reader_tSalesforceInput_24 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_24, container_tSalesforceInput_24);

        boolean multi_output_is_allowed_tSalesforceInput_24 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_24 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_24.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_24 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_24 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_24 = props_tSalesforceInput_24.getSchema(c_tSalesforceInput_24, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_24 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_24, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_24 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_24 = reader_tSalesforceInput_24.start();

    resourceMap.put("reader_tSalesforceInput_24", reader_tSalesforceInput_24);

    for (; available_tSalesforceInput_24; available_tSalesforceInput_24 = reader_tSalesforceInput_24.advance()) {
    	nb_line_tSalesforceInput_24++;

    	
        if (multi_output_is_allowed_tSalesforceInput_24) {
                row49 = null;

        }

        try {
            Object data_tSalesforceInput_24 = reader_tSalesforceInput_24.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_24) {
                    row49 = new row49Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_24 == null) {
            factory_tSalesforceInput_24 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_24.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_24.setWrapped(factory_tSalesforceInput_24.convertToAvro(data_tSalesforceInput_24));
                Object columnValue_0_tSalesforceInput_24 = outgoingEnforcer_tSalesforceInput_24.get(0);
                        row49.Id = (String) (columnValue_0_tSalesforceInput_24);
                Object columnValue_1_tSalesforceInput_24 = outgoingEnforcer_tSalesforceInput_24.get(1);
                    if (columnValue_1_tSalesforceInput_24 == null) {
                        row49.IsDeleted = false;
                    } else {
                            row49.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_24);
                    }
                Object columnValue_2_tSalesforceInput_24 = outgoingEnforcer_tSalesforceInput_24.get(2);
                        row49.ParentId = (String) (columnValue_2_tSalesforceInput_24);
                Object columnValue_3_tSalesforceInput_24 = outgoingEnforcer_tSalesforceInput_24.get(3);
                        row49.CreatedById = (String) (columnValue_3_tSalesforceInput_24);
                Object columnValue_4_tSalesforceInput_24 = outgoingEnforcer_tSalesforceInput_24.get(4);
                        row49.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_24);
                Object columnValue_5_tSalesforceInput_24 = outgoingEnforcer_tSalesforceInput_24.get(5);
                        row49.Field = (String) (columnValue_5_tSalesforceInput_24);
                Object columnValue_6_tSalesforceInput_24 = outgoingEnforcer_tSalesforceInput_24.get(6);
                        row49.OldValue = (String) (columnValue_6_tSalesforceInput_24);
                Object columnValue_7_tSalesforceInput_24 = outgoingEnforcer_tSalesforceInput_24.get(7);
                        row49.NewValue = (String) (columnValue_7_tSalesforceInput_24);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_24) {
        	java.util.Map<String,Object> info_tSalesforceInput_24 = e_tSalesforceInput_24.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_24 = null;
            	if(info_tSalesforceInput_24.containsKey("error")){
            		errorMessage_tSalesforceInput_24 = info_tSalesforceInput_24.get("error");
        		}else if(info_tSalesforceInput_24.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_24 = info_tSalesforceInput_24.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_24 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_24 = "Row "+ nb_line_tSalesforceInput_24 + ": "+errorMessage_tSalesforceInput_24;
    			System.err.println(errorMessage_tSalesforceInput_24);
            	// If the record is reject, the main line record should put NULL
            	row49 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_24 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_24 = null;


 



/**
 * [tSalesforceInput_24 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_24 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_24";

	


 


	tos_count_tSalesforceInput_24++;

/**
 * [tSalesforceInput_24 main ] stop
 */
	
	/**
	 * [tSalesforceInput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_24";

	


 



/**
 * [tSalesforceInput_24 process_data_begin ] stop
 */

	
	/**
	 * [tMap_24 main ] start
	 */

	

	
	
	currentComponent="tMap_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row49");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_24 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_24 = false;
		  boolean mainRowRejected_tMap_24 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_24__Struct Var = Var__tMap_24;// ###############################
        // ###############################
        // # Output tables

out24 = null;


// # Output table : 'out24'
out24_tmp.Id = row49.Id ;
out24_tmp.IsDeleted = row49.IsDeleted ;
out24_tmp.ParentId = row49.ParentId ;
out24_tmp.CreatedById = row49.CreatedById ;
out24_tmp.CreatedDate = (row49.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row49.CreatedDate))).getTime())/1000 ;
out24_tmp.Field = row49.Field ;
out24_tmp.OldValue = row49.OldValue ;
out24_tmp.NewValue = row49.NewValue ;
out24 = out24_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_24 = false;










 


	tos_count_tMap_24++;

/**
 * [tMap_24 main ] stop
 */
	
	/**
	 * [tMap_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 process_data_begin ] stop
 */
// Start of branch "out24"
if(out24 != null) { 



	
	/**
	 * [tWriteJSONField_24_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_24";
	
	currentComponent="tWriteJSONField_24_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out24");
					}
					

	if(txf_tWriteJSONField_24_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_24_Out.getCurrentComponent();
		throw txf_tWriteJSONField_24_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_24_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_24_Out.getLastError();
	}
	nb_line_tWriteJSONField_24_Out++;
	valueMap_tWriteJSONField_24_Out.clear();
	arraysValueMap_tWriteJSONField_24_Out.clear();
	valueMap_tWriteJSONField_24_Out.put("Id",
	(
            out24.Id.toString()
		));
	arraysValueMap_tWriteJSONField_24_Out.put("Id",
	(
            out24.Id.toString()
		));
	valueMap_tWriteJSONField_24_Out.put("IsDeleted",
	(
            String.valueOf(out24.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_24_Out.put("IsDeleted",
	(
            String.valueOf(out24.IsDeleted)
		));
	valueMap_tWriteJSONField_24_Out.put("ParentId",
	(
            out24.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_24_Out.put("ParentId",
	(
            out24.ParentId.toString()
		));
	valueMap_tWriteJSONField_24_Out.put("CreatedById",
	(
            out24.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_24_Out.put("CreatedById",
	(
            out24.CreatedById.toString()
		));
	valueMap_tWriteJSONField_24_Out.put("CreatedDate",
	(
            String.valueOf(out24.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_24_Out.put("CreatedDate",
	(
            String.valueOf(out24.CreatedDate)
		));
	valueMap_tWriteJSONField_24_Out.put("Field",
	(
            out24.Field.toString()
		));
	arraysValueMap_tWriteJSONField_24_Out.put("Field",
	(
            out24.Field.toString()
		));
	valueMap_tWriteJSONField_24_Out.put("OldValue",
	(
		out24.OldValue != null?
            out24.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_24_Out.put("OldValue",
	(
		out24.OldValue != null?
            out24.OldValue.toString():null
		));
	valueMap_tWriteJSONField_24_Out.put("NewValue",
	(
		out24.NewValue != null?
            out24.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_24_Out.put("NewValue",
	(
		out24.NewValue != null?
            out24.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_24_Out = "";
	if(strCompCache_tWriteJSONField_24_Out==null){
		strCompCache_tWriteJSONField_24_Out=strTemp_tWriteJSONField_24_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_24_Out.replaceDefaultNameSpace(doc_tWriteJSONField_24_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_24_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_24_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_24_Out, format_tWriteJSONField_24_Out);
			output_tWriteJSONField_24_Out.write(doc_tWriteJSONField_24_Out);
		    output_tWriteJSONField_24_Out.close();
			
				  		  row48Struct row_tWriteJSONField_24_Out = new row48Struct();
						  
					     		row_tWriteJSONField_24_Out.data = strWriter_tWriteJSONField_24_Out.toString();
					     		listGroupby_tWriteJSONField_24_Out.add(row_tWriteJSONField_24_Out);
					
		    doc_tWriteJSONField_24_Out.clearContent();
			needRoot_tWriteJSONField_24_Out = true;
			for(int i_tWriteJSONField_24_Out=0;i_tWriteJSONField_24_Out<orders_tWriteJSONField_24_Out.length;i_tWriteJSONField_24_Out++){
				orders_tWriteJSONField_24_Out[i_tWriteJSONField_24_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_24_Out != null && groupbyList_tWriteJSONField_24_Out.size() >= 0){
				groupbyList_tWriteJSONField_24_Out.clear();
			}
			strCompCache_tWriteJSONField_24_Out=strTemp_tWriteJSONField_24_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_24_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_24_Out) {
		needRoot_tWriteJSONField_24_Out=false;
		org.dom4j.Element root_tWriteJSONField_24_Out = doc_tWriteJSONField_24_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_24_Out = root_tWriteJSONField_24_Out;
		org.dom4j.Element root_0_tWriteJSONField_24_Out = root_tWriteJSONField_24_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_24_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_24_Out .setText(root_0_tWriteJSONField_24_Out,
		valueMap_tWriteJSONField_24_Out.get("IsDeleted"));
            root_0_tWriteJSONField_24_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_24_Out .setText(root_0_tWriteJSONField_24_Out,"null");
			root_0_tWriteJSONField_24_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_24_Out = root_tWriteJSONField_24_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_24_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_24_Out .setText(root_1_tWriteJSONField_24_Out,
		valueMap_tWriteJSONField_24_Out.get("ParentId"));
			root_1_tWriteJSONField_24_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_24_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_24_Out .setText(root_1_tWriteJSONField_24_Out,"null");
			root_1_tWriteJSONField_24_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_24_Out = root_tWriteJSONField_24_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_24_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_24_Out .setText(root_2_tWriteJSONField_24_Out,
		valueMap_tWriteJSONField_24_Out.get("CreatedById"));
			root_2_tWriteJSONField_24_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_24_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_24_Out .setText(root_2_tWriteJSONField_24_Out,"null");
			root_2_tWriteJSONField_24_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_24_Out = root_tWriteJSONField_24_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_24_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_24_Out .setText(root_3_tWriteJSONField_24_Out,
		valueMap_tWriteJSONField_24_Out.get("CreatedDate"));
            root_3_tWriteJSONField_24_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_24_Out .setText(root_3_tWriteJSONField_24_Out,"null");
			root_3_tWriteJSONField_24_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_24_Out = root_tWriteJSONField_24_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_24_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_24_Out .setText(root_4_tWriteJSONField_24_Out,
		valueMap_tWriteJSONField_24_Out.get("Field"));
			root_4_tWriteJSONField_24_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_24_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_24_Out .setText(root_4_tWriteJSONField_24_Out,"null");
			root_4_tWriteJSONField_24_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_24_Out = root_tWriteJSONField_24_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_24_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_24_Out .setText(root_5_tWriteJSONField_24_Out,
		valueMap_tWriteJSONField_24_Out.get("OldValue"));
			root_5_tWriteJSONField_24_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_24_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_24_Out .setText(root_5_tWriteJSONField_24_Out,"null");
			root_5_tWriteJSONField_24_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_24_Out = root_tWriteJSONField_24_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_24_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_24_Out .setText(root_6_tWriteJSONField_24_Out,
		valueMap_tWriteJSONField_24_Out.get("NewValue"));
			root_6_tWriteJSONField_24_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_24_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_24_Out .setText(root_6_tWriteJSONField_24_Out,"null");
			root_6_tWriteJSONField_24_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_24_Out = subTreeRootParent_tWriteJSONField_24_Out;
	}else{
		subTreeRootParent_tWriteJSONField_24_Out=root4Group_tWriteJSONField_24_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_24_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_24_Out[0]==0){
        	orders_tWriteJSONField_24_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_24_Out.length){
        		orders_tWriteJSONField_24_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_24_Out.elements().add(orders_tWriteJSONField_24_Out[0]++,loop_tWriteJSONField_24_Out);
		if(
		valueMap_tWriteJSONField_24_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_24_Out .setText(loop_tWriteJSONField_24_Out,
		valueMap_tWriteJSONField_24_Out.get("Id"));
			loop_tWriteJSONField_24_Out.addAttribute("type", "string");
			loop_tWriteJSONField_24_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_24_Out .setText(loop_tWriteJSONField_24_Out,"null");
			loop_tWriteJSONField_24_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_24_Out++;

/**
 * [tWriteJSONField_24_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_24_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_24";
	
	currentComponent="tWriteJSONField_24_Out";

	

 



/**
 * [tWriteJSONField_24_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_24_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_24";
	
	currentComponent="tWriteJSONField_24_Out";

	

 



/**
 * [tWriteJSONField_24_Out process_data_end ] stop
 */

} // End of branch "out24"




	
	/**
	 * [tMap_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_24";

	


 



/**
 * [tSalesforceInput_24 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_24 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_24";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_24", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_24.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_24 = reader_tSalesforceInput_24.getReturnValues();
if(resultMap_tSalesforceInput_24!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_24 : resultMap_tSalesforceInput_24.entrySet()) {
		switch(entry_tSalesforceInput_24.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_24.setComponentData("tSalesforceInput_24", "ERROR_MESSAGE", entry_tSalesforceInput_24.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_24.setComponentData("tSalesforceInput_24", "NB_LINE", entry_tSalesforceInput_24.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_24.setComponentData("tSalesforceInput_24", "NB_SUCCESS", entry_tSalesforceInput_24.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_24.setComponentData("tSalesforceInput_24", "NB_REJECT", entry_tSalesforceInput_24.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_24 = new StringBuilder();
            for (int i_tSalesforceInput_24 = 0; i_tSalesforceInput_24 < entry_tSalesforceInput_24.getKey().length(); i_tSalesforceInput_24++) {
                char ch_tSalesforceInput_24 = entry_tSalesforceInput_24.getKey().charAt(i_tSalesforceInput_24);
                if(Character.isUpperCase(ch_tSalesforceInput_24) && i_tSalesforceInput_24> 0) {
                	studio_key_tSalesforceInput_24.append('_');
                }
                studio_key_tSalesforceInput_24.append(ch_tSalesforceInput_24);
            }
			container_tSalesforceInput_24.setComponentData("tSalesforceInput_24", studio_key_tSalesforceInput_24.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_24.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_24", true);
end_Hash.put("tSalesforceInput_24", System.currentTimeMillis());




/**
 * [tSalesforceInput_24 end ] stop
 */

	
	/**
	 * [tMap_24 end ] start
	 */

	

	
	
	currentComponent="tMap_24";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row49");
			  	}
			  	
 

ok_Hash.put("tMap_24", true);
end_Hash.put("tMap_24", System.currentTimeMillis());




/**
 * [tMap_24 end ] stop
 */

	
	/**
	 * [tWriteJSONField_24_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_24";
	
	currentComponent="tWriteJSONField_24_Out";

	

if(nb_line_tWriteJSONField_24_Out > 0){  
    nestXMLTool_tWriteJSONField_24_Out.replaceDefaultNameSpace(doc_tWriteJSONField_24_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_24_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_24_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_24_Out, format_tWriteJSONField_24_Out);
	output_tWriteJSONField_24_Out.write(doc_tWriteJSONField_24_Out);
    output_tWriteJSONField_24_Out.close();
					row48Struct row_tWriteJSONField_24_Out = new row48Struct();
						  
					     		row_tWriteJSONField_24_Out.data = strWriter_tWriteJSONField_24_Out.toString();
					     		listGroupby_tWriteJSONField_24_Out.add(row_tWriteJSONField_24_Out);
		    		

}
globalMap.put("tWriteJSONField_24_Out_NB_LINE",nb_line_tWriteJSONField_24_Out);
globalMap.put("tWriteJSONField_24_In_FINISH" + (listGroupby_tWriteJSONField_24_Out==null?"":listGroupby_tWriteJSONField_24_Out.hashCode()), "true");
	
		txf_tWriteJSONField_24_Out.join();
		
		if(txf_tWriteJSONField_24_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_24_Out.getCurrentComponent();
			throw txf_tWriteJSONField_24_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_24_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_24_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_24_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out24");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_24_Out", true);
end_Hash.put("tWriteJSONField_24_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_24_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_24 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_24";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_24")==null){
    if(resourceMap.get("reader_tSalesforceInput_24")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_24")).close();
		} catch (java.io.IOException e_tSalesforceInput_24) {
			String errorMessage_tSalesforceInput_24 = "failed to release the resource in tSalesforceInput_24 :" + e_tSalesforceInput_24.getMessage();
			System.err.println(errorMessage_tSalesforceInput_24);
		}
	}
}
 



/**
 * [tSalesforceInput_24 finally ] stop
 */

	
	/**
	 * [tMap_24 finally ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_24_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_24";
	
	currentComponent="tWriteJSONField_24_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_24_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_24_In");
		if(resourceMap.get("finish_tWriteJSONField_24_Out") == null){
			globalMap.put("tWriteJSONField_24_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_24_Out==null?"":listGroupby_tWriteJSONField_24_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_24_Out != null) {
		globalMap.put("tWriteJSONField_24_In_FINISH" + (listGroupby_tWriteJSONField_24_Out==null?"":listGroupby_tWriteJSONField_24_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_24_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_24_SUBPROCESS_STATE", 1);
	}
	

public void tDie_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_24", false);
		start_Hash.put("tDie_24", System.currentTimeMillis());
		
	
	currentComponent="tDie_24";

	
		int tos_count_tDie_24 = 0;
		

 



/**
 * [tDie_24 begin ] stop
 */
	
	/**
	 * [tDie_24 main ] start
	 */

	

	
	
	currentComponent="tDie_24";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_24", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_24_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_24_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_24_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_24) {
		logIgnoredError(String.format("tDie_24 - tDie failed to log message due to internal error: %s", e_tDie_24), e_tDie_24);
	}
	
	currentComponent = "tDie_24";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_24_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_24++;

/**
 * [tDie_24 main ] stop
 */
	
	/**
	 * [tDie_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_24";

	

 



/**
 * [tDie_24 process_data_begin ] stop
 */
	
	/**
	 * [tDie_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_24";

	

 



/**
 * [tDie_24 process_data_end ] stop
 */
	
	/**
	 * [tDie_24 end ] start
	 */

	

	
	
	currentComponent="tDie_24";

	

 

ok_Hash.put("tDie_24", true);
end_Hash.put("tDie_24", System.currentTimeMillis());




/**
 * [tDie_24 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_24 finally ] start
	 */

	

	
	
	currentComponent="tDie_24";

	

 



/**
 * [tDie_24 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_24_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_24", false);
		start_Hash.put("tFileArchive_24", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_24";

	
		int tos_count_tFileArchive_24 = 0;
		

 



/**
 * [tFileArchive_24 begin ] stop
 */
	
	/**
	 * [tFileArchive_24 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_24";

	

	

		String sourceFile_tFileArchive_24 = context.staging_S3_dir + "noodlecrm__inquiry__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_24), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_24 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_24 = context.staging_S3_dir + "noodlecrm__inquiry__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_24 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_24, zipFile_tFileArchive_24);
    zip_tFileArchive_24.setOverwriteExistTargetZip(true);
	zip_tFileArchive_24.setMakeTargetDir(true);
	zip_tFileArchive_24.setCompressLevel(9);
	zip_tFileArchive_24.setArchiveFormat("gzip");
	zip_tFileArchive_24.setAllFiles(true);
	
	
		zip_tFileArchive_24.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_24_ARCHIVE_FILEPATH",zipFile_tFileArchive_24);
   
   globalMap.put("tFileArchive_24_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_24).getName());

   zip_tFileArchive_24.doZip();


 


	tos_count_tFileArchive_24++;

/**
 * [tFileArchive_24 main ] stop
 */
	
	/**
	 * [tFileArchive_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_24";

	

 



/**
 * [tFileArchive_24 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_24";

	

 



/**
 * [tFileArchive_24 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_24 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_24";

	

 

ok_Hash.put("tFileArchive_24", true);
end_Hash.put("tFileArchive_24", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk174", 0, "ok");
				}
				tS3Put_24Process(globalMap);



/**
 * [tFileArchive_24 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_24 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_24";

	

 



/**
 * [tFileArchive_24 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_24_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_24", false);
		start_Hash.put("tS3Put_24", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_24";

	
		int tos_count_tS3Put_24 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_24 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_24 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__inquiry__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__inquiry__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_24 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_24 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_24 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_24 = context.staging_S3_dir + "noodlecrm__inquiry__history.json.gz";
	
	boolean useStream_tS3Put_24 = false;
	java.io.InputStream uploadStream_tS3Put_24 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_24 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_24 instanceof String){
		    useStream_tS3Put_24 = false;
		}else if(fileOrStream_tS3Put_24 instanceof java.io.InputStream){
		    useStream_tS3Put_24 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_24 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_24) {
				java.io.File inputFile_tS3Put_24 = new java.io.File((String)fileOrStream_tS3Put_24);
				
				long multipart_upload_threshold_tS3Put_24 = 5 * 1024 * 1024;
				
    		tm_tS3Put_24 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_24)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_24)
    			.withS3Client(conn_tS3Put_24)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_24 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_24, inputFile_tS3Put_24).withMetadata(objectMetadata_tS3Put_24);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_24 = tm_tS3Put_24.upload(putRequest_tS3Put_24);
  		
  			upload_tS3Put_24.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_24 = ((java.io.InputStream)fileOrStream_tS3Put_24);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_24 = new S3StreamUtil();
    		byte[] buffer_tS3Put_24 = new byte[partSizeInBytes_tS3Put_24];
    		sourceStream_tS3Put_24.read(buffer_tS3Put_24);
    		long curPartSize_tS3Put_24 = streamUtil_tS3Put_24.getLength(buffer_tS3Put_24);
    		boolean multiUpload_tS3Put_24 = curPartSize_tS3Put_24 == partSizeInBytes_tS3Put_24;
    		
    		if(!multiUpload_tS3Put_24) {
    				objectMetadata_tS3Put_24.setContentLength(curPartSize_tS3Put_24);
    				uploadStream_tS3Put_24 = new java.io.ByteArrayInputStream(buffer_tS3Put_24,0,Long.valueOf(curPartSize_tS3Put_24).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_24 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_24, uploadStream_tS3Put_24, objectMetadata_tS3Put_24);
			
    				
    				

    				
    				conn_tS3Put_24.putObject(putRequest_tS3Put_24);
    		} else {
    				uploadStream_tS3Put_24 = new java.io.ByteArrayInputStream(buffer_tS3Put_24);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_24 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_24 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_24, objectMetadata_tS3Put_24);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_24 = conn_tS3Put_24.initiateMultipartUpload(putRequest_tS3Put_24);
      			String uploadId_tS3Put_24 = initResponse_tS3Put_24.getUploadId();
      			int partNumber_tS3Put_24 = 1;
      			boolean streamHasNext_tS3Put_24 = true;
      			byte[] probeAvailability_tS3Put_24 = new byte[1];
				try {
					while (streamHasNext_tS3Put_24) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_24 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_24)
						.withUploadId(uploadId_tS3Put_24)
                    	.withPartNumber(partNumber_tS3Put_24)
						.withPartSize(curPartSize_tS3Put_24);
            		    uploadRequest_tS3Put_24.setInputStream(uploadStream_tS3Put_24);
            		    streamHasNext_tS3Put_24 = sourceStream_tS3Put_24.read(probeAvailability_tS3Put_24) != -1;
            		    if(!streamHasNext_tS3Put_24){
                    	    uploadRequest_tS3Put_24.setLastPart(true);
                    	}

                		partTags_tS3Put_24.add(conn_tS3Put_24.uploadPart(uploadRequest_tS3Put_24).getPartETag());
                  	    partNumber_tS3Put_24++;

          		     	if(uploadStream_tS3Put_24!=null){
      		         			uploadStream_tS3Put_24.close();
          		     	}
          		     	buffer_tS3Put_24 = new byte[partSizeInBytes_tS3Put_24];
          		     	sourceStream_tS3Put_24.read(buffer_tS3Put_24,1,partSizeInBytes_tS3Put_24-1);
          		     	buffer_tS3Put_24[0] = probeAvailability_tS3Put_24[0];
          		     	probeAvailability_tS3Put_24 = new byte[1];
          		     	curPartSize_tS3Put_24 = streamUtil_tS3Put_24.getLength(buffer_tS3Put_24);
          		     	uploadStream_tS3Put_24 = new java.io.ByteArrayInputStream(buffer_tS3Put_24);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_24 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_24,
                        uploadId_tS3Put_24, partTags_tS3Put_24);
            		conn_tS3Put_24.completeMultipartUpload(compRequest_tS3Put_24);
            } catch (java.lang.Exception uploadException_tS3Put_24) {
  							conn_tS3Put_24.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_24, uploadId_tS3Put_24));
    						throw uploadException_tS3Put_24;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_24){
		
			throw(e_tS3Put_24);
		
	}finally{
		if(useStream_tS3Put_24 && uploadStream_tS3Put_24!=null){
    	uploadStream_tS3Put_24.close();
    }
    
    if(tm_tS3Put_24 != null){
        tm_tS3Put_24.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_24 begin ] stop
 */
	
	/**
	 * [tS3Put_24 main ] start
	 */

	

	
	
	currentComponent="tS3Put_24";

	

 


	tos_count_tS3Put_24++;

/**
 * [tS3Put_24 main ] stop
 */
	
	/**
	 * [tS3Put_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_24";

	

 



/**
 * [tS3Put_24 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_24";

	

 



/**
 * [tS3Put_24 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_24 end ] start
	 */

	

	
	
	currentComponent="tS3Put_24";

	

 

ok_Hash.put("tS3Put_24", true);
end_Hash.put("tS3Put_24", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk175", 0, "ok");
				}
				tJava_58Process(globalMap);



/**
 * [tS3Put_24 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_24 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_24";

	

 



/**
 * [tS3Put_24 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_24_SUBPROCESS_STATE", 1);
	}
	

public void tJava_58Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_58_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_58 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_58", false);
		start_Hash.put("tJava_58", System.currentTimeMillis());
		
	
	currentComponent="tJava_58";

	
		int tos_count_tJava_58 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_24_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_24_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_58 begin ] stop
 */
	
	/**
	 * [tJava_58 main ] start
	 */

	

	
	
	currentComponent="tJava_58";

	

 


	tos_count_tJava_58++;

/**
 * [tJava_58 main ] stop
 */
	
	/**
	 * [tJava_58 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_58";

	

 



/**
 * [tJava_58 process_data_begin ] stop
 */
	
	/**
	 * [tJava_58 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_58";

	

 



/**
 * [tJava_58 process_data_end ] stop
 */
	
	/**
	 * [tJava_58 end ] start
	 */

	

	
	
	currentComponent="tJava_58";

	

 

ok_Hash.put("tJava_58", true);
end_Hash.put("tJava_58", System.currentTimeMillis());




/**
 * [tJava_58 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_58 finally ] start
	 */

	

	
	
	currentComponent="tJava_58";

	

 



/**
 * [tJava_58 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_58_SUBPROCESS_STATE", 1);
	}
	


public static class out23Struct implements routines.system.IPersistableRow<out23Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row47Struct implements routines.system.IPersistableRow<row47Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row47Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row47Struct row47 = new row47Struct();
out23Struct out23 = new out23Struct();





	
	/**
	 * [tWriteJSONField_23_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_23_Out", false);
		start_Hash.put("tWriteJSONField_23_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_23";
	
	currentComponent="tWriteJSONField_23_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out23");
					}
				
		int tos_count_tWriteJSONField_23_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_23_Out = 0;
				boolean needRoot_tWriteJSONField_23_Out  = true;
				
				String  strCompCache_tWriteJSONField_23_Out= null;		
				
						        java.util.Queue<row46Struct> listGroupby_tWriteJSONField_23_Out = new java.util.concurrent.ConcurrentLinkedQueue<row46Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_23_Out extends Thread {
						
									    java.util.Queue<row46Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_23_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_23_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_23_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_23_In", queue);
							globalMap.put("flows_tWriteJSONField_23_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_23_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_23_Out txf_tWriteJSONField_23_Out = new ThreadXMLField_tWriteJSONField_23_Out(listGroupby_tWriteJSONField_23_Out);
					
					txf_tWriteJSONField_23_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_23_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_23_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_23_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_23_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_23_Out nestXMLTool_tWriteJSONField_23_Out = new NestXMLTool_tWriteJSONField_23_Out();

out23Struct  rowStructOutput_tWriteJSONField_23_Out = new out23Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_23_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_23_Out = null;
org.dom4j.Document doc_tWriteJSONField_23_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_23_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_23_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_23_Out.setTrimText(false);
format_tWriteJSONField_23_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_23_Out = new int[1];

 



/**
 * [tWriteJSONField_23_Out begin ] stop
 */



	
	/**
	 * [tMap_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_23", false);
		start_Hash.put("tMap_23", System.currentTimeMillis());
		
	
	currentComponent="tMap_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row47");
					}
				
		int tos_count_tMap_23 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_23__Struct  {
}
Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
// ###############################

// ###############################
// # Outputs initialization
out23Struct out23_tmp = new out23Struct();
// ###############################

        
        



        









 



/**
 * [tMap_23 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_23", false);
		start_Hash.put("tSalesforceInput_23", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_23";

	
		int tos_count_tSalesforceInput_23 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_23 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_23 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_23.createRuntimeProperties();
 		                    props_tSalesforceInput_23.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_23.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_23.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_23.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_23.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_23.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_23.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_23.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_23.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_23.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_23.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_23.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_23.module.setValue("moduleName",
 		                    "NoodleCRM__Application_Item_Legacy__History");
 		                    
 		                    props_tSalesforceInput_23.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_23.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_23.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_23.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_23.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_23_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Application_Item_Legacy__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Application_Item_Legacy__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_23_1_fisrt sst_tSalesforceInput_23_1_fisrt = new SchemaSettingTool_tSalesforceInput_23_1_fisrt();
 		                    
 		                    props_tSalesforceInput_23.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_23_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_23.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_23 = props_tSalesforceInput_23.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_23 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_23 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_23 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_23.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_23);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_23.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_23 = props_tSalesforceInput_23.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_23 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_23 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_23 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_23.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_23);
        }
    }
globalMap.put("tSalesforceInput_23_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_23);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_23= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_23_MAPPINGS_URL", mappings_url_tSalesforceInput_23);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_23 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_23";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_23 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_23 = null;
topology_tSalesforceInput_23 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_23 = def_tSalesforceInput_23.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_23, topology_tSalesforceInput_23);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_23 = def_tSalesforceInput_23.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_23 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_23.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_23 = componentRuntime_tSalesforceInput_23.initialize(container_tSalesforceInput_23, props_tSalesforceInput_23);

if (initVr_tSalesforceInput_23.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_23.getMessage());
}

if(componentRuntime_tSalesforceInput_23 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_23 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_23;
	compDriverInitialization_tSalesforceInput_23.runAtDriver(container_tSalesforceInput_23);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_23 = null;
if(componentRuntime_tSalesforceInput_23 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_23 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_23;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_23 = sourceOrSink_tSalesforceInput_23.validate(container_tSalesforceInput_23);
	if (vr_tSalesforceInput_23.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_23.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_23 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_23;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_23 =
            source_tSalesforceInput_23.createReader(container_tSalesforceInput_23);
	reader_tSalesforceInput_23 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_23, container_tSalesforceInput_23);

        boolean multi_output_is_allowed_tSalesforceInput_23 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_23 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_23.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_23 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_23 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_23 = props_tSalesforceInput_23.getSchema(c_tSalesforceInput_23, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_23 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_23, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_23 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_23 = reader_tSalesforceInput_23.start();

    resourceMap.put("reader_tSalesforceInput_23", reader_tSalesforceInput_23);

    for (; available_tSalesforceInput_23; available_tSalesforceInput_23 = reader_tSalesforceInput_23.advance()) {
    	nb_line_tSalesforceInput_23++;

    	
        if (multi_output_is_allowed_tSalesforceInput_23) {
                row47 = null;

        }

        try {
            Object data_tSalesforceInput_23 = reader_tSalesforceInput_23.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_23) {
                    row47 = new row47Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_23 == null) {
            factory_tSalesforceInput_23 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_23.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_23.setWrapped(factory_tSalesforceInput_23.convertToAvro(data_tSalesforceInput_23));
                Object columnValue_0_tSalesforceInput_23 = outgoingEnforcer_tSalesforceInput_23.get(0);
                        row47.Id = (String) (columnValue_0_tSalesforceInput_23);
                Object columnValue_1_tSalesforceInput_23 = outgoingEnforcer_tSalesforceInput_23.get(1);
                    if (columnValue_1_tSalesforceInput_23 == null) {
                        row47.IsDeleted = false;
                    } else {
                            row47.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_23);
                    }
                Object columnValue_2_tSalesforceInput_23 = outgoingEnforcer_tSalesforceInput_23.get(2);
                        row47.ParentId = (String) (columnValue_2_tSalesforceInput_23);
                Object columnValue_3_tSalesforceInput_23 = outgoingEnforcer_tSalesforceInput_23.get(3);
                        row47.CreatedById = (String) (columnValue_3_tSalesforceInput_23);
                Object columnValue_4_tSalesforceInput_23 = outgoingEnforcer_tSalesforceInput_23.get(4);
                        row47.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_23);
                Object columnValue_5_tSalesforceInput_23 = outgoingEnforcer_tSalesforceInput_23.get(5);
                        row47.Field = (String) (columnValue_5_tSalesforceInput_23);
                Object columnValue_6_tSalesforceInput_23 = outgoingEnforcer_tSalesforceInput_23.get(6);
                        row47.OldValue = (String) (columnValue_6_tSalesforceInput_23);
                Object columnValue_7_tSalesforceInput_23 = outgoingEnforcer_tSalesforceInput_23.get(7);
                        row47.NewValue = (String) (columnValue_7_tSalesforceInput_23);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_23) {
        	java.util.Map<String,Object> info_tSalesforceInput_23 = e_tSalesforceInput_23.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_23 = null;
            	if(info_tSalesforceInput_23.containsKey("error")){
            		errorMessage_tSalesforceInput_23 = info_tSalesforceInput_23.get("error");
        		}else if(info_tSalesforceInput_23.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_23 = info_tSalesforceInput_23.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_23 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_23 = "Row "+ nb_line_tSalesforceInput_23 + ": "+errorMessage_tSalesforceInput_23;
    			System.err.println(errorMessage_tSalesforceInput_23);
            	// If the record is reject, the main line record should put NULL
            	row47 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_23 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_23 = null;


 



/**
 * [tSalesforceInput_23 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_23 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_23";

	


 


	tos_count_tSalesforceInput_23++;

/**
 * [tSalesforceInput_23 main ] stop
 */
	
	/**
	 * [tSalesforceInput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_23";

	


 



/**
 * [tSalesforceInput_23 process_data_begin ] stop
 */

	
	/**
	 * [tMap_23 main ] start
	 */

	

	
	
	currentComponent="tMap_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row47");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_23 = false;
		  boolean mainRowRejected_tMap_23 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
        // ###############################
        // # Output tables

out23 = null;


// # Output table : 'out23'
out23_tmp.Id = row47.Id ;
out23_tmp.IsDeleted = row47.IsDeleted ;
out23_tmp.ParentId = row47.ParentId ;
out23_tmp.CreatedById = row47.CreatedById ;
out23_tmp.CreatedDate = (row47.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row47.CreatedDate))).getTime())/1000 ;
out23_tmp.Field = row47.Field ;
out23_tmp.OldValue = row47.OldValue ;
out23_tmp.NewValue = row47.NewValue ;
out23 = out23_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_23 = false;










 


	tos_count_tMap_23++;

/**
 * [tMap_23 main ] stop
 */
	
	/**
	 * [tMap_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_begin ] stop
 */
// Start of branch "out23"
if(out23 != null) { 



	
	/**
	 * [tWriteJSONField_23_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_23";
	
	currentComponent="tWriteJSONField_23_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out23");
					}
					

	if(txf_tWriteJSONField_23_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_23_Out.getCurrentComponent();
		throw txf_tWriteJSONField_23_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_23_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_23_Out.getLastError();
	}
	nb_line_tWriteJSONField_23_Out++;
	valueMap_tWriteJSONField_23_Out.clear();
	arraysValueMap_tWriteJSONField_23_Out.clear();
	valueMap_tWriteJSONField_23_Out.put("Id",
	(
            out23.Id.toString()
		));
	arraysValueMap_tWriteJSONField_23_Out.put("Id",
	(
            out23.Id.toString()
		));
	valueMap_tWriteJSONField_23_Out.put("IsDeleted",
	(
            String.valueOf(out23.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_23_Out.put("IsDeleted",
	(
            String.valueOf(out23.IsDeleted)
		));
	valueMap_tWriteJSONField_23_Out.put("ParentId",
	(
            out23.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_23_Out.put("ParentId",
	(
            out23.ParentId.toString()
		));
	valueMap_tWriteJSONField_23_Out.put("CreatedById",
	(
            out23.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_23_Out.put("CreatedById",
	(
            out23.CreatedById.toString()
		));
	valueMap_tWriteJSONField_23_Out.put("CreatedDate",
	(
            String.valueOf(out23.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_23_Out.put("CreatedDate",
	(
            String.valueOf(out23.CreatedDate)
		));
	valueMap_tWriteJSONField_23_Out.put("Field",
	(
            out23.Field.toString()
		));
	arraysValueMap_tWriteJSONField_23_Out.put("Field",
	(
            out23.Field.toString()
		));
	valueMap_tWriteJSONField_23_Out.put("OldValue",
	(
		out23.OldValue != null?
            out23.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_23_Out.put("OldValue",
	(
		out23.OldValue != null?
            out23.OldValue.toString():null
		));
	valueMap_tWriteJSONField_23_Out.put("NewValue",
	(
		out23.NewValue != null?
            out23.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_23_Out.put("NewValue",
	(
		out23.NewValue != null?
            out23.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_23_Out = "";
	if(strCompCache_tWriteJSONField_23_Out==null){
		strCompCache_tWriteJSONField_23_Out=strTemp_tWriteJSONField_23_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_23_Out.replaceDefaultNameSpace(doc_tWriteJSONField_23_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_23_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_23_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_23_Out, format_tWriteJSONField_23_Out);
			output_tWriteJSONField_23_Out.write(doc_tWriteJSONField_23_Out);
		    output_tWriteJSONField_23_Out.close();
			
				  		  row46Struct row_tWriteJSONField_23_Out = new row46Struct();
						  
					     		row_tWriteJSONField_23_Out.data = strWriter_tWriteJSONField_23_Out.toString();
					     		listGroupby_tWriteJSONField_23_Out.add(row_tWriteJSONField_23_Out);
					
		    doc_tWriteJSONField_23_Out.clearContent();
			needRoot_tWriteJSONField_23_Out = true;
			for(int i_tWriteJSONField_23_Out=0;i_tWriteJSONField_23_Out<orders_tWriteJSONField_23_Out.length;i_tWriteJSONField_23_Out++){
				orders_tWriteJSONField_23_Out[i_tWriteJSONField_23_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_23_Out != null && groupbyList_tWriteJSONField_23_Out.size() >= 0){
				groupbyList_tWriteJSONField_23_Out.clear();
			}
			strCompCache_tWriteJSONField_23_Out=strTemp_tWriteJSONField_23_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_23_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_23_Out) {
		needRoot_tWriteJSONField_23_Out=false;
		org.dom4j.Element root_tWriteJSONField_23_Out = doc_tWriteJSONField_23_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_23_Out = root_tWriteJSONField_23_Out;
		org.dom4j.Element root_0_tWriteJSONField_23_Out = root_tWriteJSONField_23_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_23_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_23_Out .setText(root_0_tWriteJSONField_23_Out,
		valueMap_tWriteJSONField_23_Out.get("IsDeleted"));
            root_0_tWriteJSONField_23_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_23_Out .setText(root_0_tWriteJSONField_23_Out,"null");
			root_0_tWriteJSONField_23_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_23_Out = root_tWriteJSONField_23_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_23_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_23_Out .setText(root_1_tWriteJSONField_23_Out,
		valueMap_tWriteJSONField_23_Out.get("ParentId"));
			root_1_tWriteJSONField_23_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_23_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_23_Out .setText(root_1_tWriteJSONField_23_Out,"null");
			root_1_tWriteJSONField_23_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_23_Out = root_tWriteJSONField_23_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_23_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_23_Out .setText(root_2_tWriteJSONField_23_Out,
		valueMap_tWriteJSONField_23_Out.get("CreatedById"));
			root_2_tWriteJSONField_23_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_23_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_23_Out .setText(root_2_tWriteJSONField_23_Out,"null");
			root_2_tWriteJSONField_23_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_23_Out = root_tWriteJSONField_23_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_23_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_23_Out .setText(root_3_tWriteJSONField_23_Out,
		valueMap_tWriteJSONField_23_Out.get("CreatedDate"));
            root_3_tWriteJSONField_23_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_23_Out .setText(root_3_tWriteJSONField_23_Out,"null");
			root_3_tWriteJSONField_23_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_23_Out = root_tWriteJSONField_23_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_23_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_23_Out .setText(root_4_tWriteJSONField_23_Out,
		valueMap_tWriteJSONField_23_Out.get("Field"));
			root_4_tWriteJSONField_23_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_23_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_23_Out .setText(root_4_tWriteJSONField_23_Out,"null");
			root_4_tWriteJSONField_23_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_23_Out = root_tWriteJSONField_23_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_23_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_23_Out .setText(root_5_tWriteJSONField_23_Out,
		valueMap_tWriteJSONField_23_Out.get("OldValue"));
			root_5_tWriteJSONField_23_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_23_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_23_Out .setText(root_5_tWriteJSONField_23_Out,"null");
			root_5_tWriteJSONField_23_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_23_Out = root_tWriteJSONField_23_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_23_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_23_Out .setText(root_6_tWriteJSONField_23_Out,
		valueMap_tWriteJSONField_23_Out.get("NewValue"));
			root_6_tWriteJSONField_23_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_23_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_23_Out .setText(root_6_tWriteJSONField_23_Out,"null");
			root_6_tWriteJSONField_23_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_23_Out = subTreeRootParent_tWriteJSONField_23_Out;
	}else{
		subTreeRootParent_tWriteJSONField_23_Out=root4Group_tWriteJSONField_23_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_23_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_23_Out[0]==0){
        	orders_tWriteJSONField_23_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_23_Out.length){
        		orders_tWriteJSONField_23_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_23_Out.elements().add(orders_tWriteJSONField_23_Out[0]++,loop_tWriteJSONField_23_Out);
		if(
		valueMap_tWriteJSONField_23_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_23_Out .setText(loop_tWriteJSONField_23_Out,
		valueMap_tWriteJSONField_23_Out.get("Id"));
			loop_tWriteJSONField_23_Out.addAttribute("type", "string");
			loop_tWriteJSONField_23_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_23_Out .setText(loop_tWriteJSONField_23_Out,"null");
			loop_tWriteJSONField_23_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_23_Out++;

/**
 * [tWriteJSONField_23_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_23_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_23";
	
	currentComponent="tWriteJSONField_23_Out";

	

 



/**
 * [tWriteJSONField_23_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_23_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_23";
	
	currentComponent="tWriteJSONField_23_Out";

	

 



/**
 * [tWriteJSONField_23_Out process_data_end ] stop
 */

} // End of branch "out23"




	
	/**
	 * [tMap_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_23";

	


 



/**
 * [tSalesforceInput_23 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_23 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_23";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_23", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_23.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_23 = reader_tSalesforceInput_23.getReturnValues();
if(resultMap_tSalesforceInput_23!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_23 : resultMap_tSalesforceInput_23.entrySet()) {
		switch(entry_tSalesforceInput_23.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_23.setComponentData("tSalesforceInput_23", "ERROR_MESSAGE", entry_tSalesforceInput_23.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_23.setComponentData("tSalesforceInput_23", "NB_LINE", entry_tSalesforceInput_23.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_23.setComponentData("tSalesforceInput_23", "NB_SUCCESS", entry_tSalesforceInput_23.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_23.setComponentData("tSalesforceInput_23", "NB_REJECT", entry_tSalesforceInput_23.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_23 = new StringBuilder();
            for (int i_tSalesforceInput_23 = 0; i_tSalesforceInput_23 < entry_tSalesforceInput_23.getKey().length(); i_tSalesforceInput_23++) {
                char ch_tSalesforceInput_23 = entry_tSalesforceInput_23.getKey().charAt(i_tSalesforceInput_23);
                if(Character.isUpperCase(ch_tSalesforceInput_23) && i_tSalesforceInput_23> 0) {
                	studio_key_tSalesforceInput_23.append('_');
                }
                studio_key_tSalesforceInput_23.append(ch_tSalesforceInput_23);
            }
			container_tSalesforceInput_23.setComponentData("tSalesforceInput_23", studio_key_tSalesforceInput_23.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_23.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_23", true);
end_Hash.put("tSalesforceInput_23", System.currentTimeMillis());




/**
 * [tSalesforceInput_23 end ] stop
 */

	
	/**
	 * [tMap_23 end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row47");
			  	}
			  	
 

ok_Hash.put("tMap_23", true);
end_Hash.put("tMap_23", System.currentTimeMillis());




/**
 * [tMap_23 end ] stop
 */

	
	/**
	 * [tWriteJSONField_23_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_23";
	
	currentComponent="tWriteJSONField_23_Out";

	

if(nb_line_tWriteJSONField_23_Out > 0){  
    nestXMLTool_tWriteJSONField_23_Out.replaceDefaultNameSpace(doc_tWriteJSONField_23_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_23_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_23_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_23_Out, format_tWriteJSONField_23_Out);
	output_tWriteJSONField_23_Out.write(doc_tWriteJSONField_23_Out);
    output_tWriteJSONField_23_Out.close();
					row46Struct row_tWriteJSONField_23_Out = new row46Struct();
						  
					     		row_tWriteJSONField_23_Out.data = strWriter_tWriteJSONField_23_Out.toString();
					     		listGroupby_tWriteJSONField_23_Out.add(row_tWriteJSONField_23_Out);
		    		

}
globalMap.put("tWriteJSONField_23_Out_NB_LINE",nb_line_tWriteJSONField_23_Out);
globalMap.put("tWriteJSONField_23_In_FINISH" + (listGroupby_tWriteJSONField_23_Out==null?"":listGroupby_tWriteJSONField_23_Out.hashCode()), "true");
	
		txf_tWriteJSONField_23_Out.join();
		
		if(txf_tWriteJSONField_23_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_23_Out.getCurrentComponent();
			throw txf_tWriteJSONField_23_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_23_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_23_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_23_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out23");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_23_Out", true);
end_Hash.put("tWriteJSONField_23_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_23_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_23 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_23";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_23")==null){
    if(resourceMap.get("reader_tSalesforceInput_23")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_23")).close();
		} catch (java.io.IOException e_tSalesforceInput_23) {
			String errorMessage_tSalesforceInput_23 = "failed to release the resource in tSalesforceInput_23 :" + e_tSalesforceInput_23.getMessage();
			System.err.println(errorMessage_tSalesforceInput_23);
		}
	}
}
 



/**
 * [tSalesforceInput_23 finally ] stop
 */

	
	/**
	 * [tMap_23 finally ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_23_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_23";
	
	currentComponent="tWriteJSONField_23_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_23_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_23_In");
		if(resourceMap.get("finish_tWriteJSONField_23_Out") == null){
			globalMap.put("tWriteJSONField_23_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_23_Out==null?"":listGroupby_tWriteJSONField_23_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_23_Out != null) {
		globalMap.put("tWriteJSONField_23_In_FINISH" + (listGroupby_tWriteJSONField_23_Out==null?"":listGroupby_tWriteJSONField_23_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_23_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_23_SUBPROCESS_STATE", 1);
	}
	

public void tDie_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_23", false);
		start_Hash.put("tDie_23", System.currentTimeMillis());
		
	
	currentComponent="tDie_23";

	
		int tos_count_tDie_23 = 0;
		

 



/**
 * [tDie_23 begin ] stop
 */
	
	/**
	 * [tDie_23 main ] start
	 */

	

	
	
	currentComponent="tDie_23";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_23", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_23_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_23_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_23_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_23) {
		logIgnoredError(String.format("tDie_23 - tDie failed to log message due to internal error: %s", e_tDie_23), e_tDie_23);
	}
	
	currentComponent = "tDie_23";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_23_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_23++;

/**
 * [tDie_23 main ] stop
 */
	
	/**
	 * [tDie_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_23";

	

 



/**
 * [tDie_23 process_data_begin ] stop
 */
	
	/**
	 * [tDie_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_23";

	

 



/**
 * [tDie_23 process_data_end ] stop
 */
	
	/**
	 * [tDie_23 end ] start
	 */

	

	
	
	currentComponent="tDie_23";

	

 

ok_Hash.put("tDie_23", true);
end_Hash.put("tDie_23", System.currentTimeMillis());




/**
 * [tDie_23 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_23 finally ] start
	 */

	

	
	
	currentComponent="tDie_23";

	

 



/**
 * [tDie_23 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_23_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_23", false);
		start_Hash.put("tFileArchive_23", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_23";

	
		int tos_count_tFileArchive_23 = 0;
		

 



/**
 * [tFileArchive_23 begin ] stop
 */
	
	/**
	 * [tFileArchive_23 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_23";

	

	

		String sourceFile_tFileArchive_23 = context.staging_S3_dir + "noodlecrm__application_item_legacy__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_23), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_23 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_23 = context.staging_S3_dir + "noodlecrm__application_item_legacy__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_23 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_23, zipFile_tFileArchive_23);
    zip_tFileArchive_23.setOverwriteExistTargetZip(true);
	zip_tFileArchive_23.setMakeTargetDir(true);
	zip_tFileArchive_23.setCompressLevel(9);
	zip_tFileArchive_23.setArchiveFormat("gzip");
	zip_tFileArchive_23.setAllFiles(true);
	
	
		zip_tFileArchive_23.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_23_ARCHIVE_FILEPATH",zipFile_tFileArchive_23);
   
   globalMap.put("tFileArchive_23_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_23).getName());

   zip_tFileArchive_23.doZip();


 


	tos_count_tFileArchive_23++;

/**
 * [tFileArchive_23 main ] stop
 */
	
	/**
	 * [tFileArchive_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_23";

	

 



/**
 * [tFileArchive_23 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_23";

	

 



/**
 * [tFileArchive_23 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_23 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_23";

	

 

ok_Hash.put("tFileArchive_23", true);
end_Hash.put("tFileArchive_23", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk169", 0, "ok");
				}
				tS3Put_23Process(globalMap);



/**
 * [tFileArchive_23 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_23 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_23";

	

 



/**
 * [tFileArchive_23 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_23_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_23", false);
		start_Hash.put("tS3Put_23", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_23";

	
		int tos_count_tS3Put_23 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_23 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_23 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__application_item_legacy__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__application_item_legacy__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_23 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_23 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_23 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_23 = context.staging_S3_dir + "noodlecrm__application_item_legacy__history.json.gz";
	
	boolean useStream_tS3Put_23 = false;
	java.io.InputStream uploadStream_tS3Put_23 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_23 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_23 instanceof String){
		    useStream_tS3Put_23 = false;
		}else if(fileOrStream_tS3Put_23 instanceof java.io.InputStream){
		    useStream_tS3Put_23 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_23 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_23) {
				java.io.File inputFile_tS3Put_23 = new java.io.File((String)fileOrStream_tS3Put_23);
				
				long multipart_upload_threshold_tS3Put_23 = 5 * 1024 * 1024;
				
    		tm_tS3Put_23 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_23)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_23)
    			.withS3Client(conn_tS3Put_23)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_23 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_23, inputFile_tS3Put_23).withMetadata(objectMetadata_tS3Put_23);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_23 = tm_tS3Put_23.upload(putRequest_tS3Put_23);
  		
  			upload_tS3Put_23.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_23 = ((java.io.InputStream)fileOrStream_tS3Put_23);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_23 = new S3StreamUtil();
    		byte[] buffer_tS3Put_23 = new byte[partSizeInBytes_tS3Put_23];
    		sourceStream_tS3Put_23.read(buffer_tS3Put_23);
    		long curPartSize_tS3Put_23 = streamUtil_tS3Put_23.getLength(buffer_tS3Put_23);
    		boolean multiUpload_tS3Put_23 = curPartSize_tS3Put_23 == partSizeInBytes_tS3Put_23;
    		
    		if(!multiUpload_tS3Put_23) {
    				objectMetadata_tS3Put_23.setContentLength(curPartSize_tS3Put_23);
    				uploadStream_tS3Put_23 = new java.io.ByteArrayInputStream(buffer_tS3Put_23,0,Long.valueOf(curPartSize_tS3Put_23).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_23 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_23, uploadStream_tS3Put_23, objectMetadata_tS3Put_23);
			
    				
    				

    				
    				conn_tS3Put_23.putObject(putRequest_tS3Put_23);
    		} else {
    				uploadStream_tS3Put_23 = new java.io.ByteArrayInputStream(buffer_tS3Put_23);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_23 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_23 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_23, objectMetadata_tS3Put_23);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_23 = conn_tS3Put_23.initiateMultipartUpload(putRequest_tS3Put_23);
      			String uploadId_tS3Put_23 = initResponse_tS3Put_23.getUploadId();
      			int partNumber_tS3Put_23 = 1;
      			boolean streamHasNext_tS3Put_23 = true;
      			byte[] probeAvailability_tS3Put_23 = new byte[1];
				try {
					while (streamHasNext_tS3Put_23) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_23 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_23)
						.withUploadId(uploadId_tS3Put_23)
                    	.withPartNumber(partNumber_tS3Put_23)
						.withPartSize(curPartSize_tS3Put_23);
            		    uploadRequest_tS3Put_23.setInputStream(uploadStream_tS3Put_23);
            		    streamHasNext_tS3Put_23 = sourceStream_tS3Put_23.read(probeAvailability_tS3Put_23) != -1;
            		    if(!streamHasNext_tS3Put_23){
                    	    uploadRequest_tS3Put_23.setLastPart(true);
                    	}

                		partTags_tS3Put_23.add(conn_tS3Put_23.uploadPart(uploadRequest_tS3Put_23).getPartETag());
                  	    partNumber_tS3Put_23++;

          		     	if(uploadStream_tS3Put_23!=null){
      		         			uploadStream_tS3Put_23.close();
          		     	}
          		     	buffer_tS3Put_23 = new byte[partSizeInBytes_tS3Put_23];
          		     	sourceStream_tS3Put_23.read(buffer_tS3Put_23,1,partSizeInBytes_tS3Put_23-1);
          		     	buffer_tS3Put_23[0] = probeAvailability_tS3Put_23[0];
          		     	probeAvailability_tS3Put_23 = new byte[1];
          		     	curPartSize_tS3Put_23 = streamUtil_tS3Put_23.getLength(buffer_tS3Put_23);
          		     	uploadStream_tS3Put_23 = new java.io.ByteArrayInputStream(buffer_tS3Put_23);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_23 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_23,
                        uploadId_tS3Put_23, partTags_tS3Put_23);
            		conn_tS3Put_23.completeMultipartUpload(compRequest_tS3Put_23);
            } catch (java.lang.Exception uploadException_tS3Put_23) {
  							conn_tS3Put_23.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_23, uploadId_tS3Put_23));
    						throw uploadException_tS3Put_23;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_23){
		
			throw(e_tS3Put_23);
		
	}finally{
		if(useStream_tS3Put_23 && uploadStream_tS3Put_23!=null){
    	uploadStream_tS3Put_23.close();
    }
    
    if(tm_tS3Put_23 != null){
        tm_tS3Put_23.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_23 begin ] stop
 */
	
	/**
	 * [tS3Put_23 main ] start
	 */

	

	
	
	currentComponent="tS3Put_23";

	

 


	tos_count_tS3Put_23++;

/**
 * [tS3Put_23 main ] stop
 */
	
	/**
	 * [tS3Put_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_23";

	

 



/**
 * [tS3Put_23 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_23";

	

 



/**
 * [tS3Put_23 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_23 end ] start
	 */

	

	
	
	currentComponent="tS3Put_23";

	

 

ok_Hash.put("tS3Put_23", true);
end_Hash.put("tS3Put_23", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk170", 0, "ok");
				}
				tJava_57Process(globalMap);



/**
 * [tS3Put_23 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_23 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_23";

	

 



/**
 * [tS3Put_23 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_23_SUBPROCESS_STATE", 1);
	}
	

public void tJava_57Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_57_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_57 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_57", false);
		start_Hash.put("tJava_57", System.currentTimeMillis());
		
	
	currentComponent="tJava_57";

	
		int tos_count_tJava_57 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_23_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_23_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_57 begin ] stop
 */
	
	/**
	 * [tJava_57 main ] start
	 */

	

	
	
	currentComponent="tJava_57";

	

 


	tos_count_tJava_57++;

/**
 * [tJava_57 main ] stop
 */
	
	/**
	 * [tJava_57 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_57";

	

 



/**
 * [tJava_57 process_data_begin ] stop
 */
	
	/**
	 * [tJava_57 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_57";

	

 



/**
 * [tJava_57 process_data_end ] stop
 */
	
	/**
	 * [tJava_57 end ] start
	 */

	

	
	
	currentComponent="tJava_57";

	

 

ok_Hash.put("tJava_57", true);
end_Hash.put("tJava_57", System.currentTimeMillis());




/**
 * [tJava_57 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_57 finally ] start
	 */

	

	
	
	currentComponent="tJava_57";

	

 



/**
 * [tJava_57 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_57_SUBPROCESS_STATE", 1);
	}
	


public static class out22Struct implements routines.system.IPersistableRow<out22Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();
out22Struct out22 = new out22Struct();





	
	/**
	 * [tWriteJSONField_22_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_22_Out", false);
		start_Hash.put("tWriteJSONField_22_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_22";
	
	currentComponent="tWriteJSONField_22_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out22");
					}
				
		int tos_count_tWriteJSONField_22_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_22_Out = 0;
				boolean needRoot_tWriteJSONField_22_Out  = true;
				
				String  strCompCache_tWriteJSONField_22_Out= null;		
				
						        java.util.Queue<row44Struct> listGroupby_tWriteJSONField_22_Out = new java.util.concurrent.ConcurrentLinkedQueue<row44Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_22_Out extends Thread {
						
									    java.util.Queue<row44Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_22_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_22_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_22_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_22_In", queue);
							globalMap.put("flows_tWriteJSONField_22_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_22_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_22_Out txf_tWriteJSONField_22_Out = new ThreadXMLField_tWriteJSONField_22_Out(listGroupby_tWriteJSONField_22_Out);
					
					txf_tWriteJSONField_22_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_22_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_22_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_22_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_22_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_22_Out nestXMLTool_tWriteJSONField_22_Out = new NestXMLTool_tWriteJSONField_22_Out();

out22Struct  rowStructOutput_tWriteJSONField_22_Out = new out22Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_22_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_22_Out = null;
org.dom4j.Document doc_tWriteJSONField_22_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_22_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_22_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_22_Out.setTrimText(false);
format_tWriteJSONField_22_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_22_Out = new int[1];

 



/**
 * [tWriteJSONField_22_Out begin ] stop
 */



	
	/**
	 * [tMap_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_22", false);
		start_Hash.put("tMap_22", System.currentTimeMillis());
		
	
	currentComponent="tMap_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tMap_22 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_22__Struct  {
}
Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
// ###############################

// ###############################
// # Outputs initialization
out22Struct out22_tmp = new out22Struct();
// ###############################

        
        



        









 



/**
 * [tMap_22 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_22", false);
		start_Hash.put("tSalesforceInput_22", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_22";

	
		int tos_count_tSalesforceInput_22 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_22 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_22 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_22.createRuntimeProperties();
 		                    props_tSalesforceInput_22.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_22.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_22.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_22.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_22.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_22.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_22.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_22.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_22.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_22.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_22.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_22.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_22.module.setValue("moduleName",
 		                    "NoodleCRM__Application_Item__History");
 		                    
 		                    props_tSalesforceInput_22.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_22.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_22.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_22.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_22.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_22_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Application_Item__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Application_Item__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_22_1_fisrt sst_tSalesforceInput_22_1_fisrt = new SchemaSettingTool_tSalesforceInput_22_1_fisrt();
 		                    
 		                    props_tSalesforceInput_22.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_22_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_22.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_22 = props_tSalesforceInput_22.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_22 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_22 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_22 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_22.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_22);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_22.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_22 = props_tSalesforceInput_22.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_22 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_22 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_22 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_22.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_22);
        }
    }
globalMap.put("tSalesforceInput_22_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_22);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_22= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_22_MAPPINGS_URL", mappings_url_tSalesforceInput_22);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_22 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_22";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_22 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_22 = null;
topology_tSalesforceInput_22 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_22 = def_tSalesforceInput_22.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_22, topology_tSalesforceInput_22);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_22 = def_tSalesforceInput_22.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_22 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_22.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_22 = componentRuntime_tSalesforceInput_22.initialize(container_tSalesforceInput_22, props_tSalesforceInput_22);

if (initVr_tSalesforceInput_22.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_22.getMessage());
}

if(componentRuntime_tSalesforceInput_22 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_22 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_22;
	compDriverInitialization_tSalesforceInput_22.runAtDriver(container_tSalesforceInput_22);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_22 = null;
if(componentRuntime_tSalesforceInput_22 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_22 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_22;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_22 = sourceOrSink_tSalesforceInput_22.validate(container_tSalesforceInput_22);
	if (vr_tSalesforceInput_22.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_22.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_22 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_22;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_22 =
            source_tSalesforceInput_22.createReader(container_tSalesforceInput_22);
	reader_tSalesforceInput_22 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_22, container_tSalesforceInput_22);

        boolean multi_output_is_allowed_tSalesforceInput_22 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_22 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_22.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_22 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_22 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_22 = props_tSalesforceInput_22.getSchema(c_tSalesforceInput_22, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_22 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_22, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_22 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_22 = reader_tSalesforceInput_22.start();

    resourceMap.put("reader_tSalesforceInput_22", reader_tSalesforceInput_22);

    for (; available_tSalesforceInput_22; available_tSalesforceInput_22 = reader_tSalesforceInput_22.advance()) {
    	nb_line_tSalesforceInput_22++;

    	
        if (multi_output_is_allowed_tSalesforceInput_22) {
                row45 = null;

        }

        try {
            Object data_tSalesforceInput_22 = reader_tSalesforceInput_22.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_22) {
                    row45 = new row45Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_22 == null) {
            factory_tSalesforceInput_22 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_22.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_22.setWrapped(factory_tSalesforceInput_22.convertToAvro(data_tSalesforceInput_22));
                Object columnValue_0_tSalesforceInput_22 = outgoingEnforcer_tSalesforceInput_22.get(0);
                        row45.Id = (String) (columnValue_0_tSalesforceInput_22);
                Object columnValue_1_tSalesforceInput_22 = outgoingEnforcer_tSalesforceInput_22.get(1);
                    if (columnValue_1_tSalesforceInput_22 == null) {
                        row45.IsDeleted = false;
                    } else {
                            row45.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_22);
                    }
                Object columnValue_2_tSalesforceInput_22 = outgoingEnforcer_tSalesforceInput_22.get(2);
                        row45.ParentId = (String) (columnValue_2_tSalesforceInput_22);
                Object columnValue_3_tSalesforceInput_22 = outgoingEnforcer_tSalesforceInput_22.get(3);
                        row45.CreatedById = (String) (columnValue_3_tSalesforceInput_22);
                Object columnValue_4_tSalesforceInput_22 = outgoingEnforcer_tSalesforceInput_22.get(4);
                        row45.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_22);
                Object columnValue_5_tSalesforceInput_22 = outgoingEnforcer_tSalesforceInput_22.get(5);
                        row45.Field = (String) (columnValue_5_tSalesforceInput_22);
                Object columnValue_6_tSalesforceInput_22 = outgoingEnforcer_tSalesforceInput_22.get(6);
                        row45.OldValue = (String) (columnValue_6_tSalesforceInput_22);
                Object columnValue_7_tSalesforceInput_22 = outgoingEnforcer_tSalesforceInput_22.get(7);
                        row45.NewValue = (String) (columnValue_7_tSalesforceInput_22);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_22) {
        	java.util.Map<String,Object> info_tSalesforceInput_22 = e_tSalesforceInput_22.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_22 = null;
            	if(info_tSalesforceInput_22.containsKey("error")){
            		errorMessage_tSalesforceInput_22 = info_tSalesforceInput_22.get("error");
        		}else if(info_tSalesforceInput_22.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_22 = info_tSalesforceInput_22.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_22 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_22 = "Row "+ nb_line_tSalesforceInput_22 + ": "+errorMessage_tSalesforceInput_22;
    			System.err.println(errorMessage_tSalesforceInput_22);
            	// If the record is reject, the main line record should put NULL
            	row45 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_22 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_22 = null;


 



/**
 * [tSalesforceInput_22 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_22 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_22";

	


 


	tos_count_tSalesforceInput_22++;

/**
 * [tSalesforceInput_22 main ] stop
 */
	
	/**
	 * [tSalesforceInput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_22";

	


 



/**
 * [tSalesforceInput_22 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row45");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

out22 = null;


// # Output table : 'out22'
out22_tmp.Id = row45.Id ;
out22_tmp.IsDeleted = row45.IsDeleted ;
out22_tmp.ParentId = row45.ParentId ;
out22_tmp.CreatedById = row45.CreatedById ;
out22_tmp.CreatedDate = (row45.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row45.CreatedDate))).getTime())/1000 ;
out22_tmp.Field = row45.Field ;
out22_tmp.OldValue = row45.OldValue ;
out22_tmp.NewValue = row45.NewValue ;
out22 = out22_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "out22"
if(out22 != null) { 



	
	/**
	 * [tWriteJSONField_22_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_22";
	
	currentComponent="tWriteJSONField_22_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out22");
					}
					

	if(txf_tWriteJSONField_22_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_22_Out.getCurrentComponent();
		throw txf_tWriteJSONField_22_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_22_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_22_Out.getLastError();
	}
	nb_line_tWriteJSONField_22_Out++;
	valueMap_tWriteJSONField_22_Out.clear();
	arraysValueMap_tWriteJSONField_22_Out.clear();
	valueMap_tWriteJSONField_22_Out.put("Id",
	(
            out22.Id.toString()
		));
	arraysValueMap_tWriteJSONField_22_Out.put("Id",
	(
            out22.Id.toString()
		));
	valueMap_tWriteJSONField_22_Out.put("IsDeleted",
	(
            String.valueOf(out22.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_22_Out.put("IsDeleted",
	(
            String.valueOf(out22.IsDeleted)
		));
	valueMap_tWriteJSONField_22_Out.put("ParentId",
	(
            out22.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_22_Out.put("ParentId",
	(
            out22.ParentId.toString()
		));
	valueMap_tWriteJSONField_22_Out.put("CreatedById",
	(
            out22.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_22_Out.put("CreatedById",
	(
            out22.CreatedById.toString()
		));
	valueMap_tWriteJSONField_22_Out.put("CreatedDate",
	(
            String.valueOf(out22.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_22_Out.put("CreatedDate",
	(
            String.valueOf(out22.CreatedDate)
		));
	valueMap_tWriteJSONField_22_Out.put("Field",
	(
            out22.Field.toString()
		));
	arraysValueMap_tWriteJSONField_22_Out.put("Field",
	(
            out22.Field.toString()
		));
	valueMap_tWriteJSONField_22_Out.put("OldValue",
	(
		out22.OldValue != null?
            out22.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_22_Out.put("OldValue",
	(
		out22.OldValue != null?
            out22.OldValue.toString():null
		));
	valueMap_tWriteJSONField_22_Out.put("NewValue",
	(
		out22.NewValue != null?
            out22.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_22_Out.put("NewValue",
	(
		out22.NewValue != null?
            out22.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_22_Out = "";
	if(strCompCache_tWriteJSONField_22_Out==null){
		strCompCache_tWriteJSONField_22_Out=strTemp_tWriteJSONField_22_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_22_Out.replaceDefaultNameSpace(doc_tWriteJSONField_22_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_22_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_22_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_22_Out, format_tWriteJSONField_22_Out);
			output_tWriteJSONField_22_Out.write(doc_tWriteJSONField_22_Out);
		    output_tWriteJSONField_22_Out.close();
			
				  		  row44Struct row_tWriteJSONField_22_Out = new row44Struct();
						  
					     		row_tWriteJSONField_22_Out.data = strWriter_tWriteJSONField_22_Out.toString();
					     		listGroupby_tWriteJSONField_22_Out.add(row_tWriteJSONField_22_Out);
					
		    doc_tWriteJSONField_22_Out.clearContent();
			needRoot_tWriteJSONField_22_Out = true;
			for(int i_tWriteJSONField_22_Out=0;i_tWriteJSONField_22_Out<orders_tWriteJSONField_22_Out.length;i_tWriteJSONField_22_Out++){
				orders_tWriteJSONField_22_Out[i_tWriteJSONField_22_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_22_Out != null && groupbyList_tWriteJSONField_22_Out.size() >= 0){
				groupbyList_tWriteJSONField_22_Out.clear();
			}
			strCompCache_tWriteJSONField_22_Out=strTemp_tWriteJSONField_22_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_22_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_22_Out) {
		needRoot_tWriteJSONField_22_Out=false;
		org.dom4j.Element root_tWriteJSONField_22_Out = doc_tWriteJSONField_22_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_22_Out = root_tWriteJSONField_22_Out;
		org.dom4j.Element root_0_tWriteJSONField_22_Out = root_tWriteJSONField_22_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_22_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_22_Out .setText(root_0_tWriteJSONField_22_Out,
		valueMap_tWriteJSONField_22_Out.get("IsDeleted"));
            root_0_tWriteJSONField_22_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_22_Out .setText(root_0_tWriteJSONField_22_Out,"null");
			root_0_tWriteJSONField_22_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_22_Out = root_tWriteJSONField_22_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_22_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_22_Out .setText(root_1_tWriteJSONField_22_Out,
		valueMap_tWriteJSONField_22_Out.get("ParentId"));
			root_1_tWriteJSONField_22_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_22_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_22_Out .setText(root_1_tWriteJSONField_22_Out,"null");
			root_1_tWriteJSONField_22_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_22_Out = root_tWriteJSONField_22_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_22_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_22_Out .setText(root_2_tWriteJSONField_22_Out,
		valueMap_tWriteJSONField_22_Out.get("CreatedById"));
			root_2_tWriteJSONField_22_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_22_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_22_Out .setText(root_2_tWriteJSONField_22_Out,"null");
			root_2_tWriteJSONField_22_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_22_Out = root_tWriteJSONField_22_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_22_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_22_Out .setText(root_3_tWriteJSONField_22_Out,
		valueMap_tWriteJSONField_22_Out.get("CreatedDate"));
            root_3_tWriteJSONField_22_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_22_Out .setText(root_3_tWriteJSONField_22_Out,"null");
			root_3_tWriteJSONField_22_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_22_Out = root_tWriteJSONField_22_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_22_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_22_Out .setText(root_4_tWriteJSONField_22_Out,
		valueMap_tWriteJSONField_22_Out.get("Field"));
			root_4_tWriteJSONField_22_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_22_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_22_Out .setText(root_4_tWriteJSONField_22_Out,"null");
			root_4_tWriteJSONField_22_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_22_Out = root_tWriteJSONField_22_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_22_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_22_Out .setText(root_5_tWriteJSONField_22_Out,
		valueMap_tWriteJSONField_22_Out.get("OldValue"));
			root_5_tWriteJSONField_22_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_22_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_22_Out .setText(root_5_tWriteJSONField_22_Out,"null");
			root_5_tWriteJSONField_22_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_22_Out = root_tWriteJSONField_22_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_22_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_22_Out .setText(root_6_tWriteJSONField_22_Out,
		valueMap_tWriteJSONField_22_Out.get("NewValue"));
			root_6_tWriteJSONField_22_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_22_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_22_Out .setText(root_6_tWriteJSONField_22_Out,"null");
			root_6_tWriteJSONField_22_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_22_Out = subTreeRootParent_tWriteJSONField_22_Out;
	}else{
		subTreeRootParent_tWriteJSONField_22_Out=root4Group_tWriteJSONField_22_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_22_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_22_Out[0]==0){
        	orders_tWriteJSONField_22_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_22_Out.length){
        		orders_tWriteJSONField_22_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_22_Out.elements().add(orders_tWriteJSONField_22_Out[0]++,loop_tWriteJSONField_22_Out);
		if(
		valueMap_tWriteJSONField_22_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_22_Out .setText(loop_tWriteJSONField_22_Out,
		valueMap_tWriteJSONField_22_Out.get("Id"));
			loop_tWriteJSONField_22_Out.addAttribute("type", "string");
			loop_tWriteJSONField_22_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_22_Out .setText(loop_tWriteJSONField_22_Out,"null");
			loop_tWriteJSONField_22_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_22_Out++;

/**
 * [tWriteJSONField_22_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_22_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_22";
	
	currentComponent="tWriteJSONField_22_Out";

	

 



/**
 * [tWriteJSONField_22_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_22_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_22";
	
	currentComponent="tWriteJSONField_22_Out";

	

 



/**
 * [tWriteJSONField_22_Out process_data_end ] stop
 */

} // End of branch "out22"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_22";

	


 



/**
 * [tSalesforceInput_22 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_22 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_22";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_22", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_22.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_22 = reader_tSalesforceInput_22.getReturnValues();
if(resultMap_tSalesforceInput_22!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_22 : resultMap_tSalesforceInput_22.entrySet()) {
		switch(entry_tSalesforceInput_22.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_22.setComponentData("tSalesforceInput_22", "ERROR_MESSAGE", entry_tSalesforceInput_22.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_22.setComponentData("tSalesforceInput_22", "NB_LINE", entry_tSalesforceInput_22.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_22.setComponentData("tSalesforceInput_22", "NB_SUCCESS", entry_tSalesforceInput_22.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_22.setComponentData("tSalesforceInput_22", "NB_REJECT", entry_tSalesforceInput_22.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_22 = new StringBuilder();
            for (int i_tSalesforceInput_22 = 0; i_tSalesforceInput_22 < entry_tSalesforceInput_22.getKey().length(); i_tSalesforceInput_22++) {
                char ch_tSalesforceInput_22 = entry_tSalesforceInput_22.getKey().charAt(i_tSalesforceInput_22);
                if(Character.isUpperCase(ch_tSalesforceInput_22) && i_tSalesforceInput_22> 0) {
                	studio_key_tSalesforceInput_22.append('_');
                }
                studio_key_tSalesforceInput_22.append(ch_tSalesforceInput_22);
            }
			container_tSalesforceInput_22.setComponentData("tSalesforceInput_22", studio_key_tSalesforceInput_22.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_22.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_22", true);
end_Hash.put("tSalesforceInput_22", System.currentTimeMillis());




/**
 * [tSalesforceInput_22 end ] stop
 */

	
	/**
	 * [tMap_22 end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tMap_22", true);
end_Hash.put("tMap_22", System.currentTimeMillis());




/**
 * [tMap_22 end ] stop
 */

	
	/**
	 * [tWriteJSONField_22_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_22";
	
	currentComponent="tWriteJSONField_22_Out";

	

if(nb_line_tWriteJSONField_22_Out > 0){  
    nestXMLTool_tWriteJSONField_22_Out.replaceDefaultNameSpace(doc_tWriteJSONField_22_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_22_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_22_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_22_Out, format_tWriteJSONField_22_Out);
	output_tWriteJSONField_22_Out.write(doc_tWriteJSONField_22_Out);
    output_tWriteJSONField_22_Out.close();
					row44Struct row_tWriteJSONField_22_Out = new row44Struct();
						  
					     		row_tWriteJSONField_22_Out.data = strWriter_tWriteJSONField_22_Out.toString();
					     		listGroupby_tWriteJSONField_22_Out.add(row_tWriteJSONField_22_Out);
		    		

}
globalMap.put("tWriteJSONField_22_Out_NB_LINE",nb_line_tWriteJSONField_22_Out);
globalMap.put("tWriteJSONField_22_In_FINISH" + (listGroupby_tWriteJSONField_22_Out==null?"":listGroupby_tWriteJSONField_22_Out.hashCode()), "true");
	
		txf_tWriteJSONField_22_Out.join();
		
		if(txf_tWriteJSONField_22_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_22_Out.getCurrentComponent();
			throw txf_tWriteJSONField_22_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_22_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_22_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_22_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out22");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_22_Out", true);
end_Hash.put("tWriteJSONField_22_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_22_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_22 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_22";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_22")==null){
    if(resourceMap.get("reader_tSalesforceInput_22")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_22")).close();
		} catch (java.io.IOException e_tSalesforceInput_22) {
			String errorMessage_tSalesforceInput_22 = "failed to release the resource in tSalesforceInput_22 :" + e_tSalesforceInput_22.getMessage();
			System.err.println(errorMessage_tSalesforceInput_22);
		}
	}
}
 



/**
 * [tSalesforceInput_22 finally ] stop
 */

	
	/**
	 * [tMap_22 finally ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_22_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_22";
	
	currentComponent="tWriteJSONField_22_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_22_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_22_In");
		if(resourceMap.get("finish_tWriteJSONField_22_Out") == null){
			globalMap.put("tWriteJSONField_22_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_22_Out==null?"":listGroupby_tWriteJSONField_22_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_22_Out != null) {
		globalMap.put("tWriteJSONField_22_In_FINISH" + (listGroupby_tWriteJSONField_22_Out==null?"":listGroupby_tWriteJSONField_22_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_22_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_22_SUBPROCESS_STATE", 1);
	}
	

public void tDie_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_22", false);
		start_Hash.put("tDie_22", System.currentTimeMillis());
		
	
	currentComponent="tDie_22";

	
		int tos_count_tDie_22 = 0;
		

 



/**
 * [tDie_22 begin ] stop
 */
	
	/**
	 * [tDie_22 main ] start
	 */

	

	
	
	currentComponent="tDie_22";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_22", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_22_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_22_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_22_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_22) {
		logIgnoredError(String.format("tDie_22 - tDie failed to log message due to internal error: %s", e_tDie_22), e_tDie_22);
	}
	
	currentComponent = "tDie_22";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_22_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_22++;

/**
 * [tDie_22 main ] stop
 */
	
	/**
	 * [tDie_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_22";

	

 



/**
 * [tDie_22 process_data_begin ] stop
 */
	
	/**
	 * [tDie_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_22";

	

 



/**
 * [tDie_22 process_data_end ] stop
 */
	
	/**
	 * [tDie_22 end ] start
	 */

	

	
	
	currentComponent="tDie_22";

	

 

ok_Hash.put("tDie_22", true);
end_Hash.put("tDie_22", System.currentTimeMillis());




/**
 * [tDie_22 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_22 finally ] start
	 */

	

	
	
	currentComponent="tDie_22";

	

 



/**
 * [tDie_22 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_22_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_22", false);
		start_Hash.put("tFileArchive_22", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_22";

	
		int tos_count_tFileArchive_22 = 0;
		

 



/**
 * [tFileArchive_22 begin ] stop
 */
	
	/**
	 * [tFileArchive_22 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_22";

	

	

		String sourceFile_tFileArchive_22 = context.staging_S3_dir + "noodlecrm__application_item__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_22), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_22 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_22 = context.staging_S3_dir + "noodlecrm__application_item__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_22 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_22, zipFile_tFileArchive_22);
    zip_tFileArchive_22.setOverwriteExistTargetZip(true);
	zip_tFileArchive_22.setMakeTargetDir(true);
	zip_tFileArchive_22.setCompressLevel(9);
	zip_tFileArchive_22.setArchiveFormat("gzip");
	zip_tFileArchive_22.setAllFiles(true);
	
	
		zip_tFileArchive_22.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_22_ARCHIVE_FILEPATH",zipFile_tFileArchive_22);
   
   globalMap.put("tFileArchive_22_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_22).getName());

   zip_tFileArchive_22.doZip();


 


	tos_count_tFileArchive_22++;

/**
 * [tFileArchive_22 main ] stop
 */
	
	/**
	 * [tFileArchive_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_22";

	

 



/**
 * [tFileArchive_22 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_22";

	

 



/**
 * [tFileArchive_22 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_22 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_22";

	

 

ok_Hash.put("tFileArchive_22", true);
end_Hash.put("tFileArchive_22", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk165", 0, "ok");
				}
				tS3Put_22Process(globalMap);



/**
 * [tFileArchive_22 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_22 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_22";

	

 



/**
 * [tFileArchive_22 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_22_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_22", false);
		start_Hash.put("tS3Put_22", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_22";

	
		int tos_count_tS3Put_22 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_22 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_22 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__application_item__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__application_item__history_"+context.get("today")+".csv.gz"
;
	
	int partSizeInBytes_tS3Put_22 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_22 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_22 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_22 = context.staging_S3_dir + "noodlecrm__application_item__history.json.gz";
	
	boolean useStream_tS3Put_22 = false;
	java.io.InputStream uploadStream_tS3Put_22 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_22 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_22 instanceof String){
		    useStream_tS3Put_22 = false;
		}else if(fileOrStream_tS3Put_22 instanceof java.io.InputStream){
		    useStream_tS3Put_22 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_22 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_22) {
				java.io.File inputFile_tS3Put_22 = new java.io.File((String)fileOrStream_tS3Put_22);
				
				long multipart_upload_threshold_tS3Put_22 = 5 * 1024 * 1024;
				
    		tm_tS3Put_22 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_22)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_22)
    			.withS3Client(conn_tS3Put_22)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_22 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_22, inputFile_tS3Put_22).withMetadata(objectMetadata_tS3Put_22);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_22 = tm_tS3Put_22.upload(putRequest_tS3Put_22);
  		
  			upload_tS3Put_22.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_22 = ((java.io.InputStream)fileOrStream_tS3Put_22);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_22 = new S3StreamUtil();
    		byte[] buffer_tS3Put_22 = new byte[partSizeInBytes_tS3Put_22];
    		sourceStream_tS3Put_22.read(buffer_tS3Put_22);
    		long curPartSize_tS3Put_22 = streamUtil_tS3Put_22.getLength(buffer_tS3Put_22);
    		boolean multiUpload_tS3Put_22 = curPartSize_tS3Put_22 == partSizeInBytes_tS3Put_22;
    		
    		if(!multiUpload_tS3Put_22) {
    				objectMetadata_tS3Put_22.setContentLength(curPartSize_tS3Put_22);
    				uploadStream_tS3Put_22 = new java.io.ByteArrayInputStream(buffer_tS3Put_22,0,Long.valueOf(curPartSize_tS3Put_22).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_22 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_22, uploadStream_tS3Put_22, objectMetadata_tS3Put_22);
			
    				
    				

    				
    				conn_tS3Put_22.putObject(putRequest_tS3Put_22);
    		} else {
    				uploadStream_tS3Put_22 = new java.io.ByteArrayInputStream(buffer_tS3Put_22);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_22 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_22 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_22, objectMetadata_tS3Put_22);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_22 = conn_tS3Put_22.initiateMultipartUpload(putRequest_tS3Put_22);
      			String uploadId_tS3Put_22 = initResponse_tS3Put_22.getUploadId();
      			int partNumber_tS3Put_22 = 1;
      			boolean streamHasNext_tS3Put_22 = true;
      			byte[] probeAvailability_tS3Put_22 = new byte[1];
				try {
					while (streamHasNext_tS3Put_22) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_22 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_22)
						.withUploadId(uploadId_tS3Put_22)
                    	.withPartNumber(partNumber_tS3Put_22)
						.withPartSize(curPartSize_tS3Put_22);
            		    uploadRequest_tS3Put_22.setInputStream(uploadStream_tS3Put_22);
            		    streamHasNext_tS3Put_22 = sourceStream_tS3Put_22.read(probeAvailability_tS3Put_22) != -1;
            		    if(!streamHasNext_tS3Put_22){
                    	    uploadRequest_tS3Put_22.setLastPart(true);
                    	}

                		partTags_tS3Put_22.add(conn_tS3Put_22.uploadPart(uploadRequest_tS3Put_22).getPartETag());
                  	    partNumber_tS3Put_22++;

          		     	if(uploadStream_tS3Put_22!=null){
      		         			uploadStream_tS3Put_22.close();
          		     	}
          		     	buffer_tS3Put_22 = new byte[partSizeInBytes_tS3Put_22];
          		     	sourceStream_tS3Put_22.read(buffer_tS3Put_22,1,partSizeInBytes_tS3Put_22-1);
          		     	buffer_tS3Put_22[0] = probeAvailability_tS3Put_22[0];
          		     	probeAvailability_tS3Put_22 = new byte[1];
          		     	curPartSize_tS3Put_22 = streamUtil_tS3Put_22.getLength(buffer_tS3Put_22);
          		     	uploadStream_tS3Put_22 = new java.io.ByteArrayInputStream(buffer_tS3Put_22);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_22 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_22,
                        uploadId_tS3Put_22, partTags_tS3Put_22);
            		conn_tS3Put_22.completeMultipartUpload(compRequest_tS3Put_22);
            } catch (java.lang.Exception uploadException_tS3Put_22) {
  							conn_tS3Put_22.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_22, uploadId_tS3Put_22));
    						throw uploadException_tS3Put_22;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_22){
		
			throw(e_tS3Put_22);
		
	}finally{
		if(useStream_tS3Put_22 && uploadStream_tS3Put_22!=null){
    	uploadStream_tS3Put_22.close();
    }
    
    if(tm_tS3Put_22 != null){
        tm_tS3Put_22.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_22 begin ] stop
 */
	
	/**
	 * [tS3Put_22 main ] start
	 */

	

	
	
	currentComponent="tS3Put_22";

	

 


	tos_count_tS3Put_22++;

/**
 * [tS3Put_22 main ] stop
 */
	
	/**
	 * [tS3Put_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_22";

	

 



/**
 * [tS3Put_22 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_22";

	

 



/**
 * [tS3Put_22 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_22 end ] start
	 */

	

	
	
	currentComponent="tS3Put_22";

	

 

ok_Hash.put("tS3Put_22", true);
end_Hash.put("tS3Put_22", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk166", 0, "ok");
				}
				tJava_56Process(globalMap);



/**
 * [tS3Put_22 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_22 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_22";

	

 



/**
 * [tS3Put_22 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_22_SUBPROCESS_STATE", 1);
	}
	

public void tJava_56Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_56_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_56 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_56", false);
		start_Hash.put("tJava_56", System.currentTimeMillis());
		
	
	currentComponent="tJava_56";

	
		int tos_count_tJava_56 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_22_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_22_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_56 begin ] stop
 */
	
	/**
	 * [tJava_56 main ] start
	 */

	

	
	
	currentComponent="tJava_56";

	

 


	tos_count_tJava_56++;

/**
 * [tJava_56 main ] stop
 */
	
	/**
	 * [tJava_56 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_56";

	

 



/**
 * [tJava_56 process_data_begin ] stop
 */
	
	/**
	 * [tJava_56 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_56";

	

 



/**
 * [tJava_56 process_data_end ] stop
 */
	
	/**
	 * [tJava_56 end ] start
	 */

	

	
	
	currentComponent="tJava_56";

	

 

ok_Hash.put("tJava_56", true);
end_Hash.put("tJava_56", System.currentTimeMillis());




/**
 * [tJava_56 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_56 finally ] start
	 */

	

	
	
	currentComponent="tJava_56";

	

 



/**
 * [tJava_56 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_56_SUBPROCESS_STATE", 1);
	}
	


public static class out21Struct implements routines.system.IPersistableRow<out21Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row43Struct row43 = new row43Struct();
out21Struct out21 = new out21Struct();





	
	/**
	 * [tWriteJSONField_21_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_21_Out", false);
		start_Hash.put("tWriteJSONField_21_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_21";
	
	currentComponent="tWriteJSONField_21_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out21");
					}
				
		int tos_count_tWriteJSONField_21_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_21_Out = 0;
				boolean needRoot_tWriteJSONField_21_Out  = true;
				
				String  strCompCache_tWriteJSONField_21_Out= null;		
				
						        java.util.Queue<row42Struct> listGroupby_tWriteJSONField_21_Out = new java.util.concurrent.ConcurrentLinkedQueue<row42Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_21_Out extends Thread {
						
									    java.util.Queue<row42Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_21_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_21_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_21_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_21_In", queue);
							globalMap.put("flows_tWriteJSONField_21_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_21_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_21_Out txf_tWriteJSONField_21_Out = new ThreadXMLField_tWriteJSONField_21_Out(listGroupby_tWriteJSONField_21_Out);
					
					txf_tWriteJSONField_21_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_21_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_21_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_21_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_21_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_21_Out nestXMLTool_tWriteJSONField_21_Out = new NestXMLTool_tWriteJSONField_21_Out();

out21Struct  rowStructOutput_tWriteJSONField_21_Out = new out21Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_21_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_21_Out = null;
org.dom4j.Document doc_tWriteJSONField_21_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_21_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_21_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_21_Out.setTrimText(false);
format_tWriteJSONField_21_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_21_Out = new int[1];

 



/**
 * [tWriteJSONField_21_Out begin ] stop
 */



	
	/**
	 * [tMap_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_21", false);
		start_Hash.put("tMap_21", System.currentTimeMillis());
		
	
	currentComponent="tMap_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tMap_21 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_21__Struct  {
}
Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
out21Struct out21_tmp = new out21Struct();
// ###############################

        
        



        









 



/**
 * [tMap_21 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_21", false);
		start_Hash.put("tSalesforceInput_21", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_21";

	
		int tos_count_tSalesforceInput_21 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_21 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_21 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_21.createRuntimeProperties();
 		                    props_tSalesforceInput_21.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_21.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_21.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_21.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_21.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_21.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_21.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_21.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_21.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_21.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_21.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_21.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_21.module.setValue("moduleName",
 		                    "NoodleCRM__Application_Decision__History");
 		                    
 		                    props_tSalesforceInput_21.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_21.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_21.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_21.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_21.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_21_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Application_Decision__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Application_Decision__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_21_1_fisrt sst_tSalesforceInput_21_1_fisrt = new SchemaSettingTool_tSalesforceInput_21_1_fisrt();
 		                    
 		                    props_tSalesforceInput_21.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_21_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_21.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_21 = props_tSalesforceInput_21.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_21 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_21 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_21 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_21.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_21);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_21.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_21 = props_tSalesforceInput_21.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_21 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_21 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_21 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_21.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_21);
        }
    }
globalMap.put("tSalesforceInput_21_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_21);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_21= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_21_MAPPINGS_URL", mappings_url_tSalesforceInput_21);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_21 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_21";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_21 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_21 = null;
topology_tSalesforceInput_21 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_21 = def_tSalesforceInput_21.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_21, topology_tSalesforceInput_21);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_21 = def_tSalesforceInput_21.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_21 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_21.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_21 = componentRuntime_tSalesforceInput_21.initialize(container_tSalesforceInput_21, props_tSalesforceInput_21);

if (initVr_tSalesforceInput_21.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_21.getMessage());
}

if(componentRuntime_tSalesforceInput_21 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_21 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_21;
	compDriverInitialization_tSalesforceInput_21.runAtDriver(container_tSalesforceInput_21);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_21 = null;
if(componentRuntime_tSalesforceInput_21 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_21 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_21;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_21 = sourceOrSink_tSalesforceInput_21.validate(container_tSalesforceInput_21);
	if (vr_tSalesforceInput_21.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_21.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_21 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_21;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_21 =
            source_tSalesforceInput_21.createReader(container_tSalesforceInput_21);
	reader_tSalesforceInput_21 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_21, container_tSalesforceInput_21);

        boolean multi_output_is_allowed_tSalesforceInput_21 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_21 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_21.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_21 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_21 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_21 = props_tSalesforceInput_21.getSchema(c_tSalesforceInput_21, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_21 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_21, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_21 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_21 = reader_tSalesforceInput_21.start();

    resourceMap.put("reader_tSalesforceInput_21", reader_tSalesforceInput_21);

    for (; available_tSalesforceInput_21; available_tSalesforceInput_21 = reader_tSalesforceInput_21.advance()) {
    	nb_line_tSalesforceInput_21++;

    	
        if (multi_output_is_allowed_tSalesforceInput_21) {
                row43 = null;

        }

        try {
            Object data_tSalesforceInput_21 = reader_tSalesforceInput_21.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_21) {
                    row43 = new row43Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_21 == null) {
            factory_tSalesforceInput_21 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_21.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_21.setWrapped(factory_tSalesforceInput_21.convertToAvro(data_tSalesforceInput_21));
                Object columnValue_0_tSalesforceInput_21 = outgoingEnforcer_tSalesforceInput_21.get(0);
                        row43.Id = (String) (columnValue_0_tSalesforceInput_21);
                Object columnValue_1_tSalesforceInput_21 = outgoingEnforcer_tSalesforceInput_21.get(1);
                    if (columnValue_1_tSalesforceInput_21 == null) {
                        row43.IsDeleted = false;
                    } else {
                            row43.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_21);
                    }
                Object columnValue_2_tSalesforceInput_21 = outgoingEnforcer_tSalesforceInput_21.get(2);
                        row43.ParentId = (String) (columnValue_2_tSalesforceInput_21);
                Object columnValue_3_tSalesforceInput_21 = outgoingEnforcer_tSalesforceInput_21.get(3);
                        row43.CreatedById = (String) (columnValue_3_tSalesforceInput_21);
                Object columnValue_4_tSalesforceInput_21 = outgoingEnforcer_tSalesforceInput_21.get(4);
                        row43.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_21);
                Object columnValue_5_tSalesforceInput_21 = outgoingEnforcer_tSalesforceInput_21.get(5);
                        row43.Field = (String) (columnValue_5_tSalesforceInput_21);
                Object columnValue_6_tSalesforceInput_21 = outgoingEnforcer_tSalesforceInput_21.get(6);
                        row43.OldValue = (String) (columnValue_6_tSalesforceInput_21);
                Object columnValue_7_tSalesforceInput_21 = outgoingEnforcer_tSalesforceInput_21.get(7);
                        row43.NewValue = (String) (columnValue_7_tSalesforceInput_21);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_21) {
        	java.util.Map<String,Object> info_tSalesforceInput_21 = e_tSalesforceInput_21.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_21 = null;
            	if(info_tSalesforceInput_21.containsKey("error")){
            		errorMessage_tSalesforceInput_21 = info_tSalesforceInput_21.get("error");
        		}else if(info_tSalesforceInput_21.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_21 = info_tSalesforceInput_21.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_21 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_21 = "Row "+ nb_line_tSalesforceInput_21 + ": "+errorMessage_tSalesforceInput_21;
    			System.err.println(errorMessage_tSalesforceInput_21);
            	// If the record is reject, the main line record should put NULL
            	row43 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_21 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_21 = null;


 



/**
 * [tSalesforceInput_21 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_21 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_21";

	


 


	tos_count_tSalesforceInput_21++;

/**
 * [tSalesforceInput_21 main ] stop
 */
	
	/**
	 * [tSalesforceInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_21";

	


 



/**
 * [tSalesforceInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tMap_21 main ] start
	 */

	

	
	
	currentComponent="tMap_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row43");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_21 = false;
		  boolean mainRowRejected_tMap_21 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
        // ###############################
        // # Output tables

out21 = null;


// # Output table : 'out21'
out21_tmp.Id = row43.Id ;
out21_tmp.IsDeleted = row43.IsDeleted ;
out21_tmp.ParentId = row43.ParentId ;
out21_tmp.CreatedById = row43.CreatedById ;
out21_tmp.CreatedDate = (row43.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row43.CreatedDate))).getTime())/1000 ;
out21_tmp.Field = row43.Field ;
out21_tmp.OldValue = row43.OldValue ;
out21_tmp.NewValue = row43.NewValue ;
out21 = out21_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_21 = false;










 


	tos_count_tMap_21++;

/**
 * [tMap_21 main ] stop
 */
	
	/**
	 * [tMap_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_begin ] stop
 */
// Start of branch "out21"
if(out21 != null) { 



	
	/**
	 * [tWriteJSONField_21_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_21";
	
	currentComponent="tWriteJSONField_21_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out21");
					}
					

	if(txf_tWriteJSONField_21_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_21_Out.getCurrentComponent();
		throw txf_tWriteJSONField_21_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_21_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_21_Out.getLastError();
	}
	nb_line_tWriteJSONField_21_Out++;
	valueMap_tWriteJSONField_21_Out.clear();
	arraysValueMap_tWriteJSONField_21_Out.clear();
	valueMap_tWriteJSONField_21_Out.put("Id",
	(
            out21.Id.toString()
		));
	arraysValueMap_tWriteJSONField_21_Out.put("Id",
	(
            out21.Id.toString()
		));
	valueMap_tWriteJSONField_21_Out.put("IsDeleted",
	(
            String.valueOf(out21.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_21_Out.put("IsDeleted",
	(
            String.valueOf(out21.IsDeleted)
		));
	valueMap_tWriteJSONField_21_Out.put("ParentId",
	(
            out21.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_21_Out.put("ParentId",
	(
            out21.ParentId.toString()
		));
	valueMap_tWriteJSONField_21_Out.put("CreatedById",
	(
            out21.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_21_Out.put("CreatedById",
	(
            out21.CreatedById.toString()
		));
	valueMap_tWriteJSONField_21_Out.put("CreatedDate",
	(
            String.valueOf(out21.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_21_Out.put("CreatedDate",
	(
            String.valueOf(out21.CreatedDate)
		));
	valueMap_tWriteJSONField_21_Out.put("Field",
	(
            out21.Field.toString()
		));
	arraysValueMap_tWriteJSONField_21_Out.put("Field",
	(
            out21.Field.toString()
		));
	valueMap_tWriteJSONField_21_Out.put("OldValue",
	(
		out21.OldValue != null?
            out21.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_21_Out.put("OldValue",
	(
		out21.OldValue != null?
            out21.OldValue.toString():null
		));
	valueMap_tWriteJSONField_21_Out.put("NewValue",
	(
		out21.NewValue != null?
            out21.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_21_Out.put("NewValue",
	(
		out21.NewValue != null?
            out21.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_21_Out = "";
	if(strCompCache_tWriteJSONField_21_Out==null){
		strCompCache_tWriteJSONField_21_Out=strTemp_tWriteJSONField_21_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_21_Out.replaceDefaultNameSpace(doc_tWriteJSONField_21_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_21_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_21_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_21_Out, format_tWriteJSONField_21_Out);
			output_tWriteJSONField_21_Out.write(doc_tWriteJSONField_21_Out);
		    output_tWriteJSONField_21_Out.close();
			
				  		  row42Struct row_tWriteJSONField_21_Out = new row42Struct();
						  
					     		row_tWriteJSONField_21_Out.data = strWriter_tWriteJSONField_21_Out.toString();
					     		listGroupby_tWriteJSONField_21_Out.add(row_tWriteJSONField_21_Out);
					
		    doc_tWriteJSONField_21_Out.clearContent();
			needRoot_tWriteJSONField_21_Out = true;
			for(int i_tWriteJSONField_21_Out=0;i_tWriteJSONField_21_Out<orders_tWriteJSONField_21_Out.length;i_tWriteJSONField_21_Out++){
				orders_tWriteJSONField_21_Out[i_tWriteJSONField_21_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_21_Out != null && groupbyList_tWriteJSONField_21_Out.size() >= 0){
				groupbyList_tWriteJSONField_21_Out.clear();
			}
			strCompCache_tWriteJSONField_21_Out=strTemp_tWriteJSONField_21_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_21_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_21_Out) {
		needRoot_tWriteJSONField_21_Out=false;
		org.dom4j.Element root_tWriteJSONField_21_Out = doc_tWriteJSONField_21_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_21_Out = root_tWriteJSONField_21_Out;
		org.dom4j.Element root_0_tWriteJSONField_21_Out = root_tWriteJSONField_21_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_21_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_21_Out .setText(root_0_tWriteJSONField_21_Out,
		valueMap_tWriteJSONField_21_Out.get("IsDeleted"));
            root_0_tWriteJSONField_21_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_21_Out .setText(root_0_tWriteJSONField_21_Out,"null");
			root_0_tWriteJSONField_21_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_21_Out = root_tWriteJSONField_21_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_21_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_21_Out .setText(root_1_tWriteJSONField_21_Out,
		valueMap_tWriteJSONField_21_Out.get("ParentId"));
			root_1_tWriteJSONField_21_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_21_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_21_Out .setText(root_1_tWriteJSONField_21_Out,"null");
			root_1_tWriteJSONField_21_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_21_Out = root_tWriteJSONField_21_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_21_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_21_Out .setText(root_2_tWriteJSONField_21_Out,
		valueMap_tWriteJSONField_21_Out.get("CreatedById"));
			root_2_tWriteJSONField_21_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_21_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_21_Out .setText(root_2_tWriteJSONField_21_Out,"null");
			root_2_tWriteJSONField_21_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_21_Out = root_tWriteJSONField_21_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_21_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_21_Out .setText(root_3_tWriteJSONField_21_Out,
		valueMap_tWriteJSONField_21_Out.get("CreatedDate"));
            root_3_tWriteJSONField_21_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_21_Out .setText(root_3_tWriteJSONField_21_Out,"null");
			root_3_tWriteJSONField_21_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_21_Out = root_tWriteJSONField_21_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_21_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_21_Out .setText(root_4_tWriteJSONField_21_Out,
		valueMap_tWriteJSONField_21_Out.get("Field"));
			root_4_tWriteJSONField_21_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_21_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_21_Out .setText(root_4_tWriteJSONField_21_Out,"null");
			root_4_tWriteJSONField_21_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_21_Out = root_tWriteJSONField_21_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_21_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_21_Out .setText(root_5_tWriteJSONField_21_Out,
		valueMap_tWriteJSONField_21_Out.get("OldValue"));
			root_5_tWriteJSONField_21_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_21_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_21_Out .setText(root_5_tWriteJSONField_21_Out,"null");
			root_5_tWriteJSONField_21_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_21_Out = root_tWriteJSONField_21_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_21_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_21_Out .setText(root_6_tWriteJSONField_21_Out,
		valueMap_tWriteJSONField_21_Out.get("NewValue"));
			root_6_tWriteJSONField_21_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_21_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_21_Out .setText(root_6_tWriteJSONField_21_Out,"null");
			root_6_tWriteJSONField_21_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_21_Out = subTreeRootParent_tWriteJSONField_21_Out;
	}else{
		subTreeRootParent_tWriteJSONField_21_Out=root4Group_tWriteJSONField_21_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_21_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_21_Out[0]==0){
        	orders_tWriteJSONField_21_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_21_Out.length){
        		orders_tWriteJSONField_21_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_21_Out.elements().add(orders_tWriteJSONField_21_Out[0]++,loop_tWriteJSONField_21_Out);
		if(
		valueMap_tWriteJSONField_21_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_21_Out .setText(loop_tWriteJSONField_21_Out,
		valueMap_tWriteJSONField_21_Out.get("Id"));
			loop_tWriteJSONField_21_Out.addAttribute("type", "string");
			loop_tWriteJSONField_21_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_21_Out .setText(loop_tWriteJSONField_21_Out,"null");
			loop_tWriteJSONField_21_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_21_Out++;

/**
 * [tWriteJSONField_21_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_21_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_21";
	
	currentComponent="tWriteJSONField_21_Out";

	

 



/**
 * [tWriteJSONField_21_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_21_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_21";
	
	currentComponent="tWriteJSONField_21_Out";

	

 



/**
 * [tWriteJSONField_21_Out process_data_end ] stop
 */

} // End of branch "out21"




	
	/**
	 * [tMap_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_21";

	


 



/**
 * [tSalesforceInput_21 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_21 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_21";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_21", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_21.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_21 = reader_tSalesforceInput_21.getReturnValues();
if(resultMap_tSalesforceInput_21!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_21 : resultMap_tSalesforceInput_21.entrySet()) {
		switch(entry_tSalesforceInput_21.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_21.setComponentData("tSalesforceInput_21", "ERROR_MESSAGE", entry_tSalesforceInput_21.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_21.setComponentData("tSalesforceInput_21", "NB_LINE", entry_tSalesforceInput_21.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_21.setComponentData("tSalesforceInput_21", "NB_SUCCESS", entry_tSalesforceInput_21.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_21.setComponentData("tSalesforceInput_21", "NB_REJECT", entry_tSalesforceInput_21.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_21 = new StringBuilder();
            for (int i_tSalesforceInput_21 = 0; i_tSalesforceInput_21 < entry_tSalesforceInput_21.getKey().length(); i_tSalesforceInput_21++) {
                char ch_tSalesforceInput_21 = entry_tSalesforceInput_21.getKey().charAt(i_tSalesforceInput_21);
                if(Character.isUpperCase(ch_tSalesforceInput_21) && i_tSalesforceInput_21> 0) {
                	studio_key_tSalesforceInput_21.append('_');
                }
                studio_key_tSalesforceInput_21.append(ch_tSalesforceInput_21);
            }
			container_tSalesforceInput_21.setComponentData("tSalesforceInput_21", studio_key_tSalesforceInput_21.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_21.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_21", true);
end_Hash.put("tSalesforceInput_21", System.currentTimeMillis());




/**
 * [tSalesforceInput_21 end ] stop
 */

	
	/**
	 * [tMap_21 end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tMap_21", true);
end_Hash.put("tMap_21", System.currentTimeMillis());




/**
 * [tMap_21 end ] stop
 */

	
	/**
	 * [tWriteJSONField_21_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_21";
	
	currentComponent="tWriteJSONField_21_Out";

	

if(nb_line_tWriteJSONField_21_Out > 0){  
    nestXMLTool_tWriteJSONField_21_Out.replaceDefaultNameSpace(doc_tWriteJSONField_21_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_21_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_21_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_21_Out, format_tWriteJSONField_21_Out);
	output_tWriteJSONField_21_Out.write(doc_tWriteJSONField_21_Out);
    output_tWriteJSONField_21_Out.close();
					row42Struct row_tWriteJSONField_21_Out = new row42Struct();
						  
					     		row_tWriteJSONField_21_Out.data = strWriter_tWriteJSONField_21_Out.toString();
					     		listGroupby_tWriteJSONField_21_Out.add(row_tWriteJSONField_21_Out);
		    		

}
globalMap.put("tWriteJSONField_21_Out_NB_LINE",nb_line_tWriteJSONField_21_Out);
globalMap.put("tWriteJSONField_21_In_FINISH" + (listGroupby_tWriteJSONField_21_Out==null?"":listGroupby_tWriteJSONField_21_Out.hashCode()), "true");
	
		txf_tWriteJSONField_21_Out.join();
		
		if(txf_tWriteJSONField_21_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_21_Out.getCurrentComponent();
			throw txf_tWriteJSONField_21_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_21_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_21_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_21_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out21");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_21_Out", true);
end_Hash.put("tWriteJSONField_21_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_21_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_21 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_21";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_21")==null){
    if(resourceMap.get("reader_tSalesforceInput_21")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_21")).close();
		} catch (java.io.IOException e_tSalesforceInput_21) {
			String errorMessage_tSalesforceInput_21 = "failed to release the resource in tSalesforceInput_21 :" + e_tSalesforceInput_21.getMessage();
			System.err.println(errorMessage_tSalesforceInput_21);
		}
	}
}
 



/**
 * [tSalesforceInput_21 finally ] stop
 */

	
	/**
	 * [tMap_21 finally ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_21_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_21";
	
	currentComponent="tWriteJSONField_21_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_21_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_21_In");
		if(resourceMap.get("finish_tWriteJSONField_21_Out") == null){
			globalMap.put("tWriteJSONField_21_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_21_Out==null?"":listGroupby_tWriteJSONField_21_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_21_Out != null) {
		globalMap.put("tWriteJSONField_21_In_FINISH" + (listGroupby_tWriteJSONField_21_Out==null?"":listGroupby_tWriteJSONField_21_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_21_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_21_SUBPROCESS_STATE", 1);
	}
	

public void tDie_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_21", false);
		start_Hash.put("tDie_21", System.currentTimeMillis());
		
	
	currentComponent="tDie_21";

	
		int tos_count_tDie_21 = 0;
		

 



/**
 * [tDie_21 begin ] stop
 */
	
	/**
	 * [tDie_21 main ] start
	 */

	

	
	
	currentComponent="tDie_21";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_21", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_21_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_21_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_21_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_21) {
		logIgnoredError(String.format("tDie_21 - tDie failed to log message due to internal error: %s", e_tDie_21), e_tDie_21);
	}
	
	currentComponent = "tDie_21";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_21_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_21++;

/**
 * [tDie_21 main ] stop
 */
	
	/**
	 * [tDie_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_21";

	

 



/**
 * [tDie_21 process_data_begin ] stop
 */
	
	/**
	 * [tDie_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_21";

	

 



/**
 * [tDie_21 process_data_end ] stop
 */
	
	/**
	 * [tDie_21 end ] start
	 */

	

	
	
	currentComponent="tDie_21";

	

 

ok_Hash.put("tDie_21", true);
end_Hash.put("tDie_21", System.currentTimeMillis());




/**
 * [tDie_21 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_21 finally ] start
	 */

	

	
	
	currentComponent="tDie_21";

	

 



/**
 * [tDie_21 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_21_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_21", false);
		start_Hash.put("tFileArchive_21", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_21";

	
		int tos_count_tFileArchive_21 = 0;
		

 



/**
 * [tFileArchive_21 begin ] stop
 */
	
	/**
	 * [tFileArchive_21 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_21";

	

	

		String sourceFile_tFileArchive_21 = context.staging_S3_dir + "noodlecrm__application_decision__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_21), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_21 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_21 = context.staging_S3_dir + "noodlecrm__application_decision__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_21 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_21, zipFile_tFileArchive_21);
    zip_tFileArchive_21.setOverwriteExistTargetZip(true);
	zip_tFileArchive_21.setMakeTargetDir(true);
	zip_tFileArchive_21.setCompressLevel(9);
	zip_tFileArchive_21.setArchiveFormat("gzip");
	zip_tFileArchive_21.setAllFiles(true);
	
	
		zip_tFileArchive_21.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_21_ARCHIVE_FILEPATH",zipFile_tFileArchive_21);
   
   globalMap.put("tFileArchive_21_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_21).getName());

   zip_tFileArchive_21.doZip();


 


	tos_count_tFileArchive_21++;

/**
 * [tFileArchive_21 main ] stop
 */
	
	/**
	 * [tFileArchive_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_21";

	

 



/**
 * [tFileArchive_21 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_21";

	

 



/**
 * [tFileArchive_21 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_21 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_21";

	

 

ok_Hash.put("tFileArchive_21", true);
end_Hash.put("tFileArchive_21", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk161", 0, "ok");
				}
				tS3Put_21Process(globalMap);



/**
 * [tFileArchive_21 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_21 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_21";

	

 



/**
 * [tFileArchive_21 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_21_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_21", false);
		start_Hash.put("tS3Put_21", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_21";

	
		int tos_count_tS3Put_21 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_21 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_21 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__application_decision__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__application_decision__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_21 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_21 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_21 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_21 = context.staging_S3_dir + "noodlecrm__application_decision__history.json.gz";
	
	boolean useStream_tS3Put_21 = false;
	java.io.InputStream uploadStream_tS3Put_21 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_21 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_21 instanceof String){
		    useStream_tS3Put_21 = false;
		}else if(fileOrStream_tS3Put_21 instanceof java.io.InputStream){
		    useStream_tS3Put_21 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_21 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_21) {
				java.io.File inputFile_tS3Put_21 = new java.io.File((String)fileOrStream_tS3Put_21);
				
				long multipart_upload_threshold_tS3Put_21 = 5 * 1024 * 1024;
				
    		tm_tS3Put_21 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_21)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_21)
    			.withS3Client(conn_tS3Put_21)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_21 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_21, inputFile_tS3Put_21).withMetadata(objectMetadata_tS3Put_21);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_21 = tm_tS3Put_21.upload(putRequest_tS3Put_21);
  		
  			upload_tS3Put_21.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_21 = ((java.io.InputStream)fileOrStream_tS3Put_21);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_21 = new S3StreamUtil();
    		byte[] buffer_tS3Put_21 = new byte[partSizeInBytes_tS3Put_21];
    		sourceStream_tS3Put_21.read(buffer_tS3Put_21);
    		long curPartSize_tS3Put_21 = streamUtil_tS3Put_21.getLength(buffer_tS3Put_21);
    		boolean multiUpload_tS3Put_21 = curPartSize_tS3Put_21 == partSizeInBytes_tS3Put_21;
    		
    		if(!multiUpload_tS3Put_21) {
    				objectMetadata_tS3Put_21.setContentLength(curPartSize_tS3Put_21);
    				uploadStream_tS3Put_21 = new java.io.ByteArrayInputStream(buffer_tS3Put_21,0,Long.valueOf(curPartSize_tS3Put_21).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_21 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_21, uploadStream_tS3Put_21, objectMetadata_tS3Put_21);
			
    				
    				

    				
    				conn_tS3Put_21.putObject(putRequest_tS3Put_21);
    		} else {
    				uploadStream_tS3Put_21 = new java.io.ByteArrayInputStream(buffer_tS3Put_21);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_21 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_21 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_21, objectMetadata_tS3Put_21);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_21 = conn_tS3Put_21.initiateMultipartUpload(putRequest_tS3Put_21);
      			String uploadId_tS3Put_21 = initResponse_tS3Put_21.getUploadId();
      			int partNumber_tS3Put_21 = 1;
      			boolean streamHasNext_tS3Put_21 = true;
      			byte[] probeAvailability_tS3Put_21 = new byte[1];
				try {
					while (streamHasNext_tS3Put_21) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_21 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_21)
						.withUploadId(uploadId_tS3Put_21)
                    	.withPartNumber(partNumber_tS3Put_21)
						.withPartSize(curPartSize_tS3Put_21);
            		    uploadRequest_tS3Put_21.setInputStream(uploadStream_tS3Put_21);
            		    streamHasNext_tS3Put_21 = sourceStream_tS3Put_21.read(probeAvailability_tS3Put_21) != -1;
            		    if(!streamHasNext_tS3Put_21){
                    	    uploadRequest_tS3Put_21.setLastPart(true);
                    	}

                		partTags_tS3Put_21.add(conn_tS3Put_21.uploadPart(uploadRequest_tS3Put_21).getPartETag());
                  	    partNumber_tS3Put_21++;

          		     	if(uploadStream_tS3Put_21!=null){
      		         			uploadStream_tS3Put_21.close();
          		     	}
          		     	buffer_tS3Put_21 = new byte[partSizeInBytes_tS3Put_21];
          		     	sourceStream_tS3Put_21.read(buffer_tS3Put_21,1,partSizeInBytes_tS3Put_21-1);
          		     	buffer_tS3Put_21[0] = probeAvailability_tS3Put_21[0];
          		     	probeAvailability_tS3Put_21 = new byte[1];
          		     	curPartSize_tS3Put_21 = streamUtil_tS3Put_21.getLength(buffer_tS3Put_21);
          		     	uploadStream_tS3Put_21 = new java.io.ByteArrayInputStream(buffer_tS3Put_21);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_21 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_21,
                        uploadId_tS3Put_21, partTags_tS3Put_21);
            		conn_tS3Put_21.completeMultipartUpload(compRequest_tS3Put_21);
            } catch (java.lang.Exception uploadException_tS3Put_21) {
  							conn_tS3Put_21.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_21, uploadId_tS3Put_21));
    						throw uploadException_tS3Put_21;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_21){
		
			throw(e_tS3Put_21);
		
	}finally{
		if(useStream_tS3Put_21 && uploadStream_tS3Put_21!=null){
    	uploadStream_tS3Put_21.close();
    }
    
    if(tm_tS3Put_21 != null){
        tm_tS3Put_21.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_21 begin ] stop
 */
	
	/**
	 * [tS3Put_21 main ] start
	 */

	

	
	
	currentComponent="tS3Put_21";

	

 


	tos_count_tS3Put_21++;

/**
 * [tS3Put_21 main ] stop
 */
	
	/**
	 * [tS3Put_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_21";

	

 



/**
 * [tS3Put_21 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_21";

	

 



/**
 * [tS3Put_21 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_21 end ] start
	 */

	

	
	
	currentComponent="tS3Put_21";

	

 

ok_Hash.put("tS3Put_21", true);
end_Hash.put("tS3Put_21", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk162", 0, "ok");
				}
				tJava_55Process(globalMap);



/**
 * [tS3Put_21 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_21 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_21";

	

 



/**
 * [tS3Put_21 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_21_SUBPROCESS_STATE", 1);
	}
	

public void tJava_55Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_55_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_55 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_55", false);
		start_Hash.put("tJava_55", System.currentTimeMillis());
		
	
	currentComponent="tJava_55";

	
		int tos_count_tJava_55 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_21_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_21_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_55 begin ] stop
 */
	
	/**
	 * [tJava_55 main ] start
	 */

	

	
	
	currentComponent="tJava_55";

	

 


	tos_count_tJava_55++;

/**
 * [tJava_55 main ] stop
 */
	
	/**
	 * [tJava_55 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_55";

	

 



/**
 * [tJava_55 process_data_begin ] stop
 */
	
	/**
	 * [tJava_55 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_55";

	

 



/**
 * [tJava_55 process_data_end ] stop
 */
	
	/**
	 * [tJava_55 end ] start
	 */

	

	
	
	currentComponent="tJava_55";

	

 

ok_Hash.put("tJava_55", true);
end_Hash.put("tJava_55", System.currentTimeMillis());




/**
 * [tJava_55 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_55 finally ] start
	 */

	

	
	
	currentComponent="tJava_55";

	

 



/**
 * [tJava_55 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_55_SUBPROCESS_STATE", 1);
	}
	


public static class out20Struct implements routines.system.IPersistableRow<out20Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();
out20Struct out20 = new out20Struct();





	
	/**
	 * [tWriteJSONField_20_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_20_Out", false);
		start_Hash.put("tWriteJSONField_20_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_20";
	
	currentComponent="tWriteJSONField_20_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out20");
					}
				
		int tos_count_tWriteJSONField_20_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_20_Out = 0;
				boolean needRoot_tWriteJSONField_20_Out  = true;
				
				String  strCompCache_tWriteJSONField_20_Out= null;		
				
						        java.util.Queue<row40Struct> listGroupby_tWriteJSONField_20_Out = new java.util.concurrent.ConcurrentLinkedQueue<row40Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_20_Out extends Thread {
						
									    java.util.Queue<row40Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_20_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_20_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_20_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_20_In", queue);
							globalMap.put("flows_tWriteJSONField_20_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_20_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_20_Out txf_tWriteJSONField_20_Out = new ThreadXMLField_tWriteJSONField_20_Out(listGroupby_tWriteJSONField_20_Out);
					
					txf_tWriteJSONField_20_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_20_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_20_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_20_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_20_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_20_Out nestXMLTool_tWriteJSONField_20_Out = new NestXMLTool_tWriteJSONField_20_Out();

out20Struct  rowStructOutput_tWriteJSONField_20_Out = new out20Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_20_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_20_Out = null;
org.dom4j.Document doc_tWriteJSONField_20_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_20_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_20_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_20_Out.setTrimText(false);
format_tWriteJSONField_20_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_20_Out = new int[1];

 



/**
 * [tWriteJSONField_20_Out begin ] stop
 */



	
	/**
	 * [tMap_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_20", false);
		start_Hash.put("tMap_20", System.currentTimeMillis());
		
	
	currentComponent="tMap_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tMap_20 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_20__Struct  {
}
Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
// ###############################

// ###############################
// # Outputs initialization
out20Struct out20_tmp = new out20Struct();
// ###############################

        
        



        









 



/**
 * [tMap_20 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_20", false);
		start_Hash.put("tSalesforceInput_20", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_20";

	
		int tos_count_tSalesforceInput_20 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_20 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_20 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_20.createRuntimeProperties();
 		                    props_tSalesforceInput_20.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_20.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_20.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_20.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_20.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_20.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_20.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_20.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_20.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_20.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_20.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_20.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_20.module.setValue("moduleName",
 		                    "NoodleCRM__Application__History");
 		                    
 		                    props_tSalesforceInput_20.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_20.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_20.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_20.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_20.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_20_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Application__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Application__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_20_1_fisrt sst_tSalesforceInput_20_1_fisrt = new SchemaSettingTool_tSalesforceInput_20_1_fisrt();
 		                    
 		                    props_tSalesforceInput_20.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_20_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_20.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_20 = props_tSalesforceInput_20.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_20 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_20 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_20 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_20.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_20);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_20.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_20 = props_tSalesforceInput_20.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_20 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_20 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_20 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_20.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_20);
        }
    }
globalMap.put("tSalesforceInput_20_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_20);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_20= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_20_MAPPINGS_URL", mappings_url_tSalesforceInput_20);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_20 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_20";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_20 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_20 = null;
topology_tSalesforceInput_20 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_20 = def_tSalesforceInput_20.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_20, topology_tSalesforceInput_20);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_20 = def_tSalesforceInput_20.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_20 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_20.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_20 = componentRuntime_tSalesforceInput_20.initialize(container_tSalesforceInput_20, props_tSalesforceInput_20);

if (initVr_tSalesforceInput_20.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_20.getMessage());
}

if(componentRuntime_tSalesforceInput_20 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_20 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_20;
	compDriverInitialization_tSalesforceInput_20.runAtDriver(container_tSalesforceInput_20);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_20 = null;
if(componentRuntime_tSalesforceInput_20 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_20 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_20;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_20 = sourceOrSink_tSalesforceInput_20.validate(container_tSalesforceInput_20);
	if (vr_tSalesforceInput_20.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_20.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_20 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_20;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_20 =
            source_tSalesforceInput_20.createReader(container_tSalesforceInput_20);
	reader_tSalesforceInput_20 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_20, container_tSalesforceInput_20);

        boolean multi_output_is_allowed_tSalesforceInput_20 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_20 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_20.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_20 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_20 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_20 = props_tSalesforceInput_20.getSchema(c_tSalesforceInput_20, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_20 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_20, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_20 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_20 = reader_tSalesforceInput_20.start();

    resourceMap.put("reader_tSalesforceInput_20", reader_tSalesforceInput_20);

    for (; available_tSalesforceInput_20; available_tSalesforceInput_20 = reader_tSalesforceInput_20.advance()) {
    	nb_line_tSalesforceInput_20++;

    	
        if (multi_output_is_allowed_tSalesforceInput_20) {
                row41 = null;

        }

        try {
            Object data_tSalesforceInput_20 = reader_tSalesforceInput_20.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_20) {
                    row41 = new row41Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_20 == null) {
            factory_tSalesforceInput_20 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_20.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_20.setWrapped(factory_tSalesforceInput_20.convertToAvro(data_tSalesforceInput_20));
                Object columnValue_0_tSalesforceInput_20 = outgoingEnforcer_tSalesforceInput_20.get(0);
                        row41.Id = (String) (columnValue_0_tSalesforceInput_20);
                Object columnValue_1_tSalesforceInput_20 = outgoingEnforcer_tSalesforceInput_20.get(1);
                    if (columnValue_1_tSalesforceInput_20 == null) {
                        row41.IsDeleted = false;
                    } else {
                            row41.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_20);
                    }
                Object columnValue_2_tSalesforceInput_20 = outgoingEnforcer_tSalesforceInput_20.get(2);
                        row41.ParentId = (String) (columnValue_2_tSalesforceInput_20);
                Object columnValue_3_tSalesforceInput_20 = outgoingEnforcer_tSalesforceInput_20.get(3);
                        row41.CreatedById = (String) (columnValue_3_tSalesforceInput_20);
                Object columnValue_4_tSalesforceInput_20 = outgoingEnforcer_tSalesforceInput_20.get(4);
                        row41.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_20);
                Object columnValue_5_tSalesforceInput_20 = outgoingEnforcer_tSalesforceInput_20.get(5);
                        row41.Field = (String) (columnValue_5_tSalesforceInput_20);
                Object columnValue_6_tSalesforceInput_20 = outgoingEnforcer_tSalesforceInput_20.get(6);
                        row41.OldValue = (String) (columnValue_6_tSalesforceInput_20);
                Object columnValue_7_tSalesforceInput_20 = outgoingEnforcer_tSalesforceInput_20.get(7);
                        row41.NewValue = (String) (columnValue_7_tSalesforceInput_20);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_20) {
        	java.util.Map<String,Object> info_tSalesforceInput_20 = e_tSalesforceInput_20.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_20 = null;
            	if(info_tSalesforceInput_20.containsKey("error")){
            		errorMessage_tSalesforceInput_20 = info_tSalesforceInput_20.get("error");
        		}else if(info_tSalesforceInput_20.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_20 = info_tSalesforceInput_20.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_20 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_20 = "Row "+ nb_line_tSalesforceInput_20 + ": "+errorMessage_tSalesforceInput_20;
    			System.err.println(errorMessage_tSalesforceInput_20);
            	// If the record is reject, the main line record should put NULL
            	row41 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_20 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_20 = null;


 



/**
 * [tSalesforceInput_20 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_20 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_20";

	


 


	tos_count_tSalesforceInput_20++;

/**
 * [tSalesforceInput_20 main ] stop
 */
	
	/**
	 * [tSalesforceInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_20";

	


 



/**
 * [tSalesforceInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tMap_20 main ] start
	 */

	

	
	
	currentComponent="tMap_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_20 = false;
		  boolean mainRowRejected_tMap_20 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
        // ###############################
        // # Output tables

out20 = null;


// # Output table : 'out20'
out20_tmp.Id = row41.Id ;
out20_tmp.IsDeleted = row41.IsDeleted ;
out20_tmp.ParentId = row41.ParentId ;
out20_tmp.CreatedById = row41.CreatedById ;
out20_tmp.CreatedDate = (row41.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row41.CreatedDate))).getTime())/1000 ;
out20_tmp.Field = row41.Field ;
out20_tmp.OldValue = row41.OldValue ;
out20_tmp.NewValue = row41.NewValue ;
out20 = out20_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_20 = false;










 


	tos_count_tMap_20++;

/**
 * [tMap_20 main ] stop
 */
	
	/**
	 * [tMap_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_begin ] stop
 */
// Start of branch "out20"
if(out20 != null) { 



	
	/**
	 * [tWriteJSONField_20_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_20";
	
	currentComponent="tWriteJSONField_20_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out20");
					}
					

	if(txf_tWriteJSONField_20_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_20_Out.getCurrentComponent();
		throw txf_tWriteJSONField_20_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_20_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_20_Out.getLastError();
	}
	nb_line_tWriteJSONField_20_Out++;
	valueMap_tWriteJSONField_20_Out.clear();
	arraysValueMap_tWriteJSONField_20_Out.clear();
	valueMap_tWriteJSONField_20_Out.put("Id",
	(
            out20.Id.toString()
		));
	arraysValueMap_tWriteJSONField_20_Out.put("Id",
	(
            out20.Id.toString()
		));
	valueMap_tWriteJSONField_20_Out.put("IsDeleted",
	(
            String.valueOf(out20.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_20_Out.put("IsDeleted",
	(
            String.valueOf(out20.IsDeleted)
		));
	valueMap_tWriteJSONField_20_Out.put("ParentId",
	(
            out20.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_20_Out.put("ParentId",
	(
            out20.ParentId.toString()
		));
	valueMap_tWriteJSONField_20_Out.put("CreatedById",
	(
            out20.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_20_Out.put("CreatedById",
	(
            out20.CreatedById.toString()
		));
	valueMap_tWriteJSONField_20_Out.put("CreatedDate",
	(
            String.valueOf(out20.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_20_Out.put("CreatedDate",
	(
            String.valueOf(out20.CreatedDate)
		));
	valueMap_tWriteJSONField_20_Out.put("Field",
	(
            out20.Field.toString()
		));
	arraysValueMap_tWriteJSONField_20_Out.put("Field",
	(
            out20.Field.toString()
		));
	valueMap_tWriteJSONField_20_Out.put("OldValue",
	(
		out20.OldValue != null?
            out20.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_20_Out.put("OldValue",
	(
		out20.OldValue != null?
            out20.OldValue.toString():null
		));
	valueMap_tWriteJSONField_20_Out.put("NewValue",
	(
		out20.NewValue != null?
            out20.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_20_Out.put("NewValue",
	(
		out20.NewValue != null?
            out20.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_20_Out = "";
	if(strCompCache_tWriteJSONField_20_Out==null){
		strCompCache_tWriteJSONField_20_Out=strTemp_tWriteJSONField_20_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_20_Out.replaceDefaultNameSpace(doc_tWriteJSONField_20_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_20_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_20_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_20_Out, format_tWriteJSONField_20_Out);
			output_tWriteJSONField_20_Out.write(doc_tWriteJSONField_20_Out);
		    output_tWriteJSONField_20_Out.close();
			
				  		  row40Struct row_tWriteJSONField_20_Out = new row40Struct();
						  
					     		row_tWriteJSONField_20_Out.data = strWriter_tWriteJSONField_20_Out.toString();
					     		listGroupby_tWriteJSONField_20_Out.add(row_tWriteJSONField_20_Out);
					
		    doc_tWriteJSONField_20_Out.clearContent();
			needRoot_tWriteJSONField_20_Out = true;
			for(int i_tWriteJSONField_20_Out=0;i_tWriteJSONField_20_Out<orders_tWriteJSONField_20_Out.length;i_tWriteJSONField_20_Out++){
				orders_tWriteJSONField_20_Out[i_tWriteJSONField_20_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_20_Out != null && groupbyList_tWriteJSONField_20_Out.size() >= 0){
				groupbyList_tWriteJSONField_20_Out.clear();
			}
			strCompCache_tWriteJSONField_20_Out=strTemp_tWriteJSONField_20_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_20_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_20_Out) {
		needRoot_tWriteJSONField_20_Out=false;
		org.dom4j.Element root_tWriteJSONField_20_Out = doc_tWriteJSONField_20_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_20_Out = root_tWriteJSONField_20_Out;
		org.dom4j.Element root_0_tWriteJSONField_20_Out = root_tWriteJSONField_20_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_20_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_20_Out .setText(root_0_tWriteJSONField_20_Out,
		valueMap_tWriteJSONField_20_Out.get("IsDeleted"));
            root_0_tWriteJSONField_20_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_20_Out .setText(root_0_tWriteJSONField_20_Out,"null");
			root_0_tWriteJSONField_20_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_20_Out = root_tWriteJSONField_20_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_20_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_20_Out .setText(root_1_tWriteJSONField_20_Out,
		valueMap_tWriteJSONField_20_Out.get("ParentId"));
			root_1_tWriteJSONField_20_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_20_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_20_Out .setText(root_1_tWriteJSONField_20_Out,"null");
			root_1_tWriteJSONField_20_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_20_Out = root_tWriteJSONField_20_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_20_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_20_Out .setText(root_2_tWriteJSONField_20_Out,
		valueMap_tWriteJSONField_20_Out.get("CreatedById"));
			root_2_tWriteJSONField_20_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_20_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_20_Out .setText(root_2_tWriteJSONField_20_Out,"null");
			root_2_tWriteJSONField_20_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_20_Out = root_tWriteJSONField_20_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_20_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_20_Out .setText(root_3_tWriteJSONField_20_Out,
		valueMap_tWriteJSONField_20_Out.get("CreatedDate"));
            root_3_tWriteJSONField_20_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_20_Out .setText(root_3_tWriteJSONField_20_Out,"null");
			root_3_tWriteJSONField_20_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_20_Out = root_tWriteJSONField_20_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_20_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_20_Out .setText(root_4_tWriteJSONField_20_Out,
		valueMap_tWriteJSONField_20_Out.get("Field"));
			root_4_tWriteJSONField_20_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_20_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_20_Out .setText(root_4_tWriteJSONField_20_Out,"null");
			root_4_tWriteJSONField_20_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_20_Out = root_tWriteJSONField_20_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_20_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_20_Out .setText(root_5_tWriteJSONField_20_Out,
		valueMap_tWriteJSONField_20_Out.get("OldValue"));
			root_5_tWriteJSONField_20_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_20_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_20_Out .setText(root_5_tWriteJSONField_20_Out,"null");
			root_5_tWriteJSONField_20_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_20_Out = root_tWriteJSONField_20_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_20_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_20_Out .setText(root_6_tWriteJSONField_20_Out,
		valueMap_tWriteJSONField_20_Out.get("NewValue"));
			root_6_tWriteJSONField_20_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_20_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_20_Out .setText(root_6_tWriteJSONField_20_Out,"null");
			root_6_tWriteJSONField_20_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_20_Out = subTreeRootParent_tWriteJSONField_20_Out;
	}else{
		subTreeRootParent_tWriteJSONField_20_Out=root4Group_tWriteJSONField_20_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_20_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_20_Out[0]==0){
        	orders_tWriteJSONField_20_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_20_Out.length){
        		orders_tWriteJSONField_20_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_20_Out.elements().add(orders_tWriteJSONField_20_Out[0]++,loop_tWriteJSONField_20_Out);
		if(
		valueMap_tWriteJSONField_20_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_20_Out .setText(loop_tWriteJSONField_20_Out,
		valueMap_tWriteJSONField_20_Out.get("Id"));
			loop_tWriteJSONField_20_Out.addAttribute("type", "string");
			loop_tWriteJSONField_20_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_20_Out .setText(loop_tWriteJSONField_20_Out,"null");
			loop_tWriteJSONField_20_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_20_Out++;

/**
 * [tWriteJSONField_20_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_20_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_20";
	
	currentComponent="tWriteJSONField_20_Out";

	

 



/**
 * [tWriteJSONField_20_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_20_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_20";
	
	currentComponent="tWriteJSONField_20_Out";

	

 



/**
 * [tWriteJSONField_20_Out process_data_end ] stop
 */

} // End of branch "out20"




	
	/**
	 * [tMap_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_20";

	


 



/**
 * [tSalesforceInput_20 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_20 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_20";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_20", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_20.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_20 = reader_tSalesforceInput_20.getReturnValues();
if(resultMap_tSalesforceInput_20!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_20 : resultMap_tSalesforceInput_20.entrySet()) {
		switch(entry_tSalesforceInput_20.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_20.setComponentData("tSalesforceInput_20", "ERROR_MESSAGE", entry_tSalesforceInput_20.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_20.setComponentData("tSalesforceInput_20", "NB_LINE", entry_tSalesforceInput_20.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_20.setComponentData("tSalesforceInput_20", "NB_SUCCESS", entry_tSalesforceInput_20.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_20.setComponentData("tSalesforceInput_20", "NB_REJECT", entry_tSalesforceInput_20.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_20 = new StringBuilder();
            for (int i_tSalesforceInput_20 = 0; i_tSalesforceInput_20 < entry_tSalesforceInput_20.getKey().length(); i_tSalesforceInput_20++) {
                char ch_tSalesforceInput_20 = entry_tSalesforceInput_20.getKey().charAt(i_tSalesforceInput_20);
                if(Character.isUpperCase(ch_tSalesforceInput_20) && i_tSalesforceInput_20> 0) {
                	studio_key_tSalesforceInput_20.append('_');
                }
                studio_key_tSalesforceInput_20.append(ch_tSalesforceInput_20);
            }
			container_tSalesforceInput_20.setComponentData("tSalesforceInput_20", studio_key_tSalesforceInput_20.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_20.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_20", true);
end_Hash.put("tSalesforceInput_20", System.currentTimeMillis());




/**
 * [tSalesforceInput_20 end ] stop
 */

	
	/**
	 * [tMap_20 end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tMap_20", true);
end_Hash.put("tMap_20", System.currentTimeMillis());




/**
 * [tMap_20 end ] stop
 */

	
	/**
	 * [tWriteJSONField_20_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_20";
	
	currentComponent="tWriteJSONField_20_Out";

	

if(nb_line_tWriteJSONField_20_Out > 0){  
    nestXMLTool_tWriteJSONField_20_Out.replaceDefaultNameSpace(doc_tWriteJSONField_20_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_20_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_20_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_20_Out, format_tWriteJSONField_20_Out);
	output_tWriteJSONField_20_Out.write(doc_tWriteJSONField_20_Out);
    output_tWriteJSONField_20_Out.close();
					row40Struct row_tWriteJSONField_20_Out = new row40Struct();
						  
					     		row_tWriteJSONField_20_Out.data = strWriter_tWriteJSONField_20_Out.toString();
					     		listGroupby_tWriteJSONField_20_Out.add(row_tWriteJSONField_20_Out);
		    		

}
globalMap.put("tWriteJSONField_20_Out_NB_LINE",nb_line_tWriteJSONField_20_Out);
globalMap.put("tWriteJSONField_20_In_FINISH" + (listGroupby_tWriteJSONField_20_Out==null?"":listGroupby_tWriteJSONField_20_Out.hashCode()), "true");
	
		txf_tWriteJSONField_20_Out.join();
		
		if(txf_tWriteJSONField_20_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_20_Out.getCurrentComponent();
			throw txf_tWriteJSONField_20_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_20_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_20_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_20_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out20");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_20_Out", true);
end_Hash.put("tWriteJSONField_20_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_20_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_20 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_20";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_20")==null){
    if(resourceMap.get("reader_tSalesforceInput_20")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_20")).close();
		} catch (java.io.IOException e_tSalesforceInput_20) {
			String errorMessage_tSalesforceInput_20 = "failed to release the resource in tSalesforceInput_20 :" + e_tSalesforceInput_20.getMessage();
			System.err.println(errorMessage_tSalesforceInput_20);
		}
	}
}
 



/**
 * [tSalesforceInput_20 finally ] stop
 */

	
	/**
	 * [tMap_20 finally ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_20_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_20";
	
	currentComponent="tWriteJSONField_20_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_20_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_20_In");
		if(resourceMap.get("finish_tWriteJSONField_20_Out") == null){
			globalMap.put("tWriteJSONField_20_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_20_Out==null?"":listGroupby_tWriteJSONField_20_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_20_Out != null) {
		globalMap.put("tWriteJSONField_20_In_FINISH" + (listGroupby_tWriteJSONField_20_Out==null?"":listGroupby_tWriteJSONField_20_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_20_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_20_SUBPROCESS_STATE", 1);
	}
	

public void tDie_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_20", false);
		start_Hash.put("tDie_20", System.currentTimeMillis());
		
	
	currentComponent="tDie_20";

	
		int tos_count_tDie_20 = 0;
		

 



/**
 * [tDie_20 begin ] stop
 */
	
	/**
	 * [tDie_20 main ] start
	 */

	

	
	
	currentComponent="tDie_20";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_20", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_20_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_20_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_20_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_20) {
		logIgnoredError(String.format("tDie_20 - tDie failed to log message due to internal error: %s", e_tDie_20), e_tDie_20);
	}
	
	currentComponent = "tDie_20";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_20_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_20++;

/**
 * [tDie_20 main ] stop
 */
	
	/**
	 * [tDie_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_20";

	

 



/**
 * [tDie_20 process_data_begin ] stop
 */
	
	/**
	 * [tDie_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_20";

	

 



/**
 * [tDie_20 process_data_end ] stop
 */
	
	/**
	 * [tDie_20 end ] start
	 */

	

	
	
	currentComponent="tDie_20";

	

 

ok_Hash.put("tDie_20", true);
end_Hash.put("tDie_20", System.currentTimeMillis());




/**
 * [tDie_20 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_20 finally ] start
	 */

	

	
	
	currentComponent="tDie_20";

	

 



/**
 * [tDie_20 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_20_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_20", false);
		start_Hash.put("tFileArchive_20", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_20";

	
		int tos_count_tFileArchive_20 = 0;
		

 



/**
 * [tFileArchive_20 begin ] stop
 */
	
	/**
	 * [tFileArchive_20 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_20";

	

	

		String sourceFile_tFileArchive_20 = context.staging_S3_dir + "noodlecrm__application__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_20), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_20 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_20 = context.staging_S3_dir + "noodlecrm__application__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_20 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_20, zipFile_tFileArchive_20);
    zip_tFileArchive_20.setOverwriteExistTargetZip(true);
	zip_tFileArchive_20.setMakeTargetDir(true);
	zip_tFileArchive_20.setCompressLevel(9);
	zip_tFileArchive_20.setArchiveFormat("gzip");
	zip_tFileArchive_20.setAllFiles(true);
	
	
		zip_tFileArchive_20.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_20_ARCHIVE_FILEPATH",zipFile_tFileArchive_20);
   
   globalMap.put("tFileArchive_20_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_20).getName());

   zip_tFileArchive_20.doZip();


 


	tos_count_tFileArchive_20++;

/**
 * [tFileArchive_20 main ] stop
 */
	
	/**
	 * [tFileArchive_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_20";

	

 



/**
 * [tFileArchive_20 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_20";

	

 



/**
 * [tFileArchive_20 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_20 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_20";

	

 

ok_Hash.put("tFileArchive_20", true);
end_Hash.put("tFileArchive_20", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk157", 0, "ok");
				}
				tS3Put_20Process(globalMap);



/**
 * [tFileArchive_20 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_20 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_20";

	

 



/**
 * [tFileArchive_20 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_20_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_20", false);
		start_Hash.put("tS3Put_20", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_20";

	
		int tos_count_tS3Put_20 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_20 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_20 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__application__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__application__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_20 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_20 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_20 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_20 = context.staging_S3_dir + "noodlecrm__application__history.json.gz";
	
	boolean useStream_tS3Put_20 = false;
	java.io.InputStream uploadStream_tS3Put_20 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_20 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_20 instanceof String){
		    useStream_tS3Put_20 = false;
		}else if(fileOrStream_tS3Put_20 instanceof java.io.InputStream){
		    useStream_tS3Put_20 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_20 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_20) {
				java.io.File inputFile_tS3Put_20 = new java.io.File((String)fileOrStream_tS3Put_20);
				
				long multipart_upload_threshold_tS3Put_20 = 5 * 1024 * 1024;
				
    		tm_tS3Put_20 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_20)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_20)
    			.withS3Client(conn_tS3Put_20)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_20 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_20, inputFile_tS3Put_20).withMetadata(objectMetadata_tS3Put_20);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_20 = tm_tS3Put_20.upload(putRequest_tS3Put_20);
  		
  			upload_tS3Put_20.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_20 = ((java.io.InputStream)fileOrStream_tS3Put_20);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_20 = new S3StreamUtil();
    		byte[] buffer_tS3Put_20 = new byte[partSizeInBytes_tS3Put_20];
    		sourceStream_tS3Put_20.read(buffer_tS3Put_20);
    		long curPartSize_tS3Put_20 = streamUtil_tS3Put_20.getLength(buffer_tS3Put_20);
    		boolean multiUpload_tS3Put_20 = curPartSize_tS3Put_20 == partSizeInBytes_tS3Put_20;
    		
    		if(!multiUpload_tS3Put_20) {
    				objectMetadata_tS3Put_20.setContentLength(curPartSize_tS3Put_20);
    				uploadStream_tS3Put_20 = new java.io.ByteArrayInputStream(buffer_tS3Put_20,0,Long.valueOf(curPartSize_tS3Put_20).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_20 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_20, uploadStream_tS3Put_20, objectMetadata_tS3Put_20);
			
    				
    				

    				
    				conn_tS3Put_20.putObject(putRequest_tS3Put_20);
    		} else {
    				uploadStream_tS3Put_20 = new java.io.ByteArrayInputStream(buffer_tS3Put_20);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_20 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_20 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_20, objectMetadata_tS3Put_20);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_20 = conn_tS3Put_20.initiateMultipartUpload(putRequest_tS3Put_20);
      			String uploadId_tS3Put_20 = initResponse_tS3Put_20.getUploadId();
      			int partNumber_tS3Put_20 = 1;
      			boolean streamHasNext_tS3Put_20 = true;
      			byte[] probeAvailability_tS3Put_20 = new byte[1];
				try {
					while (streamHasNext_tS3Put_20) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_20 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_20)
						.withUploadId(uploadId_tS3Put_20)
                    	.withPartNumber(partNumber_tS3Put_20)
						.withPartSize(curPartSize_tS3Put_20);
            		    uploadRequest_tS3Put_20.setInputStream(uploadStream_tS3Put_20);
            		    streamHasNext_tS3Put_20 = sourceStream_tS3Put_20.read(probeAvailability_tS3Put_20) != -1;
            		    if(!streamHasNext_tS3Put_20){
                    	    uploadRequest_tS3Put_20.setLastPart(true);
                    	}

                		partTags_tS3Put_20.add(conn_tS3Put_20.uploadPart(uploadRequest_tS3Put_20).getPartETag());
                  	    partNumber_tS3Put_20++;

          		     	if(uploadStream_tS3Put_20!=null){
      		         			uploadStream_tS3Put_20.close();
          		     	}
          		     	buffer_tS3Put_20 = new byte[partSizeInBytes_tS3Put_20];
          		     	sourceStream_tS3Put_20.read(buffer_tS3Put_20,1,partSizeInBytes_tS3Put_20-1);
          		     	buffer_tS3Put_20[0] = probeAvailability_tS3Put_20[0];
          		     	probeAvailability_tS3Put_20 = new byte[1];
          		     	curPartSize_tS3Put_20 = streamUtil_tS3Put_20.getLength(buffer_tS3Put_20);
          		     	uploadStream_tS3Put_20 = new java.io.ByteArrayInputStream(buffer_tS3Put_20);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_20 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_20,
                        uploadId_tS3Put_20, partTags_tS3Put_20);
            		conn_tS3Put_20.completeMultipartUpload(compRequest_tS3Put_20);
            } catch (java.lang.Exception uploadException_tS3Put_20) {
  							conn_tS3Put_20.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_20, uploadId_tS3Put_20));
    						throw uploadException_tS3Put_20;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_20){
		
			throw(e_tS3Put_20);
		
	}finally{
		if(useStream_tS3Put_20 && uploadStream_tS3Put_20!=null){
    	uploadStream_tS3Put_20.close();
    }
    
    if(tm_tS3Put_20 != null){
        tm_tS3Put_20.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_20 begin ] stop
 */
	
	/**
	 * [tS3Put_20 main ] start
	 */

	

	
	
	currentComponent="tS3Put_20";

	

 


	tos_count_tS3Put_20++;

/**
 * [tS3Put_20 main ] stop
 */
	
	/**
	 * [tS3Put_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_20";

	

 



/**
 * [tS3Put_20 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_20";

	

 



/**
 * [tS3Put_20 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_20 end ] start
	 */

	

	
	
	currentComponent="tS3Put_20";

	

 

ok_Hash.put("tS3Put_20", true);
end_Hash.put("tS3Put_20", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk158", 0, "ok");
				}
				tJava_54Process(globalMap);



/**
 * [tS3Put_20 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_20 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_20";

	

 



/**
 * [tS3Put_20 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_20_SUBPROCESS_STATE", 1);
	}
	

public void tJava_54Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_54_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_54 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_54", false);
		start_Hash.put("tJava_54", System.currentTimeMillis());
		
	
	currentComponent="tJava_54";

	
		int tos_count_tJava_54 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_20_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_20_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_54 begin ] stop
 */
	
	/**
	 * [tJava_54 main ] start
	 */

	

	
	
	currentComponent="tJava_54";

	

 


	tos_count_tJava_54++;

/**
 * [tJava_54 main ] stop
 */
	
	/**
	 * [tJava_54 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_54";

	

 



/**
 * [tJava_54 process_data_begin ] stop
 */
	
	/**
	 * [tJava_54 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_54";

	

 



/**
 * [tJava_54 process_data_end ] stop
 */
	
	/**
	 * [tJava_54 end ] start
	 */

	

	
	
	currentComponent="tJava_54";

	

 

ok_Hash.put("tJava_54", true);
end_Hash.put("tJava_54", System.currentTimeMillis());




/**
 * [tJava_54 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_54 finally ] start
	 */

	

	
	
	currentComponent="tJava_54";

	

 



/**
 * [tJava_54 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_54_SUBPROCESS_STATE", 1);
	}
	


public static class out19Struct implements routines.system.IPersistableRow<out19Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row39Struct row39 = new row39Struct();
out19Struct out19 = new out19Struct();





	
	/**
	 * [tWriteJSONField_19_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_19_Out", false);
		start_Hash.put("tWriteJSONField_19_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_19";
	
	currentComponent="tWriteJSONField_19_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out19");
					}
				
		int tos_count_tWriteJSONField_19_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_19_Out = 0;
				boolean needRoot_tWriteJSONField_19_Out  = true;
				
				String  strCompCache_tWriteJSONField_19_Out= null;		
				
						        java.util.Queue<row38Struct> listGroupby_tWriteJSONField_19_Out = new java.util.concurrent.ConcurrentLinkedQueue<row38Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_19_Out extends Thread {
						
									    java.util.Queue<row38Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_19_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_19_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_19_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_19_In", queue);
							globalMap.put("flows_tWriteJSONField_19_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_19_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_19_Out txf_tWriteJSONField_19_Out = new ThreadXMLField_tWriteJSONField_19_Out(listGroupby_tWriteJSONField_19_Out);
					
					txf_tWriteJSONField_19_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_19_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_19_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_19_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_19_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_19_Out nestXMLTool_tWriteJSONField_19_Out = new NestXMLTool_tWriteJSONField_19_Out();

out19Struct  rowStructOutput_tWriteJSONField_19_Out = new out19Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_19_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_19_Out = null;
org.dom4j.Document doc_tWriteJSONField_19_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_19_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_19_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_19_Out.setTrimText(false);
format_tWriteJSONField_19_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_19_Out = new int[1];

 



/**
 * [tWriteJSONField_19_Out begin ] stop
 */



	
	/**
	 * [tMap_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_19", false);
		start_Hash.put("tMap_19", System.currentTimeMillis());
		
	
	currentComponent="tMap_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tMap_19 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_19__Struct  {
}
Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
// ###############################

// ###############################
// # Outputs initialization
out19Struct out19_tmp = new out19Struct();
// ###############################

        
        



        









 



/**
 * [tMap_19 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_19", false);
		start_Hash.put("tSalesforceInput_19", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_19";

	
		int tos_count_tSalesforceInput_19 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_19 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_19 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_19.createRuntimeProperties();
 		                    props_tSalesforceInput_19.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_19.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_19.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_19.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_19.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_19.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_19.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_19.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_19.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_19.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_19.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_19.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_19.module.setValue("moduleName",
 		                    "hed__Term__History");
 		                    
 		                    props_tSalesforceInput_19.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_19.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_19.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_19.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_19.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_19_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"hed__Term__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"hed__Term__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_19_1_fisrt sst_tSalesforceInput_19_1_fisrt = new SchemaSettingTool_tSalesforceInput_19_1_fisrt();
 		                    
 		                    props_tSalesforceInput_19.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_19_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_19.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_19 = props_tSalesforceInput_19.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_19 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_19 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_19 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_19.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_19);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_19.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_19 = props_tSalesforceInput_19.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_19 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_19 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_19 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_19.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_19);
        }
    }
globalMap.put("tSalesforceInput_19_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_19);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_19= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_19_MAPPINGS_URL", mappings_url_tSalesforceInput_19);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_19 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_19";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_19 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_19 = null;
topology_tSalesforceInput_19 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_19 = def_tSalesforceInput_19.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_19, topology_tSalesforceInput_19);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_19 = def_tSalesforceInput_19.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_19 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_19.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_19 = componentRuntime_tSalesforceInput_19.initialize(container_tSalesforceInput_19, props_tSalesforceInput_19);

if (initVr_tSalesforceInput_19.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_19.getMessage());
}

if(componentRuntime_tSalesforceInput_19 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_19 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_19;
	compDriverInitialization_tSalesforceInput_19.runAtDriver(container_tSalesforceInput_19);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_19 = null;
if(componentRuntime_tSalesforceInput_19 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_19 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_19;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_19 = sourceOrSink_tSalesforceInput_19.validate(container_tSalesforceInput_19);
	if (vr_tSalesforceInput_19.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_19.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_19 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_19;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_19 =
            source_tSalesforceInput_19.createReader(container_tSalesforceInput_19);
	reader_tSalesforceInput_19 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_19, container_tSalesforceInput_19);

        boolean multi_output_is_allowed_tSalesforceInput_19 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_19 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_19.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_19 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_19 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_19 = props_tSalesforceInput_19.getSchema(c_tSalesforceInput_19, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_19 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_19, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_19 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_19 = reader_tSalesforceInput_19.start();

    resourceMap.put("reader_tSalesforceInput_19", reader_tSalesforceInput_19);

    for (; available_tSalesforceInput_19; available_tSalesforceInput_19 = reader_tSalesforceInput_19.advance()) {
    	nb_line_tSalesforceInput_19++;

    	
        if (multi_output_is_allowed_tSalesforceInput_19) {
                row39 = null;

        }

        try {
            Object data_tSalesforceInput_19 = reader_tSalesforceInput_19.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_19) {
                    row39 = new row39Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_19 == null) {
            factory_tSalesforceInput_19 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_19.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_19.setWrapped(factory_tSalesforceInput_19.convertToAvro(data_tSalesforceInput_19));
                Object columnValue_0_tSalesforceInput_19 = outgoingEnforcer_tSalesforceInput_19.get(0);
                        row39.Id = (String) (columnValue_0_tSalesforceInput_19);
                Object columnValue_1_tSalesforceInput_19 = outgoingEnforcer_tSalesforceInput_19.get(1);
                    if (columnValue_1_tSalesforceInput_19 == null) {
                        row39.IsDeleted = false;
                    } else {
                            row39.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_19);
                    }
                Object columnValue_2_tSalesforceInput_19 = outgoingEnforcer_tSalesforceInput_19.get(2);
                        row39.ParentId = (String) (columnValue_2_tSalesforceInput_19);
                Object columnValue_3_tSalesforceInput_19 = outgoingEnforcer_tSalesforceInput_19.get(3);
                        row39.CreatedById = (String) (columnValue_3_tSalesforceInput_19);
                Object columnValue_4_tSalesforceInput_19 = outgoingEnforcer_tSalesforceInput_19.get(4);
                        row39.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_19);
                Object columnValue_5_tSalesforceInput_19 = outgoingEnforcer_tSalesforceInput_19.get(5);
                        row39.Field = (String) (columnValue_5_tSalesforceInput_19);
                Object columnValue_6_tSalesforceInput_19 = outgoingEnforcer_tSalesforceInput_19.get(6);
                        row39.OldValue = (String) (columnValue_6_tSalesforceInput_19);
                Object columnValue_7_tSalesforceInput_19 = outgoingEnforcer_tSalesforceInput_19.get(7);
                        row39.NewValue = (String) (columnValue_7_tSalesforceInput_19);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_19) {
        	java.util.Map<String,Object> info_tSalesforceInput_19 = e_tSalesforceInput_19.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_19 = null;
            	if(info_tSalesforceInput_19.containsKey("error")){
            		errorMessage_tSalesforceInput_19 = info_tSalesforceInput_19.get("error");
        		}else if(info_tSalesforceInput_19.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_19 = info_tSalesforceInput_19.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_19 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_19 = "Row "+ nb_line_tSalesforceInput_19 + ": "+errorMessage_tSalesforceInput_19;
    			System.err.println(errorMessage_tSalesforceInput_19);
            	// If the record is reject, the main line record should put NULL
            	row39 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_19 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_19 = null;


 



/**
 * [tSalesforceInput_19 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_19 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_19";

	


 


	tos_count_tSalesforceInput_19++;

/**
 * [tSalesforceInput_19 main ] stop
 */
	
	/**
	 * [tSalesforceInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_19";

	


 



/**
 * [tSalesforceInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tMap_19 main ] start
	 */

	

	
	
	currentComponent="tMap_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row39");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_19 = false;
		  boolean mainRowRejected_tMap_19 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
        // ###############################
        // # Output tables

out19 = null;


// # Output table : 'out19'
out19_tmp.Id = row39.Id ;
out19_tmp.IsDeleted = row39.IsDeleted ;
out19_tmp.ParentId = row39.ParentId ;
out19_tmp.CreatedById = row39.CreatedById ;
out19_tmp.CreatedDate = (row39.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row39.CreatedDate))).getTime())/1000 ;
out19_tmp.Field = row39.Field ;
out19_tmp.OldValue = row39.OldValue ;
out19_tmp.NewValue = row39.NewValue ;
out19 = out19_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_19 = false;










 


	tos_count_tMap_19++;

/**
 * [tMap_19 main ] stop
 */
	
	/**
	 * [tMap_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 process_data_begin ] stop
 */
// Start of branch "out19"
if(out19 != null) { 



	
	/**
	 * [tWriteJSONField_19_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_19";
	
	currentComponent="tWriteJSONField_19_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out19");
					}
					

	if(txf_tWriteJSONField_19_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_19_Out.getCurrentComponent();
		throw txf_tWriteJSONField_19_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_19_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_19_Out.getLastError();
	}
	nb_line_tWriteJSONField_19_Out++;
	valueMap_tWriteJSONField_19_Out.clear();
	arraysValueMap_tWriteJSONField_19_Out.clear();
	valueMap_tWriteJSONField_19_Out.put("Id",
	(
            out19.Id.toString()
		));
	arraysValueMap_tWriteJSONField_19_Out.put("Id",
	(
            out19.Id.toString()
		));
	valueMap_tWriteJSONField_19_Out.put("IsDeleted",
	(
            String.valueOf(out19.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_19_Out.put("IsDeleted",
	(
            String.valueOf(out19.IsDeleted)
		));
	valueMap_tWriteJSONField_19_Out.put("ParentId",
	(
            out19.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_19_Out.put("ParentId",
	(
            out19.ParentId.toString()
		));
	valueMap_tWriteJSONField_19_Out.put("CreatedById",
	(
            out19.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_19_Out.put("CreatedById",
	(
            out19.CreatedById.toString()
		));
	valueMap_tWriteJSONField_19_Out.put("CreatedDate",
	(
            String.valueOf(out19.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_19_Out.put("CreatedDate",
	(
            String.valueOf(out19.CreatedDate)
		));
	valueMap_tWriteJSONField_19_Out.put("Field",
	(
            out19.Field.toString()
		));
	arraysValueMap_tWriteJSONField_19_Out.put("Field",
	(
            out19.Field.toString()
		));
	valueMap_tWriteJSONField_19_Out.put("OldValue",
	(
		out19.OldValue != null?
            out19.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_19_Out.put("OldValue",
	(
		out19.OldValue != null?
            out19.OldValue.toString():null
		));
	valueMap_tWriteJSONField_19_Out.put("NewValue",
	(
		out19.NewValue != null?
            out19.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_19_Out.put("NewValue",
	(
		out19.NewValue != null?
            out19.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_19_Out = "";
	if(strCompCache_tWriteJSONField_19_Out==null){
		strCompCache_tWriteJSONField_19_Out=strTemp_tWriteJSONField_19_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_19_Out.replaceDefaultNameSpace(doc_tWriteJSONField_19_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_19_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_19_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_19_Out, format_tWriteJSONField_19_Out);
			output_tWriteJSONField_19_Out.write(doc_tWriteJSONField_19_Out);
		    output_tWriteJSONField_19_Out.close();
			
				  		  row38Struct row_tWriteJSONField_19_Out = new row38Struct();
						  
					     		row_tWriteJSONField_19_Out.data = strWriter_tWriteJSONField_19_Out.toString();
					     		listGroupby_tWriteJSONField_19_Out.add(row_tWriteJSONField_19_Out);
					
		    doc_tWriteJSONField_19_Out.clearContent();
			needRoot_tWriteJSONField_19_Out = true;
			for(int i_tWriteJSONField_19_Out=0;i_tWriteJSONField_19_Out<orders_tWriteJSONField_19_Out.length;i_tWriteJSONField_19_Out++){
				orders_tWriteJSONField_19_Out[i_tWriteJSONField_19_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_19_Out != null && groupbyList_tWriteJSONField_19_Out.size() >= 0){
				groupbyList_tWriteJSONField_19_Out.clear();
			}
			strCompCache_tWriteJSONField_19_Out=strTemp_tWriteJSONField_19_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_19_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_19_Out) {
		needRoot_tWriteJSONField_19_Out=false;
		org.dom4j.Element root_tWriteJSONField_19_Out = doc_tWriteJSONField_19_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_19_Out = root_tWriteJSONField_19_Out;
		org.dom4j.Element root_0_tWriteJSONField_19_Out = root_tWriteJSONField_19_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_19_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_19_Out .setText(root_0_tWriteJSONField_19_Out,
		valueMap_tWriteJSONField_19_Out.get("IsDeleted"));
            root_0_tWriteJSONField_19_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_19_Out .setText(root_0_tWriteJSONField_19_Out,"null");
			root_0_tWriteJSONField_19_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_19_Out = root_tWriteJSONField_19_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_19_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_19_Out .setText(root_1_tWriteJSONField_19_Out,
		valueMap_tWriteJSONField_19_Out.get("ParentId"));
			root_1_tWriteJSONField_19_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_19_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_19_Out .setText(root_1_tWriteJSONField_19_Out,"null");
			root_1_tWriteJSONField_19_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_19_Out = root_tWriteJSONField_19_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_19_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_19_Out .setText(root_2_tWriteJSONField_19_Out,
		valueMap_tWriteJSONField_19_Out.get("CreatedById"));
			root_2_tWriteJSONField_19_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_19_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_19_Out .setText(root_2_tWriteJSONField_19_Out,"null");
			root_2_tWriteJSONField_19_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_19_Out = root_tWriteJSONField_19_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_19_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_19_Out .setText(root_3_tWriteJSONField_19_Out,
		valueMap_tWriteJSONField_19_Out.get("CreatedDate"));
            root_3_tWriteJSONField_19_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_19_Out .setText(root_3_tWriteJSONField_19_Out,"null");
			root_3_tWriteJSONField_19_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_19_Out = root_tWriteJSONField_19_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_19_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_19_Out .setText(root_4_tWriteJSONField_19_Out,
		valueMap_tWriteJSONField_19_Out.get("Field"));
			root_4_tWriteJSONField_19_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_19_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_19_Out .setText(root_4_tWriteJSONField_19_Out,"null");
			root_4_tWriteJSONField_19_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_19_Out = root_tWriteJSONField_19_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_19_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_19_Out .setText(root_5_tWriteJSONField_19_Out,
		valueMap_tWriteJSONField_19_Out.get("OldValue"));
			root_5_tWriteJSONField_19_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_19_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_19_Out .setText(root_5_tWriteJSONField_19_Out,"null");
			root_5_tWriteJSONField_19_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_19_Out = root_tWriteJSONField_19_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_19_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_19_Out .setText(root_6_tWriteJSONField_19_Out,
		valueMap_tWriteJSONField_19_Out.get("NewValue"));
			root_6_tWriteJSONField_19_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_19_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_19_Out .setText(root_6_tWriteJSONField_19_Out,"null");
			root_6_tWriteJSONField_19_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_19_Out = subTreeRootParent_tWriteJSONField_19_Out;
	}else{
		subTreeRootParent_tWriteJSONField_19_Out=root4Group_tWriteJSONField_19_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_19_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_19_Out[0]==0){
        	orders_tWriteJSONField_19_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_19_Out.length){
        		orders_tWriteJSONField_19_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_19_Out.elements().add(orders_tWriteJSONField_19_Out[0]++,loop_tWriteJSONField_19_Out);
		if(
		valueMap_tWriteJSONField_19_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_19_Out .setText(loop_tWriteJSONField_19_Out,
		valueMap_tWriteJSONField_19_Out.get("Id"));
			loop_tWriteJSONField_19_Out.addAttribute("type", "string");
			loop_tWriteJSONField_19_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_19_Out .setText(loop_tWriteJSONField_19_Out,"null");
			loop_tWriteJSONField_19_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_19_Out++;

/**
 * [tWriteJSONField_19_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_19_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_19";
	
	currentComponent="tWriteJSONField_19_Out";

	

 



/**
 * [tWriteJSONField_19_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_19_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_19";
	
	currentComponent="tWriteJSONField_19_Out";

	

 



/**
 * [tWriteJSONField_19_Out process_data_end ] stop
 */

} // End of branch "out19"




	
	/**
	 * [tMap_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_19";

	


 



/**
 * [tSalesforceInput_19 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_19 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_19";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_19", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_19.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_19 = reader_tSalesforceInput_19.getReturnValues();
if(resultMap_tSalesforceInput_19!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_19 : resultMap_tSalesforceInput_19.entrySet()) {
		switch(entry_tSalesforceInput_19.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_19.setComponentData("tSalesforceInput_19", "ERROR_MESSAGE", entry_tSalesforceInput_19.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_19.setComponentData("tSalesforceInput_19", "NB_LINE", entry_tSalesforceInput_19.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_19.setComponentData("tSalesforceInput_19", "NB_SUCCESS", entry_tSalesforceInput_19.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_19.setComponentData("tSalesforceInput_19", "NB_REJECT", entry_tSalesforceInput_19.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_19 = new StringBuilder();
            for (int i_tSalesforceInput_19 = 0; i_tSalesforceInput_19 < entry_tSalesforceInput_19.getKey().length(); i_tSalesforceInput_19++) {
                char ch_tSalesforceInput_19 = entry_tSalesforceInput_19.getKey().charAt(i_tSalesforceInput_19);
                if(Character.isUpperCase(ch_tSalesforceInput_19) && i_tSalesforceInput_19> 0) {
                	studio_key_tSalesforceInput_19.append('_');
                }
                studio_key_tSalesforceInput_19.append(ch_tSalesforceInput_19);
            }
			container_tSalesforceInput_19.setComponentData("tSalesforceInput_19", studio_key_tSalesforceInput_19.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_19.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_19", true);
end_Hash.put("tSalesforceInput_19", System.currentTimeMillis());




/**
 * [tSalesforceInput_19 end ] stop
 */

	
	/**
	 * [tMap_19 end ] start
	 */

	

	
	
	currentComponent="tMap_19";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tMap_19", true);
end_Hash.put("tMap_19", System.currentTimeMillis());




/**
 * [tMap_19 end ] stop
 */

	
	/**
	 * [tWriteJSONField_19_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_19";
	
	currentComponent="tWriteJSONField_19_Out";

	

if(nb_line_tWriteJSONField_19_Out > 0){  
    nestXMLTool_tWriteJSONField_19_Out.replaceDefaultNameSpace(doc_tWriteJSONField_19_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_19_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_19_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_19_Out, format_tWriteJSONField_19_Out);
	output_tWriteJSONField_19_Out.write(doc_tWriteJSONField_19_Out);
    output_tWriteJSONField_19_Out.close();
					row38Struct row_tWriteJSONField_19_Out = new row38Struct();
						  
					     		row_tWriteJSONField_19_Out.data = strWriter_tWriteJSONField_19_Out.toString();
					     		listGroupby_tWriteJSONField_19_Out.add(row_tWriteJSONField_19_Out);
		    		

}
globalMap.put("tWriteJSONField_19_Out_NB_LINE",nb_line_tWriteJSONField_19_Out);
globalMap.put("tWriteJSONField_19_In_FINISH" + (listGroupby_tWriteJSONField_19_Out==null?"":listGroupby_tWriteJSONField_19_Out.hashCode()), "true");
	
		txf_tWriteJSONField_19_Out.join();
		
		if(txf_tWriteJSONField_19_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_19_Out.getCurrentComponent();
			throw txf_tWriteJSONField_19_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_19_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_19_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_19_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out19");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_19_Out", true);
end_Hash.put("tWriteJSONField_19_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_19_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_19 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_19";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_19")==null){
    if(resourceMap.get("reader_tSalesforceInput_19")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_19")).close();
		} catch (java.io.IOException e_tSalesforceInput_19) {
			String errorMessage_tSalesforceInput_19 = "failed to release the resource in tSalesforceInput_19 :" + e_tSalesforceInput_19.getMessage();
			System.err.println(errorMessage_tSalesforceInput_19);
		}
	}
}
 



/**
 * [tSalesforceInput_19 finally ] stop
 */

	
	/**
	 * [tMap_19 finally ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_19_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_19";
	
	currentComponent="tWriteJSONField_19_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_19_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_19_In");
		if(resourceMap.get("finish_tWriteJSONField_19_Out") == null){
			globalMap.put("tWriteJSONField_19_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_19_Out==null?"":listGroupby_tWriteJSONField_19_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_19_Out != null) {
		globalMap.put("tWriteJSONField_19_In_FINISH" + (listGroupby_tWriteJSONField_19_Out==null?"":listGroupby_tWriteJSONField_19_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_19_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_19_SUBPROCESS_STATE", 1);
	}
	

public void tDie_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_19", false);
		start_Hash.put("tDie_19", System.currentTimeMillis());
		
	
	currentComponent="tDie_19";

	
		int tos_count_tDie_19 = 0;
		

 



/**
 * [tDie_19 begin ] stop
 */
	
	/**
	 * [tDie_19 main ] start
	 */

	

	
	
	currentComponent="tDie_19";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_19", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_19_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_19_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_19_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_19) {
		logIgnoredError(String.format("tDie_19 - tDie failed to log message due to internal error: %s", e_tDie_19), e_tDie_19);
	}
	
	currentComponent = "tDie_19";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_19_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_19++;

/**
 * [tDie_19 main ] stop
 */
	
	/**
	 * [tDie_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_19";

	

 



/**
 * [tDie_19 process_data_begin ] stop
 */
	
	/**
	 * [tDie_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_19";

	

 



/**
 * [tDie_19 process_data_end ] stop
 */
	
	/**
	 * [tDie_19 end ] start
	 */

	

	
	
	currentComponent="tDie_19";

	

 

ok_Hash.put("tDie_19", true);
end_Hash.put("tDie_19", System.currentTimeMillis());




/**
 * [tDie_19 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_19 finally ] start
	 */

	

	
	
	currentComponent="tDie_19";

	

 



/**
 * [tDie_19 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_19_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_19", false);
		start_Hash.put("tFileArchive_19", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_19";

	
		int tos_count_tFileArchive_19 = 0;
		

 



/**
 * [tFileArchive_19 begin ] stop
 */
	
	/**
	 * [tFileArchive_19 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_19";

	

	

		String sourceFile_tFileArchive_19 = context.staging_S3_dir + "hed__term__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_19), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_19 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_19 = context.staging_S3_dir + "hed__term__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_19 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_19, zipFile_tFileArchive_19);
    zip_tFileArchive_19.setOverwriteExistTargetZip(true);
	zip_tFileArchive_19.setMakeTargetDir(true);
	zip_tFileArchive_19.setCompressLevel(9);
	zip_tFileArchive_19.setArchiveFormat("gzip");
	zip_tFileArchive_19.setAllFiles(true);
	
	
		zip_tFileArchive_19.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_19_ARCHIVE_FILEPATH",zipFile_tFileArchive_19);
   
   globalMap.put("tFileArchive_19_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_19).getName());

   zip_tFileArchive_19.doZip();


 


	tos_count_tFileArchive_19++;

/**
 * [tFileArchive_19 main ] stop
 */
	
	/**
	 * [tFileArchive_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_19";

	

 



/**
 * [tFileArchive_19 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_19";

	

 



/**
 * [tFileArchive_19 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_19 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_19";

	

 

ok_Hash.put("tFileArchive_19", true);
end_Hash.put("tFileArchive_19", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk153", 0, "ok");
				}
				tS3Put_19Process(globalMap);



/**
 * [tFileArchive_19 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_19 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_19";

	

 



/**
 * [tFileArchive_19 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_19_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_19", false);
		start_Hash.put("tS3Put_19", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_19";

	
		int tos_count_tS3Put_19 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_19 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_19 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/hed__term__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/hed__term__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_19 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_19 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_19 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_19 = context.staging_S3_dir + "hed__term__history.json.gz";
	
	boolean useStream_tS3Put_19 = false;
	java.io.InputStream uploadStream_tS3Put_19 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_19 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_19 instanceof String){
		    useStream_tS3Put_19 = false;
		}else if(fileOrStream_tS3Put_19 instanceof java.io.InputStream){
		    useStream_tS3Put_19 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_19 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_19) {
				java.io.File inputFile_tS3Put_19 = new java.io.File((String)fileOrStream_tS3Put_19);
				
				long multipart_upload_threshold_tS3Put_19 = 5 * 1024 * 1024;
				
    		tm_tS3Put_19 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_19)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_19)
    			.withS3Client(conn_tS3Put_19)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_19 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_19, inputFile_tS3Put_19).withMetadata(objectMetadata_tS3Put_19);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_19 = tm_tS3Put_19.upload(putRequest_tS3Put_19);
  		
  			upload_tS3Put_19.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_19 = ((java.io.InputStream)fileOrStream_tS3Put_19);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_19 = new S3StreamUtil();
    		byte[] buffer_tS3Put_19 = new byte[partSizeInBytes_tS3Put_19];
    		sourceStream_tS3Put_19.read(buffer_tS3Put_19);
    		long curPartSize_tS3Put_19 = streamUtil_tS3Put_19.getLength(buffer_tS3Put_19);
    		boolean multiUpload_tS3Put_19 = curPartSize_tS3Put_19 == partSizeInBytes_tS3Put_19;
    		
    		if(!multiUpload_tS3Put_19) {
    				objectMetadata_tS3Put_19.setContentLength(curPartSize_tS3Put_19);
    				uploadStream_tS3Put_19 = new java.io.ByteArrayInputStream(buffer_tS3Put_19,0,Long.valueOf(curPartSize_tS3Put_19).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_19 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_19, uploadStream_tS3Put_19, objectMetadata_tS3Put_19);
			
    				
    				

    				
    				conn_tS3Put_19.putObject(putRequest_tS3Put_19);
    		} else {
    				uploadStream_tS3Put_19 = new java.io.ByteArrayInputStream(buffer_tS3Put_19);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_19 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_19 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_19, objectMetadata_tS3Put_19);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_19 = conn_tS3Put_19.initiateMultipartUpload(putRequest_tS3Put_19);
      			String uploadId_tS3Put_19 = initResponse_tS3Put_19.getUploadId();
      			int partNumber_tS3Put_19 = 1;
      			boolean streamHasNext_tS3Put_19 = true;
      			byte[] probeAvailability_tS3Put_19 = new byte[1];
				try {
					while (streamHasNext_tS3Put_19) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_19 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_19)
						.withUploadId(uploadId_tS3Put_19)
                    	.withPartNumber(partNumber_tS3Put_19)
						.withPartSize(curPartSize_tS3Put_19);
            		    uploadRequest_tS3Put_19.setInputStream(uploadStream_tS3Put_19);
            		    streamHasNext_tS3Put_19 = sourceStream_tS3Put_19.read(probeAvailability_tS3Put_19) != -1;
            		    if(!streamHasNext_tS3Put_19){
                    	    uploadRequest_tS3Put_19.setLastPart(true);
                    	}

                		partTags_tS3Put_19.add(conn_tS3Put_19.uploadPart(uploadRequest_tS3Put_19).getPartETag());
                  	    partNumber_tS3Put_19++;

          		     	if(uploadStream_tS3Put_19!=null){
      		         			uploadStream_tS3Put_19.close();
          		     	}
          		     	buffer_tS3Put_19 = new byte[partSizeInBytes_tS3Put_19];
          		     	sourceStream_tS3Put_19.read(buffer_tS3Put_19,1,partSizeInBytes_tS3Put_19-1);
          		     	buffer_tS3Put_19[0] = probeAvailability_tS3Put_19[0];
          		     	probeAvailability_tS3Put_19 = new byte[1];
          		     	curPartSize_tS3Put_19 = streamUtil_tS3Put_19.getLength(buffer_tS3Put_19);
          		     	uploadStream_tS3Put_19 = new java.io.ByteArrayInputStream(buffer_tS3Put_19);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_19 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_19,
                        uploadId_tS3Put_19, partTags_tS3Put_19);
            		conn_tS3Put_19.completeMultipartUpload(compRequest_tS3Put_19);
            } catch (java.lang.Exception uploadException_tS3Put_19) {
  							conn_tS3Put_19.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_19, uploadId_tS3Put_19));
    						throw uploadException_tS3Put_19;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_19){
		
			throw(e_tS3Put_19);
		
	}finally{
		if(useStream_tS3Put_19 && uploadStream_tS3Put_19!=null){
    	uploadStream_tS3Put_19.close();
    }
    
    if(tm_tS3Put_19 != null){
        tm_tS3Put_19.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_19 begin ] stop
 */
	
	/**
	 * [tS3Put_19 main ] start
	 */

	

	
	
	currentComponent="tS3Put_19";

	

 


	tos_count_tS3Put_19++;

/**
 * [tS3Put_19 main ] stop
 */
	
	/**
	 * [tS3Put_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_19";

	

 



/**
 * [tS3Put_19 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_19";

	

 



/**
 * [tS3Put_19 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_19 end ] start
	 */

	

	
	
	currentComponent="tS3Put_19";

	

 

ok_Hash.put("tS3Put_19", true);
end_Hash.put("tS3Put_19", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk154", 0, "ok");
				}
				tJava_53Process(globalMap);



/**
 * [tS3Put_19 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_19 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_19";

	

 



/**
 * [tS3Put_19 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_19_SUBPROCESS_STATE", 1);
	}
	

public void tJava_53Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_53_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_53 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_53", false);
		start_Hash.put("tJava_53", System.currentTimeMillis());
		
	
	currentComponent="tJava_53";

	
		int tos_count_tJava_53 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_19_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_19_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_53 begin ] stop
 */
	
	/**
	 * [tJava_53 main ] start
	 */

	

	
	
	currentComponent="tJava_53";

	

 


	tos_count_tJava_53++;

/**
 * [tJava_53 main ] stop
 */
	
	/**
	 * [tJava_53 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_53";

	

 



/**
 * [tJava_53 process_data_begin ] stop
 */
	
	/**
	 * [tJava_53 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_53";

	

 



/**
 * [tJava_53 process_data_end ] stop
 */
	
	/**
	 * [tJava_53 end ] start
	 */

	

	
	
	currentComponent="tJava_53";

	

 

ok_Hash.put("tJava_53", true);
end_Hash.put("tJava_53", System.currentTimeMillis());




/**
 * [tJava_53 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_53 finally ] start
	 */

	

	
	
	currentComponent="tJava_53";

	

 



/**
 * [tJava_53 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_53_SUBPROCESS_STATE", 1);
	}
	


public static class out18Struct implements routines.system.IPersistableRow<out18Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row37Struct row37 = new row37Struct();
out18Struct out18 = new out18Struct();





	
	/**
	 * [tWriteJSONField_18_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_18_Out", false);
		start_Hash.put("tWriteJSONField_18_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_18";
	
	currentComponent="tWriteJSONField_18_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out18");
					}
				
		int tos_count_tWriteJSONField_18_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_18_Out = 0;
				boolean needRoot_tWriteJSONField_18_Out  = true;
				
				String  strCompCache_tWriteJSONField_18_Out= null;		
				
						        java.util.Queue<row36Struct> listGroupby_tWriteJSONField_18_Out = new java.util.concurrent.ConcurrentLinkedQueue<row36Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_18_Out extends Thread {
						
									    java.util.Queue<row36Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_18_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_18_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_18_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_18_In", queue);
							globalMap.put("flows_tWriteJSONField_18_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_18_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_18_Out txf_tWriteJSONField_18_Out = new ThreadXMLField_tWriteJSONField_18_Out(listGroupby_tWriteJSONField_18_Out);
					
					txf_tWriteJSONField_18_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_18_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_18_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_18_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_18_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_18_Out nestXMLTool_tWriteJSONField_18_Out = new NestXMLTool_tWriteJSONField_18_Out();

out18Struct  rowStructOutput_tWriteJSONField_18_Out = new out18Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_18_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_18_Out = null;
org.dom4j.Document doc_tWriteJSONField_18_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_18_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_18_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_18_Out.setTrimText(false);
format_tWriteJSONField_18_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_18_Out = new int[1];

 



/**
 * [tWriteJSONField_18_Out begin ] stop
 */



	
	/**
	 * [tMap_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_18", false);
		start_Hash.put("tMap_18", System.currentTimeMillis());
		
	
	currentComponent="tMap_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tMap_18 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_18__Struct  {
}
Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
out18Struct out18_tmp = new out18Struct();
// ###############################

        
        



        









 



/**
 * [tMap_18 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_18", false);
		start_Hash.put("tSalesforceInput_18", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_18";

	
		int tos_count_tSalesforceInput_18 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_18 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_18 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_18.createRuntimeProperties();
 		                    props_tSalesforceInput_18.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_18.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_18.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_18.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_18.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_18.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_18.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_18.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_18.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_18.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_18.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_18.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_18.module.setValue("moduleName",
 		                    "hed__Program_Enrollment__History");
 		                    
 		                    props_tSalesforceInput_18.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_18.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_18.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_18.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_18.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_18_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"hed__Program_Enrollment__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"hed__Program_Enrollment__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_18_1_fisrt sst_tSalesforceInput_18_1_fisrt = new SchemaSettingTool_tSalesforceInput_18_1_fisrt();
 		                    
 		                    props_tSalesforceInput_18.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_18_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_18.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_18 = props_tSalesforceInput_18.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_18 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_18 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_18 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_18.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_18);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_18.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_18 = props_tSalesforceInput_18.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_18 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_18 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_18 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_18.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_18);
        }
    }
globalMap.put("tSalesforceInput_18_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_18);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_18= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_18_MAPPINGS_URL", mappings_url_tSalesforceInput_18);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_18 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_18";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_18 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_18 = null;
topology_tSalesforceInput_18 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_18 = def_tSalesforceInput_18.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_18, topology_tSalesforceInput_18);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_18 = def_tSalesforceInput_18.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_18 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_18.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_18 = componentRuntime_tSalesforceInput_18.initialize(container_tSalesforceInput_18, props_tSalesforceInput_18);

if (initVr_tSalesforceInput_18.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_18.getMessage());
}

if(componentRuntime_tSalesforceInput_18 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_18 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_18;
	compDriverInitialization_tSalesforceInput_18.runAtDriver(container_tSalesforceInput_18);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_18 = null;
if(componentRuntime_tSalesforceInput_18 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_18 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_18;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_18 = sourceOrSink_tSalesforceInput_18.validate(container_tSalesforceInput_18);
	if (vr_tSalesforceInput_18.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_18.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_18 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_18;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_18 =
            source_tSalesforceInput_18.createReader(container_tSalesforceInput_18);
	reader_tSalesforceInput_18 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_18, container_tSalesforceInput_18);

        boolean multi_output_is_allowed_tSalesforceInput_18 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_18 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_18.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_18 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_18 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_18 = props_tSalesforceInput_18.getSchema(c_tSalesforceInput_18, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_18 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_18, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_18 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_18 = reader_tSalesforceInput_18.start();

    resourceMap.put("reader_tSalesforceInput_18", reader_tSalesforceInput_18);

    for (; available_tSalesforceInput_18; available_tSalesforceInput_18 = reader_tSalesforceInput_18.advance()) {
    	nb_line_tSalesforceInput_18++;

    	
        if (multi_output_is_allowed_tSalesforceInput_18) {
                row37 = null;

        }

        try {
            Object data_tSalesforceInput_18 = reader_tSalesforceInput_18.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_18) {
                    row37 = new row37Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_18 == null) {
            factory_tSalesforceInput_18 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_18.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_18.setWrapped(factory_tSalesforceInput_18.convertToAvro(data_tSalesforceInput_18));
                Object columnValue_0_tSalesforceInput_18 = outgoingEnforcer_tSalesforceInput_18.get(0);
                        row37.Id = (String) (columnValue_0_tSalesforceInput_18);
                Object columnValue_1_tSalesforceInput_18 = outgoingEnforcer_tSalesforceInput_18.get(1);
                    if (columnValue_1_tSalesforceInput_18 == null) {
                        row37.IsDeleted = false;
                    } else {
                            row37.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_18);
                    }
                Object columnValue_2_tSalesforceInput_18 = outgoingEnforcer_tSalesforceInput_18.get(2);
                        row37.ParentId = (String) (columnValue_2_tSalesforceInput_18);
                Object columnValue_3_tSalesforceInput_18 = outgoingEnforcer_tSalesforceInput_18.get(3);
                        row37.CreatedById = (String) (columnValue_3_tSalesforceInput_18);
                Object columnValue_4_tSalesforceInput_18 = outgoingEnforcer_tSalesforceInput_18.get(4);
                        row37.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_18);
                Object columnValue_5_tSalesforceInput_18 = outgoingEnforcer_tSalesforceInput_18.get(5);
                        row37.Field = (String) (columnValue_5_tSalesforceInput_18);
                Object columnValue_6_tSalesforceInput_18 = outgoingEnforcer_tSalesforceInput_18.get(6);
                        row37.OldValue = (String) (columnValue_6_tSalesforceInput_18);
                Object columnValue_7_tSalesforceInput_18 = outgoingEnforcer_tSalesforceInput_18.get(7);
                        row37.NewValue = (String) (columnValue_7_tSalesforceInput_18);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_18) {
        	java.util.Map<String,Object> info_tSalesforceInput_18 = e_tSalesforceInput_18.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_18 = null;
            	if(info_tSalesforceInput_18.containsKey("error")){
            		errorMessage_tSalesforceInput_18 = info_tSalesforceInput_18.get("error");
        		}else if(info_tSalesforceInput_18.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_18 = info_tSalesforceInput_18.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_18 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_18 = "Row "+ nb_line_tSalesforceInput_18 + ": "+errorMessage_tSalesforceInput_18;
    			System.err.println(errorMessage_tSalesforceInput_18);
            	// If the record is reject, the main line record should put NULL
            	row37 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_18 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_18 = null;


 



/**
 * [tSalesforceInput_18 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_18 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_18";

	


 


	tos_count_tSalesforceInput_18++;

/**
 * [tSalesforceInput_18 main ] stop
 */
	
	/**
	 * [tSalesforceInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_18";

	


 



/**
 * [tSalesforceInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tMap_18 main ] start
	 */

	

	
	
	currentComponent="tMap_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row37");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_18 = false;
		  boolean mainRowRejected_tMap_18 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
        // ###############################
        // # Output tables

out18 = null;


// # Output table : 'out18'
out18_tmp.Id = row37.Id ;
out18_tmp.IsDeleted = row37.IsDeleted ;
out18_tmp.ParentId = row37.ParentId ;
out18_tmp.CreatedById = row37.CreatedById ;
out18_tmp.CreatedDate = (row37.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row37.CreatedDate))).getTime())/1000 ;
out18_tmp.Field = row37.Field ;
out18_tmp.OldValue = row37.OldValue ;
out18_tmp.NewValue = row37.NewValue ;
out18 = out18_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_18 = false;










 


	tos_count_tMap_18++;

/**
 * [tMap_18 main ] stop
 */
	
	/**
	 * [tMap_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_begin ] stop
 */
// Start of branch "out18"
if(out18 != null) { 



	
	/**
	 * [tWriteJSONField_18_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_18";
	
	currentComponent="tWriteJSONField_18_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out18");
					}
					

	if(txf_tWriteJSONField_18_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_18_Out.getCurrentComponent();
		throw txf_tWriteJSONField_18_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_18_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_18_Out.getLastError();
	}
	nb_line_tWriteJSONField_18_Out++;
	valueMap_tWriteJSONField_18_Out.clear();
	arraysValueMap_tWriteJSONField_18_Out.clear();
	valueMap_tWriteJSONField_18_Out.put("Id",
	(
            out18.Id.toString()
		));
	arraysValueMap_tWriteJSONField_18_Out.put("Id",
	(
            out18.Id.toString()
		));
	valueMap_tWriteJSONField_18_Out.put("IsDeleted",
	(
            String.valueOf(out18.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_18_Out.put("IsDeleted",
	(
            String.valueOf(out18.IsDeleted)
		));
	valueMap_tWriteJSONField_18_Out.put("ParentId",
	(
            out18.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_18_Out.put("ParentId",
	(
            out18.ParentId.toString()
		));
	valueMap_tWriteJSONField_18_Out.put("CreatedById",
	(
            out18.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_18_Out.put("CreatedById",
	(
            out18.CreatedById.toString()
		));
	valueMap_tWriteJSONField_18_Out.put("CreatedDate",
	(
            String.valueOf(out18.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_18_Out.put("CreatedDate",
	(
            String.valueOf(out18.CreatedDate)
		));
	valueMap_tWriteJSONField_18_Out.put("Field",
	(
            out18.Field.toString()
		));
	arraysValueMap_tWriteJSONField_18_Out.put("Field",
	(
            out18.Field.toString()
		));
	valueMap_tWriteJSONField_18_Out.put("OldValue",
	(
		out18.OldValue != null?
            out18.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_18_Out.put("OldValue",
	(
		out18.OldValue != null?
            out18.OldValue.toString():null
		));
	valueMap_tWriteJSONField_18_Out.put("NewValue",
	(
		out18.NewValue != null?
            out18.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_18_Out.put("NewValue",
	(
		out18.NewValue != null?
            out18.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_18_Out = "";
	if(strCompCache_tWriteJSONField_18_Out==null){
		strCompCache_tWriteJSONField_18_Out=strTemp_tWriteJSONField_18_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_18_Out.replaceDefaultNameSpace(doc_tWriteJSONField_18_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_18_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_18_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_18_Out, format_tWriteJSONField_18_Out);
			output_tWriteJSONField_18_Out.write(doc_tWriteJSONField_18_Out);
		    output_tWriteJSONField_18_Out.close();
			
				  		  row36Struct row_tWriteJSONField_18_Out = new row36Struct();
						  
					     		row_tWriteJSONField_18_Out.data = strWriter_tWriteJSONField_18_Out.toString();
					     		listGroupby_tWriteJSONField_18_Out.add(row_tWriteJSONField_18_Out);
					
		    doc_tWriteJSONField_18_Out.clearContent();
			needRoot_tWriteJSONField_18_Out = true;
			for(int i_tWriteJSONField_18_Out=0;i_tWriteJSONField_18_Out<orders_tWriteJSONField_18_Out.length;i_tWriteJSONField_18_Out++){
				orders_tWriteJSONField_18_Out[i_tWriteJSONField_18_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_18_Out != null && groupbyList_tWriteJSONField_18_Out.size() >= 0){
				groupbyList_tWriteJSONField_18_Out.clear();
			}
			strCompCache_tWriteJSONField_18_Out=strTemp_tWriteJSONField_18_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_18_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_18_Out) {
		needRoot_tWriteJSONField_18_Out=false;
		org.dom4j.Element root_tWriteJSONField_18_Out = doc_tWriteJSONField_18_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_18_Out = root_tWriteJSONField_18_Out;
		org.dom4j.Element root_0_tWriteJSONField_18_Out = root_tWriteJSONField_18_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_18_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_18_Out .setText(root_0_tWriteJSONField_18_Out,
		valueMap_tWriteJSONField_18_Out.get("IsDeleted"));
            root_0_tWriteJSONField_18_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_18_Out .setText(root_0_tWriteJSONField_18_Out,"null");
			root_0_tWriteJSONField_18_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_18_Out = root_tWriteJSONField_18_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_18_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_18_Out .setText(root_1_tWriteJSONField_18_Out,
		valueMap_tWriteJSONField_18_Out.get("ParentId"));
			root_1_tWriteJSONField_18_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_18_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_18_Out .setText(root_1_tWriteJSONField_18_Out,"null");
			root_1_tWriteJSONField_18_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_18_Out = root_tWriteJSONField_18_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_18_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_18_Out .setText(root_2_tWriteJSONField_18_Out,
		valueMap_tWriteJSONField_18_Out.get("CreatedById"));
			root_2_tWriteJSONField_18_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_18_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_18_Out .setText(root_2_tWriteJSONField_18_Out,"null");
			root_2_tWriteJSONField_18_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_18_Out = root_tWriteJSONField_18_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_18_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_18_Out .setText(root_3_tWriteJSONField_18_Out,
		valueMap_tWriteJSONField_18_Out.get("CreatedDate"));
            root_3_tWriteJSONField_18_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_18_Out .setText(root_3_tWriteJSONField_18_Out,"null");
			root_3_tWriteJSONField_18_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_18_Out = root_tWriteJSONField_18_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_18_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_18_Out .setText(root_4_tWriteJSONField_18_Out,
		valueMap_tWriteJSONField_18_Out.get("Field"));
			root_4_tWriteJSONField_18_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_18_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_18_Out .setText(root_4_tWriteJSONField_18_Out,"null");
			root_4_tWriteJSONField_18_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_18_Out = root_tWriteJSONField_18_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_18_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_18_Out .setText(root_5_tWriteJSONField_18_Out,
		valueMap_tWriteJSONField_18_Out.get("OldValue"));
			root_5_tWriteJSONField_18_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_18_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_18_Out .setText(root_5_tWriteJSONField_18_Out,"null");
			root_5_tWriteJSONField_18_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_18_Out = root_tWriteJSONField_18_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_18_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_18_Out .setText(root_6_tWriteJSONField_18_Out,
		valueMap_tWriteJSONField_18_Out.get("NewValue"));
			root_6_tWriteJSONField_18_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_18_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_18_Out .setText(root_6_tWriteJSONField_18_Out,"null");
			root_6_tWriteJSONField_18_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_18_Out = subTreeRootParent_tWriteJSONField_18_Out;
	}else{
		subTreeRootParent_tWriteJSONField_18_Out=root4Group_tWriteJSONField_18_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_18_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_18_Out[0]==0){
        	orders_tWriteJSONField_18_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_18_Out.length){
        		orders_tWriteJSONField_18_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_18_Out.elements().add(orders_tWriteJSONField_18_Out[0]++,loop_tWriteJSONField_18_Out);
		if(
		valueMap_tWriteJSONField_18_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_18_Out .setText(loop_tWriteJSONField_18_Out,
		valueMap_tWriteJSONField_18_Out.get("Id"));
			loop_tWriteJSONField_18_Out.addAttribute("type", "string");
			loop_tWriteJSONField_18_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_18_Out .setText(loop_tWriteJSONField_18_Out,"null");
			loop_tWriteJSONField_18_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_18_Out++;

/**
 * [tWriteJSONField_18_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_18_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_18";
	
	currentComponent="tWriteJSONField_18_Out";

	

 



/**
 * [tWriteJSONField_18_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_18_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_18";
	
	currentComponent="tWriteJSONField_18_Out";

	

 



/**
 * [tWriteJSONField_18_Out process_data_end ] stop
 */

} // End of branch "out18"




	
	/**
	 * [tMap_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_18";

	


 



/**
 * [tSalesforceInput_18 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_18 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_18";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_18", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_18.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_18 = reader_tSalesforceInput_18.getReturnValues();
if(resultMap_tSalesforceInput_18!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_18 : resultMap_tSalesforceInput_18.entrySet()) {
		switch(entry_tSalesforceInput_18.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_18.setComponentData("tSalesforceInput_18", "ERROR_MESSAGE", entry_tSalesforceInput_18.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_18.setComponentData("tSalesforceInput_18", "NB_LINE", entry_tSalesforceInput_18.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_18.setComponentData("tSalesforceInput_18", "NB_SUCCESS", entry_tSalesforceInput_18.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_18.setComponentData("tSalesforceInput_18", "NB_REJECT", entry_tSalesforceInput_18.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_18 = new StringBuilder();
            for (int i_tSalesforceInput_18 = 0; i_tSalesforceInput_18 < entry_tSalesforceInput_18.getKey().length(); i_tSalesforceInput_18++) {
                char ch_tSalesforceInput_18 = entry_tSalesforceInput_18.getKey().charAt(i_tSalesforceInput_18);
                if(Character.isUpperCase(ch_tSalesforceInput_18) && i_tSalesforceInput_18> 0) {
                	studio_key_tSalesforceInput_18.append('_');
                }
                studio_key_tSalesforceInput_18.append(ch_tSalesforceInput_18);
            }
			container_tSalesforceInput_18.setComponentData("tSalesforceInput_18", studio_key_tSalesforceInput_18.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_18.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_18", true);
end_Hash.put("tSalesforceInput_18", System.currentTimeMillis());




/**
 * [tSalesforceInput_18 end ] stop
 */

	
	/**
	 * [tMap_18 end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tMap_18", true);
end_Hash.put("tMap_18", System.currentTimeMillis());




/**
 * [tMap_18 end ] stop
 */

	
	/**
	 * [tWriteJSONField_18_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_18";
	
	currentComponent="tWriteJSONField_18_Out";

	

if(nb_line_tWriteJSONField_18_Out > 0){  
    nestXMLTool_tWriteJSONField_18_Out.replaceDefaultNameSpace(doc_tWriteJSONField_18_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_18_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_18_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_18_Out, format_tWriteJSONField_18_Out);
	output_tWriteJSONField_18_Out.write(doc_tWriteJSONField_18_Out);
    output_tWriteJSONField_18_Out.close();
					row36Struct row_tWriteJSONField_18_Out = new row36Struct();
						  
					     		row_tWriteJSONField_18_Out.data = strWriter_tWriteJSONField_18_Out.toString();
					     		listGroupby_tWriteJSONField_18_Out.add(row_tWriteJSONField_18_Out);
		    		

}
globalMap.put("tWriteJSONField_18_Out_NB_LINE",nb_line_tWriteJSONField_18_Out);
globalMap.put("tWriteJSONField_18_In_FINISH" + (listGroupby_tWriteJSONField_18_Out==null?"":listGroupby_tWriteJSONField_18_Out.hashCode()), "true");
	
		txf_tWriteJSONField_18_Out.join();
		
		if(txf_tWriteJSONField_18_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_18_Out.getCurrentComponent();
			throw txf_tWriteJSONField_18_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_18_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_18_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_18_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out18");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_18_Out", true);
end_Hash.put("tWriteJSONField_18_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_18_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_18 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_18";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_18")==null){
    if(resourceMap.get("reader_tSalesforceInput_18")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_18")).close();
		} catch (java.io.IOException e_tSalesforceInput_18) {
			String errorMessage_tSalesforceInput_18 = "failed to release the resource in tSalesforceInput_18 :" + e_tSalesforceInput_18.getMessage();
			System.err.println(errorMessage_tSalesforceInput_18);
		}
	}
}
 



/**
 * [tSalesforceInput_18 finally ] stop
 */

	
	/**
	 * [tMap_18 finally ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_18_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_18";
	
	currentComponent="tWriteJSONField_18_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_18_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_18_In");
		if(resourceMap.get("finish_tWriteJSONField_18_Out") == null){
			globalMap.put("tWriteJSONField_18_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_18_Out==null?"":listGroupby_tWriteJSONField_18_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_18_Out != null) {
		globalMap.put("tWriteJSONField_18_In_FINISH" + (listGroupby_tWriteJSONField_18_Out==null?"":listGroupby_tWriteJSONField_18_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_18_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_18_SUBPROCESS_STATE", 1);
	}
	

public void tDie_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_18", false);
		start_Hash.put("tDie_18", System.currentTimeMillis());
		
	
	currentComponent="tDie_18";

	
		int tos_count_tDie_18 = 0;
		

 



/**
 * [tDie_18 begin ] stop
 */
	
	/**
	 * [tDie_18 main ] start
	 */

	

	
	
	currentComponent="tDie_18";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_18", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_18_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_18_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_18_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_18) {
		logIgnoredError(String.format("tDie_18 - tDie failed to log message due to internal error: %s", e_tDie_18), e_tDie_18);
	}
	
	currentComponent = "tDie_18";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_18_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_18++;

/**
 * [tDie_18 main ] stop
 */
	
	/**
	 * [tDie_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_18";

	

 



/**
 * [tDie_18 process_data_begin ] stop
 */
	
	/**
	 * [tDie_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_18";

	

 



/**
 * [tDie_18 process_data_end ] stop
 */
	
	/**
	 * [tDie_18 end ] start
	 */

	

	
	
	currentComponent="tDie_18";

	

 

ok_Hash.put("tDie_18", true);
end_Hash.put("tDie_18", System.currentTimeMillis());




/**
 * [tDie_18 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_18 finally ] start
	 */

	

	
	
	currentComponent="tDie_18";

	

 



/**
 * [tDie_18 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_18_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_18", false);
		start_Hash.put("tFileArchive_18", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_18";

	
		int tos_count_tFileArchive_18 = 0;
		

 



/**
 * [tFileArchive_18 begin ] stop
 */
	
	/**
	 * [tFileArchive_18 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_18";

	

	

		String sourceFile_tFileArchive_18 = context.staging_S3_dir + "hed__program_enrollment__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_18), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_18 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_18 = context.staging_S3_dir + "hed__program_enrollment__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_18 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_18, zipFile_tFileArchive_18);
    zip_tFileArchive_18.setOverwriteExistTargetZip(true);
	zip_tFileArchive_18.setMakeTargetDir(true);
	zip_tFileArchive_18.setCompressLevel(9);
	zip_tFileArchive_18.setArchiveFormat("gzip");
	zip_tFileArchive_18.setAllFiles(true);
	
	
		zip_tFileArchive_18.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_18_ARCHIVE_FILEPATH",zipFile_tFileArchive_18);
   
   globalMap.put("tFileArchive_18_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_18).getName());

   zip_tFileArchive_18.doZip();


 


	tos_count_tFileArchive_18++;

/**
 * [tFileArchive_18 main ] stop
 */
	
	/**
	 * [tFileArchive_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_18";

	

 



/**
 * [tFileArchive_18 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_18";

	

 



/**
 * [tFileArchive_18 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_18 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_18";

	

 

ok_Hash.put("tFileArchive_18", true);
end_Hash.put("tFileArchive_18", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk149", 0, "ok");
				}
				tS3Put_18Process(globalMap);



/**
 * [tFileArchive_18 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_18 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_18";

	

 



/**
 * [tFileArchive_18 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_18_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_18", false);
		start_Hash.put("tS3Put_18", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_18";

	
		int tos_count_tS3Put_18 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_18 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_18 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/hed__program_enrollment__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/hed__program_enrollment__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_18 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_18 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_18 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_18 = context.staging_S3_dir + "hed__program_enrollment__history.json.gz";
	
	boolean useStream_tS3Put_18 = false;
	java.io.InputStream uploadStream_tS3Put_18 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_18 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_18 instanceof String){
		    useStream_tS3Put_18 = false;
		}else if(fileOrStream_tS3Put_18 instanceof java.io.InputStream){
		    useStream_tS3Put_18 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_18 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_18) {
				java.io.File inputFile_tS3Put_18 = new java.io.File((String)fileOrStream_tS3Put_18);
				
				long multipart_upload_threshold_tS3Put_18 = 5 * 1024 * 1024;
				
    		tm_tS3Put_18 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_18)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_18)
    			.withS3Client(conn_tS3Put_18)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_18 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_18, inputFile_tS3Put_18).withMetadata(objectMetadata_tS3Put_18);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_18 = tm_tS3Put_18.upload(putRequest_tS3Put_18);
  		
  			upload_tS3Put_18.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_18 = ((java.io.InputStream)fileOrStream_tS3Put_18);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_18 = new S3StreamUtil();
    		byte[] buffer_tS3Put_18 = new byte[partSizeInBytes_tS3Put_18];
    		sourceStream_tS3Put_18.read(buffer_tS3Put_18);
    		long curPartSize_tS3Put_18 = streamUtil_tS3Put_18.getLength(buffer_tS3Put_18);
    		boolean multiUpload_tS3Put_18 = curPartSize_tS3Put_18 == partSizeInBytes_tS3Put_18;
    		
    		if(!multiUpload_tS3Put_18) {
    				objectMetadata_tS3Put_18.setContentLength(curPartSize_tS3Put_18);
    				uploadStream_tS3Put_18 = new java.io.ByteArrayInputStream(buffer_tS3Put_18,0,Long.valueOf(curPartSize_tS3Put_18).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_18 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_18, uploadStream_tS3Put_18, objectMetadata_tS3Put_18);
			
    				
    				

    				
    				conn_tS3Put_18.putObject(putRequest_tS3Put_18);
    		} else {
    				uploadStream_tS3Put_18 = new java.io.ByteArrayInputStream(buffer_tS3Put_18);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_18 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_18 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_18, objectMetadata_tS3Put_18);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_18 = conn_tS3Put_18.initiateMultipartUpload(putRequest_tS3Put_18);
      			String uploadId_tS3Put_18 = initResponse_tS3Put_18.getUploadId();
      			int partNumber_tS3Put_18 = 1;
      			boolean streamHasNext_tS3Put_18 = true;
      			byte[] probeAvailability_tS3Put_18 = new byte[1];
				try {
					while (streamHasNext_tS3Put_18) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_18 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_18)
						.withUploadId(uploadId_tS3Put_18)
                    	.withPartNumber(partNumber_tS3Put_18)
						.withPartSize(curPartSize_tS3Put_18);
            		    uploadRequest_tS3Put_18.setInputStream(uploadStream_tS3Put_18);
            		    streamHasNext_tS3Put_18 = sourceStream_tS3Put_18.read(probeAvailability_tS3Put_18) != -1;
            		    if(!streamHasNext_tS3Put_18){
                    	    uploadRequest_tS3Put_18.setLastPart(true);
                    	}

                		partTags_tS3Put_18.add(conn_tS3Put_18.uploadPart(uploadRequest_tS3Put_18).getPartETag());
                  	    partNumber_tS3Put_18++;

          		     	if(uploadStream_tS3Put_18!=null){
      		         			uploadStream_tS3Put_18.close();
          		     	}
          		     	buffer_tS3Put_18 = new byte[partSizeInBytes_tS3Put_18];
          		     	sourceStream_tS3Put_18.read(buffer_tS3Put_18,1,partSizeInBytes_tS3Put_18-1);
          		     	buffer_tS3Put_18[0] = probeAvailability_tS3Put_18[0];
          		     	probeAvailability_tS3Put_18 = new byte[1];
          		     	curPartSize_tS3Put_18 = streamUtil_tS3Put_18.getLength(buffer_tS3Put_18);
          		     	uploadStream_tS3Put_18 = new java.io.ByteArrayInputStream(buffer_tS3Put_18);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_18 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_18,
                        uploadId_tS3Put_18, partTags_tS3Put_18);
            		conn_tS3Put_18.completeMultipartUpload(compRequest_tS3Put_18);
            } catch (java.lang.Exception uploadException_tS3Put_18) {
  							conn_tS3Put_18.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_18, uploadId_tS3Put_18));
    						throw uploadException_tS3Put_18;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_18){
		
			throw(e_tS3Put_18);
		
	}finally{
		if(useStream_tS3Put_18 && uploadStream_tS3Put_18!=null){
    	uploadStream_tS3Put_18.close();
    }
    
    if(tm_tS3Put_18 != null){
        tm_tS3Put_18.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_18 begin ] stop
 */
	
	/**
	 * [tS3Put_18 main ] start
	 */

	

	
	
	currentComponent="tS3Put_18";

	

 


	tos_count_tS3Put_18++;

/**
 * [tS3Put_18 main ] stop
 */
	
	/**
	 * [tS3Put_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_18";

	

 



/**
 * [tS3Put_18 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_18";

	

 



/**
 * [tS3Put_18 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_18 end ] start
	 */

	

	
	
	currentComponent="tS3Put_18";

	

 

ok_Hash.put("tS3Put_18", true);
end_Hash.put("tS3Put_18", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk150", 0, "ok");
				}
				tJava_49Process(globalMap);



/**
 * [tS3Put_18 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_18 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_18";

	

 



/**
 * [tS3Put_18 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_18_SUBPROCESS_STATE", 1);
	}
	

public void tJava_49Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_49_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_49 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_49", false);
		start_Hash.put("tJava_49", System.currentTimeMillis());
		
	
	currentComponent="tJava_49";

	
		int tos_count_tJava_49 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_18_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_18_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_49 begin ] stop
 */
	
	/**
	 * [tJava_49 main ] start
	 */

	

	
	
	currentComponent="tJava_49";

	

 


	tos_count_tJava_49++;

/**
 * [tJava_49 main ] stop
 */
	
	/**
	 * [tJava_49 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_49";

	

 



/**
 * [tJava_49 process_data_begin ] stop
 */
	
	/**
	 * [tJava_49 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_49";

	

 



/**
 * [tJava_49 process_data_end ] stop
 */
	
	/**
	 * [tJava_49 end ] start
	 */

	

	
	
	currentComponent="tJava_49";

	

 

ok_Hash.put("tJava_49", true);
end_Hash.put("tJava_49", System.currentTimeMillis());




/**
 * [tJava_49 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_49 finally ] start
	 */

	

	
	
	currentComponent="tJava_49";

	

 



/**
 * [tJava_49 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_49_SUBPROCESS_STATE", 1);
	}
	


public static class out8Struct implements routines.system.IPersistableRow<out8Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String OpportunityId;

				public String getOpportunityId () {
					return this.OpportunityId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String StageName;

				public String getStageName () {
					return this.StageName;
				}
				
			    public BigDecimal Amount;

				public BigDecimal getAmount () {
					return this.Amount;
				}
				
			    public BigDecimal ExpectedRevenue;

				public BigDecimal getExpectedRevenue () {
					return this.ExpectedRevenue;
				}
				
			    public Long CloseDate;

				public Long getCloseDate () {
					return this.CloseDate;
				}
				
			    public Double Probability;

				public Double getProbability () {
					return this.Probability;
				}
				
			    public String ForecastCategory;

				public String getForecastCategory () {
					return this.ForecastCategory;
				}
				
			    public long SystemModstamp;

				public long getSystemModstamp () {
					return this.SystemModstamp;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
					this.OpportunityId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.StageName = readString(dis);
					
						this.Amount = (BigDecimal) dis.readObject();
					
						this.ExpectedRevenue = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CloseDate = null;
           				} else {
           			    	this.CloseDate = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Probability = null;
           				} else {
           			    	this.Probability = dis.readDouble();
           				}
					
					this.ForecastCategory = readString(dis);
					
			        this.SystemModstamp = dis.readLong();
					
			        this.IsDeleted = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// String
				
						writeString(this.OpportunityId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.StageName,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Amount);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ExpectedRevenue);
					
					// Long
				
						if(this.CloseDate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CloseDate);
		            	}
					
					// Double
				
						if(this.Probability == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.Probability);
		            	}
					
					// String
				
						writeString(this.ForecastCategory,dos);
					
					// long
				
		            	dos.writeLong(this.SystemModstamp);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",OpportunityId="+OpportunityId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",StageName="+StageName);
		sb.append(",Amount="+String.valueOf(Amount));
		sb.append(",ExpectedRevenue="+String.valueOf(ExpectedRevenue));
		sb.append(",CloseDate="+String.valueOf(CloseDate));
		sb.append(",Probability="+String.valueOf(Probability));
		sb.append(",ForecastCategory="+ForecastCategory);
		sb.append(",SystemModstamp="+String.valueOf(SystemModstamp));
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String OpportunityId;

				public String getOpportunityId () {
					return this.OpportunityId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String StageName;

				public String getStageName () {
					return this.StageName;
				}
				
			    public BigDecimal Amount;

				public BigDecimal getAmount () {
					return this.Amount;
				}
				
			    public BigDecimal ExpectedRevenue;

				public BigDecimal getExpectedRevenue () {
					return this.ExpectedRevenue;
				}
				
			    public java.util.Date CloseDate;

				public java.util.Date getCloseDate () {
					return this.CloseDate;
				}
				
			    public Double Probability;

				public Double getProbability () {
					return this.Probability;
				}
				
			    public String ForecastCategory;

				public String getForecastCategory () {
					return this.ForecastCategory;
				}
				
			    public java.util.Date SystemModstamp;

				public java.util.Date getSystemModstamp () {
					return this.SystemModstamp;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
					this.OpportunityId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.StageName = readString(dis);
					
						this.Amount = (BigDecimal) dis.readObject();
					
						this.ExpectedRevenue = (BigDecimal) dis.readObject();
					
					this.CloseDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Probability = null;
           				} else {
           			    	this.Probability = dis.readDouble();
           				}
					
					this.ForecastCategory = readString(dis);
					
					this.SystemModstamp = readDate(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// String
				
						writeString(this.OpportunityId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.StageName,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Amount);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ExpectedRevenue);
					
					// java.util.Date
				
						writeDate(this.CloseDate,dos);
					
					// Double
				
						if(this.Probability == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.Probability);
		            	}
					
					// String
				
						writeString(this.ForecastCategory,dos);
					
					// java.util.Date
				
						writeDate(this.SystemModstamp,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",OpportunityId="+OpportunityId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",StageName="+StageName);
		sb.append(",Amount="+String.valueOf(Amount));
		sb.append(",ExpectedRevenue="+String.valueOf(ExpectedRevenue));
		sb.append(",CloseDate="+String.valueOf(CloseDate));
		sb.append(",Probability="+String.valueOf(Probability));
		sb.append(",ForecastCategory="+ForecastCategory);
		sb.append(",SystemModstamp="+String.valueOf(SystemModstamp));
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();
out8Struct out8 = new out8Struct();





	
	/**
	 * [tWriteJSONField_17_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_17_Out", false);
		start_Hash.put("tWriteJSONField_17_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_17";
	
	currentComponent="tWriteJSONField_17_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out8");
					}
				
		int tos_count_tWriteJSONField_17_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_17_Out = 0;
				boolean needRoot_tWriteJSONField_17_Out  = true;
				
				String  strCompCache_tWriteJSONField_17_Out= null;		
				
						        java.util.Queue<row34Struct> listGroupby_tWriteJSONField_17_Out = new java.util.concurrent.ConcurrentLinkedQueue<row34Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_17_Out extends Thread {
						
									    java.util.Queue<row34Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_17_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_17_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_17_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_17_In", queue);
							globalMap.put("flows_tWriteJSONField_17_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_17_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_17_Out txf_tWriteJSONField_17_Out = new ThreadXMLField_tWriteJSONField_17_Out(listGroupby_tWriteJSONField_17_Out);
					
					txf_tWriteJSONField_17_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_17_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_17_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_17_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_17_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_17_Out nestXMLTool_tWriteJSONField_17_Out = new NestXMLTool_tWriteJSONField_17_Out();

out8Struct  rowStructOutput_tWriteJSONField_17_Out = new out8Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_17_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_17_Out = null;
org.dom4j.Document doc_tWriteJSONField_17_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_17_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_17_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_17_Out.setTrimText(false);
format_tWriteJSONField_17_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_17_Out = new int[1];

 



/**
 * [tWriteJSONField_17_Out begin ] stop
 */



	
	/**
	 * [tMap_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_17", false);
		start_Hash.put("tMap_17", System.currentTimeMillis());
		
	
	currentComponent="tMap_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tMap_17 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_17__Struct  {
}
Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
// ###############################

// ###############################
// # Outputs initialization
out8Struct out8_tmp = new out8Struct();
// ###############################

        
        



        









 



/**
 * [tMap_17 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_17", false);
		start_Hash.put("tSalesforceInput_17", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_17";

	
		int tos_count_tSalesforceInput_17 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_17 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_17 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_17.createRuntimeProperties();
 		                    props_tSalesforceInput_17.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_17.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_17.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_17.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_17.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_17.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_17.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_17.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_17.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_17.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_17.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_17.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_17.module.setValue("moduleName",
 		                    "OpportunityHistory");
 		                    
 		                    props_tSalesforceInput_17.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_17.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_17.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_17.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_2");
 		                    
 		                    props_tSalesforceInput_17.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_17_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"OpportunityHistory\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OpportunityId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OpportunityId\",\"talend.field.dbColumnName\":\"OpportunityId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OpportunityId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"StageName\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"StageName\",\"talend.field.dbColumnName\":\"StageName\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"40\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"StageName\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Amount\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Amount\",\"talend.field.dbColumnName\":\"Amount\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Amount\",\"talend.field.precision\":\"2\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ExpectedRevenue\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ExpectedRevenue\",\"talend.field.dbColumnName\":\"ExpectedRevenue\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ExpectedRevenue\",\"talend.field.precision\":\"2\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CloseDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CloseDate\",\"talend.field.dbColumnName\":\"CloseDate\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CloseDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Probability\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Probability\",\"talend.field.dbColumnName\":\"Probability\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"3\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Probability\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ForecastCategory\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ForecastCategory\",\"talend.field.dbColumnName\":\"ForecastCategory\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"40\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ForecastCategory\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"SystemModstamp\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"SystemModstamp\",\"talend.field.dbColumnName\":\"SystemModstamp\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"SystemModstamp\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"OpportunityHistory\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_17_1_fisrt sst_tSalesforceInput_17_1_fisrt = new SchemaSettingTool_tSalesforceInput_17_1_fisrt();
 		                    
 		                    props_tSalesforceInput_17.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_17_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_17.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_17 = props_tSalesforceInput_17.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_17 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_17 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_17 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_17.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_17);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_17.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_17 = props_tSalesforceInput_17.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_17 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_17 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_17 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_17.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_17);
        }
    }
globalMap.put("tSalesforceInput_17_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_17);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_17= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_17_MAPPINGS_URL", mappings_url_tSalesforceInput_17);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_17 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_17";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_17 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_17 = null;
topology_tSalesforceInput_17 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_17 = def_tSalesforceInput_17.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_17, topology_tSalesforceInput_17);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_17 = def_tSalesforceInput_17.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_17 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_17.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_17 = componentRuntime_tSalesforceInput_17.initialize(container_tSalesforceInput_17, props_tSalesforceInput_17);

if (initVr_tSalesforceInput_17.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_17.getMessage());
}

if(componentRuntime_tSalesforceInput_17 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_17 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_17;
	compDriverInitialization_tSalesforceInput_17.runAtDriver(container_tSalesforceInput_17);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_17 = null;
if(componentRuntime_tSalesforceInput_17 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_17 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_17;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_17 = sourceOrSink_tSalesforceInput_17.validate(container_tSalesforceInput_17);
	if (vr_tSalesforceInput_17.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_17.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_17 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_17;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_17 =
            source_tSalesforceInput_17.createReader(container_tSalesforceInput_17);
	reader_tSalesforceInput_17 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_17, container_tSalesforceInput_17);

        boolean multi_output_is_allowed_tSalesforceInput_17 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_17 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_17.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_17 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_17 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_17 = props_tSalesforceInput_17.getSchema(c_tSalesforceInput_17, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_17 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_17, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_17 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_17 = reader_tSalesforceInput_17.start();

    resourceMap.put("reader_tSalesforceInput_17", reader_tSalesforceInput_17);

    for (; available_tSalesforceInput_17; available_tSalesforceInput_17 = reader_tSalesforceInput_17.advance()) {
    	nb_line_tSalesforceInput_17++;

    	
        if (multi_output_is_allowed_tSalesforceInput_17) {
                row35 = null;

        }

        try {
            Object data_tSalesforceInput_17 = reader_tSalesforceInput_17.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_17) {
                    row35 = new row35Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_17 == null) {
            factory_tSalesforceInput_17 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_17.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_17.setWrapped(factory_tSalesforceInput_17.convertToAvro(data_tSalesforceInput_17));
                Object columnValue_0_tSalesforceInput_17 = outgoingEnforcer_tSalesforceInput_17.get(0);
                        row35.Id = (String) (columnValue_0_tSalesforceInput_17);
                Object columnValue_1_tSalesforceInput_17 = outgoingEnforcer_tSalesforceInput_17.get(1);
                        row35.OpportunityId = (String) (columnValue_1_tSalesforceInput_17);
                Object columnValue_2_tSalesforceInput_17 = outgoingEnforcer_tSalesforceInput_17.get(2);
                        row35.CreatedById = (String) (columnValue_2_tSalesforceInput_17);
                Object columnValue_3_tSalesforceInput_17 = outgoingEnforcer_tSalesforceInput_17.get(3);
                        row35.CreatedDate = (java.util.Date) (columnValue_3_tSalesforceInput_17);
                Object columnValue_4_tSalesforceInput_17 = outgoingEnforcer_tSalesforceInput_17.get(4);
                        row35.StageName = (String) (columnValue_4_tSalesforceInput_17);
                Object columnValue_5_tSalesforceInput_17 = outgoingEnforcer_tSalesforceInput_17.get(5);
                        row35.Amount = (BigDecimal) (columnValue_5_tSalesforceInput_17);
                Object columnValue_6_tSalesforceInput_17 = outgoingEnforcer_tSalesforceInput_17.get(6);
                        row35.ExpectedRevenue = (BigDecimal) (columnValue_6_tSalesforceInput_17);
                Object columnValue_7_tSalesforceInput_17 = outgoingEnforcer_tSalesforceInput_17.get(7);
                        row35.CloseDate = (java.util.Date) (columnValue_7_tSalesforceInput_17);
                Object columnValue_8_tSalesforceInput_17 = outgoingEnforcer_tSalesforceInput_17.get(8);
                        row35.Probability = (Double) (columnValue_8_tSalesforceInput_17);
                Object columnValue_9_tSalesforceInput_17 = outgoingEnforcer_tSalesforceInput_17.get(9);
                        row35.ForecastCategory = (String) (columnValue_9_tSalesforceInput_17);
                Object columnValue_10_tSalesforceInput_17 = outgoingEnforcer_tSalesforceInput_17.get(10);
                        row35.SystemModstamp = (java.util.Date) (columnValue_10_tSalesforceInput_17);
                Object columnValue_11_tSalesforceInput_17 = outgoingEnforcer_tSalesforceInput_17.get(11);
                    if (columnValue_11_tSalesforceInput_17 == null) {
                        row35.IsDeleted = false;
                    } else {
                            row35.IsDeleted = (boolean) (columnValue_11_tSalesforceInput_17);
                    }
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_17) {
        	java.util.Map<String,Object> info_tSalesforceInput_17 = e_tSalesforceInput_17.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_17 = null;
            	if(info_tSalesforceInput_17.containsKey("error")){
            		errorMessage_tSalesforceInput_17 = info_tSalesforceInput_17.get("error");
        		}else if(info_tSalesforceInput_17.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_17 = info_tSalesforceInput_17.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_17 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_17 = "Row "+ nb_line_tSalesforceInput_17 + ": "+errorMessage_tSalesforceInput_17;
    			System.err.println(errorMessage_tSalesforceInput_17);
            	// If the record is reject, the main line record should put NULL
            	row35 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_17 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_17 = null;


 



/**
 * [tSalesforceInput_17 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_17 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_17";

	


 


	tos_count_tSalesforceInput_17++;

/**
 * [tSalesforceInput_17 main ] stop
 */
	
	/**
	 * [tSalesforceInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_17";

	


 



/**
 * [tSalesforceInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tMap_17 main ] start
	 */

	

	
	
	currentComponent="tMap_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row35");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_17 = false;
		  boolean mainRowRejected_tMap_17 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
        // ###############################
        // # Output tables

out8 = null;


// # Output table : 'out8'
out8_tmp.Id = row35.Id ;
out8_tmp.OpportunityId = row35.OpportunityId ;
out8_tmp.CreatedById = row35.CreatedById ;
out8_tmp.CreatedDate = (row35.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row35.CreatedDate))).getTime())/1000 ;
out8_tmp.StageName = row35.StageName ;
out8_tmp.Amount = row35.Amount ;
out8_tmp.ExpectedRevenue = row35.ExpectedRevenue ;
out8_tmp.CloseDate = (row35.CloseDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row35.CloseDate))).getTime())/1000 ;
out8_tmp.Probability = row35.Probability ;
out8_tmp.ForecastCategory = row35.ForecastCategory ;
out8_tmp.SystemModstamp = (row35.SystemModstamp == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row35.SystemModstamp))).getTime())/1000 ;
out8_tmp.IsDeleted = row35.IsDeleted ;
out8 = out8_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_17 = false;










 


	tos_count_tMap_17++;

/**
 * [tMap_17 main ] stop
 */
	
	/**
	 * [tMap_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_begin ] stop
 */
// Start of branch "out8"
if(out8 != null) { 



	
	/**
	 * [tWriteJSONField_17_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_17";
	
	currentComponent="tWriteJSONField_17_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out8");
					}
					

	if(txf_tWriteJSONField_17_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_17_Out.getCurrentComponent();
		throw txf_tWriteJSONField_17_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_17_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_17_Out.getLastError();
	}
	nb_line_tWriteJSONField_17_Out++;
	valueMap_tWriteJSONField_17_Out.clear();
	arraysValueMap_tWriteJSONField_17_Out.clear();
	valueMap_tWriteJSONField_17_Out.put("Id",
	(
            out8.Id.toString()
		));
	arraysValueMap_tWriteJSONField_17_Out.put("Id",
	(
            out8.Id.toString()
		));
	valueMap_tWriteJSONField_17_Out.put("OpportunityId",
	(
            out8.OpportunityId.toString()
		));
	arraysValueMap_tWriteJSONField_17_Out.put("OpportunityId",
	(
            out8.OpportunityId.toString()
		));
	valueMap_tWriteJSONField_17_Out.put("CreatedById",
	(
            out8.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_17_Out.put("CreatedById",
	(
            out8.CreatedById.toString()
		));
	valueMap_tWriteJSONField_17_Out.put("CreatedDate",
	(
            String.valueOf(out8.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_17_Out.put("CreatedDate",
	(
            String.valueOf(out8.CreatedDate)
		));
	valueMap_tWriteJSONField_17_Out.put("StageName",
	(
            out8.StageName.toString()
		));
	arraysValueMap_tWriteJSONField_17_Out.put("StageName",
	(
            out8.StageName.toString()
		));
	valueMap_tWriteJSONField_17_Out.put("Amount",
	(
		out8.Amount != null?
			out8.Amount.toPlainString():null
		));
	arraysValueMap_tWriteJSONField_17_Out.put("Amount",
	(
		out8.Amount != null?
			out8.Amount.toPlainString():null
		));
	valueMap_tWriteJSONField_17_Out.put("ExpectedRevenue",
	(
		out8.ExpectedRevenue != null?
			out8.ExpectedRevenue.toPlainString():null
		));
	arraysValueMap_tWriteJSONField_17_Out.put("ExpectedRevenue",
	(
		out8.ExpectedRevenue != null?
			out8.ExpectedRevenue.toPlainString():null
		));
	valueMap_tWriteJSONField_17_Out.put("CloseDate",
	(
		out8.CloseDate != null?
            out8.CloseDate.toString():null
		));
	arraysValueMap_tWriteJSONField_17_Out.put("CloseDate",
	(
		out8.CloseDate != null?
            out8.CloseDate.toString():null
		));
	valueMap_tWriteJSONField_17_Out.put("Probability",
	(
		out8.Probability != null?
            out8.Probability.toString():null
		));
	arraysValueMap_tWriteJSONField_17_Out.put("Probability",
	(
		out8.Probability != null?
            out8.Probability.toString():null
		));
	valueMap_tWriteJSONField_17_Out.put("ForecastCategory",
	(
		out8.ForecastCategory != null?
            out8.ForecastCategory.toString():null
		));
	arraysValueMap_tWriteJSONField_17_Out.put("ForecastCategory",
	(
		out8.ForecastCategory != null?
            out8.ForecastCategory.toString():null
		));
	valueMap_tWriteJSONField_17_Out.put("SystemModstamp",
	(
            String.valueOf(out8.SystemModstamp)
		));
	arraysValueMap_tWriteJSONField_17_Out.put("SystemModstamp",
	(
            String.valueOf(out8.SystemModstamp)
		));
	valueMap_tWriteJSONField_17_Out.put("IsDeleted",
	(
            String.valueOf(out8.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_17_Out.put("IsDeleted",
	(
            String.valueOf(out8.IsDeleted)
		));
		String strTemp_tWriteJSONField_17_Out = "";
	if(strCompCache_tWriteJSONField_17_Out==null){
		strCompCache_tWriteJSONField_17_Out=strTemp_tWriteJSONField_17_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_17_Out.replaceDefaultNameSpace(doc_tWriteJSONField_17_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_17_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_17_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_17_Out, format_tWriteJSONField_17_Out);
			output_tWriteJSONField_17_Out.write(doc_tWriteJSONField_17_Out);
		    output_tWriteJSONField_17_Out.close();
			
				  		  row34Struct row_tWriteJSONField_17_Out = new row34Struct();
						  
					     		row_tWriteJSONField_17_Out.data = strWriter_tWriteJSONField_17_Out.toString();
					     		listGroupby_tWriteJSONField_17_Out.add(row_tWriteJSONField_17_Out);
					
		    doc_tWriteJSONField_17_Out.clearContent();
			needRoot_tWriteJSONField_17_Out = true;
			for(int i_tWriteJSONField_17_Out=0;i_tWriteJSONField_17_Out<orders_tWriteJSONField_17_Out.length;i_tWriteJSONField_17_Out++){
				orders_tWriteJSONField_17_Out[i_tWriteJSONField_17_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_17_Out != null && groupbyList_tWriteJSONField_17_Out.size() >= 0){
				groupbyList_tWriteJSONField_17_Out.clear();
			}
			strCompCache_tWriteJSONField_17_Out=strTemp_tWriteJSONField_17_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_17_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_17_Out) {
		needRoot_tWriteJSONField_17_Out=false;
		org.dom4j.Element root_tWriteJSONField_17_Out = doc_tWriteJSONField_17_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_17_Out = root_tWriteJSONField_17_Out;
		org.dom4j.Element root_0_tWriteJSONField_17_Out = root_tWriteJSONField_17_Out.addElement("OpportunityId");
		if(
		valueMap_tWriteJSONField_17_Out.get("OpportunityId")!=null){
			nestXMLTool_tWriteJSONField_17_Out .setText(root_0_tWriteJSONField_17_Out,
		valueMap_tWriteJSONField_17_Out.get("OpportunityId"));
			root_0_tWriteJSONField_17_Out.addAttribute("type", "string");
			root_0_tWriteJSONField_17_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_17_Out .setText(root_0_tWriteJSONField_17_Out,"null");
			root_0_tWriteJSONField_17_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_17_Out = root_tWriteJSONField_17_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_17_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_17_Out .setText(root_1_tWriteJSONField_17_Out,
		valueMap_tWriteJSONField_17_Out.get("CreatedById"));
			root_1_tWriteJSONField_17_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_17_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_17_Out .setText(root_1_tWriteJSONField_17_Out,"null");
			root_1_tWriteJSONField_17_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_17_Out = root_tWriteJSONField_17_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_17_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_17_Out .setText(root_2_tWriteJSONField_17_Out,
		valueMap_tWriteJSONField_17_Out.get("CreatedDate"));
            root_2_tWriteJSONField_17_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_17_Out .setText(root_2_tWriteJSONField_17_Out,"null");
			root_2_tWriteJSONField_17_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_17_Out = root_tWriteJSONField_17_Out.addElement("StageName");
		if(
		valueMap_tWriteJSONField_17_Out.get("StageName")!=null){
			nestXMLTool_tWriteJSONField_17_Out .setText(root_3_tWriteJSONField_17_Out,
		valueMap_tWriteJSONField_17_Out.get("StageName"));
			root_3_tWriteJSONField_17_Out.addAttribute("type", "string");
			root_3_tWriteJSONField_17_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_17_Out .setText(root_3_tWriteJSONField_17_Out,"null");
			root_3_tWriteJSONField_17_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_17_Out = root_tWriteJSONField_17_Out.addElement("Amount");
		if(
		valueMap_tWriteJSONField_17_Out.get("Amount")!=null){
			nestXMLTool_tWriteJSONField_17_Out .setText(root_4_tWriteJSONField_17_Out,
		valueMap_tWriteJSONField_17_Out.get("Amount"));
            root_4_tWriteJSONField_17_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_17_Out .setText(root_4_tWriteJSONField_17_Out,"null");
			root_4_tWriteJSONField_17_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_17_Out = root_tWriteJSONField_17_Out.addElement("ExpectedRevenue");
		if(
		valueMap_tWriteJSONField_17_Out.get("ExpectedRevenue")!=null){
			nestXMLTool_tWriteJSONField_17_Out .setText(root_5_tWriteJSONField_17_Out,
		valueMap_tWriteJSONField_17_Out.get("ExpectedRevenue"));
            root_5_tWriteJSONField_17_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_17_Out .setText(root_5_tWriteJSONField_17_Out,"null");
			root_5_tWriteJSONField_17_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_17_Out = root_tWriteJSONField_17_Out.addElement("CloseDate");
		if(
		valueMap_tWriteJSONField_17_Out.get("CloseDate")!=null){
			nestXMLTool_tWriteJSONField_17_Out .setText(root_6_tWriteJSONField_17_Out,
		valueMap_tWriteJSONField_17_Out.get("CloseDate"));
            root_6_tWriteJSONField_17_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_17_Out .setText(root_6_tWriteJSONField_17_Out,"null");
			root_6_tWriteJSONField_17_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_7_tWriteJSONField_17_Out = root_tWriteJSONField_17_Out.addElement("Probability");
		if(
		valueMap_tWriteJSONField_17_Out.get("Probability")!=null){
			nestXMLTool_tWriteJSONField_17_Out .setText(root_7_tWriteJSONField_17_Out,
		valueMap_tWriteJSONField_17_Out.get("Probability"));
            root_7_tWriteJSONField_17_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_17_Out .setText(root_7_tWriteJSONField_17_Out,"null");
			root_7_tWriteJSONField_17_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_8_tWriteJSONField_17_Out = root_tWriteJSONField_17_Out.addElement("ForecastCategory");
		if(
		valueMap_tWriteJSONField_17_Out.get("ForecastCategory")!=null){
			nestXMLTool_tWriteJSONField_17_Out .setText(root_8_tWriteJSONField_17_Out,
		valueMap_tWriteJSONField_17_Out.get("ForecastCategory"));
			root_8_tWriteJSONField_17_Out.addAttribute("type", "string");
			root_8_tWriteJSONField_17_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_17_Out .setText(root_8_tWriteJSONField_17_Out,"null");
			root_8_tWriteJSONField_17_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_9_tWriteJSONField_17_Out = root_tWriteJSONField_17_Out.addElement("SystemModstamp");
		if(
		valueMap_tWriteJSONField_17_Out.get("SystemModstamp")!=null){
			nestXMLTool_tWriteJSONField_17_Out .setText(root_9_tWriteJSONField_17_Out,
		valueMap_tWriteJSONField_17_Out.get("SystemModstamp"));
            root_9_tWriteJSONField_17_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_17_Out .setText(root_9_tWriteJSONField_17_Out,"null");
			root_9_tWriteJSONField_17_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_10_tWriteJSONField_17_Out = root_tWriteJSONField_17_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_17_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_17_Out .setText(root_10_tWriteJSONField_17_Out,
		valueMap_tWriteJSONField_17_Out.get("IsDeleted"));
            root_10_tWriteJSONField_17_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_17_Out .setText(root_10_tWriteJSONField_17_Out,"null");
			root_10_tWriteJSONField_17_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_17_Out = subTreeRootParent_tWriteJSONField_17_Out;
	}else{
		subTreeRootParent_tWriteJSONField_17_Out=root4Group_tWriteJSONField_17_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_17_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_17_Out[0]==0){
        	orders_tWriteJSONField_17_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_17_Out.length){
        		orders_tWriteJSONField_17_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_17_Out.elements().add(orders_tWriteJSONField_17_Out[0]++,loop_tWriteJSONField_17_Out);
		if(
		valueMap_tWriteJSONField_17_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_17_Out .setText(loop_tWriteJSONField_17_Out,
		valueMap_tWriteJSONField_17_Out.get("Id"));
			loop_tWriteJSONField_17_Out.addAttribute("type", "string");
			loop_tWriteJSONField_17_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_17_Out .setText(loop_tWriteJSONField_17_Out,"null");
			loop_tWriteJSONField_17_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_17_Out++;

/**
 * [tWriteJSONField_17_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_17_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_17";
	
	currentComponent="tWriteJSONField_17_Out";

	

 



/**
 * [tWriteJSONField_17_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_17_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_17";
	
	currentComponent="tWriteJSONField_17_Out";

	

 



/**
 * [tWriteJSONField_17_Out process_data_end ] stop
 */

} // End of branch "out8"




	
	/**
	 * [tMap_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_17";

	


 



/**
 * [tSalesforceInput_17 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_17 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_17";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_17", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_17.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_17 = reader_tSalesforceInput_17.getReturnValues();
if(resultMap_tSalesforceInput_17!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_17 : resultMap_tSalesforceInput_17.entrySet()) {
		switch(entry_tSalesforceInput_17.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_17.setComponentData("tSalesforceInput_17", "ERROR_MESSAGE", entry_tSalesforceInput_17.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_17.setComponentData("tSalesforceInput_17", "NB_LINE", entry_tSalesforceInput_17.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_17.setComponentData("tSalesforceInput_17", "NB_SUCCESS", entry_tSalesforceInput_17.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_17.setComponentData("tSalesforceInput_17", "NB_REJECT", entry_tSalesforceInput_17.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_17 = new StringBuilder();
            for (int i_tSalesforceInput_17 = 0; i_tSalesforceInput_17 < entry_tSalesforceInput_17.getKey().length(); i_tSalesforceInput_17++) {
                char ch_tSalesforceInput_17 = entry_tSalesforceInput_17.getKey().charAt(i_tSalesforceInput_17);
                if(Character.isUpperCase(ch_tSalesforceInput_17) && i_tSalesforceInput_17> 0) {
                	studio_key_tSalesforceInput_17.append('_');
                }
                studio_key_tSalesforceInput_17.append(ch_tSalesforceInput_17);
            }
			container_tSalesforceInput_17.setComponentData("tSalesforceInput_17", studio_key_tSalesforceInput_17.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_17.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_17", true);
end_Hash.put("tSalesforceInput_17", System.currentTimeMillis());




/**
 * [tSalesforceInput_17 end ] stop
 */

	
	/**
	 * [tMap_17 end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tMap_17", true);
end_Hash.put("tMap_17", System.currentTimeMillis());




/**
 * [tMap_17 end ] stop
 */

	
	/**
	 * [tWriteJSONField_17_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_17";
	
	currentComponent="tWriteJSONField_17_Out";

	

if(nb_line_tWriteJSONField_17_Out > 0){  
    nestXMLTool_tWriteJSONField_17_Out.replaceDefaultNameSpace(doc_tWriteJSONField_17_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_17_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_17_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_17_Out, format_tWriteJSONField_17_Out);
	output_tWriteJSONField_17_Out.write(doc_tWriteJSONField_17_Out);
    output_tWriteJSONField_17_Out.close();
					row34Struct row_tWriteJSONField_17_Out = new row34Struct();
						  
					     		row_tWriteJSONField_17_Out.data = strWriter_tWriteJSONField_17_Out.toString();
					     		listGroupby_tWriteJSONField_17_Out.add(row_tWriteJSONField_17_Out);
		    		

}
globalMap.put("tWriteJSONField_17_Out_NB_LINE",nb_line_tWriteJSONField_17_Out);
globalMap.put("tWriteJSONField_17_In_FINISH" + (listGroupby_tWriteJSONField_17_Out==null?"":listGroupby_tWriteJSONField_17_Out.hashCode()), "true");
	
		txf_tWriteJSONField_17_Out.join();
		
		if(txf_tWriteJSONField_17_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_17_Out.getCurrentComponent();
			throw txf_tWriteJSONField_17_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_17_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_17_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_17_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out8");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_17_Out", true);
end_Hash.put("tWriteJSONField_17_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_17_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_17 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_17";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_17")==null){
    if(resourceMap.get("reader_tSalesforceInput_17")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_17")).close();
		} catch (java.io.IOException e_tSalesforceInput_17) {
			String errorMessage_tSalesforceInput_17 = "failed to release the resource in tSalesforceInput_17 :" + e_tSalesforceInput_17.getMessage();
			System.err.println(errorMessage_tSalesforceInput_17);
		}
	}
}
 



/**
 * [tSalesforceInput_17 finally ] stop
 */

	
	/**
	 * [tMap_17 finally ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_17_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_17";
	
	currentComponent="tWriteJSONField_17_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_17_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_17_In");
		if(resourceMap.get("finish_tWriteJSONField_17_Out") == null){
			globalMap.put("tWriteJSONField_17_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_17_Out==null?"":listGroupby_tWriteJSONField_17_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_17_Out != null) {
		globalMap.put("tWriteJSONField_17_In_FINISH" + (listGroupby_tWriteJSONField_17_Out==null?"":listGroupby_tWriteJSONField_17_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_17_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_17_SUBPROCESS_STATE", 1);
	}
	

public void tDie_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_17", false);
		start_Hash.put("tDie_17", System.currentTimeMillis());
		
	
	currentComponent="tDie_17";

	
		int tos_count_tDie_17 = 0;
		

 



/**
 * [tDie_17 begin ] stop
 */
	
	/**
	 * [tDie_17 main ] start
	 */

	

	
	
	currentComponent="tDie_17";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_17", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_17_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_17_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_17_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_17) {
		logIgnoredError(String.format("tDie_17 - tDie failed to log message due to internal error: %s", e_tDie_17), e_tDie_17);
	}
	
	currentComponent = "tDie_17";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_17_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_17++;

/**
 * [tDie_17 main ] stop
 */
	
	/**
	 * [tDie_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_17";

	

 



/**
 * [tDie_17 process_data_begin ] stop
 */
	
	/**
	 * [tDie_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_17";

	

 



/**
 * [tDie_17 process_data_end ] stop
 */
	
	/**
	 * [tDie_17 end ] start
	 */

	

	
	
	currentComponent="tDie_17";

	

 

ok_Hash.put("tDie_17", true);
end_Hash.put("tDie_17", System.currentTimeMillis());




/**
 * [tDie_17 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_17 finally ] start
	 */

	

	
	
	currentComponent="tDie_17";

	

 



/**
 * [tDie_17 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_17_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_17", false);
		start_Hash.put("tFileArchive_17", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_17";

	
		int tos_count_tFileArchive_17 = 0;
		

 



/**
 * [tFileArchive_17 begin ] stop
 */
	
	/**
	 * [tFileArchive_17 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_17";

	

	

		String sourceFile_tFileArchive_17 = context.staging_S3_dir + "opportunityhistory.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_17), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_17 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_17 = context.staging_S3_dir + "opportunityhistory.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_17 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_17, zipFile_tFileArchive_17);
    zip_tFileArchive_17.setOverwriteExistTargetZip(true);
	zip_tFileArchive_17.setMakeTargetDir(true);
	zip_tFileArchive_17.setCompressLevel(9);
	zip_tFileArchive_17.setArchiveFormat("gzip");
	zip_tFileArchive_17.setAllFiles(true);
	
	
		zip_tFileArchive_17.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_17_ARCHIVE_FILEPATH",zipFile_tFileArchive_17);
   
   globalMap.put("tFileArchive_17_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_17).getName());

   zip_tFileArchive_17.doZip();


 


	tos_count_tFileArchive_17++;

/**
 * [tFileArchive_17 main ] stop
 */
	
	/**
	 * [tFileArchive_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_17";

	

 



/**
 * [tFileArchive_17 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_17";

	

 



/**
 * [tFileArchive_17 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_17 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_17";

	

 

ok_Hash.put("tFileArchive_17", true);
end_Hash.put("tFileArchive_17", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk142", 0, "ok");
				}
				tS3Put_17Process(globalMap);



/**
 * [tFileArchive_17 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_17 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_17";

	

 



/**
 * [tFileArchive_17 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_17_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_17", false);
		start_Hash.put("tS3Put_17", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_17";

	
		int tos_count_tS3Put_17 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_17 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_17 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/opportunityhistory/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/opportunityhistory_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_17 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_17 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_17 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_17 = context.staging_S3_dir + "opportunityhistory.json.gz";
	
	boolean useStream_tS3Put_17 = false;
	java.io.InputStream uploadStream_tS3Put_17 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_17 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_17 instanceof String){
		    useStream_tS3Put_17 = false;
		}else if(fileOrStream_tS3Put_17 instanceof java.io.InputStream){
		    useStream_tS3Put_17 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_17 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_17) {
				java.io.File inputFile_tS3Put_17 = new java.io.File((String)fileOrStream_tS3Put_17);
				
				long multipart_upload_threshold_tS3Put_17 = 5 * 1024 * 1024;
				
    		tm_tS3Put_17 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_17)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_17)
    			.withS3Client(conn_tS3Put_17)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_17 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_17, inputFile_tS3Put_17).withMetadata(objectMetadata_tS3Put_17);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_17 = tm_tS3Put_17.upload(putRequest_tS3Put_17);
  		
  			upload_tS3Put_17.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_17 = ((java.io.InputStream)fileOrStream_tS3Put_17);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_17 = new S3StreamUtil();
    		byte[] buffer_tS3Put_17 = new byte[partSizeInBytes_tS3Put_17];
    		sourceStream_tS3Put_17.read(buffer_tS3Put_17);
    		long curPartSize_tS3Put_17 = streamUtil_tS3Put_17.getLength(buffer_tS3Put_17);
    		boolean multiUpload_tS3Put_17 = curPartSize_tS3Put_17 == partSizeInBytes_tS3Put_17;
    		
    		if(!multiUpload_tS3Put_17) {
    				objectMetadata_tS3Put_17.setContentLength(curPartSize_tS3Put_17);
    				uploadStream_tS3Put_17 = new java.io.ByteArrayInputStream(buffer_tS3Put_17,0,Long.valueOf(curPartSize_tS3Put_17).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_17 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_17, uploadStream_tS3Put_17, objectMetadata_tS3Put_17);
			
    				
    				

    				
    				conn_tS3Put_17.putObject(putRequest_tS3Put_17);
    		} else {
    				uploadStream_tS3Put_17 = new java.io.ByteArrayInputStream(buffer_tS3Put_17);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_17 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_17 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_17, objectMetadata_tS3Put_17);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_17 = conn_tS3Put_17.initiateMultipartUpload(putRequest_tS3Put_17);
      			String uploadId_tS3Put_17 = initResponse_tS3Put_17.getUploadId();
      			int partNumber_tS3Put_17 = 1;
      			boolean streamHasNext_tS3Put_17 = true;
      			byte[] probeAvailability_tS3Put_17 = new byte[1];
				try {
					while (streamHasNext_tS3Put_17) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_17 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_17)
						.withUploadId(uploadId_tS3Put_17)
                    	.withPartNumber(partNumber_tS3Put_17)
						.withPartSize(curPartSize_tS3Put_17);
            		    uploadRequest_tS3Put_17.setInputStream(uploadStream_tS3Put_17);
            		    streamHasNext_tS3Put_17 = sourceStream_tS3Put_17.read(probeAvailability_tS3Put_17) != -1;
            		    if(!streamHasNext_tS3Put_17){
                    	    uploadRequest_tS3Put_17.setLastPart(true);
                    	}

                		partTags_tS3Put_17.add(conn_tS3Put_17.uploadPart(uploadRequest_tS3Put_17).getPartETag());
                  	    partNumber_tS3Put_17++;

          		     	if(uploadStream_tS3Put_17!=null){
      		         			uploadStream_tS3Put_17.close();
          		     	}
          		     	buffer_tS3Put_17 = new byte[partSizeInBytes_tS3Put_17];
          		     	sourceStream_tS3Put_17.read(buffer_tS3Put_17,1,partSizeInBytes_tS3Put_17-1);
          		     	buffer_tS3Put_17[0] = probeAvailability_tS3Put_17[0];
          		     	probeAvailability_tS3Put_17 = new byte[1];
          		     	curPartSize_tS3Put_17 = streamUtil_tS3Put_17.getLength(buffer_tS3Put_17);
          		     	uploadStream_tS3Put_17 = new java.io.ByteArrayInputStream(buffer_tS3Put_17);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_17 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_17,
                        uploadId_tS3Put_17, partTags_tS3Put_17);
            		conn_tS3Put_17.completeMultipartUpload(compRequest_tS3Put_17);
            } catch (java.lang.Exception uploadException_tS3Put_17) {
  							conn_tS3Put_17.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_17, uploadId_tS3Put_17));
    						throw uploadException_tS3Put_17;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_17){
		
			throw(e_tS3Put_17);
		
	}finally{
		if(useStream_tS3Put_17 && uploadStream_tS3Put_17!=null){
    	uploadStream_tS3Put_17.close();
    }
    
    if(tm_tS3Put_17 != null){
        tm_tS3Put_17.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_17 begin ] stop
 */
	
	/**
	 * [tS3Put_17 main ] start
	 */

	

	
	
	currentComponent="tS3Put_17";

	

 


	tos_count_tS3Put_17++;

/**
 * [tS3Put_17 main ] stop
 */
	
	/**
	 * [tS3Put_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_17";

	

 



/**
 * [tS3Put_17 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_17";

	

 



/**
 * [tS3Put_17 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_17 end ] start
	 */

	

	
	
	currentComponent="tS3Put_17";

	

 

ok_Hash.put("tS3Put_17", true);
end_Hash.put("tS3Put_17", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk146", 0, "ok");
				}
				tJava_48Process(globalMap);



/**
 * [tS3Put_17 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_17 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_17";

	

 



/**
 * [tS3Put_17 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_17_SUBPROCESS_STATE", 1);
	}
	

public void tJava_48Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_48_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_48 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_48", false);
		start_Hash.put("tJava_48", System.currentTimeMillis());
		
	
	currentComponent="tJava_48";

	
		int tos_count_tJava_48 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_17_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_17_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_48 begin ] stop
 */
	
	/**
	 * [tJava_48 main ] start
	 */

	

	
	
	currentComponent="tJava_48";

	

 


	tos_count_tJava_48++;

/**
 * [tJava_48 main ] stop
 */
	
	/**
	 * [tJava_48 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_48";

	

 



/**
 * [tJava_48 process_data_begin ] stop
 */
	
	/**
	 * [tJava_48 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_48";

	

 



/**
 * [tJava_48 process_data_end ] stop
 */
	
	/**
	 * [tJava_48 end ] start
	 */

	

	
	
	currentComponent="tJava_48";

	

 

ok_Hash.put("tJava_48", true);
end_Hash.put("tJava_48", System.currentTimeMillis());




/**
 * [tJava_48 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_48 finally ] start
	 */

	

	
	
	currentComponent="tJava_48";

	

 



/**
 * [tJava_48 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_48_SUBPROCESS_STATE", 1);
	}
	


public static class row62Struct implements routines.system.IPersistableRow<row62Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row62Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_31_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_31_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row62Struct row62 = new row62Struct();




	
	/**
	 * [tFileOutputDelimited_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_31", false);
		start_Hash.put("tFileOutputDelimited_31", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_31";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row62");
					}
				
		int tos_count_tFileOutputDelimited_31 = 0;
		

String fileName_tFileOutputDelimited_31 = "";
    fileName_tFileOutputDelimited_31 = (new java.io.File(context.staging_S3_dir + "noodlecrm__student_contact_staging__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_31 = null;
    String extension_tFileOutputDelimited_31 = null;
    String directory_tFileOutputDelimited_31 = null;
    if((fileName_tFileOutputDelimited_31.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_31.lastIndexOf(".") < fileName_tFileOutputDelimited_31.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31;
            extension_tFileOutputDelimited_31 = "";
        } else {
            fullName_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31.substring(0, fileName_tFileOutputDelimited_31.lastIndexOf("."));
            extension_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31.substring(fileName_tFileOutputDelimited_31.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31.substring(0, fileName_tFileOutputDelimited_31.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_31.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31.substring(0, fileName_tFileOutputDelimited_31.lastIndexOf("."));
            extension_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31.substring(fileName_tFileOutputDelimited_31.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31;
            extension_tFileOutputDelimited_31 = "";
        }
        directory_tFileOutputDelimited_31 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_31 = true;
    java.io.File filetFileOutputDelimited_31 = new java.io.File(fileName_tFileOutputDelimited_31);
    globalMap.put("tFileOutputDelimited_31_FILE_NAME",fileName_tFileOutputDelimited_31);
            int nb_line_tFileOutputDelimited_31 = 0;
            int splitedFileNo_tFileOutputDelimited_31 = 0;
            int currentRow_tFileOutputDelimited_31 = 0;

            final String OUT_DELIM_tFileOutputDelimited_31 = /** Start field tFileOutputDelimited_31:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_31:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_31 = /** Start field tFileOutputDelimited_31:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_31:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_31 != null && directory_tFileOutputDelimited_31.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_31 = new java.io.File(directory_tFileOutputDelimited_31);
                        if(!dir_tFileOutputDelimited_31.exists()) {
                            dir_tFileOutputDelimited_31.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_31 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_31 = new java.io.File(fileName_tFileOutputDelimited_31);
                        if(fileToDelete_tFileOutputDelimited_31.exists()) {
                            fileToDelete_tFileOutputDelimited_31.delete();
                        }
                        outtFileOutputDelimited_31 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_31, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_31", outtFileOutputDelimited_31);
resourceMap.put("nb_line_tFileOutputDelimited_31", nb_line_tFileOutputDelimited_31);

 



/**
 * [tFileOutputDelimited_31 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_31_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_31_In", false);
		start_Hash.put("tWriteJSONField_31_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_31";
	
	currentComponent="tWriteJSONField_31_In";

	
		int tos_count_tWriteJSONField_31_In = 0;
		

				int nb_line_tWriteJSONField_31_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_31_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_31_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_31_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_31_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_31_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row62Struct> queue_tWriteJSONField_31_In = (java.util.Queue<row62Struct>) globalMap.get("queue_tWriteJSONField_31_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_31_In = "tWriteJSONField_31_In_FINISH"+(queue_tWriteJSONField_31_In==null?"":queue_tWriteJSONField_31_In.hashCode());
				String str_tWriteJSONField_31_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_31_In) || !queue_tWriteJSONField_31_In.isEmpty()) {
					if (!queue_tWriteJSONField_31_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_31_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_31_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_31";
	
	currentComponent="tWriteJSONField_31_In";

	

                    row62Struct result_tWriteJSONField_31_In = queue_tWriteJSONField_31_In.poll();
                    str_tWriteJSONField_31_In = result_tWriteJSONField_31_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_31_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_31_In.setJsonStandard(jsonStandard_tWriteJSONField_31_In);
        net.sf.json.JSON json_tWriteJSONField_31_In = xmlSerializer_tWriteJSONField_31_In.read(str_tWriteJSONField_31_In);
        row62.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_31_In, jsonStandard_tWriteJSONField_31_In);
    
        nb_line_tWriteJSONField_31_In++;

 


	tos_count_tWriteJSONField_31_In++;

/**
 * [tWriteJSONField_31_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_31_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_31";
	
	currentComponent="tWriteJSONField_31_In";

	

 



/**
 * [tWriteJSONField_31_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_31 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_31";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row62");
					}
					


                    StringBuilder sb_tFileOutputDelimited_31 = new StringBuilder();
                            if(row62.data != null) {
                        sb_tFileOutputDelimited_31.append(
                            row62.data
                        );
                            }
                    sb_tFileOutputDelimited_31.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_31);


                    nb_line_tFileOutputDelimited_31++;
                    resourceMap.put("nb_line_tFileOutputDelimited_31", nb_line_tFileOutputDelimited_31);

                        outtFileOutputDelimited_31.write(sb_tFileOutputDelimited_31.toString());




 


	tos_count_tFileOutputDelimited_31++;

/**
 * [tFileOutputDelimited_31 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_31";

	

 



/**
 * [tFileOutputDelimited_31 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_31";

	

 



/**
 * [tFileOutputDelimited_31 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_31_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_31";
	
	currentComponent="tWriteJSONField_31_In";

	

 



/**
 * [tWriteJSONField_31_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_31_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_31";
	
	currentComponent="tWriteJSONField_31_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_31_In = "tWriteJSONField_31_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_31_In==null?"":queue_tWriteJSONField_31_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_31_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_31_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_31_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_31_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_31_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_31_In);
			
globalMap.put("tWriteJSONField_31_NB_LINE",nb_line_tWriteJSONField_31_In);
 

ok_Hash.put("tWriteJSONField_31_In", true);
end_Hash.put("tWriteJSONField_31_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_31_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_31 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_31";

	



		
			
					if(outtFileOutputDelimited_31!=null) {
						outtFileOutputDelimited_31.flush();
						outtFileOutputDelimited_31.close();
					}
				
				globalMap.put("tFileOutputDelimited_31_NB_LINE",nb_line_tFileOutputDelimited_31);
				globalMap.put("tFileOutputDelimited_31_FILE_NAME",fileName_tFileOutputDelimited_31);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_31", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row62");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_31", true);
end_Hash.put("tFileOutputDelimited_31", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_31_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_31_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If36", 0, "true");
					}
				tDie_31Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If36", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk200", 0, "ok");
				}
				tFileArchive_31Process(globalMap);



/**
 * [tFileOutputDelimited_31 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_31_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_31";
	
	currentComponent="tWriteJSONField_31_In";

	

 



/**
 * [tWriteJSONField_31_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_31 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_31";

	


		if(resourceMap.get("finish_tFileOutputDelimited_31") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_31 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_31");
						if(outtFileOutputDelimited_31!=null) {
							outtFileOutputDelimited_31.flush();
							outtFileOutputDelimited_31.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_31 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_31_In_SUBPROCESS_STATE", 1);
	}
	


public static class row67Struct implements routines.system.IPersistableRow<row67Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row67Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row67Struct row67 = new row67Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row67");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.staging_S3_dir + "contacthistory.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_1_In", false);
		start_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	
		int tos_count_tWriteJSONField_1_In = 0;
		

				int nb_line_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_1_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_1_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row67Struct> queue_tWriteJSONField_1_In = (java.util.Queue<row67Struct>) globalMap.get("queue_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH"+(queue_tWriteJSONField_1_In==null?"":queue_tWriteJSONField_1_In.hashCode());
				String str_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_1_In) || !queue_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

                    row67Struct result_tWriteJSONField_1_In = queue_tWriteJSONField_1_In.poll();
                    str_tWriteJSONField_1_In = result_tWriteJSONField_1_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_1_In.setJsonStandard(jsonStandard_tWriteJSONField_1_In);
        net.sf.json.JSON json_tWriteJSONField_1_In = xmlSerializer_tWriteJSONField_1_In.read(str_tWriteJSONField_1_In);
        row67.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_1_In, jsonStandard_tWriteJSONField_1_In);
    
        nb_line_tWriteJSONField_1_In++;

 


	tos_count_tWriteJSONField_1_In++;

/**
 * [tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row67");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row67.data != null) {
                        sb_tFileOutputDelimited_1.append(
                            row67.data
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_1_In==null?"":queue_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_1_In);
			
globalMap.put("tWriteJSONField_1_NB_LINE",nb_line_tWriteJSONField_1_In);
 

ok_Hash.put("tWriteJSONField_1_In", true);
end_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row67");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk74", 0, "ok");
				}
				tFileArchive_1Process(globalMap);
   			if ((((Integer)globalMap.get("tSalesforceInput_1_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_1_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If17", 0, "true");
					}
				tDie_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If17", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class row60Struct implements routines.system.IPersistableRow<row60Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row60Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_30_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_30_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row60Struct row60 = new row60Struct();




	
	/**
	 * [tFileOutputDelimited_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_30", false);
		start_Hash.put("tFileOutputDelimited_30", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_30";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row60");
					}
				
		int tos_count_tFileOutputDelimited_30 = 0;
		

String fileName_tFileOutputDelimited_30 = "";
    fileName_tFileOutputDelimited_30 = (new java.io.File(context.staging_S3_dir + "noodlecrm__program_term_enrollment__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_30 = null;
    String extension_tFileOutputDelimited_30 = null;
    String directory_tFileOutputDelimited_30 = null;
    if((fileName_tFileOutputDelimited_30.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_30.lastIndexOf(".") < fileName_tFileOutputDelimited_30.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_30 = fileName_tFileOutputDelimited_30;
            extension_tFileOutputDelimited_30 = "";
        } else {
            fullName_tFileOutputDelimited_30 = fileName_tFileOutputDelimited_30.substring(0, fileName_tFileOutputDelimited_30.lastIndexOf("."));
            extension_tFileOutputDelimited_30 = fileName_tFileOutputDelimited_30.substring(fileName_tFileOutputDelimited_30.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_30 = fileName_tFileOutputDelimited_30.substring(0, fileName_tFileOutputDelimited_30.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_30.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_30 = fileName_tFileOutputDelimited_30.substring(0, fileName_tFileOutputDelimited_30.lastIndexOf("."));
            extension_tFileOutputDelimited_30 = fileName_tFileOutputDelimited_30.substring(fileName_tFileOutputDelimited_30.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_30 = fileName_tFileOutputDelimited_30;
            extension_tFileOutputDelimited_30 = "";
        }
        directory_tFileOutputDelimited_30 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_30 = true;
    java.io.File filetFileOutputDelimited_30 = new java.io.File(fileName_tFileOutputDelimited_30);
    globalMap.put("tFileOutputDelimited_30_FILE_NAME",fileName_tFileOutputDelimited_30);
            int nb_line_tFileOutputDelimited_30 = 0;
            int splitedFileNo_tFileOutputDelimited_30 = 0;
            int currentRow_tFileOutputDelimited_30 = 0;

            final String OUT_DELIM_tFileOutputDelimited_30 = /** Start field tFileOutputDelimited_30:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_30:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_30 = /** Start field tFileOutputDelimited_30:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_30:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_30 != null && directory_tFileOutputDelimited_30.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_30 = new java.io.File(directory_tFileOutputDelimited_30);
                        if(!dir_tFileOutputDelimited_30.exists()) {
                            dir_tFileOutputDelimited_30.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_30 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_30 = new java.io.File(fileName_tFileOutputDelimited_30);
                        if(fileToDelete_tFileOutputDelimited_30.exists()) {
                            fileToDelete_tFileOutputDelimited_30.delete();
                        }
                        outtFileOutputDelimited_30 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_30, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_30", outtFileOutputDelimited_30);
resourceMap.put("nb_line_tFileOutputDelimited_30", nb_line_tFileOutputDelimited_30);

 



/**
 * [tFileOutputDelimited_30 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_30_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_30_In", false);
		start_Hash.put("tWriteJSONField_30_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_30";
	
	currentComponent="tWriteJSONField_30_In";

	
		int tos_count_tWriteJSONField_30_In = 0;
		

				int nb_line_tWriteJSONField_30_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_30_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_30_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_30_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_30_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_30_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row60Struct> queue_tWriteJSONField_30_In = (java.util.Queue<row60Struct>) globalMap.get("queue_tWriteJSONField_30_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_30_In = "tWriteJSONField_30_In_FINISH"+(queue_tWriteJSONField_30_In==null?"":queue_tWriteJSONField_30_In.hashCode());
				String str_tWriteJSONField_30_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_30_In) || !queue_tWriteJSONField_30_In.isEmpty()) {
					if (!queue_tWriteJSONField_30_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_30_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_30_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_30";
	
	currentComponent="tWriteJSONField_30_In";

	

                    row60Struct result_tWriteJSONField_30_In = queue_tWriteJSONField_30_In.poll();
                    str_tWriteJSONField_30_In = result_tWriteJSONField_30_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_30_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_30_In.setJsonStandard(jsonStandard_tWriteJSONField_30_In);
        net.sf.json.JSON json_tWriteJSONField_30_In = xmlSerializer_tWriteJSONField_30_In.read(str_tWriteJSONField_30_In);
        row60.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_30_In, jsonStandard_tWriteJSONField_30_In);
    
        nb_line_tWriteJSONField_30_In++;

 


	tos_count_tWriteJSONField_30_In++;

/**
 * [tWriteJSONField_30_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_30_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_30";
	
	currentComponent="tWriteJSONField_30_In";

	

 



/**
 * [tWriteJSONField_30_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_30 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_30";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row60");
					}
					


                    StringBuilder sb_tFileOutputDelimited_30 = new StringBuilder();
                            if(row60.data != null) {
                        sb_tFileOutputDelimited_30.append(
                            row60.data
                        );
                            }
                    sb_tFileOutputDelimited_30.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_30);


                    nb_line_tFileOutputDelimited_30++;
                    resourceMap.put("nb_line_tFileOutputDelimited_30", nb_line_tFileOutputDelimited_30);

                        outtFileOutputDelimited_30.write(sb_tFileOutputDelimited_30.toString());




 


	tos_count_tFileOutputDelimited_30++;

/**
 * [tFileOutputDelimited_30 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_30";

	

 



/**
 * [tFileOutputDelimited_30 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_30";

	

 



/**
 * [tFileOutputDelimited_30 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_30_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_30";
	
	currentComponent="tWriteJSONField_30_In";

	

 



/**
 * [tWriteJSONField_30_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_30_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_30";
	
	currentComponent="tWriteJSONField_30_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_30_In = "tWriteJSONField_30_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_30_In==null?"":queue_tWriteJSONField_30_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_30_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_30_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_30_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_30_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_30_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_30_In);
			
globalMap.put("tWriteJSONField_30_NB_LINE",nb_line_tWriteJSONField_30_In);
 

ok_Hash.put("tWriteJSONField_30_In", true);
end_Hash.put("tWriteJSONField_30_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_30_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_30 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_30";

	



		
			
					if(outtFileOutputDelimited_30!=null) {
						outtFileOutputDelimited_30.flush();
						outtFileOutputDelimited_30.close();
					}
				
				globalMap.put("tFileOutputDelimited_30_NB_LINE",nb_line_tFileOutputDelimited_30);
				globalMap.put("tFileOutputDelimited_30_FILE_NAME",fileName_tFileOutputDelimited_30);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_30", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row60");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_30", true);
end_Hash.put("tFileOutputDelimited_30", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_30_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_30_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If35", 0, "true");
					}
				tDie_30Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If35", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk196", 0, "ok");
				}
				tFileArchive_30Process(globalMap);



/**
 * [tFileOutputDelimited_30 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_30_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_30";
	
	currentComponent="tWriteJSONField_30_In";

	

 



/**
 * [tWriteJSONField_30_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_30 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_30";

	


		if(resourceMap.get("finish_tFileOutputDelimited_30") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_30 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_30");
						if(outtFileOutputDelimited_30!=null) {
							outtFileOutputDelimited_30.flush();
							outtFileOutputDelimited_30.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_30 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_30_In_SUBPROCESS_STATE", 1);
	}
	


public static class row58Struct implements routines.system.IPersistableRow<row58Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row58Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_29_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_29_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row58Struct row58 = new row58Struct();




	
	/**
	 * [tFileOutputDelimited_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_29", false);
		start_Hash.put("tFileOutputDelimited_29", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_29";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row58");
					}
				
		int tos_count_tFileOutputDelimited_29 = 0;
		

String fileName_tFileOutputDelimited_29 = "";
    fileName_tFileOutputDelimited_29 = (new java.io.File(context.staging_S3_dir + "noodlecrm__program_concentration__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_29 = null;
    String extension_tFileOutputDelimited_29 = null;
    String directory_tFileOutputDelimited_29 = null;
    if((fileName_tFileOutputDelimited_29.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_29.lastIndexOf(".") < fileName_tFileOutputDelimited_29.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29;
            extension_tFileOutputDelimited_29 = "";
        } else {
            fullName_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29.substring(0, fileName_tFileOutputDelimited_29.lastIndexOf("."));
            extension_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29.substring(fileName_tFileOutputDelimited_29.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29.substring(0, fileName_tFileOutputDelimited_29.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_29.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29.substring(0, fileName_tFileOutputDelimited_29.lastIndexOf("."));
            extension_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29.substring(fileName_tFileOutputDelimited_29.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29;
            extension_tFileOutputDelimited_29 = "";
        }
        directory_tFileOutputDelimited_29 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_29 = true;
    java.io.File filetFileOutputDelimited_29 = new java.io.File(fileName_tFileOutputDelimited_29);
    globalMap.put("tFileOutputDelimited_29_FILE_NAME",fileName_tFileOutputDelimited_29);
            int nb_line_tFileOutputDelimited_29 = 0;
            int splitedFileNo_tFileOutputDelimited_29 = 0;
            int currentRow_tFileOutputDelimited_29 = 0;

            final String OUT_DELIM_tFileOutputDelimited_29 = /** Start field tFileOutputDelimited_29:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_29:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_29 = /** Start field tFileOutputDelimited_29:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_29:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_29 != null && directory_tFileOutputDelimited_29.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_29 = new java.io.File(directory_tFileOutputDelimited_29);
                        if(!dir_tFileOutputDelimited_29.exists()) {
                            dir_tFileOutputDelimited_29.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_29 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_29 = new java.io.File(fileName_tFileOutputDelimited_29);
                        if(fileToDelete_tFileOutputDelimited_29.exists()) {
                            fileToDelete_tFileOutputDelimited_29.delete();
                        }
                        outtFileOutputDelimited_29 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_29, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_29", outtFileOutputDelimited_29);
resourceMap.put("nb_line_tFileOutputDelimited_29", nb_line_tFileOutputDelimited_29);

 



/**
 * [tFileOutputDelimited_29 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_29_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_29_In", false);
		start_Hash.put("tWriteJSONField_29_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_29";
	
	currentComponent="tWriteJSONField_29_In";

	
		int tos_count_tWriteJSONField_29_In = 0;
		

				int nb_line_tWriteJSONField_29_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_29_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_29_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_29_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_29_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_29_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row58Struct> queue_tWriteJSONField_29_In = (java.util.Queue<row58Struct>) globalMap.get("queue_tWriteJSONField_29_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_29_In = "tWriteJSONField_29_In_FINISH"+(queue_tWriteJSONField_29_In==null?"":queue_tWriteJSONField_29_In.hashCode());
				String str_tWriteJSONField_29_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_29_In) || !queue_tWriteJSONField_29_In.isEmpty()) {
					if (!queue_tWriteJSONField_29_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_29_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_29_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_29";
	
	currentComponent="tWriteJSONField_29_In";

	

                    row58Struct result_tWriteJSONField_29_In = queue_tWriteJSONField_29_In.poll();
                    str_tWriteJSONField_29_In = result_tWriteJSONField_29_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_29_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_29_In.setJsonStandard(jsonStandard_tWriteJSONField_29_In);
        net.sf.json.JSON json_tWriteJSONField_29_In = xmlSerializer_tWriteJSONField_29_In.read(str_tWriteJSONField_29_In);
        row58.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_29_In, jsonStandard_tWriteJSONField_29_In);
    
        nb_line_tWriteJSONField_29_In++;

 


	tos_count_tWriteJSONField_29_In++;

/**
 * [tWriteJSONField_29_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_29_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_29";
	
	currentComponent="tWriteJSONField_29_In";

	

 



/**
 * [tWriteJSONField_29_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_29 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_29";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row58");
					}
					


                    StringBuilder sb_tFileOutputDelimited_29 = new StringBuilder();
                            if(row58.data != null) {
                        sb_tFileOutputDelimited_29.append(
                            row58.data
                        );
                            }
                    sb_tFileOutputDelimited_29.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_29);


                    nb_line_tFileOutputDelimited_29++;
                    resourceMap.put("nb_line_tFileOutputDelimited_29", nb_line_tFileOutputDelimited_29);

                        outtFileOutputDelimited_29.write(sb_tFileOutputDelimited_29.toString());




 


	tos_count_tFileOutputDelimited_29++;

/**
 * [tFileOutputDelimited_29 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_29";

	

 



/**
 * [tFileOutputDelimited_29 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_29";

	

 



/**
 * [tFileOutputDelimited_29 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_29_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_29";
	
	currentComponent="tWriteJSONField_29_In";

	

 



/**
 * [tWriteJSONField_29_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_29_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_29";
	
	currentComponent="tWriteJSONField_29_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_29_In = "tWriteJSONField_29_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_29_In==null?"":queue_tWriteJSONField_29_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_29_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_29_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_29_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_29_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_29_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_29_In);
			
globalMap.put("tWriteJSONField_29_NB_LINE",nb_line_tWriteJSONField_29_In);
 

ok_Hash.put("tWriteJSONField_29_In", true);
end_Hash.put("tWriteJSONField_29_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_29_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_29 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_29";

	



		
			
					if(outtFileOutputDelimited_29!=null) {
						outtFileOutputDelimited_29.flush();
						outtFileOutputDelimited_29.close();
					}
				
				globalMap.put("tFileOutputDelimited_29_NB_LINE",nb_line_tFileOutputDelimited_29);
				globalMap.put("tFileOutputDelimited_29_FILE_NAME",fileName_tFileOutputDelimited_29);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_29", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row58");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_29", true);
end_Hash.put("tFileOutputDelimited_29", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_29_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_29_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If34", 0, "true");
					}
				tDie_29Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If34", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk192", 0, "ok");
				}
				tFileArchive_29Process(globalMap);



/**
 * [tFileOutputDelimited_29 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_29_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_29";
	
	currentComponent="tWriteJSONField_29_In";

	

 



/**
 * [tWriteJSONField_29_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_29 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_29";

	


		if(resourceMap.get("finish_tFileOutputDelimited_29") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_29 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_29");
						if(outtFileOutputDelimited_29!=null) {
							outtFileOutputDelimited_29.flush();
							outtFileOutputDelimited_29.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_29 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_29_In_SUBPROCESS_STATE", 1);
	}
	


public static class row56Struct implements routines.system.IPersistableRow<row56Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row56Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_28_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_28_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row56Struct row56 = new row56Struct();




	
	/**
	 * [tFileOutputDelimited_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_28", false);
		start_Hash.put("tFileOutputDelimited_28", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row56");
					}
				
		int tos_count_tFileOutputDelimited_28 = 0;
		

String fileName_tFileOutputDelimited_28 = "";
    fileName_tFileOutputDelimited_28 = (new java.io.File(context.staging_S3_dir + "noodlecrm__program_assignment__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_28 = null;
    String extension_tFileOutputDelimited_28 = null;
    String directory_tFileOutputDelimited_28 = null;
    if((fileName_tFileOutputDelimited_28.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_28.lastIndexOf(".") < fileName_tFileOutputDelimited_28.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28;
            extension_tFileOutputDelimited_28 = "";
        } else {
            fullName_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28.substring(0, fileName_tFileOutputDelimited_28.lastIndexOf("."));
            extension_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28.substring(fileName_tFileOutputDelimited_28.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28.substring(0, fileName_tFileOutputDelimited_28.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_28.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28.substring(0, fileName_tFileOutputDelimited_28.lastIndexOf("."));
            extension_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28.substring(fileName_tFileOutputDelimited_28.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28;
            extension_tFileOutputDelimited_28 = "";
        }
        directory_tFileOutputDelimited_28 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_28 = true;
    java.io.File filetFileOutputDelimited_28 = new java.io.File(fileName_tFileOutputDelimited_28);
    globalMap.put("tFileOutputDelimited_28_FILE_NAME",fileName_tFileOutputDelimited_28);
            int nb_line_tFileOutputDelimited_28 = 0;
            int splitedFileNo_tFileOutputDelimited_28 = 0;
            int currentRow_tFileOutputDelimited_28 = 0;

            final String OUT_DELIM_tFileOutputDelimited_28 = /** Start field tFileOutputDelimited_28:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_28:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_28 = /** Start field tFileOutputDelimited_28:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_28:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_28 != null && directory_tFileOutputDelimited_28.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_28 = new java.io.File(directory_tFileOutputDelimited_28);
                        if(!dir_tFileOutputDelimited_28.exists()) {
                            dir_tFileOutputDelimited_28.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_28 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_28 = new java.io.File(fileName_tFileOutputDelimited_28);
                        if(fileToDelete_tFileOutputDelimited_28.exists()) {
                            fileToDelete_tFileOutputDelimited_28.delete();
                        }
                        outtFileOutputDelimited_28 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_28, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_28", outtFileOutputDelimited_28);
resourceMap.put("nb_line_tFileOutputDelimited_28", nb_line_tFileOutputDelimited_28);

 



/**
 * [tFileOutputDelimited_28 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_28_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_28_In", false);
		start_Hash.put("tWriteJSONField_28_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_28";
	
	currentComponent="tWriteJSONField_28_In";

	
		int tos_count_tWriteJSONField_28_In = 0;
		

				int nb_line_tWriteJSONField_28_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_28_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_28_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_28_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_28_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_28_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row56Struct> queue_tWriteJSONField_28_In = (java.util.Queue<row56Struct>) globalMap.get("queue_tWriteJSONField_28_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_28_In = "tWriteJSONField_28_In_FINISH"+(queue_tWriteJSONField_28_In==null?"":queue_tWriteJSONField_28_In.hashCode());
				String str_tWriteJSONField_28_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_28_In) || !queue_tWriteJSONField_28_In.isEmpty()) {
					if (!queue_tWriteJSONField_28_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_28_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_28_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_28";
	
	currentComponent="tWriteJSONField_28_In";

	

                    row56Struct result_tWriteJSONField_28_In = queue_tWriteJSONField_28_In.poll();
                    str_tWriteJSONField_28_In = result_tWriteJSONField_28_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_28_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_28_In.setJsonStandard(jsonStandard_tWriteJSONField_28_In);
        net.sf.json.JSON json_tWriteJSONField_28_In = xmlSerializer_tWriteJSONField_28_In.read(str_tWriteJSONField_28_In);
        row56.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_28_In, jsonStandard_tWriteJSONField_28_In);
    
        nb_line_tWriteJSONField_28_In++;

 


	tos_count_tWriteJSONField_28_In++;

/**
 * [tWriteJSONField_28_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_28_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_28";
	
	currentComponent="tWriteJSONField_28_In";

	

 



/**
 * [tWriteJSONField_28_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_28 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row56");
					}
					


                    StringBuilder sb_tFileOutputDelimited_28 = new StringBuilder();
                            if(row56.data != null) {
                        sb_tFileOutputDelimited_28.append(
                            row56.data
                        );
                            }
                    sb_tFileOutputDelimited_28.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_28);


                    nb_line_tFileOutputDelimited_28++;
                    resourceMap.put("nb_line_tFileOutputDelimited_28", nb_line_tFileOutputDelimited_28);

                        outtFileOutputDelimited_28.write(sb_tFileOutputDelimited_28.toString());




 


	tos_count_tFileOutputDelimited_28++;

/**
 * [tFileOutputDelimited_28 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_28";

	

 



/**
 * [tFileOutputDelimited_28 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_28";

	

 



/**
 * [tFileOutputDelimited_28 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_28_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_28";
	
	currentComponent="tWriteJSONField_28_In";

	

 



/**
 * [tWriteJSONField_28_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_28_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_28";
	
	currentComponent="tWriteJSONField_28_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_28_In = "tWriteJSONField_28_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_28_In==null?"":queue_tWriteJSONField_28_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_28_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_28_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_28_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_28_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_28_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_28_In);
			
globalMap.put("tWriteJSONField_28_NB_LINE",nb_line_tWriteJSONField_28_In);
 

ok_Hash.put("tWriteJSONField_28_In", true);
end_Hash.put("tWriteJSONField_28_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_28_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_28 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_28";

	



		
			
					if(outtFileOutputDelimited_28!=null) {
						outtFileOutputDelimited_28.flush();
						outtFileOutputDelimited_28.close();
					}
				
				globalMap.put("tFileOutputDelimited_28_NB_LINE",nb_line_tFileOutputDelimited_28);
				globalMap.put("tFileOutputDelimited_28_FILE_NAME",fileName_tFileOutputDelimited_28);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_28", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row56");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_28", true);
end_Hash.put("tFileOutputDelimited_28", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_28_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_28_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If33", 0, "true");
					}
				tDie_28Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If33", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk188", 0, "ok");
				}
				tFileArchive_28Process(globalMap);



/**
 * [tFileOutputDelimited_28 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_28_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_28";
	
	currentComponent="tWriteJSONField_28_In";

	

 



/**
 * [tWriteJSONField_28_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_28 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_28";

	


		if(resourceMap.get("finish_tFileOutputDelimited_28") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_28 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_28");
						if(outtFileOutputDelimited_28!=null) {
							outtFileOutputDelimited_28.flush();
							outtFileOutputDelimited_28.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_28 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_28_In_SUBPROCESS_STATE", 1);
	}
	


public static class row54Struct implements routines.system.IPersistableRow<row54Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row54Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_27_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_27_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row54Struct row54 = new row54Struct();




	
	/**
	 * [tFileOutputDelimited_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_27", false);
		start_Hash.put("tFileOutputDelimited_27", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_27";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row54");
					}
				
		int tos_count_tFileOutputDelimited_27 = 0;
		

String fileName_tFileOutputDelimited_27 = "";
    fileName_tFileOutputDelimited_27 = (new java.io.File(context.staging_S3_dir + "noodlecrm__program__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_27 = null;
    String extension_tFileOutputDelimited_27 = null;
    String directory_tFileOutputDelimited_27 = null;
    if((fileName_tFileOutputDelimited_27.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_27.lastIndexOf(".") < fileName_tFileOutputDelimited_27.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27;
            extension_tFileOutputDelimited_27 = "";
        } else {
            fullName_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27.substring(0, fileName_tFileOutputDelimited_27.lastIndexOf("."));
            extension_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27.substring(fileName_tFileOutputDelimited_27.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27.substring(0, fileName_tFileOutputDelimited_27.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_27.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27.substring(0, fileName_tFileOutputDelimited_27.lastIndexOf("."));
            extension_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27.substring(fileName_tFileOutputDelimited_27.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27;
            extension_tFileOutputDelimited_27 = "";
        }
        directory_tFileOutputDelimited_27 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_27 = true;
    java.io.File filetFileOutputDelimited_27 = new java.io.File(fileName_tFileOutputDelimited_27);
    globalMap.put("tFileOutputDelimited_27_FILE_NAME",fileName_tFileOutputDelimited_27);
            int nb_line_tFileOutputDelimited_27 = 0;
            int splitedFileNo_tFileOutputDelimited_27 = 0;
            int currentRow_tFileOutputDelimited_27 = 0;

            final String OUT_DELIM_tFileOutputDelimited_27 = /** Start field tFileOutputDelimited_27:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_27:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_27 = /** Start field tFileOutputDelimited_27:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_27:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_27 != null && directory_tFileOutputDelimited_27.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_27 = new java.io.File(directory_tFileOutputDelimited_27);
                        if(!dir_tFileOutputDelimited_27.exists()) {
                            dir_tFileOutputDelimited_27.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_27 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_27 = new java.io.File(fileName_tFileOutputDelimited_27);
                        if(fileToDelete_tFileOutputDelimited_27.exists()) {
                            fileToDelete_tFileOutputDelimited_27.delete();
                        }
                        outtFileOutputDelimited_27 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_27, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_27", outtFileOutputDelimited_27);
resourceMap.put("nb_line_tFileOutputDelimited_27", nb_line_tFileOutputDelimited_27);

 



/**
 * [tFileOutputDelimited_27 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_27_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_27_In", false);
		start_Hash.put("tWriteJSONField_27_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_27";
	
	currentComponent="tWriteJSONField_27_In";

	
		int tos_count_tWriteJSONField_27_In = 0;
		

				int nb_line_tWriteJSONField_27_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_27_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_27_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_27_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_27_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_27_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row54Struct> queue_tWriteJSONField_27_In = (java.util.Queue<row54Struct>) globalMap.get("queue_tWriteJSONField_27_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_27_In = "tWriteJSONField_27_In_FINISH"+(queue_tWriteJSONField_27_In==null?"":queue_tWriteJSONField_27_In.hashCode());
				String str_tWriteJSONField_27_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_27_In) || !queue_tWriteJSONField_27_In.isEmpty()) {
					if (!queue_tWriteJSONField_27_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_27_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_27_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_27";
	
	currentComponent="tWriteJSONField_27_In";

	

                    row54Struct result_tWriteJSONField_27_In = queue_tWriteJSONField_27_In.poll();
                    str_tWriteJSONField_27_In = result_tWriteJSONField_27_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_27_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_27_In.setJsonStandard(jsonStandard_tWriteJSONField_27_In);
        net.sf.json.JSON json_tWriteJSONField_27_In = xmlSerializer_tWriteJSONField_27_In.read(str_tWriteJSONField_27_In);
        row54.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_27_In, jsonStandard_tWriteJSONField_27_In);
    
        nb_line_tWriteJSONField_27_In++;

 


	tos_count_tWriteJSONField_27_In++;

/**
 * [tWriteJSONField_27_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_27_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_27";
	
	currentComponent="tWriteJSONField_27_In";

	

 



/**
 * [tWriteJSONField_27_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_27 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row54");
					}
					


                    StringBuilder sb_tFileOutputDelimited_27 = new StringBuilder();
                            if(row54.data != null) {
                        sb_tFileOutputDelimited_27.append(
                            row54.data
                        );
                            }
                    sb_tFileOutputDelimited_27.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_27);


                    nb_line_tFileOutputDelimited_27++;
                    resourceMap.put("nb_line_tFileOutputDelimited_27", nb_line_tFileOutputDelimited_27);

                        outtFileOutputDelimited_27.write(sb_tFileOutputDelimited_27.toString());




 


	tos_count_tFileOutputDelimited_27++;

/**
 * [tFileOutputDelimited_27 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_27";

	

 



/**
 * [tFileOutputDelimited_27 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_27";

	

 



/**
 * [tFileOutputDelimited_27 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_27_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_27";
	
	currentComponent="tWriteJSONField_27_In";

	

 



/**
 * [tWriteJSONField_27_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_27_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_27";
	
	currentComponent="tWriteJSONField_27_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_27_In = "tWriteJSONField_27_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_27_In==null?"":queue_tWriteJSONField_27_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_27_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_27_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_27_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_27_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_27_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_27_In);
			
globalMap.put("tWriteJSONField_27_NB_LINE",nb_line_tWriteJSONField_27_In);
 

ok_Hash.put("tWriteJSONField_27_In", true);
end_Hash.put("tWriteJSONField_27_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_27_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_27 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_27";

	



		
			
					if(outtFileOutputDelimited_27!=null) {
						outtFileOutputDelimited_27.flush();
						outtFileOutputDelimited_27.close();
					}
				
				globalMap.put("tFileOutputDelimited_27_NB_LINE",nb_line_tFileOutputDelimited_27);
				globalMap.put("tFileOutputDelimited_27_FILE_NAME",fileName_tFileOutputDelimited_27);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_27", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row54");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_27", true);
end_Hash.put("tFileOutputDelimited_27", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_27_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_27_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If32", 0, "true");
					}
				tDie_27Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If32", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk184", 0, "ok");
				}
				tFileArchive_27Process(globalMap);



/**
 * [tFileOutputDelimited_27 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_27_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_27";
	
	currentComponent="tWriteJSONField_27_In";

	

 



/**
 * [tWriteJSONField_27_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_27 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_27";

	


		if(resourceMap.get("finish_tFileOutputDelimited_27") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_27 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_27");
						if(outtFileOutputDelimited_27!=null) {
							outtFileOutputDelimited_27.flush();
							outtFileOutputDelimited_27.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_27 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_27_In_SUBPROCESS_STATE", 1);
	}
	


public static class row52Struct implements routines.system.IPersistableRow<row52Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row52Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_26_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_26_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row52Struct row52 = new row52Struct();




	
	/**
	 * [tFileOutputDelimited_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_26", false);
		start_Hash.put("tFileOutputDelimited_26", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_26";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row52");
					}
				
		int tos_count_tFileOutputDelimited_26 = 0;
		

String fileName_tFileOutputDelimited_26 = "";
    fileName_tFileOutputDelimited_26 = (new java.io.File(context.staging_S3_dir + "noodlecrm__log_record__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_26 = null;
    String extension_tFileOutputDelimited_26 = null;
    String directory_tFileOutputDelimited_26 = null;
    if((fileName_tFileOutputDelimited_26.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_26.lastIndexOf(".") < fileName_tFileOutputDelimited_26.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26;
            extension_tFileOutputDelimited_26 = "";
        } else {
            fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26.substring(0, fileName_tFileOutputDelimited_26.lastIndexOf("."));
            extension_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26.substring(fileName_tFileOutputDelimited_26.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26.substring(0, fileName_tFileOutputDelimited_26.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_26.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26.substring(0, fileName_tFileOutputDelimited_26.lastIndexOf("."));
            extension_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26.substring(fileName_tFileOutputDelimited_26.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26;
            extension_tFileOutputDelimited_26 = "";
        }
        directory_tFileOutputDelimited_26 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_26 = true;
    java.io.File filetFileOutputDelimited_26 = new java.io.File(fileName_tFileOutputDelimited_26);
    globalMap.put("tFileOutputDelimited_26_FILE_NAME",fileName_tFileOutputDelimited_26);
            int nb_line_tFileOutputDelimited_26 = 0;
            int splitedFileNo_tFileOutputDelimited_26 = 0;
            int currentRow_tFileOutputDelimited_26 = 0;

            final String OUT_DELIM_tFileOutputDelimited_26 = /** Start field tFileOutputDelimited_26:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_26:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_26 = /** Start field tFileOutputDelimited_26:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_26:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_26 != null && directory_tFileOutputDelimited_26.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_26 = new java.io.File(directory_tFileOutputDelimited_26);
                        if(!dir_tFileOutputDelimited_26.exists()) {
                            dir_tFileOutputDelimited_26.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_26 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_26 = new java.io.File(fileName_tFileOutputDelimited_26);
                        if(fileToDelete_tFileOutputDelimited_26.exists()) {
                            fileToDelete_tFileOutputDelimited_26.delete();
                        }
                        outtFileOutputDelimited_26 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_26, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_26", outtFileOutputDelimited_26);
resourceMap.put("nb_line_tFileOutputDelimited_26", nb_line_tFileOutputDelimited_26);

 



/**
 * [tFileOutputDelimited_26 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_26_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_26_In", false);
		start_Hash.put("tWriteJSONField_26_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_26";
	
	currentComponent="tWriteJSONField_26_In";

	
		int tos_count_tWriteJSONField_26_In = 0;
		

				int nb_line_tWriteJSONField_26_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_26_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_26_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_26_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_26_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_26_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row52Struct> queue_tWriteJSONField_26_In = (java.util.Queue<row52Struct>) globalMap.get("queue_tWriteJSONField_26_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_26_In = "tWriteJSONField_26_In_FINISH"+(queue_tWriteJSONField_26_In==null?"":queue_tWriteJSONField_26_In.hashCode());
				String str_tWriteJSONField_26_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_26_In) || !queue_tWriteJSONField_26_In.isEmpty()) {
					if (!queue_tWriteJSONField_26_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_26_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_26_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_26";
	
	currentComponent="tWriteJSONField_26_In";

	

                    row52Struct result_tWriteJSONField_26_In = queue_tWriteJSONField_26_In.poll();
                    str_tWriteJSONField_26_In = result_tWriteJSONField_26_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_26_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_26_In.setJsonStandard(jsonStandard_tWriteJSONField_26_In);
        net.sf.json.JSON json_tWriteJSONField_26_In = xmlSerializer_tWriteJSONField_26_In.read(str_tWriteJSONField_26_In);
        row52.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_26_In, jsonStandard_tWriteJSONField_26_In);
    
        nb_line_tWriteJSONField_26_In++;

 


	tos_count_tWriteJSONField_26_In++;

/**
 * [tWriteJSONField_26_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_26_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_26";
	
	currentComponent="tWriteJSONField_26_In";

	

 



/**
 * [tWriteJSONField_26_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_26 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_26";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row52");
					}
					


                    StringBuilder sb_tFileOutputDelimited_26 = new StringBuilder();
                            if(row52.data != null) {
                        sb_tFileOutputDelimited_26.append(
                            row52.data
                        );
                            }
                    sb_tFileOutputDelimited_26.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_26);


                    nb_line_tFileOutputDelimited_26++;
                    resourceMap.put("nb_line_tFileOutputDelimited_26", nb_line_tFileOutputDelimited_26);

                        outtFileOutputDelimited_26.write(sb_tFileOutputDelimited_26.toString());




 


	tos_count_tFileOutputDelimited_26++;

/**
 * [tFileOutputDelimited_26 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_26";

	

 



/**
 * [tFileOutputDelimited_26 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_26";

	

 



/**
 * [tFileOutputDelimited_26 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_26_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_26";
	
	currentComponent="tWriteJSONField_26_In";

	

 



/**
 * [tWriteJSONField_26_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_26_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_26";
	
	currentComponent="tWriteJSONField_26_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_26_In = "tWriteJSONField_26_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_26_In==null?"":queue_tWriteJSONField_26_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_26_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_26_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_26_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_26_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_26_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_26_In);
			
globalMap.put("tWriteJSONField_26_NB_LINE",nb_line_tWriteJSONField_26_In);
 

ok_Hash.put("tWriteJSONField_26_In", true);
end_Hash.put("tWriteJSONField_26_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_26_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_26 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_26";

	



		
			
					if(outtFileOutputDelimited_26!=null) {
						outtFileOutputDelimited_26.flush();
						outtFileOutputDelimited_26.close();
					}
				
				globalMap.put("tFileOutputDelimited_26_NB_LINE",nb_line_tFileOutputDelimited_26);
				globalMap.put("tFileOutputDelimited_26_FILE_NAME",fileName_tFileOutputDelimited_26);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_26", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row52");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_26", true);
end_Hash.put("tFileOutputDelimited_26", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_26_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_26_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If31", 0, "true");
					}
				tDie_26Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If31", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk180", 0, "ok");
				}
				tFileArchive_26Process(globalMap);



/**
 * [tFileOutputDelimited_26 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_26_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_26";
	
	currentComponent="tWriteJSONField_26_In";

	

 



/**
 * [tWriteJSONField_26_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_26 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_26";

	


		if(resourceMap.get("finish_tFileOutputDelimited_26") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_26 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_26");
						if(outtFileOutputDelimited_26!=null) {
							outtFileOutputDelimited_26.flush();
							outtFileOutputDelimited_26.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_26 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_26_In_SUBPROCESS_STATE", 1);
	}
	


public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_25_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_25_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row50Struct row50 = new row50Struct();




	
	/**
	 * [tFileOutputDelimited_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_25", false);
		start_Hash.put("tFileOutputDelimited_25", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row50");
					}
				
		int tos_count_tFileOutputDelimited_25 = 0;
		

String fileName_tFileOutputDelimited_25 = "";
    fileName_tFileOutputDelimited_25 = (new java.io.File(context.staging_S3_dir + "noodlecrm__locator__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_25 = null;
    String extension_tFileOutputDelimited_25 = null;
    String directory_tFileOutputDelimited_25 = null;
    if((fileName_tFileOutputDelimited_25.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_25.lastIndexOf(".") < fileName_tFileOutputDelimited_25.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25;
            extension_tFileOutputDelimited_25 = "";
        } else {
            fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25.substring(0, fileName_tFileOutputDelimited_25.lastIndexOf("."));
            extension_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25.substring(fileName_tFileOutputDelimited_25.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25.substring(0, fileName_tFileOutputDelimited_25.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_25.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25.substring(0, fileName_tFileOutputDelimited_25.lastIndexOf("."));
            extension_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25.substring(fileName_tFileOutputDelimited_25.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25;
            extension_tFileOutputDelimited_25 = "";
        }
        directory_tFileOutputDelimited_25 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_25 = true;
    java.io.File filetFileOutputDelimited_25 = new java.io.File(fileName_tFileOutputDelimited_25);
    globalMap.put("tFileOutputDelimited_25_FILE_NAME",fileName_tFileOutputDelimited_25);
            int nb_line_tFileOutputDelimited_25 = 0;
            int splitedFileNo_tFileOutputDelimited_25 = 0;
            int currentRow_tFileOutputDelimited_25 = 0;

            final String OUT_DELIM_tFileOutputDelimited_25 = /** Start field tFileOutputDelimited_25:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_25:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_25 = /** Start field tFileOutputDelimited_25:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_25:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_25 != null && directory_tFileOutputDelimited_25.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_25 = new java.io.File(directory_tFileOutputDelimited_25);
                        if(!dir_tFileOutputDelimited_25.exists()) {
                            dir_tFileOutputDelimited_25.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_25 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_25 = new java.io.File(fileName_tFileOutputDelimited_25);
                        if(fileToDelete_tFileOutputDelimited_25.exists()) {
                            fileToDelete_tFileOutputDelimited_25.delete();
                        }
                        outtFileOutputDelimited_25 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_25, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_25", outtFileOutputDelimited_25);
resourceMap.put("nb_line_tFileOutputDelimited_25", nb_line_tFileOutputDelimited_25);

 



/**
 * [tFileOutputDelimited_25 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_25_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_25_In", false);
		start_Hash.put("tWriteJSONField_25_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_25";
	
	currentComponent="tWriteJSONField_25_In";

	
		int tos_count_tWriteJSONField_25_In = 0;
		

				int nb_line_tWriteJSONField_25_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_25_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_25_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_25_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_25_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_25_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row50Struct> queue_tWriteJSONField_25_In = (java.util.Queue<row50Struct>) globalMap.get("queue_tWriteJSONField_25_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_25_In = "tWriteJSONField_25_In_FINISH"+(queue_tWriteJSONField_25_In==null?"":queue_tWriteJSONField_25_In.hashCode());
				String str_tWriteJSONField_25_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_25_In) || !queue_tWriteJSONField_25_In.isEmpty()) {
					if (!queue_tWriteJSONField_25_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_25_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_25_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_25";
	
	currentComponent="tWriteJSONField_25_In";

	

                    row50Struct result_tWriteJSONField_25_In = queue_tWriteJSONField_25_In.poll();
                    str_tWriteJSONField_25_In = result_tWriteJSONField_25_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_25_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_25_In.setJsonStandard(jsonStandard_tWriteJSONField_25_In);
        net.sf.json.JSON json_tWriteJSONField_25_In = xmlSerializer_tWriteJSONField_25_In.read(str_tWriteJSONField_25_In);
        row50.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_25_In, jsonStandard_tWriteJSONField_25_In);
    
        nb_line_tWriteJSONField_25_In++;

 


	tos_count_tWriteJSONField_25_In++;

/**
 * [tWriteJSONField_25_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_25_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_25";
	
	currentComponent="tWriteJSONField_25_In";

	

 



/**
 * [tWriteJSONField_25_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_25 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row50");
					}
					


                    StringBuilder sb_tFileOutputDelimited_25 = new StringBuilder();
                            if(row50.data != null) {
                        sb_tFileOutputDelimited_25.append(
                            row50.data
                        );
                            }
                    sb_tFileOutputDelimited_25.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_25);


                    nb_line_tFileOutputDelimited_25++;
                    resourceMap.put("nb_line_tFileOutputDelimited_25", nb_line_tFileOutputDelimited_25);

                        outtFileOutputDelimited_25.write(sb_tFileOutputDelimited_25.toString());




 


	tos_count_tFileOutputDelimited_25++;

/**
 * [tFileOutputDelimited_25 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_25";

	

 



/**
 * [tFileOutputDelimited_25 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_25";

	

 



/**
 * [tFileOutputDelimited_25 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_25_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_25";
	
	currentComponent="tWriteJSONField_25_In";

	

 



/**
 * [tWriteJSONField_25_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_25_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_25";
	
	currentComponent="tWriteJSONField_25_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_25_In = "tWriteJSONField_25_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_25_In==null?"":queue_tWriteJSONField_25_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_25_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_25_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_25_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_25_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_25_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_25_In);
			
globalMap.put("tWriteJSONField_25_NB_LINE",nb_line_tWriteJSONField_25_In);
 

ok_Hash.put("tWriteJSONField_25_In", true);
end_Hash.put("tWriteJSONField_25_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_25_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_25 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_25";

	



		
			
					if(outtFileOutputDelimited_25!=null) {
						outtFileOutputDelimited_25.flush();
						outtFileOutputDelimited_25.close();
					}
				
				globalMap.put("tFileOutputDelimited_25_NB_LINE",nb_line_tFileOutputDelimited_25);
				globalMap.put("tFileOutputDelimited_25_FILE_NAME",fileName_tFileOutputDelimited_25);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_25", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row50");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_25", true);
end_Hash.put("tFileOutputDelimited_25", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_25_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_25_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If30", 0, "true");
					}
				tDie_25Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If30", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk176", 0, "ok");
				}
				tFileArchive_25Process(globalMap);



/**
 * [tFileOutputDelimited_25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_25_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_25";
	
	currentComponent="tWriteJSONField_25_In";

	

 



/**
 * [tWriteJSONField_25_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_25 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_25";

	


		if(resourceMap.get("finish_tFileOutputDelimited_25") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_25 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_25");
						if(outtFileOutputDelimited_25!=null) {
							outtFileOutputDelimited_25.flush();
							outtFileOutputDelimited_25.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_25_In_SUBPROCESS_STATE", 1);
	}
	


public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_24_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_24_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row48Struct row48 = new row48Struct();




	
	/**
	 * [tFileOutputDelimited_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_24", false);
		start_Hash.put("tFileOutputDelimited_24", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tFileOutputDelimited_24 = 0;
		

String fileName_tFileOutputDelimited_24 = "";
    fileName_tFileOutputDelimited_24 = (new java.io.File(context.staging_S3_dir + "noodlecrm__inquiry__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_24 = null;
    String extension_tFileOutputDelimited_24 = null;
    String directory_tFileOutputDelimited_24 = null;
    if((fileName_tFileOutputDelimited_24.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_24.lastIndexOf(".") < fileName_tFileOutputDelimited_24.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24;
            extension_tFileOutputDelimited_24 = "";
        } else {
            fullName_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24.substring(0, fileName_tFileOutputDelimited_24.lastIndexOf("."));
            extension_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24.substring(fileName_tFileOutputDelimited_24.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24.substring(0, fileName_tFileOutputDelimited_24.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_24.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24.substring(0, fileName_tFileOutputDelimited_24.lastIndexOf("."));
            extension_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24.substring(fileName_tFileOutputDelimited_24.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24;
            extension_tFileOutputDelimited_24 = "";
        }
        directory_tFileOutputDelimited_24 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_24 = true;
    java.io.File filetFileOutputDelimited_24 = new java.io.File(fileName_tFileOutputDelimited_24);
    globalMap.put("tFileOutputDelimited_24_FILE_NAME",fileName_tFileOutputDelimited_24);
            int nb_line_tFileOutputDelimited_24 = 0;
            int splitedFileNo_tFileOutputDelimited_24 = 0;
            int currentRow_tFileOutputDelimited_24 = 0;

            final String OUT_DELIM_tFileOutputDelimited_24 = /** Start field tFileOutputDelimited_24:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_24:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_24 = /** Start field tFileOutputDelimited_24:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_24:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_24 != null && directory_tFileOutputDelimited_24.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_24 = new java.io.File(directory_tFileOutputDelimited_24);
                        if(!dir_tFileOutputDelimited_24.exists()) {
                            dir_tFileOutputDelimited_24.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_24 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_24 = new java.io.File(fileName_tFileOutputDelimited_24);
                        if(fileToDelete_tFileOutputDelimited_24.exists()) {
                            fileToDelete_tFileOutputDelimited_24.delete();
                        }
                        outtFileOutputDelimited_24 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_24, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_24", outtFileOutputDelimited_24);
resourceMap.put("nb_line_tFileOutputDelimited_24", nb_line_tFileOutputDelimited_24);

 



/**
 * [tFileOutputDelimited_24 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_24_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_24_In", false);
		start_Hash.put("tWriteJSONField_24_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_24";
	
	currentComponent="tWriteJSONField_24_In";

	
		int tos_count_tWriteJSONField_24_In = 0;
		

				int nb_line_tWriteJSONField_24_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_24_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_24_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_24_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_24_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_24_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row48Struct> queue_tWriteJSONField_24_In = (java.util.Queue<row48Struct>) globalMap.get("queue_tWriteJSONField_24_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_24_In = "tWriteJSONField_24_In_FINISH"+(queue_tWriteJSONField_24_In==null?"":queue_tWriteJSONField_24_In.hashCode());
				String str_tWriteJSONField_24_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_24_In) || !queue_tWriteJSONField_24_In.isEmpty()) {
					if (!queue_tWriteJSONField_24_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_24_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_24_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_24";
	
	currentComponent="tWriteJSONField_24_In";

	

                    row48Struct result_tWriteJSONField_24_In = queue_tWriteJSONField_24_In.poll();
                    str_tWriteJSONField_24_In = result_tWriteJSONField_24_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_24_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_24_In.setJsonStandard(jsonStandard_tWriteJSONField_24_In);
        net.sf.json.JSON json_tWriteJSONField_24_In = xmlSerializer_tWriteJSONField_24_In.read(str_tWriteJSONField_24_In);
        row48.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_24_In, jsonStandard_tWriteJSONField_24_In);
    
        nb_line_tWriteJSONField_24_In++;

 


	tos_count_tWriteJSONField_24_In++;

/**
 * [tWriteJSONField_24_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_24_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_24";
	
	currentComponent="tWriteJSONField_24_In";

	

 



/**
 * [tWriteJSONField_24_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_24 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row48");
					}
					


                    StringBuilder sb_tFileOutputDelimited_24 = new StringBuilder();
                            if(row48.data != null) {
                        sb_tFileOutputDelimited_24.append(
                            row48.data
                        );
                            }
                    sb_tFileOutputDelimited_24.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_24);


                    nb_line_tFileOutputDelimited_24++;
                    resourceMap.put("nb_line_tFileOutputDelimited_24", nb_line_tFileOutputDelimited_24);

                        outtFileOutputDelimited_24.write(sb_tFileOutputDelimited_24.toString());




 


	tos_count_tFileOutputDelimited_24++;

/**
 * [tFileOutputDelimited_24 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_24";

	

 



/**
 * [tFileOutputDelimited_24 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_24";

	

 



/**
 * [tFileOutputDelimited_24 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_24_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_24";
	
	currentComponent="tWriteJSONField_24_In";

	

 



/**
 * [tWriteJSONField_24_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_24_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_24";
	
	currentComponent="tWriteJSONField_24_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_24_In = "tWriteJSONField_24_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_24_In==null?"":queue_tWriteJSONField_24_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_24_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_24_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_24_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_24_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_24_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_24_In);
			
globalMap.put("tWriteJSONField_24_NB_LINE",nb_line_tWriteJSONField_24_In);
 

ok_Hash.put("tWriteJSONField_24_In", true);
end_Hash.put("tWriteJSONField_24_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_24_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_24 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_24";

	



		
			
					if(outtFileOutputDelimited_24!=null) {
						outtFileOutputDelimited_24.flush();
						outtFileOutputDelimited_24.close();
					}
				
				globalMap.put("tFileOutputDelimited_24_NB_LINE",nb_line_tFileOutputDelimited_24);
				globalMap.put("tFileOutputDelimited_24_FILE_NAME",fileName_tFileOutputDelimited_24);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_24", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_24", true);
end_Hash.put("tFileOutputDelimited_24", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_24_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_24_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If29", 0, "true");
					}
				tDie_24Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If29", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk173", 0, "ok");
				}
				tFileArchive_24Process(globalMap);



/**
 * [tFileOutputDelimited_24 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_24_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_24";
	
	currentComponent="tWriteJSONField_24_In";

	

 



/**
 * [tWriteJSONField_24_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_24 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_24";

	


		if(resourceMap.get("finish_tFileOutputDelimited_24") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_24 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_24");
						if(outtFileOutputDelimited_24!=null) {
							outtFileOutputDelimited_24.flush();
							outtFileOutputDelimited_24.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_24 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_24_In_SUBPROCESS_STATE", 1);
	}
	


public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_23_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_23_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row46Struct row46 = new row46Struct();




	
	/**
	 * [tFileOutputDelimited_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_23", false);
		start_Hash.put("tFileOutputDelimited_23", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tFileOutputDelimited_23 = 0;
		

String fileName_tFileOutputDelimited_23 = "";
    fileName_tFileOutputDelimited_23 = (new java.io.File(context.staging_S3_dir + "noodlecrm__application_item_legacy__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_23 = null;
    String extension_tFileOutputDelimited_23 = null;
    String directory_tFileOutputDelimited_23 = null;
    if((fileName_tFileOutputDelimited_23.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_23.lastIndexOf(".") < fileName_tFileOutputDelimited_23.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23;
            extension_tFileOutputDelimited_23 = "";
        } else {
            fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23.substring(0, fileName_tFileOutputDelimited_23.lastIndexOf("."));
            extension_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23.substring(fileName_tFileOutputDelimited_23.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23.substring(0, fileName_tFileOutputDelimited_23.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_23.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23.substring(0, fileName_tFileOutputDelimited_23.lastIndexOf("."));
            extension_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23.substring(fileName_tFileOutputDelimited_23.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23;
            extension_tFileOutputDelimited_23 = "";
        }
        directory_tFileOutputDelimited_23 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_23 = true;
    java.io.File filetFileOutputDelimited_23 = new java.io.File(fileName_tFileOutputDelimited_23);
    globalMap.put("tFileOutputDelimited_23_FILE_NAME",fileName_tFileOutputDelimited_23);
            int nb_line_tFileOutputDelimited_23 = 0;
            int splitedFileNo_tFileOutputDelimited_23 = 0;
            int currentRow_tFileOutputDelimited_23 = 0;

            final String OUT_DELIM_tFileOutputDelimited_23 = /** Start field tFileOutputDelimited_23:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_23:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_23 = /** Start field tFileOutputDelimited_23:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_23:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_23 != null && directory_tFileOutputDelimited_23.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_23 = new java.io.File(directory_tFileOutputDelimited_23);
                        if(!dir_tFileOutputDelimited_23.exists()) {
                            dir_tFileOutputDelimited_23.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_23 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_23 = new java.io.File(fileName_tFileOutputDelimited_23);
                        if(fileToDelete_tFileOutputDelimited_23.exists()) {
                            fileToDelete_tFileOutputDelimited_23.delete();
                        }
                        outtFileOutputDelimited_23 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_23, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_23", outtFileOutputDelimited_23);
resourceMap.put("nb_line_tFileOutputDelimited_23", nb_line_tFileOutputDelimited_23);

 



/**
 * [tFileOutputDelimited_23 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_23_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_23_In", false);
		start_Hash.put("tWriteJSONField_23_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_23";
	
	currentComponent="tWriteJSONField_23_In";

	
		int tos_count_tWriteJSONField_23_In = 0;
		

				int nb_line_tWriteJSONField_23_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_23_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_23_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_23_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_23_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_23_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row46Struct> queue_tWriteJSONField_23_In = (java.util.Queue<row46Struct>) globalMap.get("queue_tWriteJSONField_23_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_23_In = "tWriteJSONField_23_In_FINISH"+(queue_tWriteJSONField_23_In==null?"":queue_tWriteJSONField_23_In.hashCode());
				String str_tWriteJSONField_23_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_23_In) || !queue_tWriteJSONField_23_In.isEmpty()) {
					if (!queue_tWriteJSONField_23_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_23_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_23_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_23";
	
	currentComponent="tWriteJSONField_23_In";

	

                    row46Struct result_tWriteJSONField_23_In = queue_tWriteJSONField_23_In.poll();
                    str_tWriteJSONField_23_In = result_tWriteJSONField_23_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_23_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_23_In.setJsonStandard(jsonStandard_tWriteJSONField_23_In);
        net.sf.json.JSON json_tWriteJSONField_23_In = xmlSerializer_tWriteJSONField_23_In.read(str_tWriteJSONField_23_In);
        row46.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_23_In, jsonStandard_tWriteJSONField_23_In);
    
        nb_line_tWriteJSONField_23_In++;

 


	tos_count_tWriteJSONField_23_In++;

/**
 * [tWriteJSONField_23_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_23_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_23";
	
	currentComponent="tWriteJSONField_23_In";

	

 



/**
 * [tWriteJSONField_23_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_23 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row46");
					}
					


                    StringBuilder sb_tFileOutputDelimited_23 = new StringBuilder();
                            if(row46.data != null) {
                        sb_tFileOutputDelimited_23.append(
                            row46.data
                        );
                            }
                    sb_tFileOutputDelimited_23.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_23);


                    nb_line_tFileOutputDelimited_23++;
                    resourceMap.put("nb_line_tFileOutputDelimited_23", nb_line_tFileOutputDelimited_23);

                        outtFileOutputDelimited_23.write(sb_tFileOutputDelimited_23.toString());




 


	tos_count_tFileOutputDelimited_23++;

/**
 * [tFileOutputDelimited_23 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_23";

	

 



/**
 * [tFileOutputDelimited_23 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_23";

	

 



/**
 * [tFileOutputDelimited_23 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_23_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_23";
	
	currentComponent="tWriteJSONField_23_In";

	

 



/**
 * [tWriteJSONField_23_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_23_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_23";
	
	currentComponent="tWriteJSONField_23_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_23_In = "tWriteJSONField_23_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_23_In==null?"":queue_tWriteJSONField_23_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_23_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_23_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_23_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_23_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_23_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_23_In);
			
globalMap.put("tWriteJSONField_23_NB_LINE",nb_line_tWriteJSONField_23_In);
 

ok_Hash.put("tWriteJSONField_23_In", true);
end_Hash.put("tWriteJSONField_23_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_23_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_23 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_23";

	



		
			
					if(outtFileOutputDelimited_23!=null) {
						outtFileOutputDelimited_23.flush();
						outtFileOutputDelimited_23.close();
					}
				
				globalMap.put("tFileOutputDelimited_23_NB_LINE",nb_line_tFileOutputDelimited_23);
				globalMap.put("tFileOutputDelimited_23_FILE_NAME",fileName_tFileOutputDelimited_23);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_23", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_23", true);
end_Hash.put("tFileOutputDelimited_23", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_23_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_23_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If28", 0, "true");
					}
				tDie_23Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If28", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk168", 0, "ok");
				}
				tFileArchive_23Process(globalMap);



/**
 * [tFileOutputDelimited_23 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_23_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_23";
	
	currentComponent="tWriteJSONField_23_In";

	

 



/**
 * [tWriteJSONField_23_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_23 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_23";

	


		if(resourceMap.get("finish_tFileOutputDelimited_23") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_23 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_23");
						if(outtFileOutputDelimited_23!=null) {
							outtFileOutputDelimited_23.flush();
							outtFileOutputDelimited_23.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_23 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_23_In_SUBPROCESS_STATE", 1);
	}
	


public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_22_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_22_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();




	
	/**
	 * [tFileOutputDelimited_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_22", false);
		start_Hash.put("tFileOutputDelimited_22", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tFileOutputDelimited_22 = 0;
		

String fileName_tFileOutputDelimited_22 = "";
    fileName_tFileOutputDelimited_22 = (new java.io.File(context.staging_S3_dir + "noodlecrm__application_item__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_22 = null;
    String extension_tFileOutputDelimited_22 = null;
    String directory_tFileOutputDelimited_22 = null;
    if((fileName_tFileOutputDelimited_22.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_22.lastIndexOf(".") < fileName_tFileOutputDelimited_22.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22;
            extension_tFileOutputDelimited_22 = "";
        } else {
            fullName_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22.substring(0, fileName_tFileOutputDelimited_22.lastIndexOf("."));
            extension_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22.substring(fileName_tFileOutputDelimited_22.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22.substring(0, fileName_tFileOutputDelimited_22.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_22.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22.substring(0, fileName_tFileOutputDelimited_22.lastIndexOf("."));
            extension_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22.substring(fileName_tFileOutputDelimited_22.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22;
            extension_tFileOutputDelimited_22 = "";
        }
        directory_tFileOutputDelimited_22 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_22 = true;
    java.io.File filetFileOutputDelimited_22 = new java.io.File(fileName_tFileOutputDelimited_22);
    globalMap.put("tFileOutputDelimited_22_FILE_NAME",fileName_tFileOutputDelimited_22);
            int nb_line_tFileOutputDelimited_22 = 0;
            int splitedFileNo_tFileOutputDelimited_22 = 0;
            int currentRow_tFileOutputDelimited_22 = 0;

            final String OUT_DELIM_tFileOutputDelimited_22 = /** Start field tFileOutputDelimited_22:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_22:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_22 = /** Start field tFileOutputDelimited_22:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_22:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_22 != null && directory_tFileOutputDelimited_22.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_22 = new java.io.File(directory_tFileOutputDelimited_22);
                        if(!dir_tFileOutputDelimited_22.exists()) {
                            dir_tFileOutputDelimited_22.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_22 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_22 = new java.io.File(fileName_tFileOutputDelimited_22);
                        if(fileToDelete_tFileOutputDelimited_22.exists()) {
                            fileToDelete_tFileOutputDelimited_22.delete();
                        }
                        outtFileOutputDelimited_22 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_22, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_22", outtFileOutputDelimited_22);
resourceMap.put("nb_line_tFileOutputDelimited_22", nb_line_tFileOutputDelimited_22);

 



/**
 * [tFileOutputDelimited_22 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_22_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_22_In", false);
		start_Hash.put("tWriteJSONField_22_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_22";
	
	currentComponent="tWriteJSONField_22_In";

	
		int tos_count_tWriteJSONField_22_In = 0;
		

				int nb_line_tWriteJSONField_22_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_22_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_22_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_22_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_22_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_22_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row44Struct> queue_tWriteJSONField_22_In = (java.util.Queue<row44Struct>) globalMap.get("queue_tWriteJSONField_22_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_22_In = "tWriteJSONField_22_In_FINISH"+(queue_tWriteJSONField_22_In==null?"":queue_tWriteJSONField_22_In.hashCode());
				String str_tWriteJSONField_22_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_22_In) || !queue_tWriteJSONField_22_In.isEmpty()) {
					if (!queue_tWriteJSONField_22_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_22_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_22_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_22";
	
	currentComponent="tWriteJSONField_22_In";

	

                    row44Struct result_tWriteJSONField_22_In = queue_tWriteJSONField_22_In.poll();
                    str_tWriteJSONField_22_In = result_tWriteJSONField_22_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_22_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_22_In.setJsonStandard(jsonStandard_tWriteJSONField_22_In);
        net.sf.json.JSON json_tWriteJSONField_22_In = xmlSerializer_tWriteJSONField_22_In.read(str_tWriteJSONField_22_In);
        row44.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_22_In, jsonStandard_tWriteJSONField_22_In);
    
        nb_line_tWriteJSONField_22_In++;

 


	tos_count_tWriteJSONField_22_In++;

/**
 * [tWriteJSONField_22_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_22_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_22";
	
	currentComponent="tWriteJSONField_22_In";

	

 



/**
 * [tWriteJSONField_22_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_22 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row44");
					}
					


                    StringBuilder sb_tFileOutputDelimited_22 = new StringBuilder();
                            if(row44.data != null) {
                        sb_tFileOutputDelimited_22.append(
                            row44.data
                        );
                            }
                    sb_tFileOutputDelimited_22.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_22);


                    nb_line_tFileOutputDelimited_22++;
                    resourceMap.put("nb_line_tFileOutputDelimited_22", nb_line_tFileOutputDelimited_22);

                        outtFileOutputDelimited_22.write(sb_tFileOutputDelimited_22.toString());




 


	tos_count_tFileOutputDelimited_22++;

/**
 * [tFileOutputDelimited_22 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_22";

	

 



/**
 * [tFileOutputDelimited_22 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_22";

	

 



/**
 * [tFileOutputDelimited_22 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_22_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_22";
	
	currentComponent="tWriteJSONField_22_In";

	

 



/**
 * [tWriteJSONField_22_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_22_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_22";
	
	currentComponent="tWriteJSONField_22_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_22_In = "tWriteJSONField_22_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_22_In==null?"":queue_tWriteJSONField_22_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_22_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_22_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_22_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_22_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_22_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_22_In);
			
globalMap.put("tWriteJSONField_22_NB_LINE",nb_line_tWriteJSONField_22_In);
 

ok_Hash.put("tWriteJSONField_22_In", true);
end_Hash.put("tWriteJSONField_22_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_22_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_22 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_22";

	



		
			
					if(outtFileOutputDelimited_22!=null) {
						outtFileOutputDelimited_22.flush();
						outtFileOutputDelimited_22.close();
					}
				
				globalMap.put("tFileOutputDelimited_22_NB_LINE",nb_line_tFileOutputDelimited_22);
				globalMap.put("tFileOutputDelimited_22_FILE_NAME",fileName_tFileOutputDelimited_22);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_22", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_22", true);
end_Hash.put("tFileOutputDelimited_22", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_22_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_22_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If27", 0, "true");
					}
				tDie_22Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If27", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk164", 0, "ok");
				}
				tFileArchive_22Process(globalMap);



/**
 * [tFileOutputDelimited_22 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_22_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_22";
	
	currentComponent="tWriteJSONField_22_In";

	

 



/**
 * [tWriteJSONField_22_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_22 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_22";

	


		if(resourceMap.get("finish_tFileOutputDelimited_22") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_22 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_22");
						if(outtFileOutputDelimited_22!=null) {
							outtFileOutputDelimited_22.flush();
							outtFileOutputDelimited_22.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_22 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_22_In_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_21_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_21_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();




	
	/**
	 * [tFileOutputDelimited_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_21", false);
		start_Hash.put("tFileOutputDelimited_21", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tFileOutputDelimited_21 = 0;
		

String fileName_tFileOutputDelimited_21 = "";
    fileName_tFileOutputDelimited_21 = (new java.io.File(context.staging_S3_dir + "noodlecrm__application_decision__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_21 = null;
    String extension_tFileOutputDelimited_21 = null;
    String directory_tFileOutputDelimited_21 = null;
    if((fileName_tFileOutputDelimited_21.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_21.lastIndexOf(".") < fileName_tFileOutputDelimited_21.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21;
            extension_tFileOutputDelimited_21 = "";
        } else {
            fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21.substring(0, fileName_tFileOutputDelimited_21.lastIndexOf("."));
            extension_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21.substring(fileName_tFileOutputDelimited_21.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21.substring(0, fileName_tFileOutputDelimited_21.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_21.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21.substring(0, fileName_tFileOutputDelimited_21.lastIndexOf("."));
            extension_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21.substring(fileName_tFileOutputDelimited_21.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21;
            extension_tFileOutputDelimited_21 = "";
        }
        directory_tFileOutputDelimited_21 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_21 = true;
    java.io.File filetFileOutputDelimited_21 = new java.io.File(fileName_tFileOutputDelimited_21);
    globalMap.put("tFileOutputDelimited_21_FILE_NAME",fileName_tFileOutputDelimited_21);
            int nb_line_tFileOutputDelimited_21 = 0;
            int splitedFileNo_tFileOutputDelimited_21 = 0;
            int currentRow_tFileOutputDelimited_21 = 0;

            final String OUT_DELIM_tFileOutputDelimited_21 = /** Start field tFileOutputDelimited_21:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_21:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_21 = /** Start field tFileOutputDelimited_21:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_21:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_21 != null && directory_tFileOutputDelimited_21.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_21 = new java.io.File(directory_tFileOutputDelimited_21);
                        if(!dir_tFileOutputDelimited_21.exists()) {
                            dir_tFileOutputDelimited_21.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_21 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_21 = new java.io.File(fileName_tFileOutputDelimited_21);
                        if(fileToDelete_tFileOutputDelimited_21.exists()) {
                            fileToDelete_tFileOutputDelimited_21.delete();
                        }
                        outtFileOutputDelimited_21 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_21, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_21", outtFileOutputDelimited_21);
resourceMap.put("nb_line_tFileOutputDelimited_21", nb_line_tFileOutputDelimited_21);

 



/**
 * [tFileOutputDelimited_21 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_21_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_21_In", false);
		start_Hash.put("tWriteJSONField_21_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_21";
	
	currentComponent="tWriteJSONField_21_In";

	
		int tos_count_tWriteJSONField_21_In = 0;
		

				int nb_line_tWriteJSONField_21_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_21_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_21_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_21_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_21_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_21_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row42Struct> queue_tWriteJSONField_21_In = (java.util.Queue<row42Struct>) globalMap.get("queue_tWriteJSONField_21_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_21_In = "tWriteJSONField_21_In_FINISH"+(queue_tWriteJSONField_21_In==null?"":queue_tWriteJSONField_21_In.hashCode());
				String str_tWriteJSONField_21_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_21_In) || !queue_tWriteJSONField_21_In.isEmpty()) {
					if (!queue_tWriteJSONField_21_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_21_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_21_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_21";
	
	currentComponent="tWriteJSONField_21_In";

	

                    row42Struct result_tWriteJSONField_21_In = queue_tWriteJSONField_21_In.poll();
                    str_tWriteJSONField_21_In = result_tWriteJSONField_21_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_21_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_21_In.setJsonStandard(jsonStandard_tWriteJSONField_21_In);
        net.sf.json.JSON json_tWriteJSONField_21_In = xmlSerializer_tWriteJSONField_21_In.read(str_tWriteJSONField_21_In);
        row42.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_21_In, jsonStandard_tWriteJSONField_21_In);
    
        nb_line_tWriteJSONField_21_In++;

 


	tos_count_tWriteJSONField_21_In++;

/**
 * [tWriteJSONField_21_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_21_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_21";
	
	currentComponent="tWriteJSONField_21_In";

	

 



/**
 * [tWriteJSONField_21_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_21 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row42");
					}
					


                    StringBuilder sb_tFileOutputDelimited_21 = new StringBuilder();
                            if(row42.data != null) {
                        sb_tFileOutputDelimited_21.append(
                            row42.data
                        );
                            }
                    sb_tFileOutputDelimited_21.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_21);


                    nb_line_tFileOutputDelimited_21++;
                    resourceMap.put("nb_line_tFileOutputDelimited_21", nb_line_tFileOutputDelimited_21);

                        outtFileOutputDelimited_21.write(sb_tFileOutputDelimited_21.toString());




 


	tos_count_tFileOutputDelimited_21++;

/**
 * [tFileOutputDelimited_21 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_21";

	

 



/**
 * [tFileOutputDelimited_21 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_21";

	

 



/**
 * [tFileOutputDelimited_21 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_21_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_21";
	
	currentComponent="tWriteJSONField_21_In";

	

 



/**
 * [tWriteJSONField_21_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_21_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_21";
	
	currentComponent="tWriteJSONField_21_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_21_In = "tWriteJSONField_21_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_21_In==null?"":queue_tWriteJSONField_21_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_21_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_21_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_21_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_21_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_21_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_21_In);
			
globalMap.put("tWriteJSONField_21_NB_LINE",nb_line_tWriteJSONField_21_In);
 

ok_Hash.put("tWriteJSONField_21_In", true);
end_Hash.put("tWriteJSONField_21_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_21_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_21 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_21";

	



		
			
					if(outtFileOutputDelimited_21!=null) {
						outtFileOutputDelimited_21.flush();
						outtFileOutputDelimited_21.close();
					}
				
				globalMap.put("tFileOutputDelimited_21_NB_LINE",nb_line_tFileOutputDelimited_21);
				globalMap.put("tFileOutputDelimited_21_FILE_NAME",fileName_tFileOutputDelimited_21);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_21", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_21", true);
end_Hash.put("tFileOutputDelimited_21", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_21_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_21_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If26", 0, "true");
					}
				tDie_21Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If26", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk160", 0, "ok");
				}
				tFileArchive_21Process(globalMap);



/**
 * [tFileOutputDelimited_21 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_21_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_21";
	
	currentComponent="tWriteJSONField_21_In";

	

 



/**
 * [tWriteJSONField_21_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_21 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_21";

	


		if(resourceMap.get("finish_tFileOutputDelimited_21") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_21 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_21");
						if(outtFileOutputDelimited_21!=null) {
							outtFileOutputDelimited_21.flush();
							outtFileOutputDelimited_21.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_21_In_SUBPROCESS_STATE", 1);
	}
	


public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_20_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_20_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row40Struct row40 = new row40Struct();




	
	/**
	 * [tFileOutputDelimited_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_20", false);
		start_Hash.put("tFileOutputDelimited_20", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tFileOutputDelimited_20 = 0;
		

String fileName_tFileOutputDelimited_20 = "";
    fileName_tFileOutputDelimited_20 = (new java.io.File(context.staging_S3_dir + "noodlecrm__application__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_20 = null;
    String extension_tFileOutputDelimited_20 = null;
    String directory_tFileOutputDelimited_20 = null;
    if((fileName_tFileOutputDelimited_20.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_20.lastIndexOf(".") < fileName_tFileOutputDelimited_20.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20;
            extension_tFileOutputDelimited_20 = "";
        } else {
            fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20.substring(0, fileName_tFileOutputDelimited_20.lastIndexOf("."));
            extension_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20.substring(fileName_tFileOutputDelimited_20.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20.substring(0, fileName_tFileOutputDelimited_20.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_20.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20.substring(0, fileName_tFileOutputDelimited_20.lastIndexOf("."));
            extension_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20.substring(fileName_tFileOutputDelimited_20.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20;
            extension_tFileOutputDelimited_20 = "";
        }
        directory_tFileOutputDelimited_20 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_20 = true;
    java.io.File filetFileOutputDelimited_20 = new java.io.File(fileName_tFileOutputDelimited_20);
    globalMap.put("tFileOutputDelimited_20_FILE_NAME",fileName_tFileOutputDelimited_20);
            int nb_line_tFileOutputDelimited_20 = 0;
            int splitedFileNo_tFileOutputDelimited_20 = 0;
            int currentRow_tFileOutputDelimited_20 = 0;

            final String OUT_DELIM_tFileOutputDelimited_20 = /** Start field tFileOutputDelimited_20:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_20:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_20 = /** Start field tFileOutputDelimited_20:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_20:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_20 != null && directory_tFileOutputDelimited_20.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_20 = new java.io.File(directory_tFileOutputDelimited_20);
                        if(!dir_tFileOutputDelimited_20.exists()) {
                            dir_tFileOutputDelimited_20.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_20 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_20 = new java.io.File(fileName_tFileOutputDelimited_20);
                        if(fileToDelete_tFileOutputDelimited_20.exists()) {
                            fileToDelete_tFileOutputDelimited_20.delete();
                        }
                        outtFileOutputDelimited_20 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_20, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_20", outtFileOutputDelimited_20);
resourceMap.put("nb_line_tFileOutputDelimited_20", nb_line_tFileOutputDelimited_20);

 



/**
 * [tFileOutputDelimited_20 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_20_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_20_In", false);
		start_Hash.put("tWriteJSONField_20_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_20";
	
	currentComponent="tWriteJSONField_20_In";

	
		int tos_count_tWriteJSONField_20_In = 0;
		

				int nb_line_tWriteJSONField_20_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_20_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_20_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_20_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_20_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_20_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row40Struct> queue_tWriteJSONField_20_In = (java.util.Queue<row40Struct>) globalMap.get("queue_tWriteJSONField_20_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_20_In = "tWriteJSONField_20_In_FINISH"+(queue_tWriteJSONField_20_In==null?"":queue_tWriteJSONField_20_In.hashCode());
				String str_tWriteJSONField_20_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_20_In) || !queue_tWriteJSONField_20_In.isEmpty()) {
					if (!queue_tWriteJSONField_20_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_20_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_20_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_20";
	
	currentComponent="tWriteJSONField_20_In";

	

                    row40Struct result_tWriteJSONField_20_In = queue_tWriteJSONField_20_In.poll();
                    str_tWriteJSONField_20_In = result_tWriteJSONField_20_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_20_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_20_In.setJsonStandard(jsonStandard_tWriteJSONField_20_In);
        net.sf.json.JSON json_tWriteJSONField_20_In = xmlSerializer_tWriteJSONField_20_In.read(str_tWriteJSONField_20_In);
        row40.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_20_In, jsonStandard_tWriteJSONField_20_In);
    
        nb_line_tWriteJSONField_20_In++;

 


	tos_count_tWriteJSONField_20_In++;

/**
 * [tWriteJSONField_20_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_20_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_20";
	
	currentComponent="tWriteJSONField_20_In";

	

 



/**
 * [tWriteJSONField_20_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_20 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row40");
					}
					


                    StringBuilder sb_tFileOutputDelimited_20 = new StringBuilder();
                            if(row40.data != null) {
                        sb_tFileOutputDelimited_20.append(
                            row40.data
                        );
                            }
                    sb_tFileOutputDelimited_20.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_20);


                    nb_line_tFileOutputDelimited_20++;
                    resourceMap.put("nb_line_tFileOutputDelimited_20", nb_line_tFileOutputDelimited_20);

                        outtFileOutputDelimited_20.write(sb_tFileOutputDelimited_20.toString());




 


	tos_count_tFileOutputDelimited_20++;

/**
 * [tFileOutputDelimited_20 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_20";

	

 



/**
 * [tFileOutputDelimited_20 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_20";

	

 



/**
 * [tFileOutputDelimited_20 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_20_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_20";
	
	currentComponent="tWriteJSONField_20_In";

	

 



/**
 * [tWriteJSONField_20_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_20_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_20";
	
	currentComponent="tWriteJSONField_20_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_20_In = "tWriteJSONField_20_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_20_In==null?"":queue_tWriteJSONField_20_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_20_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_20_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_20_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_20_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_20_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_20_In);
			
globalMap.put("tWriteJSONField_20_NB_LINE",nb_line_tWriteJSONField_20_In);
 

ok_Hash.put("tWriteJSONField_20_In", true);
end_Hash.put("tWriteJSONField_20_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_20_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_20 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_20";

	



		
			
					if(outtFileOutputDelimited_20!=null) {
						outtFileOutputDelimited_20.flush();
						outtFileOutputDelimited_20.close();
					}
				
				globalMap.put("tFileOutputDelimited_20_NB_LINE",nb_line_tFileOutputDelimited_20);
				globalMap.put("tFileOutputDelimited_20_FILE_NAME",fileName_tFileOutputDelimited_20);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_20", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_20", true);
end_Hash.put("tFileOutputDelimited_20", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_20_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_20_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If25", 0, "true");
					}
				tDie_20Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If25", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk156", 0, "ok");
				}
				tFileArchive_20Process(globalMap);



/**
 * [tFileOutputDelimited_20 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_20_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_20";
	
	currentComponent="tWriteJSONField_20_In";

	

 



/**
 * [tWriteJSONField_20_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_20 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_20";

	


		if(resourceMap.get("finish_tFileOutputDelimited_20") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_20 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_20");
						if(outtFileOutputDelimited_20!=null) {
							outtFileOutputDelimited_20.flush();
							outtFileOutputDelimited_20.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_20 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_20_In_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_19_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_19_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();




	
	/**
	 * [tFileOutputDelimited_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_19", false);
		start_Hash.put("tFileOutputDelimited_19", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tFileOutputDelimited_19 = 0;
		

String fileName_tFileOutputDelimited_19 = "";
    fileName_tFileOutputDelimited_19 = (new java.io.File(context.staging_S3_dir + "hed__term__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_19 = null;
    String extension_tFileOutputDelimited_19 = null;
    String directory_tFileOutputDelimited_19 = null;
    if((fileName_tFileOutputDelimited_19.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_19.lastIndexOf(".") < fileName_tFileOutputDelimited_19.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19;
            extension_tFileOutputDelimited_19 = "";
        } else {
            fullName_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19.substring(0, fileName_tFileOutputDelimited_19.lastIndexOf("."));
            extension_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19.substring(fileName_tFileOutputDelimited_19.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19.substring(0, fileName_tFileOutputDelimited_19.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_19.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19.substring(0, fileName_tFileOutputDelimited_19.lastIndexOf("."));
            extension_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19.substring(fileName_tFileOutputDelimited_19.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19;
            extension_tFileOutputDelimited_19 = "";
        }
        directory_tFileOutputDelimited_19 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_19 = true;
    java.io.File filetFileOutputDelimited_19 = new java.io.File(fileName_tFileOutputDelimited_19);
    globalMap.put("tFileOutputDelimited_19_FILE_NAME",fileName_tFileOutputDelimited_19);
            int nb_line_tFileOutputDelimited_19 = 0;
            int splitedFileNo_tFileOutputDelimited_19 = 0;
            int currentRow_tFileOutputDelimited_19 = 0;

            final String OUT_DELIM_tFileOutputDelimited_19 = /** Start field tFileOutputDelimited_19:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_19:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_19 = /** Start field tFileOutputDelimited_19:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_19:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_19 != null && directory_tFileOutputDelimited_19.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_19 = new java.io.File(directory_tFileOutputDelimited_19);
                        if(!dir_tFileOutputDelimited_19.exists()) {
                            dir_tFileOutputDelimited_19.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_19 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_19 = new java.io.File(fileName_tFileOutputDelimited_19);
                        if(fileToDelete_tFileOutputDelimited_19.exists()) {
                            fileToDelete_tFileOutputDelimited_19.delete();
                        }
                        outtFileOutputDelimited_19 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_19, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_19", outtFileOutputDelimited_19);
resourceMap.put("nb_line_tFileOutputDelimited_19", nb_line_tFileOutputDelimited_19);

 



/**
 * [tFileOutputDelimited_19 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_19_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_19_In", false);
		start_Hash.put("tWriteJSONField_19_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_19";
	
	currentComponent="tWriteJSONField_19_In";

	
		int tos_count_tWriteJSONField_19_In = 0;
		

				int nb_line_tWriteJSONField_19_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_19_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_19_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_19_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_19_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_19_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row38Struct> queue_tWriteJSONField_19_In = (java.util.Queue<row38Struct>) globalMap.get("queue_tWriteJSONField_19_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_19_In = "tWriteJSONField_19_In_FINISH"+(queue_tWriteJSONField_19_In==null?"":queue_tWriteJSONField_19_In.hashCode());
				String str_tWriteJSONField_19_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_19_In) || !queue_tWriteJSONField_19_In.isEmpty()) {
					if (!queue_tWriteJSONField_19_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_19_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_19_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_19";
	
	currentComponent="tWriteJSONField_19_In";

	

                    row38Struct result_tWriteJSONField_19_In = queue_tWriteJSONField_19_In.poll();
                    str_tWriteJSONField_19_In = result_tWriteJSONField_19_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_19_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_19_In.setJsonStandard(jsonStandard_tWriteJSONField_19_In);
        net.sf.json.JSON json_tWriteJSONField_19_In = xmlSerializer_tWriteJSONField_19_In.read(str_tWriteJSONField_19_In);
        row38.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_19_In, jsonStandard_tWriteJSONField_19_In);
    
        nb_line_tWriteJSONField_19_In++;

 


	tos_count_tWriteJSONField_19_In++;

/**
 * [tWriteJSONField_19_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_19_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_19";
	
	currentComponent="tWriteJSONField_19_In";

	

 



/**
 * [tWriteJSONField_19_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_19 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row38");
					}
					


                    StringBuilder sb_tFileOutputDelimited_19 = new StringBuilder();
                            if(row38.data != null) {
                        sb_tFileOutputDelimited_19.append(
                            row38.data
                        );
                            }
                    sb_tFileOutputDelimited_19.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_19);


                    nb_line_tFileOutputDelimited_19++;
                    resourceMap.put("nb_line_tFileOutputDelimited_19", nb_line_tFileOutputDelimited_19);

                        outtFileOutputDelimited_19.write(sb_tFileOutputDelimited_19.toString());




 


	tos_count_tFileOutputDelimited_19++;

/**
 * [tFileOutputDelimited_19 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_19";

	

 



/**
 * [tFileOutputDelimited_19 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_19";

	

 



/**
 * [tFileOutputDelimited_19 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_19_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_19";
	
	currentComponent="tWriteJSONField_19_In";

	

 



/**
 * [tWriteJSONField_19_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_19_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_19";
	
	currentComponent="tWriteJSONField_19_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_19_In = "tWriteJSONField_19_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_19_In==null?"":queue_tWriteJSONField_19_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_19_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_19_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_19_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_19_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_19_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_19_In);
			
globalMap.put("tWriteJSONField_19_NB_LINE",nb_line_tWriteJSONField_19_In);
 

ok_Hash.put("tWriteJSONField_19_In", true);
end_Hash.put("tWriteJSONField_19_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_19_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_19 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_19";

	



		
			
					if(outtFileOutputDelimited_19!=null) {
						outtFileOutputDelimited_19.flush();
						outtFileOutputDelimited_19.close();
					}
				
				globalMap.put("tFileOutputDelimited_19_NB_LINE",nb_line_tFileOutputDelimited_19);
				globalMap.put("tFileOutputDelimited_19_FILE_NAME",fileName_tFileOutputDelimited_19);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_19", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_19", true);
end_Hash.put("tFileOutputDelimited_19", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_19_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_19_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If24", 0, "true");
					}
				tDie_19Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If24", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk152", 0, "ok");
				}
				tFileArchive_19Process(globalMap);



/**
 * [tFileOutputDelimited_19 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_19_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_19";
	
	currentComponent="tWriteJSONField_19_In";

	

 



/**
 * [tWriteJSONField_19_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_19 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_19";

	


		if(resourceMap.get("finish_tFileOutputDelimited_19") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_19 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_19");
						if(outtFileOutputDelimited_19!=null) {
							outtFileOutputDelimited_19.flush();
							outtFileOutputDelimited_19.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_19 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_19_In_SUBPROCESS_STATE", 1);
	}
	


public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_18_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_18_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row36Struct row36 = new row36Struct();




	
	/**
	 * [tFileOutputDelimited_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_18", false);
		start_Hash.put("tFileOutputDelimited_18", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tFileOutputDelimited_18 = 0;
		

String fileName_tFileOutputDelimited_18 = "";
    fileName_tFileOutputDelimited_18 = (new java.io.File(context.staging_S3_dir + "hed__program_enrollment__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_18 = null;
    String extension_tFileOutputDelimited_18 = null;
    String directory_tFileOutputDelimited_18 = null;
    if((fileName_tFileOutputDelimited_18.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_18.lastIndexOf(".") < fileName_tFileOutputDelimited_18.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18;
            extension_tFileOutputDelimited_18 = "";
        } else {
            fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18.substring(0, fileName_tFileOutputDelimited_18.lastIndexOf("."));
            extension_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18.substring(fileName_tFileOutputDelimited_18.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18.substring(0, fileName_tFileOutputDelimited_18.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_18.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18.substring(0, fileName_tFileOutputDelimited_18.lastIndexOf("."));
            extension_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18.substring(fileName_tFileOutputDelimited_18.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18;
            extension_tFileOutputDelimited_18 = "";
        }
        directory_tFileOutputDelimited_18 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_18 = true;
    java.io.File filetFileOutputDelimited_18 = new java.io.File(fileName_tFileOutputDelimited_18);
    globalMap.put("tFileOutputDelimited_18_FILE_NAME",fileName_tFileOutputDelimited_18);
            int nb_line_tFileOutputDelimited_18 = 0;
            int splitedFileNo_tFileOutputDelimited_18 = 0;
            int currentRow_tFileOutputDelimited_18 = 0;

            final String OUT_DELIM_tFileOutputDelimited_18 = /** Start field tFileOutputDelimited_18:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_18:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_18 = /** Start field tFileOutputDelimited_18:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_18:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_18 != null && directory_tFileOutputDelimited_18.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_18 = new java.io.File(directory_tFileOutputDelimited_18);
                        if(!dir_tFileOutputDelimited_18.exists()) {
                            dir_tFileOutputDelimited_18.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_18 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_18 = new java.io.File(fileName_tFileOutputDelimited_18);
                        if(fileToDelete_tFileOutputDelimited_18.exists()) {
                            fileToDelete_tFileOutputDelimited_18.delete();
                        }
                        outtFileOutputDelimited_18 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_18, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_18", outtFileOutputDelimited_18);
resourceMap.put("nb_line_tFileOutputDelimited_18", nb_line_tFileOutputDelimited_18);

 



/**
 * [tFileOutputDelimited_18 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_18_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_18_In", false);
		start_Hash.put("tWriteJSONField_18_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_18";
	
	currentComponent="tWriteJSONField_18_In";

	
		int tos_count_tWriteJSONField_18_In = 0;
		

				int nb_line_tWriteJSONField_18_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_18_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_18_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_18_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_18_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_18_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row36Struct> queue_tWriteJSONField_18_In = (java.util.Queue<row36Struct>) globalMap.get("queue_tWriteJSONField_18_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_18_In = "tWriteJSONField_18_In_FINISH"+(queue_tWriteJSONField_18_In==null?"":queue_tWriteJSONField_18_In.hashCode());
				String str_tWriteJSONField_18_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_18_In) || !queue_tWriteJSONField_18_In.isEmpty()) {
					if (!queue_tWriteJSONField_18_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_18_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_18_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_18";
	
	currentComponent="tWriteJSONField_18_In";

	

                    row36Struct result_tWriteJSONField_18_In = queue_tWriteJSONField_18_In.poll();
                    str_tWriteJSONField_18_In = result_tWriteJSONField_18_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_18_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_18_In.setJsonStandard(jsonStandard_tWriteJSONField_18_In);
        net.sf.json.JSON json_tWriteJSONField_18_In = xmlSerializer_tWriteJSONField_18_In.read(str_tWriteJSONField_18_In);
        row36.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_18_In, jsonStandard_tWriteJSONField_18_In);
    
        nb_line_tWriteJSONField_18_In++;

 


	tos_count_tWriteJSONField_18_In++;

/**
 * [tWriteJSONField_18_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_18_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_18";
	
	currentComponent="tWriteJSONField_18_In";

	

 



/**
 * [tWriteJSONField_18_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_18 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row36");
					}
					


                    StringBuilder sb_tFileOutputDelimited_18 = new StringBuilder();
                            if(row36.data != null) {
                        sb_tFileOutputDelimited_18.append(
                            row36.data
                        );
                            }
                    sb_tFileOutputDelimited_18.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_18);


                    nb_line_tFileOutputDelimited_18++;
                    resourceMap.put("nb_line_tFileOutputDelimited_18", nb_line_tFileOutputDelimited_18);

                        outtFileOutputDelimited_18.write(sb_tFileOutputDelimited_18.toString());




 


	tos_count_tFileOutputDelimited_18++;

/**
 * [tFileOutputDelimited_18 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_18";

	

 



/**
 * [tFileOutputDelimited_18 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_18";

	

 



/**
 * [tFileOutputDelimited_18 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_18_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_18";
	
	currentComponent="tWriteJSONField_18_In";

	

 



/**
 * [tWriteJSONField_18_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_18_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_18";
	
	currentComponent="tWriteJSONField_18_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_18_In = "tWriteJSONField_18_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_18_In==null?"":queue_tWriteJSONField_18_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_18_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_18_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_18_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_18_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_18_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_18_In);
			
globalMap.put("tWriteJSONField_18_NB_LINE",nb_line_tWriteJSONField_18_In);
 

ok_Hash.put("tWriteJSONField_18_In", true);
end_Hash.put("tWriteJSONField_18_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_18_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_18 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_18";

	



		
			
					if(outtFileOutputDelimited_18!=null) {
						outtFileOutputDelimited_18.flush();
						outtFileOutputDelimited_18.close();
					}
				
				globalMap.put("tFileOutputDelimited_18_NB_LINE",nb_line_tFileOutputDelimited_18);
				globalMap.put("tFileOutputDelimited_18_FILE_NAME",fileName_tFileOutputDelimited_18);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_18", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_18", true);
end_Hash.put("tFileOutputDelimited_18", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_18_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_18_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If23", 0, "true");
					}
				tDie_18Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If23", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk148", 0, "ok");
				}
				tFileArchive_18Process(globalMap);



/**
 * [tFileOutputDelimited_18 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_18_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_18";
	
	currentComponent="tWriteJSONField_18_In";

	

 



/**
 * [tWriteJSONField_18_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_18 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_18";

	


		if(resourceMap.get("finish_tFileOutputDelimited_18") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_18 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_18");
						if(outtFileOutputDelimited_18!=null) {
							outtFileOutputDelimited_18.flush();
							outtFileOutputDelimited_18.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_18_In_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_au, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_au) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_17_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_17_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tFileOutputDelimited_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_17", false);
		start_Hash.put("tFileOutputDelimited_17", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tFileOutputDelimited_17 = 0;
		

String fileName_tFileOutputDelimited_17 = "";
    fileName_tFileOutputDelimited_17 = (new java.io.File(context.staging_S3_dir + "opportunityhistory.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_17 = null;
    String extension_tFileOutputDelimited_17 = null;
    String directory_tFileOutputDelimited_17 = null;
    if((fileName_tFileOutputDelimited_17.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_17.lastIndexOf(".") < fileName_tFileOutputDelimited_17.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17;
            extension_tFileOutputDelimited_17 = "";
        } else {
            fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17.substring(0, fileName_tFileOutputDelimited_17.lastIndexOf("."));
            extension_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17.substring(fileName_tFileOutputDelimited_17.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17.substring(0, fileName_tFileOutputDelimited_17.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_17.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17.substring(0, fileName_tFileOutputDelimited_17.lastIndexOf("."));
            extension_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17.substring(fileName_tFileOutputDelimited_17.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17;
            extension_tFileOutputDelimited_17 = "";
        }
        directory_tFileOutputDelimited_17 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_17 = true;
    java.io.File filetFileOutputDelimited_17 = new java.io.File(fileName_tFileOutputDelimited_17);
    globalMap.put("tFileOutputDelimited_17_FILE_NAME",fileName_tFileOutputDelimited_17);
            int nb_line_tFileOutputDelimited_17 = 0;
            int splitedFileNo_tFileOutputDelimited_17 = 0;
            int currentRow_tFileOutputDelimited_17 = 0;

            final String OUT_DELIM_tFileOutputDelimited_17 = /** Start field tFileOutputDelimited_17:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_17:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_17 = /** Start field tFileOutputDelimited_17:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_17:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_17 != null && directory_tFileOutputDelimited_17.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_17 = new java.io.File(directory_tFileOutputDelimited_17);
                        if(!dir_tFileOutputDelimited_17.exists()) {
                            dir_tFileOutputDelimited_17.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_17 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_17 = new java.io.File(fileName_tFileOutputDelimited_17);
                        if(fileToDelete_tFileOutputDelimited_17.exists()) {
                            fileToDelete_tFileOutputDelimited_17.delete();
                        }
                        outtFileOutputDelimited_17 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_17, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_17", outtFileOutputDelimited_17);
resourceMap.put("nb_line_tFileOutputDelimited_17", nb_line_tFileOutputDelimited_17);

 



/**
 * [tFileOutputDelimited_17 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_17_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_17_In", false);
		start_Hash.put("tWriteJSONField_17_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_17";
	
	currentComponent="tWriteJSONField_17_In";

	
		int tos_count_tWriteJSONField_17_In = 0;
		

				int nb_line_tWriteJSONField_17_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_17_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_17_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_17_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_17_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_17_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row34Struct> queue_tWriteJSONField_17_In = (java.util.Queue<row34Struct>) globalMap.get("queue_tWriteJSONField_17_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_17_In = "tWriteJSONField_17_In_FINISH"+(queue_tWriteJSONField_17_In==null?"":queue_tWriteJSONField_17_In.hashCode());
				String str_tWriteJSONField_17_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_17_In) || !queue_tWriteJSONField_17_In.isEmpty()) {
					if (!queue_tWriteJSONField_17_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_17_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_17_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_17";
	
	currentComponent="tWriteJSONField_17_In";

	

                    row34Struct result_tWriteJSONField_17_In = queue_tWriteJSONField_17_In.poll();
                    str_tWriteJSONField_17_In = result_tWriteJSONField_17_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_17_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_17_In.setJsonStandard(jsonStandard_tWriteJSONField_17_In);
        net.sf.json.JSON json_tWriteJSONField_17_In = xmlSerializer_tWriteJSONField_17_In.read(str_tWriteJSONField_17_In);
        row34.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_17_In, jsonStandard_tWriteJSONField_17_In);
    
        nb_line_tWriteJSONField_17_In++;

 


	tos_count_tWriteJSONField_17_In++;

/**
 * [tWriteJSONField_17_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_17_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_17";
	
	currentComponent="tWriteJSONField_17_In";

	

 



/**
 * [tWriteJSONField_17_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_17 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					


                    StringBuilder sb_tFileOutputDelimited_17 = new StringBuilder();
                            if(row34.data != null) {
                        sb_tFileOutputDelimited_17.append(
                            row34.data
                        );
                            }
                    sb_tFileOutputDelimited_17.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_17);


                    nb_line_tFileOutputDelimited_17++;
                    resourceMap.put("nb_line_tFileOutputDelimited_17", nb_line_tFileOutputDelimited_17);

                        outtFileOutputDelimited_17.write(sb_tFileOutputDelimited_17.toString());




 


	tos_count_tFileOutputDelimited_17++;

/**
 * [tFileOutputDelimited_17 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_17";

	

 



/**
 * [tFileOutputDelimited_17 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_17";

	

 



/**
 * [tFileOutputDelimited_17 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_17_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_17";
	
	currentComponent="tWriteJSONField_17_In";

	

 



/**
 * [tWriteJSONField_17_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_17_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_17";
	
	currentComponent="tWriteJSONField_17_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_17_In = "tWriteJSONField_17_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_17_In==null?"":queue_tWriteJSONField_17_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_17_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_17_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_17_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_17_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_17_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_17_In);
			
globalMap.put("tWriteJSONField_17_NB_LINE",nb_line_tWriteJSONField_17_In);
 

ok_Hash.put("tWriteJSONField_17_In", true);
end_Hash.put("tWriteJSONField_17_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_17_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_17 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_17";

	



		
			
					if(outtFileOutputDelimited_17!=null) {
						outtFileOutputDelimited_17.flush();
						outtFileOutputDelimited_17.close();
					}
				
				globalMap.put("tFileOutputDelimited_17_NB_LINE",nb_line_tFileOutputDelimited_17);
				globalMap.put("tFileOutputDelimited_17_FILE_NAME",fileName_tFileOutputDelimited_17);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_17", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_17", true);
end_Hash.put("tFileOutputDelimited_17", System.currentTimeMillis());

   			if ((((Integer)globalMap.get("tSalesforceInput_17_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_17_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If19", 0, "true");
					}
				tDie_17Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If19", 0, "false");
					}   	 
   				}
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk141", 0, "ok");
				}
				tFileArchive_17Process(globalMap);



/**
 * [tFileOutputDelimited_17 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_17_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_17";
	
	currentComponent="tWriteJSONField_17_In";

	

 



/**
 * [tWriteJSONField_17_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_17 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_17";

	


		if(resourceMap.get("finish_tFileOutputDelimited_17") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_17 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_17");
						if(outtFileOutputDelimited_17!=null) {
							outtFileOutputDelimited_17.flush();
							outtFileOutputDelimited_17.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_17_In_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "prod";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
    	public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
        }

    	public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
        }
    };
    
    private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";
    
    {
    	globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
    }

    public static void main(String[] args){
        final sfdc_history_s3_sync_job_au sfdc_history_s3_sync_job_auClass = new sfdc_history_s3_sync_job_au();

        int exitCode = sfdc_history_s3_sync_job_auClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = sfdc_history_s3_sync_job_au.class.getClassLoader().getResourceAsStream("t_np_31/sfdc_history_s3_sync_job_au_1_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = sfdc_history_s3_sync_job_au.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("university_code", "id_String");
                            context.university_code=(String) context.getProperty("university_code");
                        context.setContextType("status", "id_String");
                            context.status=(String) context.getProperty("status");
                        context.setContextType("description", "id_String");
                            context.description=(String) context.getProperty("description");
                        context.setContextType("filter_date", "id_String");
                            context.filter_date=(String) context.getProperty("filter_date");
                        context.setContextType("sfdc_conn_QueryCondition", "id_String");
                            context.sfdc_conn_QueryCondition=(String) context.getProperty("sfdc_conn_QueryCondition");
                        context.setContextType("staging_S3_dir", "id_String");
                            context.staging_S3_dir=(String) context.getProperty("staging_S3_dir");
                        context.setContextType("sfdc_subject_user", "id_String");
                            context.sfdc_subject_user=(String) context.getProperty("sfdc_subject_user");
                        context.setContextType("sfdc_issuer_token", "id_String");
                            context.sfdc_issuer_token=(String) context.getProperty("sfdc_issuer_token");
                        context.setContextType("sfdc_keystore_password", "id_Password");
                            String pwd_sfdc_keystore_password_value = context.getProperty("sfdc_keystore_password");
                            context.sfdc_keystore_password = null;
                            if(pwd_sfdc_keystore_password_value!=null) {
                                if(context_param.containsKey("sfdc_keystore_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.sfdc_keystore_password = pwd_sfdc_keystore_password_value;
                                } else if (!pwd_sfdc_keystore_password_value.isEmpty()) {
                                    try {
                                        context.sfdc_keystore_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_sfdc_keystore_password_value);
                                        context.put("sfdc_keystore_password",context.sfdc_keystore_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("nd_aws_access_key", "id_String");
                            context.nd_aws_access_key=(String) context.getProperty("nd_aws_access_key");
                        context.setContextType("nd_aws_secret_key", "id_Password");
                            String pwd_nd_aws_secret_key_value = context.getProperty("nd_aws_secret_key");
                            context.nd_aws_secret_key = null;
                            if(pwd_nd_aws_secret_key_value!=null) {
                                if(context_param.containsKey("nd_aws_secret_key")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.nd_aws_secret_key = pwd_nd_aws_secret_key_value;
                                } else if (!pwd_nd_aws_secret_key_value.isEmpty()) {
                                    try {
                                        context.nd_aws_secret_key = routines.system.PasswordEncryptUtil.decryptPassword(pwd_nd_aws_secret_key_value);
                                        context.put("nd_aws_secret_key",context.nd_aws_secret_key);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("ND_PostgreSQL_POND_AdditionalParams", "id_String");
                            context.ND_PostgreSQL_POND_AdditionalParams=(String) context.getProperty("ND_PostgreSQL_POND_AdditionalParams");
                        context.setContextType("ND_PostgreSQL_POND_Database", "id_String");
                            context.ND_PostgreSQL_POND_Database=(String) context.getProperty("ND_PostgreSQL_POND_Database");
                        context.setContextType("ND_PostgreSQL_POND_Login", "id_String");
                            context.ND_PostgreSQL_POND_Login=(String) context.getProperty("ND_PostgreSQL_POND_Login");
                        context.setContextType("ND_PostgreSQL_POND_Password", "id_Password");
                            String pwd_ND_PostgreSQL_POND_Password_value = context.getProperty("ND_PostgreSQL_POND_Password");
                            context.ND_PostgreSQL_POND_Password = null;
                            if(pwd_ND_PostgreSQL_POND_Password_value!=null) {
                                if(context_param.containsKey("ND_PostgreSQL_POND_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.ND_PostgreSQL_POND_Password = pwd_ND_PostgreSQL_POND_Password_value;
                                } else if (!pwd_ND_PostgreSQL_POND_Password_value.isEmpty()) {
                                    try {
                                        context.ND_PostgreSQL_POND_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_ND_PostgreSQL_POND_Password_value);
                                        context.put("ND_PostgreSQL_POND_Password",context.ND_PostgreSQL_POND_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("ND_PostgreSQL_POND_Port", "id_String");
                            context.ND_PostgreSQL_POND_Port=(String) context.getProperty("ND_PostgreSQL_POND_Port");
                        context.setContextType("ND_PostgreSQL_POND_Schema", "id_String");
                            context.ND_PostgreSQL_POND_Schema=(String) context.getProperty("ND_PostgreSQL_POND_Schema");
                        context.setContextType("ND_PostgreSQL_POND_Server", "id_String");
                            context.ND_PostgreSQL_POND_Server=(String) context.getProperty("ND_PostgreSQL_POND_Server");
                        context.setContextType("nd_s3_bucket_QA_sfdc", "id_String");
                            context.nd_s3_bucket_QA_sfdc=(String) context.getProperty("nd_s3_bucket_QA_sfdc");
                        context.setContextType("nd_s3_data_lake_path_sfdc", "id_String");
                            context.nd_s3_data_lake_path_sfdc=(String) context.getProperty("nd_s3_data_lake_path_sfdc");
                        context.setContextType("sfdc_audience_url", "id_String");
                            context.sfdc_audience_url=(String) context.getProperty("sfdc_audience_url");
                        context.setContextType("sfdc_certificate_alias", "id_String");
                            context.sfdc_certificate_alias=(String) context.getProperty("sfdc_certificate_alias");
                        context.setContextType("sfdc_keystore_path", "id_String");
                            context.sfdc_keystore_path=(String) context.getProperty("sfdc_keystore_path");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("university_code")) {
                context.university_code = (String) parentContextMap.get("university_code");
            }if (parentContextMap.containsKey("status")) {
                context.status = (String) parentContextMap.get("status");
            }if (parentContextMap.containsKey("description")) {
                context.description = (String) parentContextMap.get("description");
            }if (parentContextMap.containsKey("filter_date")) {
                context.filter_date = (String) parentContextMap.get("filter_date");
            }if (parentContextMap.containsKey("sfdc_conn_QueryCondition")) {
                context.sfdc_conn_QueryCondition = (String) parentContextMap.get("sfdc_conn_QueryCondition");
            }if (parentContextMap.containsKey("staging_S3_dir")) {
                context.staging_S3_dir = (String) parentContextMap.get("staging_S3_dir");
            }if (parentContextMap.containsKey("sfdc_subject_user")) {
                context.sfdc_subject_user = (String) parentContextMap.get("sfdc_subject_user");
            }if (parentContextMap.containsKey("sfdc_issuer_token")) {
                context.sfdc_issuer_token = (String) parentContextMap.get("sfdc_issuer_token");
            }if (parentContextMap.containsKey("sfdc_keystore_password")) {
                context.sfdc_keystore_password = (java.lang.String) parentContextMap.get("sfdc_keystore_password");
            }if (parentContextMap.containsKey("nd_aws_access_key")) {
                context.nd_aws_access_key = (String) parentContextMap.get("nd_aws_access_key");
            }if (parentContextMap.containsKey("nd_aws_secret_key")) {
                context.nd_aws_secret_key = (java.lang.String) parentContextMap.get("nd_aws_secret_key");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_AdditionalParams")) {
                context.ND_PostgreSQL_POND_AdditionalParams = (String) parentContextMap.get("ND_PostgreSQL_POND_AdditionalParams");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_Database")) {
                context.ND_PostgreSQL_POND_Database = (String) parentContextMap.get("ND_PostgreSQL_POND_Database");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_Login")) {
                context.ND_PostgreSQL_POND_Login = (String) parentContextMap.get("ND_PostgreSQL_POND_Login");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_Password")) {
                context.ND_PostgreSQL_POND_Password = (java.lang.String) parentContextMap.get("ND_PostgreSQL_POND_Password");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_Port")) {
                context.ND_PostgreSQL_POND_Port = (String) parentContextMap.get("ND_PostgreSQL_POND_Port");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_Schema")) {
                context.ND_PostgreSQL_POND_Schema = (String) parentContextMap.get("ND_PostgreSQL_POND_Schema");
            }if (parentContextMap.containsKey("ND_PostgreSQL_POND_Server")) {
                context.ND_PostgreSQL_POND_Server = (String) parentContextMap.get("ND_PostgreSQL_POND_Server");
            }if (parentContextMap.containsKey("nd_s3_bucket_QA_sfdc")) {
                context.nd_s3_bucket_QA_sfdc = (String) parentContextMap.get("nd_s3_bucket_QA_sfdc");
            }if (parentContextMap.containsKey("nd_s3_data_lake_path_sfdc")) {
                context.nd_s3_data_lake_path_sfdc = (String) parentContextMap.get("nd_s3_data_lake_path_sfdc");
            }if (parentContextMap.containsKey("sfdc_audience_url")) {
                context.sfdc_audience_url = (String) parentContextMap.get("sfdc_audience_url");
            }if (parentContextMap.containsKey("sfdc_certificate_alias")) {
                context.sfdc_certificate_alias = (String) parentContextMap.get("sfdc_certificate_alias");
            }if (parentContextMap.containsKey("sfdc_keystore_path")) {
                context.sfdc_keystore_path = (String) parentContextMap.get("sfdc_keystore_path");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("sfdc_keystore_password");
			parametersToEncrypt.add("nd_aws_secret_key");
			parametersToEncrypt.add("ND_PostgreSQL_POND_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_3) {
globalMap.put("tJava_3_SUBPROCESS_STATE", -1);

e_tJava_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : sfdc_history_s3_sync_job_au");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));



            connections.put("conn_tSalesforceConnection_2", globalMap.get("conn_tSalesforceConnection_2"));


        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1757326 characters generated by Talend Open Studio for Data Integration 
 *     on the May 20, 2021 at 6:14:56 PM PDT
 ************************************************************************************************/