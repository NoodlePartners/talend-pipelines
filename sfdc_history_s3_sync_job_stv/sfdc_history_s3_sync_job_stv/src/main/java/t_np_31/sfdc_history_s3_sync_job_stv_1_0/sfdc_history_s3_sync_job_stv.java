// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package t_np_31.sfdc_history_s3_sync_job_stv_1_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	import java.sql.Connection;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJavaRow_1
	import java.util.concurrent.ConcurrentHashMap;

	//the import part of tJava_3
	import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Properties;
import javax.activation.*;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_19
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_20
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJava_21
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_22
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_23
	//import java.util.List;

	//the import part of tJava_11
	//import java.util.List;

	//the import part of tJava_26
	//import java.util.List;

	//the import part of tJava_15
	//import java.util.List;

	//the import part of tJava_30
	//import java.util.List;

	//the import part of tJava_16
	//import java.util.List;

	//the import part of tJava_31
	//import java.util.List;

	//the import part of tJava_17
	//import java.util.List;

	//the import part of tJava_32
	//import java.util.List;

	//the import part of tJava_34
	//import java.util.List;

	//the import part of tJava_35
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: sfdc_history_s3_sync_job_stv Purpose: <br>
 * Description: 0.2 : Updated task logic
0.3 : Added 3 new tables
0.4 : Added all History Object
1.0 : History Job <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class sfdc_history_s3_sync_job_stv implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(university_code != null){
				
					this.setProperty("university_code", university_code.toString());
				
			}
			
			if(status != null){
				
					this.setProperty("status", status.toString());
				
			}
			
			if(description != null){
				
					this.setProperty("description", description.toString());
				
			}
			
			if(staging_S3_dir != null){
				
					this.setProperty("staging_S3_dir", staging_S3_dir.toString());
				
			}
			
			if(sfdc_subject_user != null){
				
					this.setProperty("sfdc_subject_user", sfdc_subject_user.toString());
				
			}
			
			if(sfdc_issuer_token != null){
				
					this.setProperty("sfdc_issuer_token", sfdc_issuer_token.toString());
				
			}
			
			if(sfdc_keystore_password != null){
				
					this.setProperty("sfdc_keystore_password", sfdc_keystore_password.toString());
				
			}
			
			if(sfdc_conn_QueryCondition != null){
				
					this.setProperty("sfdc_conn_QueryCondition", sfdc_conn_QueryCondition.toString());
				
			}
			
			if(filter_date != null){
				
					this.setProperty("filter_date", filter_date.toString());
				
			}
			
			if(nd_s3_bucket_QA_sfdc != null){
				
					this.setProperty("nd_s3_bucket_QA_sfdc", nd_s3_bucket_QA_sfdc.toString());
				
			}
			
			if(nd_s3_data_lake_path_sfdc != null){
				
					this.setProperty("nd_s3_data_lake_path_sfdc", nd_s3_data_lake_path_sfdc.toString());
				
			}
			
			if(NP_Salesforce_apiVersion != null){
				
					this.setProperty("NP_Salesforce_apiVersion", NP_Salesforce_apiVersion.toString());
				
			}
			
			if(NP_Salesforce_clientId != null){
				
					this.setProperty("NP_Salesforce_clientId", NP_Salesforce_clientId.toString());
				
			}
			
			if(NP_Salesforce_endpoint != null){
				
					this.setProperty("NP_Salesforce_endpoint", NP_Salesforce_endpoint.toString());
				
			}
			
			if(NP_Salesforce_loginType != null){
				
					this.setProperty("NP_Salesforce_loginType", NP_Salesforce_loginType.toString());
				
			}
			
			if(NP_Salesforce_oauth_callbackHost != null){
				
					this.setProperty("NP_Salesforce_oauth_callbackHost", NP_Salesforce_oauth_callbackHost.toString());
				
			}
			
			if(NP_Salesforce_oauth_callbackPort != null){
				
					this.setProperty("NP_Salesforce_oauth_callbackPort", NP_Salesforce_oauth_callbackPort.toString());
				
			}
			
			if(NP_Salesforce_oauth_clientId != null){
				
					this.setProperty("NP_Salesforce_oauth_clientId", NP_Salesforce_oauth_clientId.toString());
				
			}
			
			if(NP_Salesforce_oauth_clientSecret != null){
				
					this.setProperty("NP_Salesforce_oauth_clientSecret", NP_Salesforce_oauth_clientSecret.toString());
				
			}
			
			if(NP_Salesforce_oauth_tokenFile != null){
				
					this.setProperty("NP_Salesforce_oauth_tokenFile", NP_Salesforce_oauth_tokenFile.toString());
				
			}
			
			if(NP_Salesforce_oauth2FlowType != null){
				
					this.setProperty("NP_Salesforce_oauth2FlowType", NP_Salesforce_oauth2FlowType.toString());
				
			}
			
			if(NP_Salesforce_oauth2JwtFlow_audience != null){
				
					this.setProperty("NP_Salesforce_oauth2JwtFlow_audience", NP_Salesforce_oauth2JwtFlow_audience.toString());
				
			}
			
			if(NP_Salesforce_oauth2JwtFlow_certificateAlias != null){
				
					this.setProperty("NP_Salesforce_oauth2JwtFlow_certificateAlias", NP_Salesforce_oauth2JwtFlow_certificateAlias.toString());
				
			}
			
			if(NP_Salesforce_oauth2JwtFlow_expirationTime != null){
				
					this.setProperty("NP_Salesforce_oauth2JwtFlow_expirationTime", NP_Salesforce_oauth2JwtFlow_expirationTime.toString());
				
			}
			
			if(NP_Salesforce_oauth2JwtFlow_issuer != null){
				
					this.setProperty("NP_Salesforce_oauth2JwtFlow_issuer", NP_Salesforce_oauth2JwtFlow_issuer.toString());
				
			}
			
			if(NP_Salesforce_oauth2JwtFlow_keyStore != null){
				
					this.setProperty("NP_Salesforce_oauth2JwtFlow_keyStore", NP_Salesforce_oauth2JwtFlow_keyStore.toString());
				
			}
			
			if(NP_Salesforce_oauth2JwtFlow_keyStorePassword != null){
				
					this.setProperty("NP_Salesforce_oauth2JwtFlow_keyStorePassword", NP_Salesforce_oauth2JwtFlow_keyStorePassword.toString());
				
			}
			
			if(NP_Salesforce_oauth2JwtFlow_subject != null){
				
					this.setProperty("NP_Salesforce_oauth2JwtFlow_subject", NP_Salesforce_oauth2JwtFlow_subject.toString());
				
			}
			
			if(NP_Salesforce_proxy_host != null){
				
					this.setProperty("NP_Salesforce_proxy_host", NP_Salesforce_proxy_host.toString());
				
			}
			
			if(NP_Salesforce_proxy_port != null){
				
					this.setProperty("NP_Salesforce_proxy_port", NP_Salesforce_proxy_port.toString());
				
			}
			
			if(NP_Salesforce_proxy_userPassword_password != null){
				
					this.setProperty("NP_Salesforce_proxy_userPassword_password", NP_Salesforce_proxy_userPassword_password.toString());
				
			}
			
			if(NP_Salesforce_proxy_userPassword_userId != null){
				
					this.setProperty("NP_Salesforce_proxy_userPassword_userId", NP_Salesforce_proxy_userPassword_userId.toString());
				
			}
			
			if(NP_Salesforce_sessionDirectory != null){
				
					this.setProperty("NP_Salesforce_sessionDirectory", NP_Salesforce_sessionDirectory.toString());
				
			}
			
			if(NP_Salesforce_timeout != null){
				
					this.setProperty("NP_Salesforce_timeout", NP_Salesforce_timeout.toString());
				
			}
			
			if(NP_Salesforce_userPassword_password != null){
				
					this.setProperty("NP_Salesforce_userPassword_password", NP_Salesforce_userPassword_password.toString());
				
			}
			
			if(NP_Salesforce_userPassword_securityKey != null){
				
					this.setProperty("NP_Salesforce_userPassword_securityKey", NP_Salesforce_userPassword_securityKey.toString());
				
			}
			
			if(NP_Salesforce_userPassword_userId != null){
				
					this.setProperty("NP_Salesforce_userPassword_userId", NP_Salesforce_userPassword_userId.toString());
				
			}
			
			if(sfdc_audience_url != null){
				
					this.setProperty("sfdc_audience_url", sfdc_audience_url.toString());
				
			}
			
			if(sfdc_certificate_alias != null){
				
					this.setProperty("sfdc_certificate_alias", sfdc_certificate_alias.toString());
				
			}
			
			if(sfdc_keystore_path != null){
				
					this.setProperty("sfdc_keystore_path", sfdc_keystore_path.toString());
				
			}
			
		}

public String university_code;
public String getUniversity_code(){
	return this.university_code;
}
public String status;
public String getStatus(){
	return this.status;
}
public String description;
public String getDescription(){
	return this.description;
}
public String staging_S3_dir;
public String getStaging_S3_dir(){
	return this.staging_S3_dir;
}
public String sfdc_subject_user;
public String getSfdc_subject_user(){
	return this.sfdc_subject_user;
}
public String sfdc_issuer_token;
public String getSfdc_issuer_token(){
	return this.sfdc_issuer_token;
}
public java.lang.String sfdc_keystore_password;
public java.lang.String getSfdc_keystore_password(){
	return this.sfdc_keystore_password;
}
public String sfdc_conn_QueryCondition;
public String getSfdc_conn_QueryCondition(){
	return this.sfdc_conn_QueryCondition;
}
public String filter_date;
public String getFilter_date(){
	return this.filter_date;
}
public String nd_s3_bucket_QA_sfdc;
public String getNd_s3_bucket_QA_sfdc(){
	return this.nd_s3_bucket_QA_sfdc;
}
public String nd_s3_data_lake_path_sfdc;
public String getNd_s3_data_lake_path_sfdc(){
	return this.nd_s3_data_lake_path_sfdc;
}
public String NP_Salesforce_apiVersion;
public String getNP_Salesforce_apiVersion(){
	return this.NP_Salesforce_apiVersion;
}
public String NP_Salesforce_clientId;
public String getNP_Salesforce_clientId(){
	return this.NP_Salesforce_clientId;
}
public String NP_Salesforce_endpoint;
public String getNP_Salesforce_endpoint(){
	return this.NP_Salesforce_endpoint;
}
public String NP_Salesforce_loginType;
public String getNP_Salesforce_loginType(){
	return this.NP_Salesforce_loginType;
}
public String NP_Salesforce_oauth_callbackHost;
public String getNP_Salesforce_oauth_callbackHost(){
	return this.NP_Salesforce_oauth_callbackHost;
}
public Integer NP_Salesforce_oauth_callbackPort;
public Integer getNP_Salesforce_oauth_callbackPort(){
	return this.NP_Salesforce_oauth_callbackPort;
}
public String NP_Salesforce_oauth_clientId;
public String getNP_Salesforce_oauth_clientId(){
	return this.NP_Salesforce_oauth_clientId;
}
public java.lang.String NP_Salesforce_oauth_clientSecret;
public java.lang.String getNP_Salesforce_oauth_clientSecret(){
	return this.NP_Salesforce_oauth_clientSecret;
}
public String NP_Salesforce_oauth_tokenFile;
public String getNP_Salesforce_oauth_tokenFile(){
	return this.NP_Salesforce_oauth_tokenFile;
}
public String NP_Salesforce_oauth2FlowType;
public String getNP_Salesforce_oauth2FlowType(){
	return this.NP_Salesforce_oauth2FlowType;
}
public String NP_Salesforce_oauth2JwtFlow_audience;
public String getNP_Salesforce_oauth2JwtFlow_audience(){
	return this.NP_Salesforce_oauth2JwtFlow_audience;
}
public String NP_Salesforce_oauth2JwtFlow_certificateAlias;
public String getNP_Salesforce_oauth2JwtFlow_certificateAlias(){
	return this.NP_Salesforce_oauth2JwtFlow_certificateAlias;
}
public Integer NP_Salesforce_oauth2JwtFlow_expirationTime;
public Integer getNP_Salesforce_oauth2JwtFlow_expirationTime(){
	return this.NP_Salesforce_oauth2JwtFlow_expirationTime;
}
public String NP_Salesforce_oauth2JwtFlow_issuer;
public String getNP_Salesforce_oauth2JwtFlow_issuer(){
	return this.NP_Salesforce_oauth2JwtFlow_issuer;
}
public String NP_Salesforce_oauth2JwtFlow_keyStore;
public String getNP_Salesforce_oauth2JwtFlow_keyStore(){
	return this.NP_Salesforce_oauth2JwtFlow_keyStore;
}
public java.lang.String NP_Salesforce_oauth2JwtFlow_keyStorePassword;
public java.lang.String getNP_Salesforce_oauth2JwtFlow_keyStorePassword(){
	return this.NP_Salesforce_oauth2JwtFlow_keyStorePassword;
}
public String NP_Salesforce_oauth2JwtFlow_subject;
public String getNP_Salesforce_oauth2JwtFlow_subject(){
	return this.NP_Salesforce_oauth2JwtFlow_subject;
}
public String NP_Salesforce_proxy_host;
public String getNP_Salesforce_proxy_host(){
	return this.NP_Salesforce_proxy_host;
}
public Integer NP_Salesforce_proxy_port;
public Integer getNP_Salesforce_proxy_port(){
	return this.NP_Salesforce_proxy_port;
}
public java.lang.String NP_Salesforce_proxy_userPassword_password;
public java.lang.String getNP_Salesforce_proxy_userPassword_password(){
	return this.NP_Salesforce_proxy_userPassword_password;
}
public String NP_Salesforce_proxy_userPassword_userId;
public String getNP_Salesforce_proxy_userPassword_userId(){
	return this.NP_Salesforce_proxy_userPassword_userId;
}
public String NP_Salesforce_sessionDirectory;
public String getNP_Salesforce_sessionDirectory(){
	return this.NP_Salesforce_sessionDirectory;
}
public Integer NP_Salesforce_timeout;
public Integer getNP_Salesforce_timeout(){
	return this.NP_Salesforce_timeout;
}
public java.lang.String NP_Salesforce_userPassword_password;
public java.lang.String getNP_Salesforce_userPassword_password(){
	return this.NP_Salesforce_userPassword_password;
}
public java.lang.String NP_Salesforce_userPassword_securityKey;
public java.lang.String getNP_Salesforce_userPassword_securityKey(){
	return this.NP_Salesforce_userPassword_securityKey;
}
public String NP_Salesforce_userPassword_userId;
public String getNP_Salesforce_userPassword_userId(){
	return this.NP_Salesforce_userPassword_userId;
}
public String sfdc_audience_url;
public String getSfdc_audience_url(){
	return this.sfdc_audience_url;
}
public String sfdc_certificate_alias;
public String getSfdc_certificate_alias(){
	return this.sfdc_certificate_alias;
}
public String sfdc_keystore_path;
public String getSfdc_keystore_path(){
	return this.sfdc_keystore_path;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.0";
	private final String jobName = "sfdc_history_s3_sync_job_stv";
	private final String projectName = "T_NP_31";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				sfdc_history_s3_sync_job_stv.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(sfdc_history_s3_sync_job_stv.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tChronometerStart_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tChronometerStart_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tChronometerStop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_35_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_2_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_2_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_2_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_3_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_3_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_3_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_4_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_4_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_4_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_5_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_5_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_5_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_8_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_8_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_8_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_12_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_12_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_12_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_13_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_13_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_13_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_14_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_14_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_14_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_16_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_16_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_16_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tChronometerStart_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tChronometerStop_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_30_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_31_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_32_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_34_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_35_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_2_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_3_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_4_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_5_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_8_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_12_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_13_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_14_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_16_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tChronometerStart_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tChronometerStart_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tChronometerStart_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tChronometerStart_1", false);
		start_Hash.put("tChronometerStart_1", System.currentTimeMillis());
		
	
	currentComponent="tChronometerStart_1";

	
		int tos_count_tChronometerStart_1 = 0;
		

	
	
	Long currentTimetChronometerStart_1 = System.currentTimeMillis();
	
	globalMap.put("tChronometerStart_1",currentTimetChronometerStart_1);
	globalMap.put("tChronometerStart_1_STARTTIME", currentTimetChronometerStart_1);
 



/**
 * [tChronometerStart_1 begin ] stop
 */
	
	/**
	 * [tChronometerStart_1 main ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 


	tos_count_tChronometerStart_1++;

/**
 * [tChronometerStart_1 main ] stop
 */
	
	/**
	 * [tChronometerStart_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 process_data_begin ] stop
 */
	
	/**
	 * [tChronometerStart_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 process_data_end ] stop
 */
	
	/**
	 * [tChronometerStart_1 end ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 

ok_Hash.put("tChronometerStart_1", true);
end_Hash.put("tChronometerStart_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tChronometerStart_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tChronometerStart_1 finally ] start
	 */

	

	
	
	currentComponent="tChronometerStart_1";

	

 



/**
 * [tChronometerStart_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


Date start_datetime = new Date((Long)globalMap.get("tChronometerStart_1_STARTTIME"));
String start_time = TalendDate.formatDate("EEE, MMM dd HH:mm:ss.SSS z yyyy",start_datetime);
System.out.println("\n*** " + jobName + " ***");
System.out.println("Start Time: "+start_time);
System.out.println("Environment: " + contextStr);
//context.email_subject_stem = "SalesForce LCV Object Refresh";

globalMap.put("datetime", TalendDate.formatDate("yyyyMMddHHmm", new Date()));
globalMap.put("compare_result", "true");

ConcurrentHashMap<String, String> CHM = new ConcurrentHashMap<String, String>();
CHM.put("Failure?", "False");
globalMap.put("sharedMap", CHM);
globalMap.put("parent_status", "running");





 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	    
		com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper();
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/7.3 Studio/7.3 (Talend Open Studio)");
		
				com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard()
					
		            
		            	
				        .withRegion("us-east-1") // The first region to try your request against
                        .withForceGlobalBucketAccessEnabled(true) // If a bucket is in a different region, try again in the correct region
		            
		            

                    .withCredentials(credentialsProvider_tS3Connection_1)
                    .withClientConfiguration(cc_tS3Connection_1)
                    .build();
			
	
		try{
			conn_tS3Connection_1.getBucketLoggingConfiguration("Check-Connection-Only");
	}catch(com.amazonaws.AmazonServiceException ase_tS3Connection_1){
			if(ase_tS3Connection_1.getErrorCode().equals("NoSuchBucket")){
			//ignore
			}else{
					throw ase_tS3Connection_1;
			}
	}
	
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


context.sfdc_keystore_password = System.getenv("TALEND_SFDC_JKS_PASSWORD");
//System.out.println(context.sfdc_keystore_password );
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tSalesforceConnection_1Process(globalMap);



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	

public void tSalesforceConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSalesforceConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceConnection_1", false);
		start_Hash.put("tSalesforceConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceConnection_1";

	
		int tos_count_tSalesforceConnection_1 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceConnection_1 =
        new org.talend.components.salesforce.tsalesforceconnection.TSalesforceConnectionDefinition();

org.talend.components.salesforce.SalesforceConnectionProperties props_tSalesforceConnection_1 =
        (org.talend.components.salesforce.SalesforceConnectionProperties) def_tSalesforceConnection_1.createRuntimeProperties();
 		                    props_tSalesforceConnection_1.setValue("endpoint",
 		                    "https://login.salesforce.com/services/oauth2");
 		                    
 		                    props_tSalesforceConnection_1.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.OAuth);
 		                    
 		                    props_tSalesforceConnection_1.setValue("bulkConnection",
 		                    true);
 		                    
 		                    props_tSalesforceConnection_1.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceConnection_1.setValue("httpTraceMessage",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.setValue("clientId",
 		                    "");
 		                    
 		                    props_tSalesforceConnection_1.setValue("oauth2FlowType",
 		                        org.talend.components.common.oauth.OAuth2FlowType.JWT_Flow);
 		                    
 		                    props_tSalesforceConnection_1.setValue("apiVersion",
 		                    "47.0");
 		                    
 		                    props_tSalesforceConnection_1.oauth2JwtFlow.setValue("issuer",
 		                    context.sfdc_issuer_token);
 		                    
 		                    props_tSalesforceConnection_1.oauth2JwtFlow.setValue("subject",
 		                    context.sfdc_subject_user);
 		                    
 		                    props_tSalesforceConnection_1.oauth2JwtFlow.setValue("expirationTime",
 		                    600);
 		                    
 		                    props_tSalesforceConnection_1.oauth2JwtFlow.setValue("keyStore",
 		                    context.sfdc_keystore_path);
 		                    
 		                    props_tSalesforceConnection_1.oauth2JwtFlow.setValue("keyStorePassword",
 		                    context.sfdc_keystore_password);
 		                    
 		                    props_tSalesforceConnection_1.oauth2JwtFlow.setValue("certificateAlias",
 		                    context.sfdc_certificate_alias);
 		                    
 		                    props_tSalesforceConnection_1.oauth2JwtFlow.setValue("audience",
 		                    context.sfdc_audience_url);
 		                    
 		                    props_tSalesforceConnection_1.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceConnection_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceConnection_1 = props_tSalesforceConnection_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceConnection_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceConnection_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceConnection_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceConnection_1.referencedComponent.setReference(referencedComponentProperties_tSalesforceConnection_1);
        }
    }
globalMap.put("tSalesforceConnection_1_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceConnection_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceConnection_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceConnection_1_MAPPINGS_URL", mappings_url_tSalesforceConnection_1);

org.talend.components.api.container.RuntimeContainer container_tSalesforceConnection_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceConnection_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceConnection_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceConnection_1 = null;
topology_tSalesforceConnection_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceConnection_1 = def_tSalesforceConnection_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceConnection_1, topology_tSalesforceConnection_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceConnection_1 = def_tSalesforceConnection_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceConnection_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceConnection_1 = componentRuntime_tSalesforceConnection_1.initialize(container_tSalesforceConnection_1, props_tSalesforceConnection_1);

if (initVr_tSalesforceConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceConnection_1.getMessage());
}

if(componentRuntime_tSalesforceConnection_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceConnection_1;
	compDriverInitialization_tSalesforceConnection_1.runAtDriver(container_tSalesforceConnection_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceConnection_1 = null;
if(componentRuntime_tSalesforceConnection_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceConnection_1;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceConnection_1 = sourceOrSink_tSalesforceConnection_1.validate(container_tSalesforceConnection_1);
	if (vr_tSalesforceConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceConnection_1.getMessage());
	}
}

 



/**
 * [tSalesforceConnection_1 begin ] stop
 */
	
	/**
	 * [tSalesforceConnection_1 main ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	


 


	tos_count_tSalesforceConnection_1++;

/**
 * [tSalesforceConnection_1 main ] stop
 */
	
	/**
	 * [tSalesforceConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	


 



/**
 * [tSalesforceConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tSalesforceConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	


 



/**
 * [tSalesforceConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceConnection_1 end ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	
// end of generic

 

ok_Hash.put("tSalesforceConnection_1", true);
end_Hash.put("tSalesforceConnection_1", System.currentTimeMillis());




/**
 * [tSalesforceConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	
// finally of generic

 



/**
 * [tSalesforceConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row17.type = lcm.getType();
		row17.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row17.priority = lcm.getPriority();
		row17.message = lcm.getMessage();
		row17.code = lcm.getCode();
		
		row17.moment = java.util.Calendar.getInstance().getTime();
	
    	row17.pid = pid;
		row17.root_pid = rootPid;
		row17.father_pid = fatherPid;
	
    	row17.project = projectName;
    	row17.job = jobName;
    	row17.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					

    String msg=null;
String ChildJobStatus = (String) ((java.util.Map) globalMap.get("sharedMap")).get("Failure?");
String ParentJobStatus = (String) globalMap.get("parent_status");

if (ChildJobStatus.equals("True")) {
	msg = (String)((java.util.Map) globalMap.get("sharedMap")).get("ExceptionMsg"); 
	}
else if (ParentJobStatus.equals("running")) {
	msg = "Origin: " + row17.origin + ", Error: " + row17.message;
	}

System.out.println("The following job has failed: " + projectName + "." + jobName + ".\nPlease check the application log for more detailed information on the cause.\nException caught: \"" + msg + "\"");
globalMap.put("error_msg", msg);
globalMap.put("error_code", row17.code);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tChronometerStop_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tChronometerStop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tChronometerStop_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tChronometerStop_1", false);
		start_Hash.put("tChronometerStop_1", System.currentTimeMillis());
		
	
	currentComponent="tChronometerStop_1";

	
		int tos_count_tChronometerStop_1 = 0;
		
	
	long timetChronometerStop_1;
	
	  	timetChronometerStop_1 = System.currentTimeMillis() - ((Long)globalMap.get("tChronometerStart_1")).longValue();
		
	Long currentTimetChronometerStop_1 = System.currentTimeMillis();
	globalMap.put("tChronometerStop_1", currentTimetChronometerStop_1);
	
	globalMap.put("tChronometerStop_1_STOPTIME", currentTimetChronometerStop_1);
	globalMap.put("tChronometerStop_1_DURATION", timetChronometerStop_1);
 



/**
 * [tChronometerStop_1 begin ] stop
 */
	
	/**
	 * [tChronometerStop_1 main ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 


	tos_count_tChronometerStop_1++;

/**
 * [tChronometerStop_1 main ] stop
 */
	
	/**
	 * [tChronometerStop_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 process_data_begin ] stop
 */
	
	/**
	 * [tChronometerStop_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 process_data_end ] stop
 */
	
	/**
	 * [tChronometerStop_1 end ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 

ok_Hash.put("tChronometerStop_1", true);
end_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tChronometerStop_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tChronometerStop_1 finally ] start
	 */

	

	
	
	currentComponent="tChronometerStop_1";

	

 



/**
 * [tChronometerStop_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


Date start_datetime = new Date(((Long)globalMap.get("tChronometerStop_1_STOPTIME")) - ((Long)globalMap.get("tChronometerStop_1_DURATION")));
String start_time = TalendDate.formatDate("EEE, MMM dd HH:mm:ss.SSS z yyyy",start_datetime);
Date end_datetime= new Date((Long)globalMap.get("tChronometerStop_1_STOPTIME"));
String end_time = TalendDate.formatDate("EEE, MMM dd HH:mm:ss.SSS z yyyy",end_datetime);
String Duration = TalendDate.formatDate("HH:mm:ss.SSS", TalendDate.parseDate("ss SSS", String.valueOf(((Long)globalMap.get("tChronometerStop_1_DURATION"))/1000)+" "+
String.valueOf(((Long)globalMap.get("tChronometerStop_1_DURATION"))%1000)));

System.out.println("Start Time: "+start_time);
System.out.println("End Time: "+end_time);
System.out.println("Run Duration: "+Duration);
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		



System.out.println("Running For SFDC Object OpportunityHistory: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 



System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tSalesforceInput_1Process(globalMap);



/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tJava_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class out8Struct implements routines.system.IPersistableRow<out8Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String OpportunityId;

				public String getOpportunityId () {
					return this.OpportunityId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String StageName;

				public String getStageName () {
					return this.StageName;
				}
				
			    public BigDecimal Amount;

				public BigDecimal getAmount () {
					return this.Amount;
				}
				
			    public BigDecimal ExpectedRevenue;

				public BigDecimal getExpectedRevenue () {
					return this.ExpectedRevenue;
				}
				
			    public Long CloseDate;

				public Long getCloseDate () {
					return this.CloseDate;
				}
				
			    public Double Probability;

				public Double getProbability () {
					return this.Probability;
				}
				
			    public String ForecastCategory;

				public String getForecastCategory () {
					return this.ForecastCategory;
				}
				
			    public long SystemModstamp;

				public long getSystemModstamp () {
					return this.SystemModstamp;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
					this.OpportunityId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.StageName = readString(dis);
					
						this.Amount = (BigDecimal) dis.readObject();
					
						this.ExpectedRevenue = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CloseDate = null;
           				} else {
           			    	this.CloseDate = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Probability = null;
           				} else {
           			    	this.Probability = dis.readDouble();
           				}
					
					this.ForecastCategory = readString(dis);
					
			        this.SystemModstamp = dis.readLong();
					
			        this.IsDeleted = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// String
				
						writeString(this.OpportunityId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.StageName,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Amount);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ExpectedRevenue);
					
					// Long
				
						if(this.CloseDate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CloseDate);
		            	}
					
					// Double
				
						if(this.Probability == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.Probability);
		            	}
					
					// String
				
						writeString(this.ForecastCategory,dos);
					
					// long
				
		            	dos.writeLong(this.SystemModstamp);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",OpportunityId="+OpportunityId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",StageName="+StageName);
		sb.append(",Amount="+String.valueOf(Amount));
		sb.append(",ExpectedRevenue="+String.valueOf(ExpectedRevenue));
		sb.append(",CloseDate="+String.valueOf(CloseDate));
		sb.append(",Probability="+String.valueOf(Probability));
		sb.append(",ForecastCategory="+ForecastCategory);
		sb.append(",SystemModstamp="+String.valueOf(SystemModstamp));
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String OpportunityId;

				public String getOpportunityId () {
					return this.OpportunityId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String StageName;

				public String getStageName () {
					return this.StageName;
				}
				
			    public BigDecimal Amount;

				public BigDecimal getAmount () {
					return this.Amount;
				}
				
			    public BigDecimal ExpectedRevenue;

				public BigDecimal getExpectedRevenue () {
					return this.ExpectedRevenue;
				}
				
			    public java.util.Date CloseDate;

				public java.util.Date getCloseDate () {
					return this.CloseDate;
				}
				
			    public Double Probability;

				public Double getProbability () {
					return this.Probability;
				}
				
			    public String ForecastCategory;

				public String getForecastCategory () {
					return this.ForecastCategory;
				}
				
			    public java.util.Date SystemModstamp;

				public java.util.Date getSystemModstamp () {
					return this.SystemModstamp;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
					this.OpportunityId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.StageName = readString(dis);
					
						this.Amount = (BigDecimal) dis.readObject();
					
						this.ExpectedRevenue = (BigDecimal) dis.readObject();
					
					this.CloseDate = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Probability = null;
           				} else {
           			    	this.Probability = dis.readDouble();
           				}
					
					this.ForecastCategory = readString(dis);
					
					this.SystemModstamp = readDate(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// String
				
						writeString(this.OpportunityId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.StageName,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Amount);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ExpectedRevenue);
					
					// java.util.Date
				
						writeDate(this.CloseDate,dos);
					
					// Double
				
						if(this.Probability == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.Probability);
		            	}
					
					// String
				
						writeString(this.ForecastCategory,dos);
					
					// java.util.Date
				
						writeDate(this.SystemModstamp,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",OpportunityId="+OpportunityId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",StageName="+StageName);
		sb.append(",Amount="+String.valueOf(Amount));
		sb.append(",ExpectedRevenue="+String.valueOf(ExpectedRevenue));
		sb.append(",CloseDate="+String.valueOf(CloseDate));
		sb.append(",Probability="+String.valueOf(Probability));
		sb.append(",ForecastCategory="+ForecastCategory);
		sb.append(",SystemModstamp="+String.valueOf(SystemModstamp));
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();
out8Struct out8 = new out8Struct();





	
	/**
	 * [tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_1_Out", false);
		start_Hash.put("tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out8");
					}
				
		int tos_count_tWriteJSONField_1_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_1_Out = 0;
				boolean needRoot_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<row34Struct> listGroupby_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<row34Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_1_Out extends Thread {
						
									    java.util.Queue<row34Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_1_In", queue);
							globalMap.put("flows_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_1_Out txf_tWriteJSONField_1_Out = new ThreadXMLField_tWriteJSONField_1_Out(listGroupby_tWriteJSONField_1_Out);
					
					txf_tWriteJSONField_1_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_1_Out nestXMLTool_tWriteJSONField_1_Out = new NestXMLTool_tWriteJSONField_1_Out();

out8Struct  rowStructOutput_tWriteJSONField_1_Out = new out8Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_1_Out.setTrimText(false);
format_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_1_Out = new int[1];

 



/**
 * [tWriteJSONField_1_Out begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out8Struct out8_tmp = new out8Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_1", false);
		start_Hash.put("tSalesforceInput_1", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_1";

	
		int tos_count_tSalesforceInput_1 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_1 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_1 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_1.createRuntimeProperties();
 		                    props_tSalesforceInput_1.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_1.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_1.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_1.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_1.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_1.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_1.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_1.module.setValue("moduleName",
 		                    "OpportunityHistory");
 		                    
 		                    props_tSalesforceInput_1.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_1.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_1.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"OpportunityHistory\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OpportunityId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OpportunityId\",\"talend.field.dbColumnName\":\"OpportunityId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OpportunityId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"StageName\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"StageName\",\"talend.field.dbColumnName\":\"StageName\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"40\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"StageName\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Amount\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Amount\",\"talend.field.dbColumnName\":\"Amount\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Amount\",\"talend.field.precision\":\"2\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ExpectedRevenue\",\"type\":[{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"},\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ExpectedRevenue\",\"talend.field.dbColumnName\":\"ExpectedRevenue\",\"di.column.talendType\":\"id_BigDecimal\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ExpectedRevenue\",\"talend.field.precision\":\"2\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CloseDate\",\"type\":[{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"null\"],\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CloseDate\",\"talend.field.dbColumnName\":\"CloseDate\",\"di.column.talendType\":\"id_Date\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"yyyy-MM-dd\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CloseDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Probability\",\"type\":[\"double\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Probability\",\"talend.field.dbColumnName\":\"Probability\",\"di.column.talendType\":\"id_Double\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"3\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Probability\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ForecastCategory\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ForecastCategory\",\"talend.field.dbColumnName\":\"ForecastCategory\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"40\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ForecastCategory\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"SystemModstamp\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"SystemModstamp\",\"talend.field.dbColumnName\":\"SystemModstamp\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"SystemModstamp\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"OpportunityHistory\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_1_1_fisrt sst_tSalesforceInput_1_1_fisrt = new SchemaSettingTool_tSalesforceInput_1_1_fisrt();
 		                    
 		                    props_tSalesforceInput_1.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_1_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_1.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_1);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_1.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_1);
        }
    }
globalMap.put("tSalesforceInput_1_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_1_MAPPINGS_URL", mappings_url_tSalesforceInput_1);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_1 = null;
topology_tSalesforceInput_1 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_1 = def_tSalesforceInput_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_1, topology_tSalesforceInput_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_1 = def_tSalesforceInput_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_1 = componentRuntime_tSalesforceInput_1.initialize(container_tSalesforceInput_1, props_tSalesforceInput_1);

if (initVr_tSalesforceInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_1.getMessage());
}

if(componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_1;
	compDriverInitialization_tSalesforceInput_1.runAtDriver(container_tSalesforceInput_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_1 = null;
if(componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_1;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_1 = sourceOrSink_tSalesforceInput_1.validate(container_tSalesforceInput_1);
	if (vr_tSalesforceInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_1.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_1 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_1;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_1 =
            source_tSalesforceInput_1.createReader(container_tSalesforceInput_1);
	reader_tSalesforceInput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_1, container_tSalesforceInput_1);

        boolean multi_output_is_allowed_tSalesforceInput_1 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_1 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_1.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_1 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_1 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_1 = props_tSalesforceInput_1.getSchema(c_tSalesforceInput_1, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_1 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_1, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_1 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_1 = reader_tSalesforceInput_1.start();

    resourceMap.put("reader_tSalesforceInput_1", reader_tSalesforceInput_1);

    for (; available_tSalesforceInput_1; available_tSalesforceInput_1 = reader_tSalesforceInput_1.advance()) {
    	nb_line_tSalesforceInput_1++;

    	
        if (multi_output_is_allowed_tSalesforceInput_1) {
                row35 = null;

        }

        try {
            Object data_tSalesforceInput_1 = reader_tSalesforceInput_1.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_1) {
                    row35 = new row35Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_1 == null) {
            factory_tSalesforceInput_1 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_1.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_1.setWrapped(factory_tSalesforceInput_1.convertToAvro(data_tSalesforceInput_1));
                Object columnValue_0_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(0);
                        row35.Id = (String) (columnValue_0_tSalesforceInput_1);
                Object columnValue_1_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(1);
                        row35.OpportunityId = (String) (columnValue_1_tSalesforceInput_1);
                Object columnValue_2_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(2);
                        row35.CreatedById = (String) (columnValue_2_tSalesforceInput_1);
                Object columnValue_3_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(3);
                        row35.CreatedDate = (java.util.Date) (columnValue_3_tSalesforceInput_1);
                Object columnValue_4_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(4);
                        row35.StageName = (String) (columnValue_4_tSalesforceInput_1);
                Object columnValue_5_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(5);
                        row35.Amount = (BigDecimal) (columnValue_5_tSalesforceInput_1);
                Object columnValue_6_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(6);
                        row35.ExpectedRevenue = (BigDecimal) (columnValue_6_tSalesforceInput_1);
                Object columnValue_7_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(7);
                        row35.CloseDate = (java.util.Date) (columnValue_7_tSalesforceInput_1);
                Object columnValue_8_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(8);
                        row35.Probability = (Double) (columnValue_8_tSalesforceInput_1);
                Object columnValue_9_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(9);
                        row35.ForecastCategory = (String) (columnValue_9_tSalesforceInput_1);
                Object columnValue_10_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(10);
                        row35.SystemModstamp = (java.util.Date) (columnValue_10_tSalesforceInput_1);
                Object columnValue_11_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(11);
                    if (columnValue_11_tSalesforceInput_1 == null) {
                        row35.IsDeleted = false;
                    } else {
                            row35.IsDeleted = (boolean) (columnValue_11_tSalesforceInput_1);
                    }
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_1) {
        	java.util.Map<String,Object> info_tSalesforceInput_1 = e_tSalesforceInput_1.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_1 = null;
            	if(info_tSalesforceInput_1.containsKey("error")){
            		errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("error");
        		}else if(info_tSalesforceInput_1.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_1 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_1 = "Row "+ nb_line_tSalesforceInput_1 + ": "+errorMessage_tSalesforceInput_1;
    			System.err.println(errorMessage_tSalesforceInput_1);
            	// If the record is reject, the main line record should put NULL
            	row35 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_1 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_1 = null;


 



/**
 * [tSalesforceInput_1 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_1 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 


	tos_count_tSalesforceInput_1++;

/**
 * [tSalesforceInput_1 main ] stop
 */
	
	/**
	 * [tSalesforceInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 



/**
 * [tSalesforceInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row35");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out8 = null;


// # Output table : 'out8'
out8_tmp.Id = row35.Id ;
out8_tmp.OpportunityId = row35.OpportunityId ;
out8_tmp.CreatedById = row35.CreatedById ;
out8_tmp.CreatedDate = (row35.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row35.CreatedDate))).getTime())/1000 ;
out8_tmp.StageName = row35.StageName ;
out8_tmp.Amount = row35.Amount ;
out8_tmp.ExpectedRevenue = row35.ExpectedRevenue ;
out8_tmp.CloseDate = (row35.CloseDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row35.CloseDate))).getTime())/1000 ;
out8_tmp.Probability = row35.Probability ;
out8_tmp.ForecastCategory = row35.ForecastCategory ;
out8_tmp.SystemModstamp = (row35.SystemModstamp == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row35.SystemModstamp))).getTime())/1000 ;
out8_tmp.IsDeleted = row35.IsDeleted ;
out8 = out8_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out8"
if(out8 != null) { 



	
	/**
	 * [tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out8");
					}
					

	if(txf_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_tWriteJSONField_1_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_1_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_1_Out.getLastError();
	}
	nb_line_tWriteJSONField_1_Out++;
	valueMap_tWriteJSONField_1_Out.clear();
	arraysValueMap_tWriteJSONField_1_Out.clear();
	valueMap_tWriteJSONField_1_Out.put("Id",
	(
            out8.Id.toString()
		));
	arraysValueMap_tWriteJSONField_1_Out.put("Id",
	(
            out8.Id.toString()
		));
	valueMap_tWriteJSONField_1_Out.put("OpportunityId",
	(
            out8.OpportunityId.toString()
		));
	arraysValueMap_tWriteJSONField_1_Out.put("OpportunityId",
	(
            out8.OpportunityId.toString()
		));
	valueMap_tWriteJSONField_1_Out.put("CreatedById",
	(
            out8.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_1_Out.put("CreatedById",
	(
            out8.CreatedById.toString()
		));
	valueMap_tWriteJSONField_1_Out.put("CreatedDate",
	(
            String.valueOf(out8.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_1_Out.put("CreatedDate",
	(
            String.valueOf(out8.CreatedDate)
		));
	valueMap_tWriteJSONField_1_Out.put("StageName",
	(
            out8.StageName.toString()
		));
	arraysValueMap_tWriteJSONField_1_Out.put("StageName",
	(
            out8.StageName.toString()
		));
	valueMap_tWriteJSONField_1_Out.put("Amount",
	(
		out8.Amount != null?
			out8.Amount.toPlainString():null
		));
	arraysValueMap_tWriteJSONField_1_Out.put("Amount",
	(
		out8.Amount != null?
			out8.Amount.toPlainString():null
		));
	valueMap_tWriteJSONField_1_Out.put("ExpectedRevenue",
	(
		out8.ExpectedRevenue != null?
			out8.ExpectedRevenue.toPlainString():null
		));
	arraysValueMap_tWriteJSONField_1_Out.put("ExpectedRevenue",
	(
		out8.ExpectedRevenue != null?
			out8.ExpectedRevenue.toPlainString():null
		));
	valueMap_tWriteJSONField_1_Out.put("CloseDate",
	(
		out8.CloseDate != null?
            out8.CloseDate.toString():null
		));
	arraysValueMap_tWriteJSONField_1_Out.put("CloseDate",
	(
		out8.CloseDate != null?
            out8.CloseDate.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("Probability",
	(
		out8.Probability != null?
            out8.Probability.toString():null
		));
	arraysValueMap_tWriteJSONField_1_Out.put("Probability",
	(
		out8.Probability != null?
            out8.Probability.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("ForecastCategory",
	(
		out8.ForecastCategory != null?
            out8.ForecastCategory.toString():null
		));
	arraysValueMap_tWriteJSONField_1_Out.put("ForecastCategory",
	(
		out8.ForecastCategory != null?
            out8.ForecastCategory.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("SystemModstamp",
	(
            String.valueOf(out8.SystemModstamp)
		));
	arraysValueMap_tWriteJSONField_1_Out.put("SystemModstamp",
	(
            String.valueOf(out8.SystemModstamp)
		));
	valueMap_tWriteJSONField_1_Out.put("IsDeleted",
	(
            String.valueOf(out8.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_1_Out.put("IsDeleted",
	(
            String.valueOf(out8.IsDeleted)
		));
		String strTemp_tWriteJSONField_1_Out = "";
	if(strCompCache_tWriteJSONField_1_Out==null){
		strCompCache_tWriteJSONField_1_Out=strTemp_tWriteJSONField_1_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_1_Out, format_tWriteJSONField_1_Out);
			output_tWriteJSONField_1_Out.write(doc_tWriteJSONField_1_Out);
		    output_tWriteJSONField_1_Out.close();
			
				  		  row34Struct row_tWriteJSONField_1_Out = new row34Struct();
						  
					     		row_tWriteJSONField_1_Out.data = strWriter_tWriteJSONField_1_Out.toString();
					     		listGroupby_tWriteJSONField_1_Out.add(row_tWriteJSONField_1_Out);
					
		    doc_tWriteJSONField_1_Out.clearContent();
			needRoot_tWriteJSONField_1_Out = true;
			for(int i_tWriteJSONField_1_Out=0;i_tWriteJSONField_1_Out<orders_tWriteJSONField_1_Out.length;i_tWriteJSONField_1_Out++){
				orders_tWriteJSONField_1_Out[i_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_1_Out != null && groupbyList_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_tWriteJSONField_1_Out.clear();
			}
			strCompCache_tWriteJSONField_1_Out=strTemp_tWriteJSONField_1_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_1_Out) {
		needRoot_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_tWriteJSONField_1_Out = doc_tWriteJSONField_1_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out;
		org.dom4j.Element root_0_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("OpportunityId");
		if(
		valueMap_tWriteJSONField_1_Out.get("OpportunityId")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_0_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("OpportunityId"));
			root_0_tWriteJSONField_1_Out.addAttribute("type", "string");
			root_0_tWriteJSONField_1_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_0_tWriteJSONField_1_Out,"null");
			root_0_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_1_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_1_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("CreatedById"));
			root_1_tWriteJSONField_1_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_1_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_1_tWriteJSONField_1_Out,"null");
			root_1_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_1_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_2_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("CreatedDate"));
            root_2_tWriteJSONField_1_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_2_tWriteJSONField_1_Out,"null");
			root_2_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("StageName");
		if(
		valueMap_tWriteJSONField_1_Out.get("StageName")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_3_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("StageName"));
			root_3_tWriteJSONField_1_Out.addAttribute("type", "string");
			root_3_tWriteJSONField_1_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_3_tWriteJSONField_1_Out,"null");
			root_3_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("Amount");
		if(
		valueMap_tWriteJSONField_1_Out.get("Amount")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_4_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("Amount"));
            root_4_tWriteJSONField_1_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_4_tWriteJSONField_1_Out,"null");
			root_4_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("ExpectedRevenue");
		if(
		valueMap_tWriteJSONField_1_Out.get("ExpectedRevenue")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_5_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("ExpectedRevenue"));
            root_5_tWriteJSONField_1_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_5_tWriteJSONField_1_Out,"null");
			root_5_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("CloseDate");
		if(
		valueMap_tWriteJSONField_1_Out.get("CloseDate")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_6_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("CloseDate"));
            root_6_tWriteJSONField_1_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_6_tWriteJSONField_1_Out,"null");
			root_6_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_7_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("Probability");
		if(
		valueMap_tWriteJSONField_1_Out.get("Probability")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_7_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("Probability"));
            root_7_tWriteJSONField_1_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_7_tWriteJSONField_1_Out,"null");
			root_7_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_8_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("ForecastCategory");
		if(
		valueMap_tWriteJSONField_1_Out.get("ForecastCategory")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_8_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("ForecastCategory"));
			root_8_tWriteJSONField_1_Out.addAttribute("type", "string");
			root_8_tWriteJSONField_1_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_8_tWriteJSONField_1_Out,"null");
			root_8_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_9_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("SystemModstamp");
		if(
		valueMap_tWriteJSONField_1_Out.get("SystemModstamp")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_9_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("SystemModstamp"));
            root_9_tWriteJSONField_1_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_9_tWriteJSONField_1_Out,"null");
			root_9_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_10_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_1_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_10_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("IsDeleted"));
            root_10_tWriteJSONField_1_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(root_10_tWriteJSONField_1_Out,"null");
			root_10_tWriteJSONField_1_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_1_Out = subTreeRootParent_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_tWriteJSONField_1_Out=root4Group_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_1_Out[0]==0){
        	orders_tWriteJSONField_1_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_1_Out.length){
        		orders_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_1_Out.elements().add(orders_tWriteJSONField_1_Out[0]++,loop_tWriteJSONField_1_Out);
		if(
		valueMap_tWriteJSONField_1_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(loop_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("Id"));
			loop_tWriteJSONField_1_Out.addAttribute("type", "string");
			loop_tWriteJSONField_1_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_1_Out .setText(loop_tWriteJSONField_1_Out,"null");
			loop_tWriteJSONField_1_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_1_Out++;

/**
 * [tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

 



/**
 * [tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

 



/**
 * [tWriteJSONField_1_Out process_data_end ] stop
 */

} // End of branch "out8"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 



/**
 * [tSalesforceInput_1 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_1 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_1", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_1.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_1 = reader_tSalesforceInput_1.getReturnValues();
if(resultMap_tSalesforceInput_1!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_1 : resultMap_tSalesforceInput_1.entrySet()) {
		switch(entry_tSalesforceInput_1.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "ERROR_MESSAGE", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_LINE", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_SUCCESS", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_REJECT", entry_tSalesforceInput_1.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_1 = new StringBuilder();
            for (int i_tSalesforceInput_1 = 0; i_tSalesforceInput_1 < entry_tSalesforceInput_1.getKey().length(); i_tSalesforceInput_1++) {
                char ch_tSalesforceInput_1 = entry_tSalesforceInput_1.getKey().charAt(i_tSalesforceInput_1);
                if(Character.isUpperCase(ch_tSalesforceInput_1) && i_tSalesforceInput_1> 0) {
                	studio_key_tSalesforceInput_1.append('_');
                }
                studio_key_tSalesforceInput_1.append(ch_tSalesforceInput_1);
            }
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", studio_key_tSalesforceInput_1.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_1.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_1", true);
end_Hash.put("tSalesforceInput_1", System.currentTimeMillis());




/**
 * [tSalesforceInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

if(nb_line_tWriteJSONField_1_Out > 0){  
    nestXMLTool_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_1_Out, format_tWriteJSONField_1_Out);
	output_tWriteJSONField_1_Out.write(doc_tWriteJSONField_1_Out);
    output_tWriteJSONField_1_Out.close();
					row34Struct row_tWriteJSONField_1_Out = new row34Struct();
						  
					     		row_tWriteJSONField_1_Out.data = strWriter_tWriteJSONField_1_Out.toString();
					     		listGroupby_tWriteJSONField_1_Out.add(row_tWriteJSONField_1_Out);
		    		

}
globalMap.put("tWriteJSONField_1_Out_NB_LINE",nb_line_tWriteJSONField_1_Out);
globalMap.put("tWriteJSONField_1_In_FINISH" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
	
		txf_tWriteJSONField_1_Out.join();
		
		if(txf_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_tWriteJSONField_1_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_1_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_1_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_1_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out8");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_1_Out", true);
end_Hash.put("tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_1_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_1 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_1")==null){
    if(resourceMap.get("reader_tSalesforceInput_1")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_1")).close();
		} catch (java.io.IOException e_tSalesforceInput_1) {
			String errorMessage_tSalesforceInput_1 = "failed to release the resource in tSalesforceInput_1 :" + e_tSalesforceInput_1.getMessage();
			System.err.println(errorMessage_tSalesforceInput_1);
		}
	}
}
 



/**
 * [tSalesforceInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_1_In");
		if(resourceMap.get("finish_tWriteJSONField_1_Out") == null){
			globalMap.put("tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_1_Out != null) {
		globalMap.put("tWriteJSONField_1_In_FINISH" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_1_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_1", false);
		start_Hash.put("tFileArchive_1", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_1";

	
		int tos_count_tFileArchive_1 = 0;
		

 



/**
 * [tFileArchive_1 begin ] stop
 */
	
	/**
	 * [tFileArchive_1 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

	

		String sourceFile_tFileArchive_1 = context.staging_S3_dir + "opportunityhistory.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_1), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_1 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_1 = context.staging_S3_dir + "opportunityhistory.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_1 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_1, zipFile_tFileArchive_1);
    zip_tFileArchive_1.setOverwriteExistTargetZip(true);
	zip_tFileArchive_1.setMakeTargetDir(true);
	zip_tFileArchive_1.setCompressLevel(9);
	zip_tFileArchive_1.setArchiveFormat("gzip");
	zip_tFileArchive_1.setAllFiles(true);
	
	
		zip_tFileArchive_1.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_1_ARCHIVE_FILEPATH",zipFile_tFileArchive_1);
   
   globalMap.put("tFileArchive_1_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_1).getName());

   zip_tFileArchive_1.doZip();


 


	tos_count_tFileArchive_1++;

/**
 * [tFileArchive_1 main ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_1 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 

ok_Hash.put("tFileArchive_1", true);
end_Hash.put("tFileArchive_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk46", 0, "ok");
				}
				tS3Put_1Process(globalMap);



/**
 * [tFileArchive_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_1 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/opportunityhistory/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/opportunityhistory_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = context.staging_S3_dir + "opportunityhistory.json.gz";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		sourceStream_tS3Put_1.read(buffer_tS3Put_1);
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.getLength(buffer_tS3Put_1);
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				

    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = sourceStream_tS3Put_1.read(probeAvailability_tS3Put_1) != -1;
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	sourceStream_tS3Put_1.read(buffer_tS3Put_1,1,partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	curPartSize_tS3Put_1 = streamUtil_tS3Put_1.getLength(buffer_tS3Put_1);
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
		
			throw(e_tS3Put_1);
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk47", 0, "ok");
				}
				tJava_19Process(globalMap);



/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_19", false);
		start_Hash.put("tJava_19", System.currentTimeMillis());
		
	
	currentComponent="tJava_19";

	
		int tos_count_tJava_19 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_1_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_1_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_19 begin ] stop
 */
	
	/**
	 * [tJava_19 main ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 


	tos_count_tJava_19++;

/**
 * [tJava_19 main ] stop
 */
	
	/**
	 * [tJava_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 



/**
 * [tJava_19 process_data_begin ] stop
 */
	
	/**
	 * [tJava_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 



/**
 * [tJava_19 process_data_end ] stop
 */
	
	/**
	 * [tJava_19 end ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 

ok_Hash.put("tJava_19", true);
end_Hash.put("tJava_19", System.currentTimeMillis());




/**
 * [tJava_19 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_19 finally ] start
	 */

	

	
	
	currentComponent="tJava_19";

	

 



/**
 * [tJava_19 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_19_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_1_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";

	
		int tos_count_tJava_5 = 0;
		



System.out.println("Running For SFDC Object hed__Program_Enrollment__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}


if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 


System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tSalesforceInput_2Process(globalMap);



/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tJava_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public static class out18Struct implements routines.system.IPersistableRow<out18Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row37Struct row37 = new row37Struct();
out18Struct out18 = new out18Struct();





	
	/**
	 * [tWriteJSONField_2_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_2_Out", false);
		start_Hash.put("tWriteJSONField_2_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out18");
					}
				
		int tos_count_tWriteJSONField_2_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_2_Out = 0;
				boolean needRoot_tWriteJSONField_2_Out  = true;
				
				String  strCompCache_tWriteJSONField_2_Out= null;		
				
						        java.util.Queue<row36Struct> listGroupby_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<row36Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_2_Out extends Thread {
						
									    java.util.Queue<row36Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_2_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_2_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_2_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_2_In", queue);
							globalMap.put("flows_tWriteJSONField_2_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_2_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_2_Out txf_tWriteJSONField_2_Out = new ThreadXMLField_tWriteJSONField_2_Out(listGroupby_tWriteJSONField_2_Out);
					
					txf_tWriteJSONField_2_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_2_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_2_Out nestXMLTool_tWriteJSONField_2_Out = new NestXMLTool_tWriteJSONField_2_Out();

out18Struct  rowStructOutput_tWriteJSONField_2_Out = new out18Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_2_Out = null;
org.dom4j.Document doc_tWriteJSONField_2_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_2_Out.setTrimText(false);
format_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_2_Out = new int[1];

 



/**
 * [tWriteJSONField_2_Out begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out18Struct out18_tmp = new out18Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_2", false);
		start_Hash.put("tSalesforceInput_2", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_2";

	
		int tos_count_tSalesforceInput_2 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_2 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_2 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_2.createRuntimeProperties();
 		                    props_tSalesforceInput_2.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_2.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_2.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_2.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_2.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_2.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_2.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_2.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_2.module.setValue("moduleName",
 		                    "hed__Program_Enrollment__History");
 		                    
 		                    props_tSalesforceInput_2.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_2.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_2.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_2_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"hed__Program_Enrollment__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"hed__Program_Enrollment__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_2_1_fisrt sst_tSalesforceInput_2_1_fisrt = new SchemaSettingTool_tSalesforceInput_2_1_fisrt();
 		                    
 		                    props_tSalesforceInput_2.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_2_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_2.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_2 = props_tSalesforceInput_2.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_2.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_2);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_2.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_2 = props_tSalesforceInput_2.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_2.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_2);
        }
    }
globalMap.put("tSalesforceInput_2_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_2_MAPPINGS_URL", mappings_url_tSalesforceInput_2);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_2 = null;
topology_tSalesforceInput_2 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_2 = def_tSalesforceInput_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_2, topology_tSalesforceInput_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_2 = def_tSalesforceInput_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_2 = componentRuntime_tSalesforceInput_2.initialize(container_tSalesforceInput_2, props_tSalesforceInput_2);

if (initVr_tSalesforceInput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_2.getMessage());
}

if(componentRuntime_tSalesforceInput_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_2;
	compDriverInitialization_tSalesforceInput_2.runAtDriver(container_tSalesforceInput_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_2 = null;
if(componentRuntime_tSalesforceInput_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_2;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_2 = sourceOrSink_tSalesforceInput_2.validate(container_tSalesforceInput_2);
	if (vr_tSalesforceInput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_2.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_2 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_2;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_2 =
            source_tSalesforceInput_2.createReader(container_tSalesforceInput_2);
	reader_tSalesforceInput_2 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_2, container_tSalesforceInput_2);

        boolean multi_output_is_allowed_tSalesforceInput_2 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_2 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_2.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_2 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_2 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_2 = props_tSalesforceInput_2.getSchema(c_tSalesforceInput_2, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_2 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_2, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_2 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_2 = reader_tSalesforceInput_2.start();

    resourceMap.put("reader_tSalesforceInput_2", reader_tSalesforceInput_2);

    for (; available_tSalesforceInput_2; available_tSalesforceInput_2 = reader_tSalesforceInput_2.advance()) {
    	nb_line_tSalesforceInput_2++;

    	
        if (multi_output_is_allowed_tSalesforceInput_2) {
                row37 = null;

        }

        try {
            Object data_tSalesforceInput_2 = reader_tSalesforceInput_2.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_2) {
                    row37 = new row37Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_2 == null) {
            factory_tSalesforceInput_2 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_2.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_2.setWrapped(factory_tSalesforceInput_2.convertToAvro(data_tSalesforceInput_2));
                Object columnValue_0_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(0);
                        row37.Id = (String) (columnValue_0_tSalesforceInput_2);
                Object columnValue_1_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(1);
                    if (columnValue_1_tSalesforceInput_2 == null) {
                        row37.IsDeleted = false;
                    } else {
                            row37.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_2);
                    }
                Object columnValue_2_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(2);
                        row37.ParentId = (String) (columnValue_2_tSalesforceInput_2);
                Object columnValue_3_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(3);
                        row37.CreatedById = (String) (columnValue_3_tSalesforceInput_2);
                Object columnValue_4_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(4);
                        row37.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_2);
                Object columnValue_5_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(5);
                        row37.Field = (String) (columnValue_5_tSalesforceInput_2);
                Object columnValue_6_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(6);
                        row37.OldValue = (String) (columnValue_6_tSalesforceInput_2);
                Object columnValue_7_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(7);
                        row37.NewValue = (String) (columnValue_7_tSalesforceInput_2);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_2) {
        	java.util.Map<String,Object> info_tSalesforceInput_2 = e_tSalesforceInput_2.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_2 = null;
            	if(info_tSalesforceInput_2.containsKey("error")){
            		errorMessage_tSalesforceInput_2 = info_tSalesforceInput_2.get("error");
        		}else if(info_tSalesforceInput_2.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_2 = info_tSalesforceInput_2.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_2 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_2 = "Row "+ nb_line_tSalesforceInput_2 + ": "+errorMessage_tSalesforceInput_2;
    			System.err.println(errorMessage_tSalesforceInput_2);
            	// If the record is reject, the main line record should put NULL
            	row37 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_2 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_2 = null;


 



/**
 * [tSalesforceInput_2 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_2 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	


 


	tos_count_tSalesforceInput_2++;

/**
 * [tSalesforceInput_2 main ] stop
 */
	
	/**
	 * [tSalesforceInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	


 



/**
 * [tSalesforceInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row37");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out18 = null;


// # Output table : 'out18'
out18_tmp.Id = row37.Id ;
out18_tmp.IsDeleted = row37.IsDeleted ;
out18_tmp.ParentId = row37.ParentId ;
out18_tmp.CreatedById = row37.CreatedById ;
out18_tmp.CreatedDate = (row37.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row37.CreatedDate))).getTime())/1000 ;
out18_tmp.Field = row37.Field ;
out18_tmp.OldValue = row37.OldValue ;
out18_tmp.NewValue = row37.NewValue ;
out18 = out18_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out18"
if(out18 != null) { 



	
	/**
	 * [tWriteJSONField_2_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out18");
					}
					

	if(txf_tWriteJSONField_2_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_2_Out.getCurrentComponent();
		throw txf_tWriteJSONField_2_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_2_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_2_Out.getLastError();
	}
	nb_line_tWriteJSONField_2_Out++;
	valueMap_tWriteJSONField_2_Out.clear();
	arraysValueMap_tWriteJSONField_2_Out.clear();
	valueMap_tWriteJSONField_2_Out.put("Id",
	(
            out18.Id.toString()
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Id",
	(
            out18.Id.toString()
		));
	valueMap_tWriteJSONField_2_Out.put("IsDeleted",
	(
            String.valueOf(out18.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_2_Out.put("IsDeleted",
	(
            String.valueOf(out18.IsDeleted)
		));
	valueMap_tWriteJSONField_2_Out.put("ParentId",
	(
            out18.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_2_Out.put("ParentId",
	(
            out18.ParentId.toString()
		));
	valueMap_tWriteJSONField_2_Out.put("CreatedById",
	(
            out18.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_2_Out.put("CreatedById",
	(
            out18.CreatedById.toString()
		));
	valueMap_tWriteJSONField_2_Out.put("CreatedDate",
	(
            String.valueOf(out18.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_2_Out.put("CreatedDate",
	(
            String.valueOf(out18.CreatedDate)
		));
	valueMap_tWriteJSONField_2_Out.put("Field",
	(
            out18.Field.toString()
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Field",
	(
            out18.Field.toString()
		));
	valueMap_tWriteJSONField_2_Out.put("OldValue",
	(
		out18.OldValue != null?
            out18.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("OldValue",
	(
		out18.OldValue != null?
            out18.OldValue.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("NewValue",
	(
		out18.NewValue != null?
            out18.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("NewValue",
	(
		out18.NewValue != null?
            out18.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_2_Out = "";
	if(strCompCache_tWriteJSONField_2_Out==null){
		strCompCache_tWriteJSONField_2_Out=strTemp_tWriteJSONField_2_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_tWriteJSONField_2_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_2_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_2_Out, format_tWriteJSONField_2_Out);
			output_tWriteJSONField_2_Out.write(doc_tWriteJSONField_2_Out);
		    output_tWriteJSONField_2_Out.close();
			
				  		  row36Struct row_tWriteJSONField_2_Out = new row36Struct();
						  
					     		row_tWriteJSONField_2_Out.data = strWriter_tWriteJSONField_2_Out.toString();
					     		listGroupby_tWriteJSONField_2_Out.add(row_tWriteJSONField_2_Out);
					
		    doc_tWriteJSONField_2_Out.clearContent();
			needRoot_tWriteJSONField_2_Out = true;
			for(int i_tWriteJSONField_2_Out=0;i_tWriteJSONField_2_Out<orders_tWriteJSONField_2_Out.length;i_tWriteJSONField_2_Out++){
				orders_tWriteJSONField_2_Out[i_tWriteJSONField_2_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_2_Out != null && groupbyList_tWriteJSONField_2_Out.size() >= 0){
				groupbyList_tWriteJSONField_2_Out.clear();
			}
			strCompCache_tWriteJSONField_2_Out=strTemp_tWriteJSONField_2_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_2_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_2_Out) {
		needRoot_tWriteJSONField_2_Out=false;
		org.dom4j.Element root_tWriteJSONField_2_Out = doc_tWriteJSONField_2_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out;
		org.dom4j.Element root_0_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_2_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_0_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("IsDeleted"));
            root_0_tWriteJSONField_2_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_2_Out .setText(root_0_tWriteJSONField_2_Out,"null");
			root_0_tWriteJSONField_2_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_2_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_1_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("ParentId"));
			root_1_tWriteJSONField_2_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_2_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_2_Out .setText(root_1_tWriteJSONField_2_Out,"null");
			root_1_tWriteJSONField_2_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_2_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_2_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("CreatedById"));
			root_2_tWriteJSONField_2_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_2_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_2_Out .setText(root_2_tWriteJSONField_2_Out,"null");
			root_2_tWriteJSONField_2_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_2_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_3_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("CreatedDate"));
            root_3_tWriteJSONField_2_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_2_Out .setText(root_3_tWriteJSONField_2_Out,"null");
			root_3_tWriteJSONField_2_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_2_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_4_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Field"));
			root_4_tWriteJSONField_2_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_2_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_2_Out .setText(root_4_tWriteJSONField_2_Out,"null");
			root_4_tWriteJSONField_2_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_2_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_5_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("OldValue"));
			root_5_tWriteJSONField_2_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_2_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_2_Out .setText(root_5_tWriteJSONField_2_Out,"null");
			root_5_tWriteJSONField_2_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_2_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_6_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("NewValue"));
			root_6_tWriteJSONField_2_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_2_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_2_Out .setText(root_6_tWriteJSONField_2_Out,"null");
			root_6_tWriteJSONField_2_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_2_Out = subTreeRootParent_tWriteJSONField_2_Out;
	}else{
		subTreeRootParent_tWriteJSONField_2_Out=root4Group_tWriteJSONField_2_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_2_Out[0]==0){
        	orders_tWriteJSONField_2_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_2_Out.length){
        		orders_tWriteJSONField_2_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_2_Out.elements().add(orders_tWriteJSONField_2_Out[0]++,loop_tWriteJSONField_2_Out);
		if(
		valueMap_tWriteJSONField_2_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Id"));
			loop_tWriteJSONField_2_Out.addAttribute("type", "string");
			loop_tWriteJSONField_2_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_tWriteJSONField_2_Out,"null");
			loop_tWriteJSONField_2_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_2_Out++;

/**
 * [tWriteJSONField_2_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_2_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

 



/**
 * [tWriteJSONField_2_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_2_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

 



/**
 * [tWriteJSONField_2_Out process_data_end ] stop
 */

} // End of branch "out18"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	


 



/**
 * [tSalesforceInput_2 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_2 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_2", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_2.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_2 = reader_tSalesforceInput_2.getReturnValues();
if(resultMap_tSalesforceInput_2!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_2 : resultMap_tSalesforceInput_2.entrySet()) {
		switch(entry_tSalesforceInput_2.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", "ERROR_MESSAGE", entry_tSalesforceInput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", "NB_LINE", entry_tSalesforceInput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", "NB_SUCCESS", entry_tSalesforceInput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", "NB_REJECT", entry_tSalesforceInput_2.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_2 = new StringBuilder();
            for (int i_tSalesforceInput_2 = 0; i_tSalesforceInput_2 < entry_tSalesforceInput_2.getKey().length(); i_tSalesforceInput_2++) {
                char ch_tSalesforceInput_2 = entry_tSalesforceInput_2.getKey().charAt(i_tSalesforceInput_2);
                if(Character.isUpperCase(ch_tSalesforceInput_2) && i_tSalesforceInput_2> 0) {
                	studio_key_tSalesforceInput_2.append('_');
                }
                studio_key_tSalesforceInput_2.append(ch_tSalesforceInput_2);
            }
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", studio_key_tSalesforceInput_2.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_2.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_2", true);
end_Hash.put("tSalesforceInput_2", System.currentTimeMillis());




/**
 * [tSalesforceInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tWriteJSONField_2_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

if(nb_line_tWriteJSONField_2_Out > 0){  
    nestXMLTool_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_tWriteJSONField_2_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_2_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_2_Out, format_tWriteJSONField_2_Out);
	output_tWriteJSONField_2_Out.write(doc_tWriteJSONField_2_Out);
    output_tWriteJSONField_2_Out.close();
					row36Struct row_tWriteJSONField_2_Out = new row36Struct();
						  
					     		row_tWriteJSONField_2_Out.data = strWriter_tWriteJSONField_2_Out.toString();
					     		listGroupby_tWriteJSONField_2_Out.add(row_tWriteJSONField_2_Out);
		    		

}
globalMap.put("tWriteJSONField_2_Out_NB_LINE",nb_line_tWriteJSONField_2_Out);
globalMap.put("tWriteJSONField_2_In_FINISH" + (listGroupby_tWriteJSONField_2_Out==null?"":listGroupby_tWriteJSONField_2_Out.hashCode()), "true");
	
		txf_tWriteJSONField_2_Out.join();
		
		if(txf_tWriteJSONField_2_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_2_Out.getCurrentComponent();
			throw txf_tWriteJSONField_2_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_2_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_2_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_2_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out18");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_2_Out", true);
end_Hash.put("tWriteJSONField_2_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_2_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_2 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_2")==null){
    if(resourceMap.get("reader_tSalesforceInput_2")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_2")).close();
		} catch (java.io.IOException e_tSalesforceInput_2) {
			String errorMessage_tSalesforceInput_2 = "failed to release the resource in tSalesforceInput_2 :" + e_tSalesforceInput_2.getMessage();
			System.err.println(errorMessage_tSalesforceInput_2);
		}
	}
}
 



/**
 * [tSalesforceInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_2_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_2_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_2_In");
		if(resourceMap.get("finish_tWriteJSONField_2_Out") == null){
			globalMap.put("tWriteJSONField_2_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_2_Out==null?"":listGroupby_tWriteJSONField_2_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_2_Out != null) {
		globalMap.put("tWriteJSONField_2_In_FINISH" + (listGroupby_tWriteJSONField_2_Out==null?"":listGroupby_tWriteJSONField_2_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_2_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_2", false);
		start_Hash.put("tFileArchive_2", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_2";

	
		int tos_count_tFileArchive_2 = 0;
		

 



/**
 * [tFileArchive_2 begin ] stop
 */
	
	/**
	 * [tFileArchive_2 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_2";

	

	

		String sourceFile_tFileArchive_2 = context.staging_S3_dir + "hed__program_enrollment__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_2), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_2 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_2 = context.staging_S3_dir + "hed__program_enrollment__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_2 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_2, zipFile_tFileArchive_2);
    zip_tFileArchive_2.setOverwriteExistTargetZip(true);
	zip_tFileArchive_2.setMakeTargetDir(true);
	zip_tFileArchive_2.setCompressLevel(9);
	zip_tFileArchive_2.setArchiveFormat("gzip");
	zip_tFileArchive_2.setAllFiles(true);
	
	
		zip_tFileArchive_2.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_2_ARCHIVE_FILEPATH",zipFile_tFileArchive_2);
   
   globalMap.put("tFileArchive_2_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_2).getName());

   zip_tFileArchive_2.doZip();


 


	tos_count_tFileArchive_2++;

/**
 * [tFileArchive_2 main ] stop
 */
	
	/**
	 * [tFileArchive_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_2";

	

 



/**
 * [tFileArchive_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_2";

	

 



/**
 * [tFileArchive_2 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_2 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_2";

	

 

ok_Hash.put("tFileArchive_2", true);
end_Hash.put("tFileArchive_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk48", 0, "ok");
				}
				tS3Put_2Process(globalMap);



/**
 * [tFileArchive_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_2 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_2";

	

 



/**
 * [tFileArchive_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_2_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_2", false);
		start_Hash.put("tS3Put_2", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_2";

	
		int tos_count_tS3Put_2 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_2 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_2 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/hed__program_enrollment__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/hed__program_enrollment__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_2 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_2 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_2 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_2 = context.staging_S3_dir + "hed__program_enrollment__history.json.gz";
	
	boolean useStream_tS3Put_2 = false;
	java.io.InputStream uploadStream_tS3Put_2 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_2 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_2 instanceof String){
		    useStream_tS3Put_2 = false;
		}else if(fileOrStream_tS3Put_2 instanceof java.io.InputStream){
		    useStream_tS3Put_2 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_2 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_2) {
				java.io.File inputFile_tS3Put_2 = new java.io.File((String)fileOrStream_tS3Put_2);
				
				long multipart_upload_threshold_tS3Put_2 = 5 * 1024 * 1024;
				
    		tm_tS3Put_2 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_2)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_2)
    			.withS3Client(conn_tS3Put_2)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_2 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_2, inputFile_tS3Put_2).withMetadata(objectMetadata_tS3Put_2);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_2 = tm_tS3Put_2.upload(putRequest_tS3Put_2);
  		
  			upload_tS3Put_2.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_2 = ((java.io.InputStream)fileOrStream_tS3Put_2);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_2 = new S3StreamUtil();
    		byte[] buffer_tS3Put_2 = new byte[partSizeInBytes_tS3Put_2];
    		sourceStream_tS3Put_2.read(buffer_tS3Put_2);
    		long curPartSize_tS3Put_2 = streamUtil_tS3Put_2.getLength(buffer_tS3Put_2);
    		boolean multiUpload_tS3Put_2 = curPartSize_tS3Put_2 == partSizeInBytes_tS3Put_2;
    		
    		if(!multiUpload_tS3Put_2) {
    				objectMetadata_tS3Put_2.setContentLength(curPartSize_tS3Put_2);
    				uploadStream_tS3Put_2 = new java.io.ByteArrayInputStream(buffer_tS3Put_2,0,Long.valueOf(curPartSize_tS3Put_2).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_2 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_2, uploadStream_tS3Put_2, objectMetadata_tS3Put_2);
			
    				
    				

    				
    				conn_tS3Put_2.putObject(putRequest_tS3Put_2);
    		} else {
    				uploadStream_tS3Put_2 = new java.io.ByteArrayInputStream(buffer_tS3Put_2);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_2 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_2 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_2, objectMetadata_tS3Put_2);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_2 = conn_tS3Put_2.initiateMultipartUpload(putRequest_tS3Put_2);
      			String uploadId_tS3Put_2 = initResponse_tS3Put_2.getUploadId();
      			int partNumber_tS3Put_2 = 1;
      			boolean streamHasNext_tS3Put_2 = true;
      			byte[] probeAvailability_tS3Put_2 = new byte[1];
				try {
					while (streamHasNext_tS3Put_2) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_2 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_2)
						.withUploadId(uploadId_tS3Put_2)
                    	.withPartNumber(partNumber_tS3Put_2)
						.withPartSize(curPartSize_tS3Put_2);
            		    uploadRequest_tS3Put_2.setInputStream(uploadStream_tS3Put_2);
            		    streamHasNext_tS3Put_2 = sourceStream_tS3Put_2.read(probeAvailability_tS3Put_2) != -1;
            		    if(!streamHasNext_tS3Put_2){
                    	    uploadRequest_tS3Put_2.setLastPart(true);
                    	}

                		partTags_tS3Put_2.add(conn_tS3Put_2.uploadPart(uploadRequest_tS3Put_2).getPartETag());
                  	    partNumber_tS3Put_2++;

          		     	if(uploadStream_tS3Put_2!=null){
      		         			uploadStream_tS3Put_2.close();
          		     	}
          		     	buffer_tS3Put_2 = new byte[partSizeInBytes_tS3Put_2];
          		     	sourceStream_tS3Put_2.read(buffer_tS3Put_2,1,partSizeInBytes_tS3Put_2-1);
          		     	buffer_tS3Put_2[0] = probeAvailability_tS3Put_2[0];
          		     	probeAvailability_tS3Put_2 = new byte[1];
          		     	curPartSize_tS3Put_2 = streamUtil_tS3Put_2.getLength(buffer_tS3Put_2);
          		     	uploadStream_tS3Put_2 = new java.io.ByteArrayInputStream(buffer_tS3Put_2);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_2 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_2,
                        uploadId_tS3Put_2, partTags_tS3Put_2);
            		conn_tS3Put_2.completeMultipartUpload(compRequest_tS3Put_2);
            } catch (java.lang.Exception uploadException_tS3Put_2) {
  							conn_tS3Put_2.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_2, uploadId_tS3Put_2));
    						throw uploadException_tS3Put_2;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_2){
		
			throw(e_tS3Put_2);
		
	}finally{
		if(useStream_tS3Put_2 && uploadStream_tS3Put_2!=null){
    	uploadStream_tS3Put_2.close();
    }
    
    if(tm_tS3Put_2 != null){
        tm_tS3Put_2.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_2 begin ] stop
 */
	
	/**
	 * [tS3Put_2 main ] start
	 */

	

	
	
	currentComponent="tS3Put_2";

	

 


	tos_count_tS3Put_2++;

/**
 * [tS3Put_2 main ] stop
 */
	
	/**
	 * [tS3Put_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_2";

	

 



/**
 * [tS3Put_2 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_2";

	

 



/**
 * [tS3Put_2 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_2 end ] start
	 */

	

	
	
	currentComponent="tS3Put_2";

	

 

ok_Hash.put("tS3Put_2", true);
end_Hash.put("tS3Put_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk49", 0, "ok");
				}
				tJava_20Process(globalMap);



/**
 * [tS3Put_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_2 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_2";

	

 



/**
 * [tS3Put_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_20", false);
		start_Hash.put("tJava_20", System.currentTimeMillis());
		
	
	currentComponent="tJava_20";

	
		int tos_count_tJava_20 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_2_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_2_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_20 begin ] stop
 */
	
	/**
	 * [tJava_20 main ] start
	 */

	

	
	
	currentComponent="tJava_20";

	

 


	tos_count_tJava_20++;

/**
 * [tJava_20 main ] stop
 */
	
	/**
	 * [tJava_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_20";

	

 



/**
 * [tJava_20 process_data_begin ] stop
 */
	
	/**
	 * [tJava_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_20";

	

 



/**
 * [tJava_20 process_data_end ] stop
 */
	
	/**
	 * [tJava_20 end ] start
	 */

	

	
	
	currentComponent="tJava_20";

	

 

ok_Hash.put("tJava_20", true);
end_Hash.put("tJava_20", System.currentTimeMillis());




/**
 * [tJava_20 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_20 finally ] start
	 */

	

	
	
	currentComponent="tJava_20";

	

 



/**
 * [tJava_20 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_20_SUBPROCESS_STATE", 1);
	}
	

public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";

	
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */
	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_2", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_2_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_2) {
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_2_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 process_data_end ] stop
 */
	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";

	
		int tos_count_tJava_6 = 0;
		



System.out.println("Running For SFDC Object hed__Term__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 



System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tSalesforceInput_3Process(globalMap);



/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tJava_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public static class out19Struct implements routines.system.IPersistableRow<out19Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row39Struct row39 = new row39Struct();
out19Struct out19 = new out19Struct();





	
	/**
	 * [tWriteJSONField_3_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_3_Out", false);
		start_Hash.put("tWriteJSONField_3_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_3";
	
	currentComponent="tWriteJSONField_3_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out19");
					}
				
		int tos_count_tWriteJSONField_3_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_3_Out = 0;
				boolean needRoot_tWriteJSONField_3_Out  = true;
				
				String  strCompCache_tWriteJSONField_3_Out= null;		
				
						        java.util.Queue<row38Struct> listGroupby_tWriteJSONField_3_Out = new java.util.concurrent.ConcurrentLinkedQueue<row38Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_3_Out extends Thread {
						
									    java.util.Queue<row38Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_3_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_3_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_3_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_3_In", queue);
							globalMap.put("flows_tWriteJSONField_3_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_3_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_3_Out txf_tWriteJSONField_3_Out = new ThreadXMLField_tWriteJSONField_3_Out(listGroupby_tWriteJSONField_3_Out);
					
					txf_tWriteJSONField_3_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_3_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_3_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_3_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_3_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_3_Out nestXMLTool_tWriteJSONField_3_Out = new NestXMLTool_tWriteJSONField_3_Out();

out19Struct  rowStructOutput_tWriteJSONField_3_Out = new out19Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_3_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_3_Out = null;
org.dom4j.Document doc_tWriteJSONField_3_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_3_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_3_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_3_Out.setTrimText(false);
format_tWriteJSONField_3_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_3_Out = new int[1];

 



/**
 * [tWriteJSONField_3_Out begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out19Struct out19_tmp = new out19Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_3", false);
		start_Hash.put("tSalesforceInput_3", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_3";

	
		int tos_count_tSalesforceInput_3 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_3 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_3 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_3.createRuntimeProperties();
 		                    props_tSalesforceInput_3.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_3.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_3.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_3.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_3.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_3.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_3.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_3.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_3.module.setValue("moduleName",
 		                    "hed__Term__History");
 		                    
 		                    props_tSalesforceInput_3.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_3.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_3.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_3_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"hed__Term__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"hed__Term__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_3_1_fisrt sst_tSalesforceInput_3_1_fisrt = new SchemaSettingTool_tSalesforceInput_3_1_fisrt();
 		                    
 		                    props_tSalesforceInput_3.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_3_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_3.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_3 = props_tSalesforceInput_3.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_3.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_3);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_3.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_3 = props_tSalesforceInput_3.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_3.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_3);
        }
    }
globalMap.put("tSalesforceInput_3_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_3);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_3_MAPPINGS_URL", mappings_url_tSalesforceInput_3);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_3 = null;
topology_tSalesforceInput_3 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_3 = def_tSalesforceInput_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_3, topology_tSalesforceInput_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_3 = def_tSalesforceInput_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_3 = componentRuntime_tSalesforceInput_3.initialize(container_tSalesforceInput_3, props_tSalesforceInput_3);

if (initVr_tSalesforceInput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_3.getMessage());
}

if(componentRuntime_tSalesforceInput_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_3;
	compDriverInitialization_tSalesforceInput_3.runAtDriver(container_tSalesforceInput_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_3 = null;
if(componentRuntime_tSalesforceInput_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_3;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_3 = sourceOrSink_tSalesforceInput_3.validate(container_tSalesforceInput_3);
	if (vr_tSalesforceInput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_3.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_3 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_3;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_3 =
            source_tSalesforceInput_3.createReader(container_tSalesforceInput_3);
	reader_tSalesforceInput_3 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_3, container_tSalesforceInput_3);

        boolean multi_output_is_allowed_tSalesforceInput_3 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_3 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_3.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_3 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_3 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_3 = props_tSalesforceInput_3.getSchema(c_tSalesforceInput_3, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_3 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_3, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_3 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_3 = reader_tSalesforceInput_3.start();

    resourceMap.put("reader_tSalesforceInput_3", reader_tSalesforceInput_3);

    for (; available_tSalesforceInput_3; available_tSalesforceInput_3 = reader_tSalesforceInput_3.advance()) {
    	nb_line_tSalesforceInput_3++;

    	
        if (multi_output_is_allowed_tSalesforceInput_3) {
                row39 = null;

        }

        try {
            Object data_tSalesforceInput_3 = reader_tSalesforceInput_3.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_3) {
                    row39 = new row39Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_3 == null) {
            factory_tSalesforceInput_3 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_3.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_3.setWrapped(factory_tSalesforceInput_3.convertToAvro(data_tSalesforceInput_3));
                Object columnValue_0_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(0);
                        row39.Id = (String) (columnValue_0_tSalesforceInput_3);
                Object columnValue_1_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(1);
                    if (columnValue_1_tSalesforceInput_3 == null) {
                        row39.IsDeleted = false;
                    } else {
                            row39.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_3);
                    }
                Object columnValue_2_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(2);
                        row39.ParentId = (String) (columnValue_2_tSalesforceInput_3);
                Object columnValue_3_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(3);
                        row39.CreatedById = (String) (columnValue_3_tSalesforceInput_3);
                Object columnValue_4_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(4);
                        row39.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_3);
                Object columnValue_5_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(5);
                        row39.Field = (String) (columnValue_5_tSalesforceInput_3);
                Object columnValue_6_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(6);
                        row39.OldValue = (String) (columnValue_6_tSalesforceInput_3);
                Object columnValue_7_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(7);
                        row39.NewValue = (String) (columnValue_7_tSalesforceInput_3);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_3) {
        	java.util.Map<String,Object> info_tSalesforceInput_3 = e_tSalesforceInput_3.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_3 = null;
            	if(info_tSalesforceInput_3.containsKey("error")){
            		errorMessage_tSalesforceInput_3 = info_tSalesforceInput_3.get("error");
        		}else if(info_tSalesforceInput_3.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_3 = info_tSalesforceInput_3.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_3 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_3 = "Row "+ nb_line_tSalesforceInput_3 + ": "+errorMessage_tSalesforceInput_3;
    			System.err.println(errorMessage_tSalesforceInput_3);
            	// If the record is reject, the main line record should put NULL
            	row39 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_3 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_3 = null;


 



/**
 * [tSalesforceInput_3 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_3 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	


 


	tos_count_tSalesforceInput_3++;

/**
 * [tSalesforceInput_3 main ] stop
 */
	
	/**
	 * [tSalesforceInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	


 



/**
 * [tSalesforceInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row39");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out19 = null;


// # Output table : 'out19'
out19_tmp.Id = row39.Id ;
out19_tmp.IsDeleted = row39.IsDeleted ;
out19_tmp.ParentId = row39.ParentId ;
out19_tmp.CreatedById = row39.CreatedById ;
out19_tmp.CreatedDate = (row39.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row39.CreatedDate))).getTime())/1000 ;
out19_tmp.Field = row39.Field ;
out19_tmp.OldValue = row39.OldValue ;
out19_tmp.NewValue = row39.NewValue ;
out19 = out19_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out19"
if(out19 != null) { 



	
	/**
	 * [tWriteJSONField_3_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_3";
	
	currentComponent="tWriteJSONField_3_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out19");
					}
					

	if(txf_tWriteJSONField_3_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_3_Out.getCurrentComponent();
		throw txf_tWriteJSONField_3_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_3_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_3_Out.getLastError();
	}
	nb_line_tWriteJSONField_3_Out++;
	valueMap_tWriteJSONField_3_Out.clear();
	arraysValueMap_tWriteJSONField_3_Out.clear();
	valueMap_tWriteJSONField_3_Out.put("Id",
	(
            out19.Id.toString()
		));
	arraysValueMap_tWriteJSONField_3_Out.put("Id",
	(
            out19.Id.toString()
		));
	valueMap_tWriteJSONField_3_Out.put("IsDeleted",
	(
            String.valueOf(out19.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_3_Out.put("IsDeleted",
	(
            String.valueOf(out19.IsDeleted)
		));
	valueMap_tWriteJSONField_3_Out.put("ParentId",
	(
            out19.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_3_Out.put("ParentId",
	(
            out19.ParentId.toString()
		));
	valueMap_tWriteJSONField_3_Out.put("CreatedById",
	(
            out19.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_3_Out.put("CreatedById",
	(
            out19.CreatedById.toString()
		));
	valueMap_tWriteJSONField_3_Out.put("CreatedDate",
	(
            String.valueOf(out19.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_3_Out.put("CreatedDate",
	(
            String.valueOf(out19.CreatedDate)
		));
	valueMap_tWriteJSONField_3_Out.put("Field",
	(
            out19.Field.toString()
		));
	arraysValueMap_tWriteJSONField_3_Out.put("Field",
	(
            out19.Field.toString()
		));
	valueMap_tWriteJSONField_3_Out.put("OldValue",
	(
		out19.OldValue != null?
            out19.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_3_Out.put("OldValue",
	(
		out19.OldValue != null?
            out19.OldValue.toString():null
		));
	valueMap_tWriteJSONField_3_Out.put("NewValue",
	(
		out19.NewValue != null?
            out19.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_3_Out.put("NewValue",
	(
		out19.NewValue != null?
            out19.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_3_Out = "";
	if(strCompCache_tWriteJSONField_3_Out==null){
		strCompCache_tWriteJSONField_3_Out=strTemp_tWriteJSONField_3_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_3_Out.replaceDefaultNameSpace(doc_tWriteJSONField_3_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_3_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_3_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_3_Out, format_tWriteJSONField_3_Out);
			output_tWriteJSONField_3_Out.write(doc_tWriteJSONField_3_Out);
		    output_tWriteJSONField_3_Out.close();
			
				  		  row38Struct row_tWriteJSONField_3_Out = new row38Struct();
						  
					     		row_tWriteJSONField_3_Out.data = strWriter_tWriteJSONField_3_Out.toString();
					     		listGroupby_tWriteJSONField_3_Out.add(row_tWriteJSONField_3_Out);
					
		    doc_tWriteJSONField_3_Out.clearContent();
			needRoot_tWriteJSONField_3_Out = true;
			for(int i_tWriteJSONField_3_Out=0;i_tWriteJSONField_3_Out<orders_tWriteJSONField_3_Out.length;i_tWriteJSONField_3_Out++){
				orders_tWriteJSONField_3_Out[i_tWriteJSONField_3_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_3_Out != null && groupbyList_tWriteJSONField_3_Out.size() >= 0){
				groupbyList_tWriteJSONField_3_Out.clear();
			}
			strCompCache_tWriteJSONField_3_Out=strTemp_tWriteJSONField_3_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_3_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_3_Out) {
		needRoot_tWriteJSONField_3_Out=false;
		org.dom4j.Element root_tWriteJSONField_3_Out = doc_tWriteJSONField_3_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_3_Out = root_tWriteJSONField_3_Out;
		org.dom4j.Element root_0_tWriteJSONField_3_Out = root_tWriteJSONField_3_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_3_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_3_Out .setText(root_0_tWriteJSONField_3_Out,
		valueMap_tWriteJSONField_3_Out.get("IsDeleted"));
            root_0_tWriteJSONField_3_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_3_Out .setText(root_0_tWriteJSONField_3_Out,"null");
			root_0_tWriteJSONField_3_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_3_Out = root_tWriteJSONField_3_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_3_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_3_Out .setText(root_1_tWriteJSONField_3_Out,
		valueMap_tWriteJSONField_3_Out.get("ParentId"));
			root_1_tWriteJSONField_3_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_3_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_3_Out .setText(root_1_tWriteJSONField_3_Out,"null");
			root_1_tWriteJSONField_3_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_3_Out = root_tWriteJSONField_3_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_3_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_3_Out .setText(root_2_tWriteJSONField_3_Out,
		valueMap_tWriteJSONField_3_Out.get("CreatedById"));
			root_2_tWriteJSONField_3_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_3_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_3_Out .setText(root_2_tWriteJSONField_3_Out,"null");
			root_2_tWriteJSONField_3_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_3_Out = root_tWriteJSONField_3_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_3_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_3_Out .setText(root_3_tWriteJSONField_3_Out,
		valueMap_tWriteJSONField_3_Out.get("CreatedDate"));
            root_3_tWriteJSONField_3_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_3_Out .setText(root_3_tWriteJSONField_3_Out,"null");
			root_3_tWriteJSONField_3_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_3_Out = root_tWriteJSONField_3_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_3_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_3_Out .setText(root_4_tWriteJSONField_3_Out,
		valueMap_tWriteJSONField_3_Out.get("Field"));
			root_4_tWriteJSONField_3_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_3_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_3_Out .setText(root_4_tWriteJSONField_3_Out,"null");
			root_4_tWriteJSONField_3_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_3_Out = root_tWriteJSONField_3_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_3_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_3_Out .setText(root_5_tWriteJSONField_3_Out,
		valueMap_tWriteJSONField_3_Out.get("OldValue"));
			root_5_tWriteJSONField_3_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_3_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_3_Out .setText(root_5_tWriteJSONField_3_Out,"null");
			root_5_tWriteJSONField_3_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_3_Out = root_tWriteJSONField_3_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_3_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_3_Out .setText(root_6_tWriteJSONField_3_Out,
		valueMap_tWriteJSONField_3_Out.get("NewValue"));
			root_6_tWriteJSONField_3_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_3_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_3_Out .setText(root_6_tWriteJSONField_3_Out,"null");
			root_6_tWriteJSONField_3_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_3_Out = subTreeRootParent_tWriteJSONField_3_Out;
	}else{
		subTreeRootParent_tWriteJSONField_3_Out=root4Group_tWriteJSONField_3_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_3_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_3_Out[0]==0){
        	orders_tWriteJSONField_3_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_3_Out.length){
        		orders_tWriteJSONField_3_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_3_Out.elements().add(orders_tWriteJSONField_3_Out[0]++,loop_tWriteJSONField_3_Out);
		if(
		valueMap_tWriteJSONField_3_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_3_Out .setText(loop_tWriteJSONField_3_Out,
		valueMap_tWriteJSONField_3_Out.get("Id"));
			loop_tWriteJSONField_3_Out.addAttribute("type", "string");
			loop_tWriteJSONField_3_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_3_Out .setText(loop_tWriteJSONField_3_Out,"null");
			loop_tWriteJSONField_3_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_3_Out++;

/**
 * [tWriteJSONField_3_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_3_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_3";
	
	currentComponent="tWriteJSONField_3_Out";

	

 



/**
 * [tWriteJSONField_3_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_3_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_3";
	
	currentComponent="tWriteJSONField_3_Out";

	

 



/**
 * [tWriteJSONField_3_Out process_data_end ] stop
 */

} // End of branch "out19"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	


 



/**
 * [tSalesforceInput_3 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_3 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_3", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_3.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_3 = reader_tSalesforceInput_3.getReturnValues();
if(resultMap_tSalesforceInput_3!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_3 : resultMap_tSalesforceInput_3.entrySet()) {
		switch(entry_tSalesforceInput_3.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", "ERROR_MESSAGE", entry_tSalesforceInput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", "NB_LINE", entry_tSalesforceInput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", "NB_SUCCESS", entry_tSalesforceInput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", "NB_REJECT", entry_tSalesforceInput_3.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_3 = new StringBuilder();
            for (int i_tSalesforceInput_3 = 0; i_tSalesforceInput_3 < entry_tSalesforceInput_3.getKey().length(); i_tSalesforceInput_3++) {
                char ch_tSalesforceInput_3 = entry_tSalesforceInput_3.getKey().charAt(i_tSalesforceInput_3);
                if(Character.isUpperCase(ch_tSalesforceInput_3) && i_tSalesforceInput_3> 0) {
                	studio_key_tSalesforceInput_3.append('_');
                }
                studio_key_tSalesforceInput_3.append(ch_tSalesforceInput_3);
            }
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", studio_key_tSalesforceInput_3.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_3.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_3", true);
end_Hash.put("tSalesforceInput_3", System.currentTimeMillis());




/**
 * [tSalesforceInput_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tWriteJSONField_3_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_3";
	
	currentComponent="tWriteJSONField_3_Out";

	

if(nb_line_tWriteJSONField_3_Out > 0){  
    nestXMLTool_tWriteJSONField_3_Out.replaceDefaultNameSpace(doc_tWriteJSONField_3_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_3_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_3_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_3_Out, format_tWriteJSONField_3_Out);
	output_tWriteJSONField_3_Out.write(doc_tWriteJSONField_3_Out);
    output_tWriteJSONField_3_Out.close();
					row38Struct row_tWriteJSONField_3_Out = new row38Struct();
						  
					     		row_tWriteJSONField_3_Out.data = strWriter_tWriteJSONField_3_Out.toString();
					     		listGroupby_tWriteJSONField_3_Out.add(row_tWriteJSONField_3_Out);
		    		

}
globalMap.put("tWriteJSONField_3_Out_NB_LINE",nb_line_tWriteJSONField_3_Out);
globalMap.put("tWriteJSONField_3_In_FINISH" + (listGroupby_tWriteJSONField_3_Out==null?"":listGroupby_tWriteJSONField_3_Out.hashCode()), "true");
	
		txf_tWriteJSONField_3_Out.join();
		
		if(txf_tWriteJSONField_3_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_3_Out.getCurrentComponent();
			throw txf_tWriteJSONField_3_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_3_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_3_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_3_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out19");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_3_Out", true);
end_Hash.put("tWriteJSONField_3_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_3_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_3 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_3")==null){
    if(resourceMap.get("reader_tSalesforceInput_3")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_3")).close();
		} catch (java.io.IOException e_tSalesforceInput_3) {
			String errorMessage_tSalesforceInput_3 = "failed to release the resource in tSalesforceInput_3 :" + e_tSalesforceInput_3.getMessage();
			System.err.println(errorMessage_tSalesforceInput_3);
		}
	}
}
 



/**
 * [tSalesforceInput_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_3_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_3";
	
	currentComponent="tWriteJSONField_3_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_3_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_3_In");
		if(resourceMap.get("finish_tWriteJSONField_3_Out") == null){
			globalMap.put("tWriteJSONField_3_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_3_Out==null?"":listGroupby_tWriteJSONField_3_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_3_Out != null) {
		globalMap.put("tWriteJSONField_3_In_FINISH" + (listGroupby_tWriteJSONField_3_Out==null?"":listGroupby_tWriteJSONField_3_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_3_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_3", false);
		start_Hash.put("tFileArchive_3", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_3";

	
		int tos_count_tFileArchive_3 = 0;
		

 



/**
 * [tFileArchive_3 begin ] stop
 */
	
	/**
	 * [tFileArchive_3 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_3";

	

	

		String sourceFile_tFileArchive_3 = context.staging_S3_dir + "hed__term__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_3), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_3 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_3 = context.staging_S3_dir + "hed__term__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_3 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_3, zipFile_tFileArchive_3);
    zip_tFileArchive_3.setOverwriteExistTargetZip(true);
	zip_tFileArchive_3.setMakeTargetDir(true);
	zip_tFileArchive_3.setCompressLevel(9);
	zip_tFileArchive_3.setArchiveFormat("gzip");
	zip_tFileArchive_3.setAllFiles(true);
	
	
		zip_tFileArchive_3.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_3_ARCHIVE_FILEPATH",zipFile_tFileArchive_3);
   
   globalMap.put("tFileArchive_3_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_3).getName());

   zip_tFileArchive_3.doZip();


 


	tos_count_tFileArchive_3++;

/**
 * [tFileArchive_3 main ] stop
 */
	
	/**
	 * [tFileArchive_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_3";

	

 



/**
 * [tFileArchive_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_3";

	

 



/**
 * [tFileArchive_3 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_3 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_3";

	

 

ok_Hash.put("tFileArchive_3", true);
end_Hash.put("tFileArchive_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk50", 0, "ok");
				}
				tS3Put_3Process(globalMap);



/**
 * [tFileArchive_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_3 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_3";

	

 



/**
 * [tFileArchive_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_3_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_3", false);
		start_Hash.put("tS3Put_3", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_3";

	
		int tos_count_tS3Put_3 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_3 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_3 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/hed__term__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/hed__term__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_3 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_3 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_3 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_3 = context.staging_S3_dir + "hed__term__history.json.gz";
	
	boolean useStream_tS3Put_3 = false;
	java.io.InputStream uploadStream_tS3Put_3 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_3 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_3 instanceof String){
		    useStream_tS3Put_3 = false;
		}else if(fileOrStream_tS3Put_3 instanceof java.io.InputStream){
		    useStream_tS3Put_3 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_3 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_3) {
				java.io.File inputFile_tS3Put_3 = new java.io.File((String)fileOrStream_tS3Put_3);
				
				long multipart_upload_threshold_tS3Put_3 = 5 * 1024 * 1024;
				
    		tm_tS3Put_3 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_3)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_3)
    			.withS3Client(conn_tS3Put_3)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_3 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_3, inputFile_tS3Put_3).withMetadata(objectMetadata_tS3Put_3);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_3 = tm_tS3Put_3.upload(putRequest_tS3Put_3);
  		
  			upload_tS3Put_3.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_3 = ((java.io.InputStream)fileOrStream_tS3Put_3);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_3 = new S3StreamUtil();
    		byte[] buffer_tS3Put_3 = new byte[partSizeInBytes_tS3Put_3];
    		sourceStream_tS3Put_3.read(buffer_tS3Put_3);
    		long curPartSize_tS3Put_3 = streamUtil_tS3Put_3.getLength(buffer_tS3Put_3);
    		boolean multiUpload_tS3Put_3 = curPartSize_tS3Put_3 == partSizeInBytes_tS3Put_3;
    		
    		if(!multiUpload_tS3Put_3) {
    				objectMetadata_tS3Put_3.setContentLength(curPartSize_tS3Put_3);
    				uploadStream_tS3Put_3 = new java.io.ByteArrayInputStream(buffer_tS3Put_3,0,Long.valueOf(curPartSize_tS3Put_3).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_3 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_3, uploadStream_tS3Put_3, objectMetadata_tS3Put_3);
			
    				
    				

    				
    				conn_tS3Put_3.putObject(putRequest_tS3Put_3);
    		} else {
    				uploadStream_tS3Put_3 = new java.io.ByteArrayInputStream(buffer_tS3Put_3);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_3 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_3 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_3, objectMetadata_tS3Put_3);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_3 = conn_tS3Put_3.initiateMultipartUpload(putRequest_tS3Put_3);
      			String uploadId_tS3Put_3 = initResponse_tS3Put_3.getUploadId();
      			int partNumber_tS3Put_3 = 1;
      			boolean streamHasNext_tS3Put_3 = true;
      			byte[] probeAvailability_tS3Put_3 = new byte[1];
				try {
					while (streamHasNext_tS3Put_3) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_3 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_3)
						.withUploadId(uploadId_tS3Put_3)
                    	.withPartNumber(partNumber_tS3Put_3)
						.withPartSize(curPartSize_tS3Put_3);
            		    uploadRequest_tS3Put_3.setInputStream(uploadStream_tS3Put_3);
            		    streamHasNext_tS3Put_3 = sourceStream_tS3Put_3.read(probeAvailability_tS3Put_3) != -1;
            		    if(!streamHasNext_tS3Put_3){
                    	    uploadRequest_tS3Put_3.setLastPart(true);
                    	}

                		partTags_tS3Put_3.add(conn_tS3Put_3.uploadPart(uploadRequest_tS3Put_3).getPartETag());
                  	    partNumber_tS3Put_3++;

          		     	if(uploadStream_tS3Put_3!=null){
      		         			uploadStream_tS3Put_3.close();
          		     	}
          		     	buffer_tS3Put_3 = new byte[partSizeInBytes_tS3Put_3];
          		     	sourceStream_tS3Put_3.read(buffer_tS3Put_3,1,partSizeInBytes_tS3Put_3-1);
          		     	buffer_tS3Put_3[0] = probeAvailability_tS3Put_3[0];
          		     	probeAvailability_tS3Put_3 = new byte[1];
          		     	curPartSize_tS3Put_3 = streamUtil_tS3Put_3.getLength(buffer_tS3Put_3);
          		     	uploadStream_tS3Put_3 = new java.io.ByteArrayInputStream(buffer_tS3Put_3);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_3 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_3,
                        uploadId_tS3Put_3, partTags_tS3Put_3);
            		conn_tS3Put_3.completeMultipartUpload(compRequest_tS3Put_3);
            } catch (java.lang.Exception uploadException_tS3Put_3) {
  							conn_tS3Put_3.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_3, uploadId_tS3Put_3));
    						throw uploadException_tS3Put_3;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_3){
		
			throw(e_tS3Put_3);
		
	}finally{
		if(useStream_tS3Put_3 && uploadStream_tS3Put_3!=null){
    	uploadStream_tS3Put_3.close();
    }
    
    if(tm_tS3Put_3 != null){
        tm_tS3Put_3.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_3 begin ] stop
 */
	
	/**
	 * [tS3Put_3 main ] start
	 */

	

	
	
	currentComponent="tS3Put_3";

	

 


	tos_count_tS3Put_3++;

/**
 * [tS3Put_3 main ] stop
 */
	
	/**
	 * [tS3Put_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_3";

	

 



/**
 * [tS3Put_3 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_3";

	

 



/**
 * [tS3Put_3 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_3 end ] start
	 */

	

	
	
	currentComponent="tS3Put_3";

	

 

ok_Hash.put("tS3Put_3", true);
end_Hash.put("tS3Put_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk51", 0, "ok");
				}
				tJava_21Process(globalMap);



/**
 * [tS3Put_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_3 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_3";

	

 



/**
 * [tS3Put_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_21", false);
		start_Hash.put("tJava_21", System.currentTimeMillis());
		
	
	currentComponent="tJava_21";

	
		int tos_count_tJava_21 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_3_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_3_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_21 begin ] stop
 */
	
	/**
	 * [tJava_21 main ] start
	 */

	

	
	
	currentComponent="tJava_21";

	

 


	tos_count_tJava_21++;

/**
 * [tJava_21 main ] stop
 */
	
	/**
	 * [tJava_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_21";

	

 



/**
 * [tJava_21 process_data_begin ] stop
 */
	
	/**
	 * [tJava_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_21";

	

 



/**
 * [tJava_21 process_data_end ] stop
 */
	
	/**
	 * [tJava_21 end ] start
	 */

	

	
	
	currentComponent="tJava_21";

	

 

ok_Hash.put("tJava_21", true);
end_Hash.put("tJava_21", System.currentTimeMillis());




/**
 * [tJava_21 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_21 finally ] start
	 */

	

	
	
	currentComponent="tJava_21";

	

 



/**
 * [tJava_21 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_21_SUBPROCESS_STATE", 1);
	}
	

public void tDie_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_3", false);
		start_Hash.put("tDie_3", System.currentTimeMillis());
		
	
	currentComponent="tDie_3";

	
		int tos_count_tDie_3 = 0;
		

 



/**
 * [tDie_3 begin ] stop
 */
	
	/**
	 * [tDie_3 main ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_3", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_3_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_3_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_3_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_3) {
		logIgnoredError(String.format("tDie_3 - tDie failed to log message due to internal error: %s", e_tDie_3), e_tDie_3);
	}
	
	currentComponent = "tDie_3";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_3_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_3++;

/**
 * [tDie_3 main ] stop
 */
	
	/**
	 * [tDie_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 process_data_begin ] stop
 */
	
	/**
	 * [tDie_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 process_data_end ] stop
 */
	
	/**
	 * [tDie_3 end ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 

ok_Hash.put("tDie_3", true);
end_Hash.put("tDie_3", System.currentTimeMillis());




/**
 * [tDie_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_3 finally ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";

	
		int tos_count_tJava_7 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Application__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 




System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tSalesforceInput_4Process(globalMap);



/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tJava_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	


public static class out20Struct implements routines.system.IPersistableRow<out20Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();
out20Struct out20 = new out20Struct();





	
	/**
	 * [tWriteJSONField_4_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_4_Out", false);
		start_Hash.put("tWriteJSONField_4_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_4";
	
	currentComponent="tWriteJSONField_4_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out20");
					}
				
		int tos_count_tWriteJSONField_4_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_4_Out = 0;
				boolean needRoot_tWriteJSONField_4_Out  = true;
				
				String  strCompCache_tWriteJSONField_4_Out= null;		
				
						        java.util.Queue<row40Struct> listGroupby_tWriteJSONField_4_Out = new java.util.concurrent.ConcurrentLinkedQueue<row40Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_4_Out extends Thread {
						
									    java.util.Queue<row40Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_4_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_4_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_4_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_4_In", queue);
							globalMap.put("flows_tWriteJSONField_4_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_4_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_4_Out txf_tWriteJSONField_4_Out = new ThreadXMLField_tWriteJSONField_4_Out(listGroupby_tWriteJSONField_4_Out);
					
					txf_tWriteJSONField_4_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_4_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_4_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_4_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_4_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_4_Out nestXMLTool_tWriteJSONField_4_Out = new NestXMLTool_tWriteJSONField_4_Out();

out20Struct  rowStructOutput_tWriteJSONField_4_Out = new out20Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_4_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_4_Out = null;
org.dom4j.Document doc_tWriteJSONField_4_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_4_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_4_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_4_Out.setTrimText(false);
format_tWriteJSONField_4_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_4_Out = new int[1];

 



/**
 * [tWriteJSONField_4_Out begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out20Struct out20_tmp = new out20Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_4", false);
		start_Hash.put("tSalesforceInput_4", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_4";

	
		int tos_count_tSalesforceInput_4 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_4 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_4 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_4.createRuntimeProperties();
 		                    props_tSalesforceInput_4.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_4.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_4.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_4.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_4.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_4.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_4.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_4.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_4.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_4.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_4.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_4.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_4.module.setValue("moduleName",
 		                    "NoodleCRM__Application__History");
 		                    
 		                    props_tSalesforceInput_4.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_4.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_4.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_4.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_4.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_4_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Application__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Application__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_4_1_fisrt sst_tSalesforceInput_4_1_fisrt = new SchemaSettingTool_tSalesforceInput_4_1_fisrt();
 		                    
 		                    props_tSalesforceInput_4.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_4_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_4.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_4 = props_tSalesforceInput_4.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_4 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_4 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_4 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_4.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_4);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_4.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_4 = props_tSalesforceInput_4.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_4 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_4 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_4 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_4.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_4);
        }
    }
globalMap.put("tSalesforceInput_4_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_4);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_4= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_4_MAPPINGS_URL", mappings_url_tSalesforceInput_4);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_4 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_4";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_4 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_4 = null;
topology_tSalesforceInput_4 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_4 = def_tSalesforceInput_4.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_4, topology_tSalesforceInput_4);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_4 = def_tSalesforceInput_4.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_4 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_4.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_4 = componentRuntime_tSalesforceInput_4.initialize(container_tSalesforceInput_4, props_tSalesforceInput_4);

if (initVr_tSalesforceInput_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_4.getMessage());
}

if(componentRuntime_tSalesforceInput_4 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_4 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_4;
	compDriverInitialization_tSalesforceInput_4.runAtDriver(container_tSalesforceInput_4);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_4 = null;
if(componentRuntime_tSalesforceInput_4 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_4 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_4;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_4 = sourceOrSink_tSalesforceInput_4.validate(container_tSalesforceInput_4);
	if (vr_tSalesforceInput_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_4.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_4 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_4;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_4 =
            source_tSalesforceInput_4.createReader(container_tSalesforceInput_4);
	reader_tSalesforceInput_4 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_4, container_tSalesforceInput_4);

        boolean multi_output_is_allowed_tSalesforceInput_4 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_4 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_4.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_4 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_4 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_4 = props_tSalesforceInput_4.getSchema(c_tSalesforceInput_4, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_4 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_4, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_4 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_4 = reader_tSalesforceInput_4.start();

    resourceMap.put("reader_tSalesforceInput_4", reader_tSalesforceInput_4);

    for (; available_tSalesforceInput_4; available_tSalesforceInput_4 = reader_tSalesforceInput_4.advance()) {
    	nb_line_tSalesforceInput_4++;

    	
        if (multi_output_is_allowed_tSalesforceInput_4) {
                row41 = null;

        }

        try {
            Object data_tSalesforceInput_4 = reader_tSalesforceInput_4.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_4) {
                    row41 = new row41Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_4 == null) {
            factory_tSalesforceInput_4 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_4.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_4.setWrapped(factory_tSalesforceInput_4.convertToAvro(data_tSalesforceInput_4));
                Object columnValue_0_tSalesforceInput_4 = outgoingEnforcer_tSalesforceInput_4.get(0);
                        row41.Id = (String) (columnValue_0_tSalesforceInput_4);
                Object columnValue_1_tSalesforceInput_4 = outgoingEnforcer_tSalesforceInput_4.get(1);
                    if (columnValue_1_tSalesforceInput_4 == null) {
                        row41.IsDeleted = false;
                    } else {
                            row41.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_4);
                    }
                Object columnValue_2_tSalesforceInput_4 = outgoingEnforcer_tSalesforceInput_4.get(2);
                        row41.ParentId = (String) (columnValue_2_tSalesforceInput_4);
                Object columnValue_3_tSalesforceInput_4 = outgoingEnforcer_tSalesforceInput_4.get(3);
                        row41.CreatedById = (String) (columnValue_3_tSalesforceInput_4);
                Object columnValue_4_tSalesforceInput_4 = outgoingEnforcer_tSalesforceInput_4.get(4);
                        row41.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_4);
                Object columnValue_5_tSalesforceInput_4 = outgoingEnforcer_tSalesforceInput_4.get(5);
                        row41.Field = (String) (columnValue_5_tSalesforceInput_4);
                Object columnValue_6_tSalesforceInput_4 = outgoingEnforcer_tSalesforceInput_4.get(6);
                        row41.OldValue = (String) (columnValue_6_tSalesforceInput_4);
                Object columnValue_7_tSalesforceInput_4 = outgoingEnforcer_tSalesforceInput_4.get(7);
                        row41.NewValue = (String) (columnValue_7_tSalesforceInput_4);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_4) {
        	java.util.Map<String,Object> info_tSalesforceInput_4 = e_tSalesforceInput_4.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_4 = null;
            	if(info_tSalesforceInput_4.containsKey("error")){
            		errorMessage_tSalesforceInput_4 = info_tSalesforceInput_4.get("error");
        		}else if(info_tSalesforceInput_4.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_4 = info_tSalesforceInput_4.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_4 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_4 = "Row "+ nb_line_tSalesforceInput_4 + ": "+errorMessage_tSalesforceInput_4;
    			System.err.println(errorMessage_tSalesforceInput_4);
            	// If the record is reject, the main line record should put NULL
            	row41 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_4 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_4 = null;


 



/**
 * [tSalesforceInput_4 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_4 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_4";

	


 


	tos_count_tSalesforceInput_4++;

/**
 * [tSalesforceInput_4 main ] stop
 */
	
	/**
	 * [tSalesforceInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_4";

	


 



/**
 * [tSalesforceInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out20 = null;


// # Output table : 'out20'
out20_tmp.Id = row41.Id ;
out20_tmp.IsDeleted = row41.IsDeleted ;
out20_tmp.ParentId = row41.ParentId ;
out20_tmp.CreatedById = row41.CreatedById ;
out20_tmp.CreatedDate = (row41.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row41.CreatedDate))).getTime())/1000 ;
out20_tmp.Field = row41.Field ;
out20_tmp.OldValue = row41.OldValue ;
out20_tmp.NewValue = row41.NewValue ;
out20 = out20_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out20"
if(out20 != null) { 



	
	/**
	 * [tWriteJSONField_4_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_4";
	
	currentComponent="tWriteJSONField_4_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out20");
					}
					

	if(txf_tWriteJSONField_4_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_4_Out.getCurrentComponent();
		throw txf_tWriteJSONField_4_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_4_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_4_Out.getLastError();
	}
	nb_line_tWriteJSONField_4_Out++;
	valueMap_tWriteJSONField_4_Out.clear();
	arraysValueMap_tWriteJSONField_4_Out.clear();
	valueMap_tWriteJSONField_4_Out.put("Id",
	(
            out20.Id.toString()
		));
	arraysValueMap_tWriteJSONField_4_Out.put("Id",
	(
            out20.Id.toString()
		));
	valueMap_tWriteJSONField_4_Out.put("IsDeleted",
	(
            String.valueOf(out20.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_4_Out.put("IsDeleted",
	(
            String.valueOf(out20.IsDeleted)
		));
	valueMap_tWriteJSONField_4_Out.put("ParentId",
	(
            out20.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_4_Out.put("ParentId",
	(
            out20.ParentId.toString()
		));
	valueMap_tWriteJSONField_4_Out.put("CreatedById",
	(
            out20.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_4_Out.put("CreatedById",
	(
            out20.CreatedById.toString()
		));
	valueMap_tWriteJSONField_4_Out.put("CreatedDate",
	(
            String.valueOf(out20.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_4_Out.put("CreatedDate",
	(
            String.valueOf(out20.CreatedDate)
		));
	valueMap_tWriteJSONField_4_Out.put("Field",
	(
            out20.Field.toString()
		));
	arraysValueMap_tWriteJSONField_4_Out.put("Field",
	(
            out20.Field.toString()
		));
	valueMap_tWriteJSONField_4_Out.put("OldValue",
	(
		out20.OldValue != null?
            out20.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_4_Out.put("OldValue",
	(
		out20.OldValue != null?
            out20.OldValue.toString():null
		));
	valueMap_tWriteJSONField_4_Out.put("NewValue",
	(
		out20.NewValue != null?
            out20.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_4_Out.put("NewValue",
	(
		out20.NewValue != null?
            out20.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_4_Out = "";
	if(strCompCache_tWriteJSONField_4_Out==null){
		strCompCache_tWriteJSONField_4_Out=strTemp_tWriteJSONField_4_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_4_Out.replaceDefaultNameSpace(doc_tWriteJSONField_4_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_4_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_4_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_4_Out, format_tWriteJSONField_4_Out);
			output_tWriteJSONField_4_Out.write(doc_tWriteJSONField_4_Out);
		    output_tWriteJSONField_4_Out.close();
			
				  		  row40Struct row_tWriteJSONField_4_Out = new row40Struct();
						  
					     		row_tWriteJSONField_4_Out.data = strWriter_tWriteJSONField_4_Out.toString();
					     		listGroupby_tWriteJSONField_4_Out.add(row_tWriteJSONField_4_Out);
					
		    doc_tWriteJSONField_4_Out.clearContent();
			needRoot_tWriteJSONField_4_Out = true;
			for(int i_tWriteJSONField_4_Out=0;i_tWriteJSONField_4_Out<orders_tWriteJSONField_4_Out.length;i_tWriteJSONField_4_Out++){
				orders_tWriteJSONField_4_Out[i_tWriteJSONField_4_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_4_Out != null && groupbyList_tWriteJSONField_4_Out.size() >= 0){
				groupbyList_tWriteJSONField_4_Out.clear();
			}
			strCompCache_tWriteJSONField_4_Out=strTemp_tWriteJSONField_4_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_4_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_4_Out) {
		needRoot_tWriteJSONField_4_Out=false;
		org.dom4j.Element root_tWriteJSONField_4_Out = doc_tWriteJSONField_4_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_4_Out = root_tWriteJSONField_4_Out;
		org.dom4j.Element root_0_tWriteJSONField_4_Out = root_tWriteJSONField_4_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_4_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_4_Out .setText(root_0_tWriteJSONField_4_Out,
		valueMap_tWriteJSONField_4_Out.get("IsDeleted"));
            root_0_tWriteJSONField_4_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_4_Out .setText(root_0_tWriteJSONField_4_Out,"null");
			root_0_tWriteJSONField_4_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_4_Out = root_tWriteJSONField_4_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_4_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_4_Out .setText(root_1_tWriteJSONField_4_Out,
		valueMap_tWriteJSONField_4_Out.get("ParentId"));
			root_1_tWriteJSONField_4_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_4_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_4_Out .setText(root_1_tWriteJSONField_4_Out,"null");
			root_1_tWriteJSONField_4_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_4_Out = root_tWriteJSONField_4_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_4_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_4_Out .setText(root_2_tWriteJSONField_4_Out,
		valueMap_tWriteJSONField_4_Out.get("CreatedById"));
			root_2_tWriteJSONField_4_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_4_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_4_Out .setText(root_2_tWriteJSONField_4_Out,"null");
			root_2_tWriteJSONField_4_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_4_Out = root_tWriteJSONField_4_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_4_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_4_Out .setText(root_3_tWriteJSONField_4_Out,
		valueMap_tWriteJSONField_4_Out.get("CreatedDate"));
            root_3_tWriteJSONField_4_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_4_Out .setText(root_3_tWriteJSONField_4_Out,"null");
			root_3_tWriteJSONField_4_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_4_Out = root_tWriteJSONField_4_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_4_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_4_Out .setText(root_4_tWriteJSONField_4_Out,
		valueMap_tWriteJSONField_4_Out.get("Field"));
			root_4_tWriteJSONField_4_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_4_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_4_Out .setText(root_4_tWriteJSONField_4_Out,"null");
			root_4_tWriteJSONField_4_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_4_Out = root_tWriteJSONField_4_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_4_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_4_Out .setText(root_5_tWriteJSONField_4_Out,
		valueMap_tWriteJSONField_4_Out.get("OldValue"));
			root_5_tWriteJSONField_4_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_4_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_4_Out .setText(root_5_tWriteJSONField_4_Out,"null");
			root_5_tWriteJSONField_4_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_4_Out = root_tWriteJSONField_4_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_4_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_4_Out .setText(root_6_tWriteJSONField_4_Out,
		valueMap_tWriteJSONField_4_Out.get("NewValue"));
			root_6_tWriteJSONField_4_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_4_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_4_Out .setText(root_6_tWriteJSONField_4_Out,"null");
			root_6_tWriteJSONField_4_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_4_Out = subTreeRootParent_tWriteJSONField_4_Out;
	}else{
		subTreeRootParent_tWriteJSONField_4_Out=root4Group_tWriteJSONField_4_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_4_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_4_Out[0]==0){
        	orders_tWriteJSONField_4_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_4_Out.length){
        		orders_tWriteJSONField_4_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_4_Out.elements().add(orders_tWriteJSONField_4_Out[0]++,loop_tWriteJSONField_4_Out);
		if(
		valueMap_tWriteJSONField_4_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_4_Out .setText(loop_tWriteJSONField_4_Out,
		valueMap_tWriteJSONField_4_Out.get("Id"));
			loop_tWriteJSONField_4_Out.addAttribute("type", "string");
			loop_tWriteJSONField_4_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_4_Out .setText(loop_tWriteJSONField_4_Out,"null");
			loop_tWriteJSONField_4_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_4_Out++;

/**
 * [tWriteJSONField_4_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_4_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_4";
	
	currentComponent="tWriteJSONField_4_Out";

	

 



/**
 * [tWriteJSONField_4_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_4_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_4";
	
	currentComponent="tWriteJSONField_4_Out";

	

 



/**
 * [tWriteJSONField_4_Out process_data_end ] stop
 */

} // End of branch "out20"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_4";

	


 



/**
 * [tSalesforceInput_4 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_4 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_4";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_4", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_4.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_4 = reader_tSalesforceInput_4.getReturnValues();
if(resultMap_tSalesforceInput_4!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_4 : resultMap_tSalesforceInput_4.entrySet()) {
		switch(entry_tSalesforceInput_4.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_4.setComponentData("tSalesforceInput_4", "ERROR_MESSAGE", entry_tSalesforceInput_4.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_4.setComponentData("tSalesforceInput_4", "NB_LINE", entry_tSalesforceInput_4.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_4.setComponentData("tSalesforceInput_4", "NB_SUCCESS", entry_tSalesforceInput_4.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_4.setComponentData("tSalesforceInput_4", "NB_REJECT", entry_tSalesforceInput_4.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_4 = new StringBuilder();
            for (int i_tSalesforceInput_4 = 0; i_tSalesforceInput_4 < entry_tSalesforceInput_4.getKey().length(); i_tSalesforceInput_4++) {
                char ch_tSalesforceInput_4 = entry_tSalesforceInput_4.getKey().charAt(i_tSalesforceInput_4);
                if(Character.isUpperCase(ch_tSalesforceInput_4) && i_tSalesforceInput_4> 0) {
                	studio_key_tSalesforceInput_4.append('_');
                }
                studio_key_tSalesforceInput_4.append(ch_tSalesforceInput_4);
            }
			container_tSalesforceInput_4.setComponentData("tSalesforceInput_4", studio_key_tSalesforceInput_4.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_4.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_4", true);
end_Hash.put("tSalesforceInput_4", System.currentTimeMillis());




/**
 * [tSalesforceInput_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tWriteJSONField_4_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_4";
	
	currentComponent="tWriteJSONField_4_Out";

	

if(nb_line_tWriteJSONField_4_Out > 0){  
    nestXMLTool_tWriteJSONField_4_Out.replaceDefaultNameSpace(doc_tWriteJSONField_4_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_4_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_4_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_4_Out, format_tWriteJSONField_4_Out);
	output_tWriteJSONField_4_Out.write(doc_tWriteJSONField_4_Out);
    output_tWriteJSONField_4_Out.close();
					row40Struct row_tWriteJSONField_4_Out = new row40Struct();
						  
					     		row_tWriteJSONField_4_Out.data = strWriter_tWriteJSONField_4_Out.toString();
					     		listGroupby_tWriteJSONField_4_Out.add(row_tWriteJSONField_4_Out);
		    		

}
globalMap.put("tWriteJSONField_4_Out_NB_LINE",nb_line_tWriteJSONField_4_Out);
globalMap.put("tWriteJSONField_4_In_FINISH" + (listGroupby_tWriteJSONField_4_Out==null?"":listGroupby_tWriteJSONField_4_Out.hashCode()), "true");
	
		txf_tWriteJSONField_4_Out.join();
		
		if(txf_tWriteJSONField_4_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_4_Out.getCurrentComponent();
			throw txf_tWriteJSONField_4_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_4_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_4_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_4_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out20");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_4_Out", true);
end_Hash.put("tWriteJSONField_4_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_4_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_4 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_4";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_4")==null){
    if(resourceMap.get("reader_tSalesforceInput_4")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_4")).close();
		} catch (java.io.IOException e_tSalesforceInput_4) {
			String errorMessage_tSalesforceInput_4 = "failed to release the resource in tSalesforceInput_4 :" + e_tSalesforceInput_4.getMessage();
			System.err.println(errorMessage_tSalesforceInput_4);
		}
	}
}
 



/**
 * [tSalesforceInput_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_4_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_4";
	
	currentComponent="tWriteJSONField_4_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_4_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_4_In");
		if(resourceMap.get("finish_tWriteJSONField_4_Out") == null){
			globalMap.put("tWriteJSONField_4_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_4_Out==null?"":listGroupby_tWriteJSONField_4_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_4_Out != null) {
		globalMap.put("tWriteJSONField_4_In_FINISH" + (listGroupby_tWriteJSONField_4_Out==null?"":listGroupby_tWriteJSONField_4_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_4_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_4", false);
		start_Hash.put("tFileArchive_4", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_4";

	
		int tos_count_tFileArchive_4 = 0;
		

 



/**
 * [tFileArchive_4 begin ] stop
 */
	
	/**
	 * [tFileArchive_4 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_4";

	

	

		String sourceFile_tFileArchive_4 = context.staging_S3_dir + "noodlecrm__application__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_4), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_4 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_4 = context.staging_S3_dir + "noodlecrm__application__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_4 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_4, zipFile_tFileArchive_4);
    zip_tFileArchive_4.setOverwriteExistTargetZip(true);
	zip_tFileArchive_4.setMakeTargetDir(true);
	zip_tFileArchive_4.setCompressLevel(9);
	zip_tFileArchive_4.setArchiveFormat("gzip");
	zip_tFileArchive_4.setAllFiles(true);
	
	
		zip_tFileArchive_4.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_4_ARCHIVE_FILEPATH",zipFile_tFileArchive_4);
   
   globalMap.put("tFileArchive_4_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_4).getName());

   zip_tFileArchive_4.doZip();


 


	tos_count_tFileArchive_4++;

/**
 * [tFileArchive_4 main ] stop
 */
	
	/**
	 * [tFileArchive_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_4";

	

 



/**
 * [tFileArchive_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_4";

	

 



/**
 * [tFileArchive_4 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_4 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_4";

	

 

ok_Hash.put("tFileArchive_4", true);
end_Hash.put("tFileArchive_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk52", 0, "ok");
				}
				tS3Put_4Process(globalMap);



/**
 * [tFileArchive_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_4 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_4";

	

 



/**
 * [tFileArchive_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_4_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_4", false);
		start_Hash.put("tS3Put_4", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_4";

	
		int tos_count_tS3Put_4 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_4 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_4 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__application__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__application__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_4 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_4 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_4 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_4 = context.staging_S3_dir + "noodlecrm__application__history.json.gz";
	
	boolean useStream_tS3Put_4 = false;
	java.io.InputStream uploadStream_tS3Put_4 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_4 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_4 instanceof String){
		    useStream_tS3Put_4 = false;
		}else if(fileOrStream_tS3Put_4 instanceof java.io.InputStream){
		    useStream_tS3Put_4 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_4 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_4) {
				java.io.File inputFile_tS3Put_4 = new java.io.File((String)fileOrStream_tS3Put_4);
				
				long multipart_upload_threshold_tS3Put_4 = 5 * 1024 * 1024;
				
    		tm_tS3Put_4 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_4)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_4)
    			.withS3Client(conn_tS3Put_4)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_4 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_4, inputFile_tS3Put_4).withMetadata(objectMetadata_tS3Put_4);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_4 = tm_tS3Put_4.upload(putRequest_tS3Put_4);
  		
  			upload_tS3Put_4.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_4 = ((java.io.InputStream)fileOrStream_tS3Put_4);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_4 = new S3StreamUtil();
    		byte[] buffer_tS3Put_4 = new byte[partSizeInBytes_tS3Put_4];
    		sourceStream_tS3Put_4.read(buffer_tS3Put_4);
    		long curPartSize_tS3Put_4 = streamUtil_tS3Put_4.getLength(buffer_tS3Put_4);
    		boolean multiUpload_tS3Put_4 = curPartSize_tS3Put_4 == partSizeInBytes_tS3Put_4;
    		
    		if(!multiUpload_tS3Put_4) {
    				objectMetadata_tS3Put_4.setContentLength(curPartSize_tS3Put_4);
    				uploadStream_tS3Put_4 = new java.io.ByteArrayInputStream(buffer_tS3Put_4,0,Long.valueOf(curPartSize_tS3Put_4).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_4 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_4, uploadStream_tS3Put_4, objectMetadata_tS3Put_4);
			
    				
    				

    				
    				conn_tS3Put_4.putObject(putRequest_tS3Put_4);
    		} else {
    				uploadStream_tS3Put_4 = new java.io.ByteArrayInputStream(buffer_tS3Put_4);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_4 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_4 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_4, objectMetadata_tS3Put_4);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_4 = conn_tS3Put_4.initiateMultipartUpload(putRequest_tS3Put_4);
      			String uploadId_tS3Put_4 = initResponse_tS3Put_4.getUploadId();
      			int partNumber_tS3Put_4 = 1;
      			boolean streamHasNext_tS3Put_4 = true;
      			byte[] probeAvailability_tS3Put_4 = new byte[1];
				try {
					while (streamHasNext_tS3Put_4) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_4 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_4)
						.withUploadId(uploadId_tS3Put_4)
                    	.withPartNumber(partNumber_tS3Put_4)
						.withPartSize(curPartSize_tS3Put_4);
            		    uploadRequest_tS3Put_4.setInputStream(uploadStream_tS3Put_4);
            		    streamHasNext_tS3Put_4 = sourceStream_tS3Put_4.read(probeAvailability_tS3Put_4) != -1;
            		    if(!streamHasNext_tS3Put_4){
                    	    uploadRequest_tS3Put_4.setLastPart(true);
                    	}

                		partTags_tS3Put_4.add(conn_tS3Put_4.uploadPart(uploadRequest_tS3Put_4).getPartETag());
                  	    partNumber_tS3Put_4++;

          		     	if(uploadStream_tS3Put_4!=null){
      		         			uploadStream_tS3Put_4.close();
          		     	}
          		     	buffer_tS3Put_4 = new byte[partSizeInBytes_tS3Put_4];
          		     	sourceStream_tS3Put_4.read(buffer_tS3Put_4,1,partSizeInBytes_tS3Put_4-1);
          		     	buffer_tS3Put_4[0] = probeAvailability_tS3Put_4[0];
          		     	probeAvailability_tS3Put_4 = new byte[1];
          		     	curPartSize_tS3Put_4 = streamUtil_tS3Put_4.getLength(buffer_tS3Put_4);
          		     	uploadStream_tS3Put_4 = new java.io.ByteArrayInputStream(buffer_tS3Put_4);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_4 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_4,
                        uploadId_tS3Put_4, partTags_tS3Put_4);
            		conn_tS3Put_4.completeMultipartUpload(compRequest_tS3Put_4);
            } catch (java.lang.Exception uploadException_tS3Put_4) {
  							conn_tS3Put_4.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_4, uploadId_tS3Put_4));
    						throw uploadException_tS3Put_4;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_4){
		
			throw(e_tS3Put_4);
		
	}finally{
		if(useStream_tS3Put_4 && uploadStream_tS3Put_4!=null){
    	uploadStream_tS3Put_4.close();
    }
    
    if(tm_tS3Put_4 != null){
        tm_tS3Put_4.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_4 begin ] stop
 */
	
	/**
	 * [tS3Put_4 main ] start
	 */

	

	
	
	currentComponent="tS3Put_4";

	

 


	tos_count_tS3Put_4++;

/**
 * [tS3Put_4 main ] stop
 */
	
	/**
	 * [tS3Put_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_4";

	

 



/**
 * [tS3Put_4 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_4";

	

 



/**
 * [tS3Put_4 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_4 end ] start
	 */

	

	
	
	currentComponent="tS3Put_4";

	

 

ok_Hash.put("tS3Put_4", true);
end_Hash.put("tS3Put_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk53", 0, "ok");
				}
				tJava_22Process(globalMap);



/**
 * [tS3Put_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_4 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_4";

	

 



/**
 * [tS3Put_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_22", false);
		start_Hash.put("tJava_22", System.currentTimeMillis());
		
	
	currentComponent="tJava_22";

	
		int tos_count_tJava_22 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_4_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_4_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_22 begin ] stop
 */
	
	/**
	 * [tJava_22 main ] start
	 */

	

	
	
	currentComponent="tJava_22";

	

 


	tos_count_tJava_22++;

/**
 * [tJava_22 main ] stop
 */
	
	/**
	 * [tJava_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_22";

	

 



/**
 * [tJava_22 process_data_begin ] stop
 */
	
	/**
	 * [tJava_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_22";

	

 



/**
 * [tJava_22 process_data_end ] stop
 */
	
	/**
	 * [tJava_22 end ] start
	 */

	

	
	
	currentComponent="tJava_22";

	

 

ok_Hash.put("tJava_22", true);
end_Hash.put("tJava_22", System.currentTimeMillis());




/**
 * [tJava_22 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_22 finally ] start
	 */

	

	
	
	currentComponent="tJava_22";

	

 



/**
 * [tJava_22 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_22_SUBPROCESS_STATE", 1);
	}
	

public void tDie_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_4", false);
		start_Hash.put("tDie_4", System.currentTimeMillis());
		
	
	currentComponent="tDie_4";

	
		int tos_count_tDie_4 = 0;
		

 



/**
 * [tDie_4 begin ] stop
 */
	
	/**
	 * [tDie_4 main ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_4", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_4_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_4_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_4_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_4) {
		logIgnoredError(String.format("tDie_4 - tDie failed to log message due to internal error: %s", e_tDie_4), e_tDie_4);
	}
	
	currentComponent = "tDie_4";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_4_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_4++;

/**
 * [tDie_4 main ] stop
 */
	
	/**
	 * [tDie_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 



/**
 * [tDie_4 process_data_begin ] stop
 */
	
	/**
	 * [tDie_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 



/**
 * [tDie_4 process_data_end ] stop
 */
	
	/**
	 * [tDie_4 end ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 

ok_Hash.put("tDie_4", true);
end_Hash.put("tDie_4", System.currentTimeMillis());




/**
 * [tDie_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_4 finally ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 



/**
 * [tDie_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";

	
		int tos_count_tJava_8 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Application_Decision__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 




System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 process_data_begin ] stop
 */
	
	/**
	 * [tJava_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 process_data_end ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tSalesforceInput_5Process(globalMap);



/**
 * [tJava_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tJava_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}
	


public static class out21Struct implements routines.system.IPersistableRow<out21Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row43Struct row43 = new row43Struct();
out21Struct out21 = new out21Struct();





	
	/**
	 * [tWriteJSONField_5_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_5_Out", false);
		start_Hash.put("tWriteJSONField_5_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out21");
					}
				
		int tos_count_tWriteJSONField_5_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_5_Out = 0;
				boolean needRoot_tWriteJSONField_5_Out  = true;
				
				String  strCompCache_tWriteJSONField_5_Out= null;		
				
						        java.util.Queue<row42Struct> listGroupby_tWriteJSONField_5_Out = new java.util.concurrent.ConcurrentLinkedQueue<row42Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_5_Out extends Thread {
						
									    java.util.Queue<row42Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_5_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_5_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_5_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_5_In", queue);
							globalMap.put("flows_tWriteJSONField_5_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_5_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_5_Out txf_tWriteJSONField_5_Out = new ThreadXMLField_tWriteJSONField_5_Out(listGroupby_tWriteJSONField_5_Out);
					
					txf_tWriteJSONField_5_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_5_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_5_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_5_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_5_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_5_Out nestXMLTool_tWriteJSONField_5_Out = new NestXMLTool_tWriteJSONField_5_Out();

out21Struct  rowStructOutput_tWriteJSONField_5_Out = new out21Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_5_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_5_Out = null;
org.dom4j.Document doc_tWriteJSONField_5_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_5_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_5_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_5_Out.setTrimText(false);
format_tWriteJSONField_5_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_5_Out = new int[1];

 



/**
 * [tWriteJSONField_5_Out begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out21Struct out21_tmp = new out21Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_5", false);
		start_Hash.put("tSalesforceInput_5", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_5";

	
		int tos_count_tSalesforceInput_5 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_5 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_5 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_5.createRuntimeProperties();
 		                    props_tSalesforceInput_5.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_5.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_5.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_5.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_5.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_5.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_5.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_5.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_5.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_5.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_5.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_5.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_5.module.setValue("moduleName",
 		                    "NoodleCRM__Application_Decision__History");
 		                    
 		                    props_tSalesforceInput_5.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_5.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_5.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_5.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_5.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_5_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Application_Decision__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Application_Decision__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_5_1_fisrt sst_tSalesforceInput_5_1_fisrt = new SchemaSettingTool_tSalesforceInput_5_1_fisrt();
 		                    
 		                    props_tSalesforceInput_5.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_5_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_5.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_5 = props_tSalesforceInput_5.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_5 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_5 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_5 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_5.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_5);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_5.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_5 = props_tSalesforceInput_5.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_5 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_5 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_5 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_5.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_5);
        }
    }
globalMap.put("tSalesforceInput_5_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_5);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_5= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_5_MAPPINGS_URL", mappings_url_tSalesforceInput_5);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_5 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_5";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_5 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_5 = null;
topology_tSalesforceInput_5 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_5 = def_tSalesforceInput_5.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_5, topology_tSalesforceInput_5);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_5 = def_tSalesforceInput_5.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_5 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_5.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_5 = componentRuntime_tSalesforceInput_5.initialize(container_tSalesforceInput_5, props_tSalesforceInput_5);

if (initVr_tSalesforceInput_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_5.getMessage());
}

if(componentRuntime_tSalesforceInput_5 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_5 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_5;
	compDriverInitialization_tSalesforceInput_5.runAtDriver(container_tSalesforceInput_5);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_5 = null;
if(componentRuntime_tSalesforceInput_5 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_5 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_5;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_5 = sourceOrSink_tSalesforceInput_5.validate(container_tSalesforceInput_5);
	if (vr_tSalesforceInput_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_5.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_5 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_5;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_5 =
            source_tSalesforceInput_5.createReader(container_tSalesforceInput_5);
	reader_tSalesforceInput_5 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_5, container_tSalesforceInput_5);

        boolean multi_output_is_allowed_tSalesforceInput_5 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_5 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_5.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_5 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_5 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_5 = props_tSalesforceInput_5.getSchema(c_tSalesforceInput_5, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_5 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_5, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_5 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_5 = reader_tSalesforceInput_5.start();

    resourceMap.put("reader_tSalesforceInput_5", reader_tSalesforceInput_5);

    for (; available_tSalesforceInput_5; available_tSalesforceInput_5 = reader_tSalesforceInput_5.advance()) {
    	nb_line_tSalesforceInput_5++;

    	
        if (multi_output_is_allowed_tSalesforceInput_5) {
                row43 = null;

        }

        try {
            Object data_tSalesforceInput_5 = reader_tSalesforceInput_5.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_5) {
                    row43 = new row43Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_5 == null) {
            factory_tSalesforceInput_5 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_5.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_5.setWrapped(factory_tSalesforceInput_5.convertToAvro(data_tSalesforceInput_5));
                Object columnValue_0_tSalesforceInput_5 = outgoingEnforcer_tSalesforceInput_5.get(0);
                        row43.Id = (String) (columnValue_0_tSalesforceInput_5);
                Object columnValue_1_tSalesforceInput_5 = outgoingEnforcer_tSalesforceInput_5.get(1);
                    if (columnValue_1_tSalesforceInput_5 == null) {
                        row43.IsDeleted = false;
                    } else {
                            row43.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_5);
                    }
                Object columnValue_2_tSalesforceInput_5 = outgoingEnforcer_tSalesforceInput_5.get(2);
                        row43.ParentId = (String) (columnValue_2_tSalesforceInput_5);
                Object columnValue_3_tSalesforceInput_5 = outgoingEnforcer_tSalesforceInput_5.get(3);
                        row43.CreatedById = (String) (columnValue_3_tSalesforceInput_5);
                Object columnValue_4_tSalesforceInput_5 = outgoingEnforcer_tSalesforceInput_5.get(4);
                        row43.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_5);
                Object columnValue_5_tSalesforceInput_5 = outgoingEnforcer_tSalesforceInput_5.get(5);
                        row43.Field = (String) (columnValue_5_tSalesforceInput_5);
                Object columnValue_6_tSalesforceInput_5 = outgoingEnforcer_tSalesforceInput_5.get(6);
                        row43.OldValue = (String) (columnValue_6_tSalesforceInput_5);
                Object columnValue_7_tSalesforceInput_5 = outgoingEnforcer_tSalesforceInput_5.get(7);
                        row43.NewValue = (String) (columnValue_7_tSalesforceInput_5);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_5) {
        	java.util.Map<String,Object> info_tSalesforceInput_5 = e_tSalesforceInput_5.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_5 = null;
            	if(info_tSalesforceInput_5.containsKey("error")){
            		errorMessage_tSalesforceInput_5 = info_tSalesforceInput_5.get("error");
        		}else if(info_tSalesforceInput_5.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_5 = info_tSalesforceInput_5.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_5 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_5 = "Row "+ nb_line_tSalesforceInput_5 + ": "+errorMessage_tSalesforceInput_5;
    			System.err.println(errorMessage_tSalesforceInput_5);
            	// If the record is reject, the main line record should put NULL
            	row43 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_5 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_5 = null;


 



/**
 * [tSalesforceInput_5 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_5 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_5";

	


 


	tos_count_tSalesforceInput_5++;

/**
 * [tSalesforceInput_5 main ] stop
 */
	
	/**
	 * [tSalesforceInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_5";

	


 



/**
 * [tSalesforceInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row43");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

out21 = null;


// # Output table : 'out21'
out21_tmp.Id = row43.Id ;
out21_tmp.IsDeleted = row43.IsDeleted ;
out21_tmp.ParentId = row43.ParentId ;
out21_tmp.CreatedById = row43.CreatedById ;
out21_tmp.CreatedDate = (row43.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row43.CreatedDate))).getTime())/1000 ;
out21_tmp.Field = row43.Field ;
out21_tmp.OldValue = row43.OldValue ;
out21_tmp.NewValue = row43.NewValue ;
out21 = out21_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out21"
if(out21 != null) { 



	
	/**
	 * [tWriteJSONField_5_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out21");
					}
					

	if(txf_tWriteJSONField_5_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_5_Out.getCurrentComponent();
		throw txf_tWriteJSONField_5_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_5_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_5_Out.getLastError();
	}
	nb_line_tWriteJSONField_5_Out++;
	valueMap_tWriteJSONField_5_Out.clear();
	arraysValueMap_tWriteJSONField_5_Out.clear();
	valueMap_tWriteJSONField_5_Out.put("Id",
	(
            out21.Id.toString()
		));
	arraysValueMap_tWriteJSONField_5_Out.put("Id",
	(
            out21.Id.toString()
		));
	valueMap_tWriteJSONField_5_Out.put("IsDeleted",
	(
            String.valueOf(out21.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_5_Out.put("IsDeleted",
	(
            String.valueOf(out21.IsDeleted)
		));
	valueMap_tWriteJSONField_5_Out.put("ParentId",
	(
            out21.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_5_Out.put("ParentId",
	(
            out21.ParentId.toString()
		));
	valueMap_tWriteJSONField_5_Out.put("CreatedById",
	(
            out21.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_5_Out.put("CreatedById",
	(
            out21.CreatedById.toString()
		));
	valueMap_tWriteJSONField_5_Out.put("CreatedDate",
	(
            String.valueOf(out21.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_5_Out.put("CreatedDate",
	(
            String.valueOf(out21.CreatedDate)
		));
	valueMap_tWriteJSONField_5_Out.put("Field",
	(
            out21.Field.toString()
		));
	arraysValueMap_tWriteJSONField_5_Out.put("Field",
	(
            out21.Field.toString()
		));
	valueMap_tWriteJSONField_5_Out.put("OldValue",
	(
		out21.OldValue != null?
            out21.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("OldValue",
	(
		out21.OldValue != null?
            out21.OldValue.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("NewValue",
	(
		out21.NewValue != null?
            out21.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("NewValue",
	(
		out21.NewValue != null?
            out21.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_5_Out = "";
	if(strCompCache_tWriteJSONField_5_Out==null){
		strCompCache_tWriteJSONField_5_Out=strTemp_tWriteJSONField_5_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_5_Out.replaceDefaultNameSpace(doc_tWriteJSONField_5_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_5_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_5_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_5_Out, format_tWriteJSONField_5_Out);
			output_tWriteJSONField_5_Out.write(doc_tWriteJSONField_5_Out);
		    output_tWriteJSONField_5_Out.close();
			
				  		  row42Struct row_tWriteJSONField_5_Out = new row42Struct();
						  
					     		row_tWriteJSONField_5_Out.data = strWriter_tWriteJSONField_5_Out.toString();
					     		listGroupby_tWriteJSONField_5_Out.add(row_tWriteJSONField_5_Out);
					
		    doc_tWriteJSONField_5_Out.clearContent();
			needRoot_tWriteJSONField_5_Out = true;
			for(int i_tWriteJSONField_5_Out=0;i_tWriteJSONField_5_Out<orders_tWriteJSONField_5_Out.length;i_tWriteJSONField_5_Out++){
				orders_tWriteJSONField_5_Out[i_tWriteJSONField_5_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_5_Out != null && groupbyList_tWriteJSONField_5_Out.size() >= 0){
				groupbyList_tWriteJSONField_5_Out.clear();
			}
			strCompCache_tWriteJSONField_5_Out=strTemp_tWriteJSONField_5_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_5_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_5_Out) {
		needRoot_tWriteJSONField_5_Out=false;
		org.dom4j.Element root_tWriteJSONField_5_Out = doc_tWriteJSONField_5_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_5_Out = root_tWriteJSONField_5_Out;
		org.dom4j.Element root_0_tWriteJSONField_5_Out = root_tWriteJSONField_5_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_5_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(root_0_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("IsDeleted"));
            root_0_tWriteJSONField_5_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_5_Out .setText(root_0_tWriteJSONField_5_Out,"null");
			root_0_tWriteJSONField_5_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_5_Out = root_tWriteJSONField_5_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_5_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(root_1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("ParentId"));
			root_1_tWriteJSONField_5_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_5_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_5_Out .setText(root_1_tWriteJSONField_5_Out,"null");
			root_1_tWriteJSONField_5_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_5_Out = root_tWriteJSONField_5_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_5_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(root_2_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("CreatedById"));
			root_2_tWriteJSONField_5_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_5_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_5_Out .setText(root_2_tWriteJSONField_5_Out,"null");
			root_2_tWriteJSONField_5_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_5_Out = root_tWriteJSONField_5_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_5_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(root_3_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("CreatedDate"));
            root_3_tWriteJSONField_5_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_5_Out .setText(root_3_tWriteJSONField_5_Out,"null");
			root_3_tWriteJSONField_5_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_5_Out = root_tWriteJSONField_5_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_5_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(root_4_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("Field"));
			root_4_tWriteJSONField_5_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_5_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_5_Out .setText(root_4_tWriteJSONField_5_Out,"null");
			root_4_tWriteJSONField_5_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_5_Out = root_tWriteJSONField_5_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_5_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(root_5_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("OldValue"));
			root_5_tWriteJSONField_5_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_5_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_5_Out .setText(root_5_tWriteJSONField_5_Out,"null");
			root_5_tWriteJSONField_5_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_5_Out = root_tWriteJSONField_5_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_5_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(root_6_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("NewValue"));
			root_6_tWriteJSONField_5_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_5_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_5_Out .setText(root_6_tWriteJSONField_5_Out,"null");
			root_6_tWriteJSONField_5_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_5_Out = subTreeRootParent_tWriteJSONField_5_Out;
	}else{
		subTreeRootParent_tWriteJSONField_5_Out=root4Group_tWriteJSONField_5_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_5_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_5_Out[0]==0){
        	orders_tWriteJSONField_5_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_5_Out.length){
        		orders_tWriteJSONField_5_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_5_Out.elements().add(orders_tWriteJSONField_5_Out[0]++,loop_tWriteJSONField_5_Out);
		if(
		valueMap_tWriteJSONField_5_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(loop_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("Id"));
			loop_tWriteJSONField_5_Out.addAttribute("type", "string");
			loop_tWriteJSONField_5_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_5_Out .setText(loop_tWriteJSONField_5_Out,"null");
			loop_tWriteJSONField_5_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_5_Out++;

/**
 * [tWriteJSONField_5_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_5_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_Out";

	

 



/**
 * [tWriteJSONField_5_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_5_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_Out";

	

 



/**
 * [tWriteJSONField_5_Out process_data_end ] stop
 */

} // End of branch "out21"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_5";

	


 



/**
 * [tSalesforceInput_5 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_5 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_5";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_5", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_5.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_5 = reader_tSalesforceInput_5.getReturnValues();
if(resultMap_tSalesforceInput_5!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_5 : resultMap_tSalesforceInput_5.entrySet()) {
		switch(entry_tSalesforceInput_5.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_5.setComponentData("tSalesforceInput_5", "ERROR_MESSAGE", entry_tSalesforceInput_5.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_5.setComponentData("tSalesforceInput_5", "NB_LINE", entry_tSalesforceInput_5.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_5.setComponentData("tSalesforceInput_5", "NB_SUCCESS", entry_tSalesforceInput_5.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_5.setComponentData("tSalesforceInput_5", "NB_REJECT", entry_tSalesforceInput_5.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_5 = new StringBuilder();
            for (int i_tSalesforceInput_5 = 0; i_tSalesforceInput_5 < entry_tSalesforceInput_5.getKey().length(); i_tSalesforceInput_5++) {
                char ch_tSalesforceInput_5 = entry_tSalesforceInput_5.getKey().charAt(i_tSalesforceInput_5);
                if(Character.isUpperCase(ch_tSalesforceInput_5) && i_tSalesforceInput_5> 0) {
                	studio_key_tSalesforceInput_5.append('_');
                }
                studio_key_tSalesforceInput_5.append(ch_tSalesforceInput_5);
            }
			container_tSalesforceInput_5.setComponentData("tSalesforceInput_5", studio_key_tSalesforceInput_5.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_5.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_5", true);
end_Hash.put("tSalesforceInput_5", System.currentTimeMillis());




/**
 * [tSalesforceInput_5 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tWriteJSONField_5_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_Out";

	

if(nb_line_tWriteJSONField_5_Out > 0){  
    nestXMLTool_tWriteJSONField_5_Out.replaceDefaultNameSpace(doc_tWriteJSONField_5_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_5_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_5_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_5_Out, format_tWriteJSONField_5_Out);
	output_tWriteJSONField_5_Out.write(doc_tWriteJSONField_5_Out);
    output_tWriteJSONField_5_Out.close();
					row42Struct row_tWriteJSONField_5_Out = new row42Struct();
						  
					     		row_tWriteJSONField_5_Out.data = strWriter_tWriteJSONField_5_Out.toString();
					     		listGroupby_tWriteJSONField_5_Out.add(row_tWriteJSONField_5_Out);
		    		

}
globalMap.put("tWriteJSONField_5_Out_NB_LINE",nb_line_tWriteJSONField_5_Out);
globalMap.put("tWriteJSONField_5_In_FINISH" + (listGroupby_tWriteJSONField_5_Out==null?"":listGroupby_tWriteJSONField_5_Out.hashCode()), "true");
	
		txf_tWriteJSONField_5_Out.join();
		
		if(txf_tWriteJSONField_5_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_5_Out.getCurrentComponent();
			throw txf_tWriteJSONField_5_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_5_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_5_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_5_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out21");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_5_Out", true);
end_Hash.put("tWriteJSONField_5_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_5_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_5 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_5";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_5")==null){
    if(resourceMap.get("reader_tSalesforceInput_5")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_5")).close();
		} catch (java.io.IOException e_tSalesforceInput_5) {
			String errorMessage_tSalesforceInput_5 = "failed to release the resource in tSalesforceInput_5 :" + e_tSalesforceInput_5.getMessage();
			System.err.println(errorMessage_tSalesforceInput_5);
		}
	}
}
 



/**
 * [tSalesforceInput_5 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_5_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_5_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_5_In");
		if(resourceMap.get("finish_tWriteJSONField_5_Out") == null){
			globalMap.put("tWriteJSONField_5_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_5_Out==null?"":listGroupby_tWriteJSONField_5_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_5_Out != null) {
		globalMap.put("tWriteJSONField_5_In_FINISH" + (listGroupby_tWriteJSONField_5_Out==null?"":listGroupby_tWriteJSONField_5_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_5_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_5_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_5", false);
		start_Hash.put("tFileArchive_5", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_5";

	
		int tos_count_tFileArchive_5 = 0;
		

 



/**
 * [tFileArchive_5 begin ] stop
 */
	
	/**
	 * [tFileArchive_5 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_5";

	

	

		String sourceFile_tFileArchive_5 = context.staging_S3_dir + "noodlecrm__application_decision__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_5), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_5 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_5 = context.staging_S3_dir + "noodlecrm__application_decision__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_5 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_5, zipFile_tFileArchive_5);
    zip_tFileArchive_5.setOverwriteExistTargetZip(true);
	zip_tFileArchive_5.setMakeTargetDir(true);
	zip_tFileArchive_5.setCompressLevel(9);
	zip_tFileArchive_5.setArchiveFormat("gzip");
	zip_tFileArchive_5.setAllFiles(true);
	
	
		zip_tFileArchive_5.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_5_ARCHIVE_FILEPATH",zipFile_tFileArchive_5);
   
   globalMap.put("tFileArchive_5_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_5).getName());

   zip_tFileArchive_5.doZip();


 


	tos_count_tFileArchive_5++;

/**
 * [tFileArchive_5 main ] stop
 */
	
	/**
	 * [tFileArchive_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_5";

	

 



/**
 * [tFileArchive_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_5";

	

 



/**
 * [tFileArchive_5 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_5 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_5";

	

 

ok_Hash.put("tFileArchive_5", true);
end_Hash.put("tFileArchive_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk54", 0, "ok");
				}
				tS3Put_5Process(globalMap);



/**
 * [tFileArchive_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_5 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_5";

	

 



/**
 * [tFileArchive_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_5_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_5", false);
		start_Hash.put("tS3Put_5", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_5";

	
		int tos_count_tS3Put_5 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_5 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_5 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__application_decision__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__application_decision__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_5 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_5 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_5 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_5 = context.staging_S3_dir + "noodlecrm__application_decision__history.json.gz";
	
	boolean useStream_tS3Put_5 = false;
	java.io.InputStream uploadStream_tS3Put_5 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_5 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_5 instanceof String){
		    useStream_tS3Put_5 = false;
		}else if(fileOrStream_tS3Put_5 instanceof java.io.InputStream){
		    useStream_tS3Put_5 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_5 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_5) {
				java.io.File inputFile_tS3Put_5 = new java.io.File((String)fileOrStream_tS3Put_5);
				
				long multipart_upload_threshold_tS3Put_5 = 5 * 1024 * 1024;
				
    		tm_tS3Put_5 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_5)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_5)
    			.withS3Client(conn_tS3Put_5)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_5 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_5, inputFile_tS3Put_5).withMetadata(objectMetadata_tS3Put_5);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_5 = tm_tS3Put_5.upload(putRequest_tS3Put_5);
  		
  			upload_tS3Put_5.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_5 = ((java.io.InputStream)fileOrStream_tS3Put_5);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_5 = new S3StreamUtil();
    		byte[] buffer_tS3Put_5 = new byte[partSizeInBytes_tS3Put_5];
    		sourceStream_tS3Put_5.read(buffer_tS3Put_5);
    		long curPartSize_tS3Put_5 = streamUtil_tS3Put_5.getLength(buffer_tS3Put_5);
    		boolean multiUpload_tS3Put_5 = curPartSize_tS3Put_5 == partSizeInBytes_tS3Put_5;
    		
    		if(!multiUpload_tS3Put_5) {
    				objectMetadata_tS3Put_5.setContentLength(curPartSize_tS3Put_5);
    				uploadStream_tS3Put_5 = new java.io.ByteArrayInputStream(buffer_tS3Put_5,0,Long.valueOf(curPartSize_tS3Put_5).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_5 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_5, uploadStream_tS3Put_5, objectMetadata_tS3Put_5);
			
    				
    				

    				
    				conn_tS3Put_5.putObject(putRequest_tS3Put_5);
    		} else {
    				uploadStream_tS3Put_5 = new java.io.ByteArrayInputStream(buffer_tS3Put_5);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_5 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_5 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_5, objectMetadata_tS3Put_5);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_5 = conn_tS3Put_5.initiateMultipartUpload(putRequest_tS3Put_5);
      			String uploadId_tS3Put_5 = initResponse_tS3Put_5.getUploadId();
      			int partNumber_tS3Put_5 = 1;
      			boolean streamHasNext_tS3Put_5 = true;
      			byte[] probeAvailability_tS3Put_5 = new byte[1];
				try {
					while (streamHasNext_tS3Put_5) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_5 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_5)
						.withUploadId(uploadId_tS3Put_5)
                    	.withPartNumber(partNumber_tS3Put_5)
						.withPartSize(curPartSize_tS3Put_5);
            		    uploadRequest_tS3Put_5.setInputStream(uploadStream_tS3Put_5);
            		    streamHasNext_tS3Put_5 = sourceStream_tS3Put_5.read(probeAvailability_tS3Put_5) != -1;
            		    if(!streamHasNext_tS3Put_5){
                    	    uploadRequest_tS3Put_5.setLastPart(true);
                    	}

                		partTags_tS3Put_5.add(conn_tS3Put_5.uploadPart(uploadRequest_tS3Put_5).getPartETag());
                  	    partNumber_tS3Put_5++;

          		     	if(uploadStream_tS3Put_5!=null){
      		         			uploadStream_tS3Put_5.close();
          		     	}
          		     	buffer_tS3Put_5 = new byte[partSizeInBytes_tS3Put_5];
          		     	sourceStream_tS3Put_5.read(buffer_tS3Put_5,1,partSizeInBytes_tS3Put_5-1);
          		     	buffer_tS3Put_5[0] = probeAvailability_tS3Put_5[0];
          		     	probeAvailability_tS3Put_5 = new byte[1];
          		     	curPartSize_tS3Put_5 = streamUtil_tS3Put_5.getLength(buffer_tS3Put_5);
          		     	uploadStream_tS3Put_5 = new java.io.ByteArrayInputStream(buffer_tS3Put_5);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_5 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_5,
                        uploadId_tS3Put_5, partTags_tS3Put_5);
            		conn_tS3Put_5.completeMultipartUpload(compRequest_tS3Put_5);
            } catch (java.lang.Exception uploadException_tS3Put_5) {
  							conn_tS3Put_5.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_5, uploadId_tS3Put_5));
    						throw uploadException_tS3Put_5;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_5){
		
			throw(e_tS3Put_5);
		
	}finally{
		if(useStream_tS3Put_5 && uploadStream_tS3Put_5!=null){
    	uploadStream_tS3Put_5.close();
    }
    
    if(tm_tS3Put_5 != null){
        tm_tS3Put_5.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_5 begin ] stop
 */
	
	/**
	 * [tS3Put_5 main ] start
	 */

	

	
	
	currentComponent="tS3Put_5";

	

 


	tos_count_tS3Put_5++;

/**
 * [tS3Put_5 main ] stop
 */
	
	/**
	 * [tS3Put_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_5";

	

 



/**
 * [tS3Put_5 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_5";

	

 



/**
 * [tS3Put_5 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_5 end ] start
	 */

	

	
	
	currentComponent="tS3Put_5";

	

 

ok_Hash.put("tS3Put_5", true);
end_Hash.put("tS3Put_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk55", 0, "ok");
				}
				tJava_23Process(globalMap);



/**
 * [tS3Put_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_5 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_5";

	

 



/**
 * [tS3Put_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_5_SUBPROCESS_STATE", 1);
	}
	

public void tJava_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_23", false);
		start_Hash.put("tJava_23", System.currentTimeMillis());
		
	
	currentComponent="tJava_23";

	
		int tos_count_tJava_23 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_5_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_5_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_23 begin ] stop
 */
	
	/**
	 * [tJava_23 main ] start
	 */

	

	
	
	currentComponent="tJava_23";

	

 


	tos_count_tJava_23++;

/**
 * [tJava_23 main ] stop
 */
	
	/**
	 * [tJava_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_23";

	

 



/**
 * [tJava_23 process_data_begin ] stop
 */
	
	/**
	 * [tJava_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_23";

	

 



/**
 * [tJava_23 process_data_end ] stop
 */
	
	/**
	 * [tJava_23 end ] start
	 */

	

	
	
	currentComponent="tJava_23";

	

 

ok_Hash.put("tJava_23", true);
end_Hash.put("tJava_23", System.currentTimeMillis());




/**
 * [tJava_23 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_23 finally ] start
	 */

	

	
	
	currentComponent="tJava_23";

	

 



/**
 * [tJava_23 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_23_SUBPROCESS_STATE", 1);
	}
	

public void tDie_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_5", false);
		start_Hash.put("tDie_5", System.currentTimeMillis());
		
	
	currentComponent="tDie_5";

	
		int tos_count_tDie_5 = 0;
		

 



/**
 * [tDie_5 begin ] stop
 */
	
	/**
	 * [tDie_5 main ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_5", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_5_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_5_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_5_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_5) {
		logIgnoredError(String.format("tDie_5 - tDie failed to log message due to internal error: %s", e_tDie_5), e_tDie_5);
	}
	
	currentComponent = "tDie_5";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_5_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_5++;

/**
 * [tDie_5 main ] stop
 */
	
	/**
	 * [tDie_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

 



/**
 * [tDie_5 process_data_begin ] stop
 */
	
	/**
	 * [tDie_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

 



/**
 * [tDie_5 process_data_end ] stop
 */
	
	/**
	 * [tDie_5 end ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

 

ok_Hash.put("tDie_5", true);
end_Hash.put("tDie_5", System.currentTimeMillis());




/**
 * [tDie_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_5 finally ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

 



/**
 * [tDie_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_5_SUBPROCESS_STATE", 1);
	}
	

public void tJava_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_11", false);
		start_Hash.put("tJava_11", System.currentTimeMillis());
		
	
	currentComponent="tJava_11";

	
		int tos_count_tJava_11 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Inquiry__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 



System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_11 begin ] stop
 */
	
	/**
	 * [tJava_11 main ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 


	tos_count_tJava_11++;

/**
 * [tJava_11 main ] stop
 */
	
	/**
	 * [tJava_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 process_data_begin ] stop
 */
	
	/**
	 * [tJava_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 process_data_end ] stop
 */
	
	/**
	 * [tJava_11 end ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 

ok_Hash.put("tJava_11", true);
end_Hash.put("tJava_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk24", 0, "ok");
				}
				tSalesforceInput_8Process(globalMap);



/**
 * [tJava_11 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tJava_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_11 finally ] start
	 */

	

	
	
	currentComponent="tJava_11";

	

 



/**
 * [tJava_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}
	


public static class out24Struct implements routines.system.IPersistableRow<out24Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row49Struct row49 = new row49Struct();
out24Struct out24 = new out24Struct();





	
	/**
	 * [tWriteJSONField_8_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_8_Out", false);
		start_Hash.put("tWriteJSONField_8_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_8";
	
	currentComponent="tWriteJSONField_8_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out24");
					}
				
		int tos_count_tWriteJSONField_8_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_8_Out = 0;
				boolean needRoot_tWriteJSONField_8_Out  = true;
				
				String  strCompCache_tWriteJSONField_8_Out= null;		
				
						        java.util.Queue<row48Struct> listGroupby_tWriteJSONField_8_Out = new java.util.concurrent.ConcurrentLinkedQueue<row48Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_8_Out extends Thread {
						
									    java.util.Queue<row48Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_8_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_8_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_8_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_8_In", queue);
							globalMap.put("flows_tWriteJSONField_8_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_8_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_8_Out txf_tWriteJSONField_8_Out = new ThreadXMLField_tWriteJSONField_8_Out(listGroupby_tWriteJSONField_8_Out);
					
					txf_tWriteJSONField_8_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_8_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_8_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_8_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_8_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_8_Out nestXMLTool_tWriteJSONField_8_Out = new NestXMLTool_tWriteJSONField_8_Out();

out24Struct  rowStructOutput_tWriteJSONField_8_Out = new out24Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_8_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_8_Out = null;
org.dom4j.Document doc_tWriteJSONField_8_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_8_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_8_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_8_Out.setTrimText(false);
format_tWriteJSONField_8_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_8_Out = new int[1];

 



/**
 * [tWriteJSONField_8_Out begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row49");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
out24Struct out24_tmp = new out24Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_8", false);
		start_Hash.put("tSalesforceInput_8", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_8";

	
		int tos_count_tSalesforceInput_8 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_8 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_8 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_8.createRuntimeProperties();
 		                    props_tSalesforceInput_8.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_8.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_8.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_8.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_8.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_8.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_8.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_8.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_8.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_8.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_8.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_8.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_8.module.setValue("moduleName",
 		                    "NoodleCRM__Inquiry__History");
 		                    
 		                    props_tSalesforceInput_8.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_8.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_8.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_8.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_8.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_8_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Inquiry__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Inquiry__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_8_1_fisrt sst_tSalesforceInput_8_1_fisrt = new SchemaSettingTool_tSalesforceInput_8_1_fisrt();
 		                    
 		                    props_tSalesforceInput_8.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_8_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_8.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_8 = props_tSalesforceInput_8.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_8 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_8 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_8 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_8.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_8);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_8.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_8 = props_tSalesforceInput_8.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_8 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_8 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_8 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_8.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_8);
        }
    }
globalMap.put("tSalesforceInput_8_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_8);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_8= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_8_MAPPINGS_URL", mappings_url_tSalesforceInput_8);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_8 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_8";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_8 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_8 = null;
topology_tSalesforceInput_8 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_8 = def_tSalesforceInput_8.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_8, topology_tSalesforceInput_8);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_8 = def_tSalesforceInput_8.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_8 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_8.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_8 = componentRuntime_tSalesforceInput_8.initialize(container_tSalesforceInput_8, props_tSalesforceInput_8);

if (initVr_tSalesforceInput_8.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_8.getMessage());
}

if(componentRuntime_tSalesforceInput_8 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_8 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_8;
	compDriverInitialization_tSalesforceInput_8.runAtDriver(container_tSalesforceInput_8);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_8 = null;
if(componentRuntime_tSalesforceInput_8 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_8 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_8;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_8 = sourceOrSink_tSalesforceInput_8.validate(container_tSalesforceInput_8);
	if (vr_tSalesforceInput_8.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_8.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_8 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_8;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_8 =
            source_tSalesforceInput_8.createReader(container_tSalesforceInput_8);
	reader_tSalesforceInput_8 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_8, container_tSalesforceInput_8);

        boolean multi_output_is_allowed_tSalesforceInput_8 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_8 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_8.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_8 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_8 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_8 = props_tSalesforceInput_8.getSchema(c_tSalesforceInput_8, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_8 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_8, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_8 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_8 = reader_tSalesforceInput_8.start();

    resourceMap.put("reader_tSalesforceInput_8", reader_tSalesforceInput_8);

    for (; available_tSalesforceInput_8; available_tSalesforceInput_8 = reader_tSalesforceInput_8.advance()) {
    	nb_line_tSalesforceInput_8++;

    	
        if (multi_output_is_allowed_tSalesforceInput_8) {
                row49 = null;

        }

        try {
            Object data_tSalesforceInput_8 = reader_tSalesforceInput_8.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_8) {
                    row49 = new row49Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_8 == null) {
            factory_tSalesforceInput_8 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_8.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_8.setWrapped(factory_tSalesforceInput_8.convertToAvro(data_tSalesforceInput_8));
                Object columnValue_0_tSalesforceInput_8 = outgoingEnforcer_tSalesforceInput_8.get(0);
                        row49.Id = (String) (columnValue_0_tSalesforceInput_8);
                Object columnValue_1_tSalesforceInput_8 = outgoingEnforcer_tSalesforceInput_8.get(1);
                    if (columnValue_1_tSalesforceInput_8 == null) {
                        row49.IsDeleted = false;
                    } else {
                            row49.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_8);
                    }
                Object columnValue_2_tSalesforceInput_8 = outgoingEnforcer_tSalesforceInput_8.get(2);
                        row49.ParentId = (String) (columnValue_2_tSalesforceInput_8);
                Object columnValue_3_tSalesforceInput_8 = outgoingEnforcer_tSalesforceInput_8.get(3);
                        row49.CreatedById = (String) (columnValue_3_tSalesforceInput_8);
                Object columnValue_4_tSalesforceInput_8 = outgoingEnforcer_tSalesforceInput_8.get(4);
                        row49.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_8);
                Object columnValue_5_tSalesforceInput_8 = outgoingEnforcer_tSalesforceInput_8.get(5);
                        row49.Field = (String) (columnValue_5_tSalesforceInput_8);
                Object columnValue_6_tSalesforceInput_8 = outgoingEnforcer_tSalesforceInput_8.get(6);
                        row49.OldValue = (String) (columnValue_6_tSalesforceInput_8);
                Object columnValue_7_tSalesforceInput_8 = outgoingEnforcer_tSalesforceInput_8.get(7);
                        row49.NewValue = (String) (columnValue_7_tSalesforceInput_8);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_8) {
        	java.util.Map<String,Object> info_tSalesforceInput_8 = e_tSalesforceInput_8.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_8 = null;
            	if(info_tSalesforceInput_8.containsKey("error")){
            		errorMessage_tSalesforceInput_8 = info_tSalesforceInput_8.get("error");
        		}else if(info_tSalesforceInput_8.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_8 = info_tSalesforceInput_8.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_8 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_8 = "Row "+ nb_line_tSalesforceInput_8 + ": "+errorMessage_tSalesforceInput_8;
    			System.err.println(errorMessage_tSalesforceInput_8);
            	// If the record is reject, the main line record should put NULL
            	row49 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_8 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_8 = null;


 



/**
 * [tSalesforceInput_8 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_8 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_8";

	


 


	tos_count_tSalesforceInput_8++;

/**
 * [tSalesforceInput_8 main ] stop
 */
	
	/**
	 * [tSalesforceInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_8";

	


 



/**
 * [tSalesforceInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row49");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

out24 = null;


// # Output table : 'out24'
out24_tmp.Id = row49.Id ;
out24_tmp.IsDeleted = row49.IsDeleted ;
out24_tmp.ParentId = row49.ParentId ;
out24_tmp.CreatedById = row49.CreatedById ;
out24_tmp.CreatedDate = (row49.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row49.CreatedDate))).getTime())/1000 ;
out24_tmp.Field = row49.Field ;
out24_tmp.OldValue = row49.OldValue ;
out24_tmp.NewValue = row49.NewValue ;
out24 = out24_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "out24"
if(out24 != null) { 



	
	/**
	 * [tWriteJSONField_8_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_8";
	
	currentComponent="tWriteJSONField_8_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out24");
					}
					

	if(txf_tWriteJSONField_8_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_8_Out.getCurrentComponent();
		throw txf_tWriteJSONField_8_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_8_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_8_Out.getLastError();
	}
	nb_line_tWriteJSONField_8_Out++;
	valueMap_tWriteJSONField_8_Out.clear();
	arraysValueMap_tWriteJSONField_8_Out.clear();
	valueMap_tWriteJSONField_8_Out.put("Id",
	(
            out24.Id.toString()
		));
	arraysValueMap_tWriteJSONField_8_Out.put("Id",
	(
            out24.Id.toString()
		));
	valueMap_tWriteJSONField_8_Out.put("IsDeleted",
	(
            String.valueOf(out24.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_8_Out.put("IsDeleted",
	(
            String.valueOf(out24.IsDeleted)
		));
	valueMap_tWriteJSONField_8_Out.put("ParentId",
	(
            out24.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_8_Out.put("ParentId",
	(
            out24.ParentId.toString()
		));
	valueMap_tWriteJSONField_8_Out.put("CreatedById",
	(
            out24.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_8_Out.put("CreatedById",
	(
            out24.CreatedById.toString()
		));
	valueMap_tWriteJSONField_8_Out.put("CreatedDate",
	(
            String.valueOf(out24.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_8_Out.put("CreatedDate",
	(
            String.valueOf(out24.CreatedDate)
		));
	valueMap_tWriteJSONField_8_Out.put("Field",
	(
            out24.Field.toString()
		));
	arraysValueMap_tWriteJSONField_8_Out.put("Field",
	(
            out24.Field.toString()
		));
	valueMap_tWriteJSONField_8_Out.put("OldValue",
	(
		out24.OldValue != null?
            out24.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_8_Out.put("OldValue",
	(
		out24.OldValue != null?
            out24.OldValue.toString():null
		));
	valueMap_tWriteJSONField_8_Out.put("NewValue",
	(
		out24.NewValue != null?
            out24.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_8_Out.put("NewValue",
	(
		out24.NewValue != null?
            out24.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_8_Out = "";
	if(strCompCache_tWriteJSONField_8_Out==null){
		strCompCache_tWriteJSONField_8_Out=strTemp_tWriteJSONField_8_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_8_Out.replaceDefaultNameSpace(doc_tWriteJSONField_8_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_8_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_8_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_8_Out, format_tWriteJSONField_8_Out);
			output_tWriteJSONField_8_Out.write(doc_tWriteJSONField_8_Out);
		    output_tWriteJSONField_8_Out.close();
			
				  		  row48Struct row_tWriteJSONField_8_Out = new row48Struct();
						  
					     		row_tWriteJSONField_8_Out.data = strWriter_tWriteJSONField_8_Out.toString();
					     		listGroupby_tWriteJSONField_8_Out.add(row_tWriteJSONField_8_Out);
					
		    doc_tWriteJSONField_8_Out.clearContent();
			needRoot_tWriteJSONField_8_Out = true;
			for(int i_tWriteJSONField_8_Out=0;i_tWriteJSONField_8_Out<orders_tWriteJSONField_8_Out.length;i_tWriteJSONField_8_Out++){
				orders_tWriteJSONField_8_Out[i_tWriteJSONField_8_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_8_Out != null && groupbyList_tWriteJSONField_8_Out.size() >= 0){
				groupbyList_tWriteJSONField_8_Out.clear();
			}
			strCompCache_tWriteJSONField_8_Out=strTemp_tWriteJSONField_8_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_8_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_8_Out) {
		needRoot_tWriteJSONField_8_Out=false;
		org.dom4j.Element root_tWriteJSONField_8_Out = doc_tWriteJSONField_8_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_8_Out = root_tWriteJSONField_8_Out;
		org.dom4j.Element root_0_tWriteJSONField_8_Out = root_tWriteJSONField_8_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_8_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_8_Out .setText(root_0_tWriteJSONField_8_Out,
		valueMap_tWriteJSONField_8_Out.get("IsDeleted"));
            root_0_tWriteJSONField_8_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_8_Out .setText(root_0_tWriteJSONField_8_Out,"null");
			root_0_tWriteJSONField_8_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_8_Out = root_tWriteJSONField_8_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_8_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_8_Out .setText(root_1_tWriteJSONField_8_Out,
		valueMap_tWriteJSONField_8_Out.get("ParentId"));
			root_1_tWriteJSONField_8_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_8_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_8_Out .setText(root_1_tWriteJSONField_8_Out,"null");
			root_1_tWriteJSONField_8_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_8_Out = root_tWriteJSONField_8_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_8_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_8_Out .setText(root_2_tWriteJSONField_8_Out,
		valueMap_tWriteJSONField_8_Out.get("CreatedById"));
			root_2_tWriteJSONField_8_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_8_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_8_Out .setText(root_2_tWriteJSONField_8_Out,"null");
			root_2_tWriteJSONField_8_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_8_Out = root_tWriteJSONField_8_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_8_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_8_Out .setText(root_3_tWriteJSONField_8_Out,
		valueMap_tWriteJSONField_8_Out.get("CreatedDate"));
            root_3_tWriteJSONField_8_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_8_Out .setText(root_3_tWriteJSONField_8_Out,"null");
			root_3_tWriteJSONField_8_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_8_Out = root_tWriteJSONField_8_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_8_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_8_Out .setText(root_4_tWriteJSONField_8_Out,
		valueMap_tWriteJSONField_8_Out.get("Field"));
			root_4_tWriteJSONField_8_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_8_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_8_Out .setText(root_4_tWriteJSONField_8_Out,"null");
			root_4_tWriteJSONField_8_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_8_Out = root_tWriteJSONField_8_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_8_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_8_Out .setText(root_5_tWriteJSONField_8_Out,
		valueMap_tWriteJSONField_8_Out.get("OldValue"));
			root_5_tWriteJSONField_8_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_8_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_8_Out .setText(root_5_tWriteJSONField_8_Out,"null");
			root_5_tWriteJSONField_8_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_8_Out = root_tWriteJSONField_8_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_8_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_8_Out .setText(root_6_tWriteJSONField_8_Out,
		valueMap_tWriteJSONField_8_Out.get("NewValue"));
			root_6_tWriteJSONField_8_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_8_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_8_Out .setText(root_6_tWriteJSONField_8_Out,"null");
			root_6_tWriteJSONField_8_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_8_Out = subTreeRootParent_tWriteJSONField_8_Out;
	}else{
		subTreeRootParent_tWriteJSONField_8_Out=root4Group_tWriteJSONField_8_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_8_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_8_Out[0]==0){
        	orders_tWriteJSONField_8_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_8_Out.length){
        		orders_tWriteJSONField_8_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_8_Out.elements().add(orders_tWriteJSONField_8_Out[0]++,loop_tWriteJSONField_8_Out);
		if(
		valueMap_tWriteJSONField_8_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_8_Out .setText(loop_tWriteJSONField_8_Out,
		valueMap_tWriteJSONField_8_Out.get("Id"));
			loop_tWriteJSONField_8_Out.addAttribute("type", "string");
			loop_tWriteJSONField_8_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_8_Out .setText(loop_tWriteJSONField_8_Out,"null");
			loop_tWriteJSONField_8_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_8_Out++;

/**
 * [tWriteJSONField_8_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_8_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_8";
	
	currentComponent="tWriteJSONField_8_Out";

	

 



/**
 * [tWriteJSONField_8_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_8_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_8";
	
	currentComponent="tWriteJSONField_8_Out";

	

 



/**
 * [tWriteJSONField_8_Out process_data_end ] stop
 */

} // End of branch "out24"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_8";

	


 



/**
 * [tSalesforceInput_8 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_8 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_8";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_8", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_8.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_8 = reader_tSalesforceInput_8.getReturnValues();
if(resultMap_tSalesforceInput_8!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_8 : resultMap_tSalesforceInput_8.entrySet()) {
		switch(entry_tSalesforceInput_8.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_8.setComponentData("tSalesforceInput_8", "ERROR_MESSAGE", entry_tSalesforceInput_8.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_8.setComponentData("tSalesforceInput_8", "NB_LINE", entry_tSalesforceInput_8.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_8.setComponentData("tSalesforceInput_8", "NB_SUCCESS", entry_tSalesforceInput_8.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_8.setComponentData("tSalesforceInput_8", "NB_REJECT", entry_tSalesforceInput_8.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_8 = new StringBuilder();
            for (int i_tSalesforceInput_8 = 0; i_tSalesforceInput_8 < entry_tSalesforceInput_8.getKey().length(); i_tSalesforceInput_8++) {
                char ch_tSalesforceInput_8 = entry_tSalesforceInput_8.getKey().charAt(i_tSalesforceInput_8);
                if(Character.isUpperCase(ch_tSalesforceInput_8) && i_tSalesforceInput_8> 0) {
                	studio_key_tSalesforceInput_8.append('_');
                }
                studio_key_tSalesforceInput_8.append(ch_tSalesforceInput_8);
            }
			container_tSalesforceInput_8.setComponentData("tSalesforceInput_8", studio_key_tSalesforceInput_8.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_8.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_8", true);
end_Hash.put("tSalesforceInput_8", System.currentTimeMillis());




/**
 * [tSalesforceInput_8 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row49");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tWriteJSONField_8_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_8";
	
	currentComponent="tWriteJSONField_8_Out";

	

if(nb_line_tWriteJSONField_8_Out > 0){  
    nestXMLTool_tWriteJSONField_8_Out.replaceDefaultNameSpace(doc_tWriteJSONField_8_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_8_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_8_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_8_Out, format_tWriteJSONField_8_Out);
	output_tWriteJSONField_8_Out.write(doc_tWriteJSONField_8_Out);
    output_tWriteJSONField_8_Out.close();
					row48Struct row_tWriteJSONField_8_Out = new row48Struct();
						  
					     		row_tWriteJSONField_8_Out.data = strWriter_tWriteJSONField_8_Out.toString();
					     		listGroupby_tWriteJSONField_8_Out.add(row_tWriteJSONField_8_Out);
		    		

}
globalMap.put("tWriteJSONField_8_Out_NB_LINE",nb_line_tWriteJSONField_8_Out);
globalMap.put("tWriteJSONField_8_In_FINISH" + (listGroupby_tWriteJSONField_8_Out==null?"":listGroupby_tWriteJSONField_8_Out.hashCode()), "true");
	
		txf_tWriteJSONField_8_Out.join();
		
		if(txf_tWriteJSONField_8_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_8_Out.getCurrentComponent();
			throw txf_tWriteJSONField_8_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_8_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_8_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_8_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out24");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_8_Out", true);
end_Hash.put("tWriteJSONField_8_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_8_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_8 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_8";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_8")==null){
    if(resourceMap.get("reader_tSalesforceInput_8")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_8")).close();
		} catch (java.io.IOException e_tSalesforceInput_8) {
			String errorMessage_tSalesforceInput_8 = "failed to release the resource in tSalesforceInput_8 :" + e_tSalesforceInput_8.getMessage();
			System.err.println(errorMessage_tSalesforceInput_8);
		}
	}
}
 



/**
 * [tSalesforceInput_8 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_8_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_8";
	
	currentComponent="tWriteJSONField_8_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_8_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_8_In");
		if(resourceMap.get("finish_tWriteJSONField_8_Out") == null){
			globalMap.put("tWriteJSONField_8_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_8_Out==null?"":listGroupby_tWriteJSONField_8_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_8_Out != null) {
		globalMap.put("tWriteJSONField_8_In_FINISH" + (listGroupby_tWriteJSONField_8_Out==null?"":listGroupby_tWriteJSONField_8_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_8_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_8_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_8", false);
		start_Hash.put("tFileArchive_8", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_8";

	
		int tos_count_tFileArchive_8 = 0;
		

 



/**
 * [tFileArchive_8 begin ] stop
 */
	
	/**
	 * [tFileArchive_8 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_8";

	

	

		String sourceFile_tFileArchive_8 = context.staging_S3_dir + "noodlecrm__inquiry__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_8), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_8 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_8 = context.staging_S3_dir + "noodlecrm__inquiry__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_8 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_8, zipFile_tFileArchive_8);
    zip_tFileArchive_8.setOverwriteExistTargetZip(true);
	zip_tFileArchive_8.setMakeTargetDir(true);
	zip_tFileArchive_8.setCompressLevel(9);
	zip_tFileArchive_8.setArchiveFormat("gzip");
	zip_tFileArchive_8.setAllFiles(true);
	
	
		zip_tFileArchive_8.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_8_ARCHIVE_FILEPATH",zipFile_tFileArchive_8);
   
   globalMap.put("tFileArchive_8_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_8).getName());

   zip_tFileArchive_8.doZip();


 


	tos_count_tFileArchive_8++;

/**
 * [tFileArchive_8 main ] stop
 */
	
	/**
	 * [tFileArchive_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_8";

	

 



/**
 * [tFileArchive_8 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_8";

	

 



/**
 * [tFileArchive_8 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_8 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_8";

	

 

ok_Hash.put("tFileArchive_8", true);
end_Hash.put("tFileArchive_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk70", 0, "ok");
				}
				tS3Put_8Process(globalMap);



/**
 * [tFileArchive_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_8 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_8";

	

 



/**
 * [tFileArchive_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_8_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_8", false);
		start_Hash.put("tS3Put_8", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_8";

	
		int tos_count_tS3Put_8 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_8 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_8 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__inquiry__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__inquiry__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_8 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_8 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_8 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_8 = context.staging_S3_dir + "noodlecrm__inquiry__history.json.gz";
	
	boolean useStream_tS3Put_8 = false;
	java.io.InputStream uploadStream_tS3Put_8 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_8 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_8 instanceof String){
		    useStream_tS3Put_8 = false;
		}else if(fileOrStream_tS3Put_8 instanceof java.io.InputStream){
		    useStream_tS3Put_8 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_8 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_8) {
				java.io.File inputFile_tS3Put_8 = new java.io.File((String)fileOrStream_tS3Put_8);
				
				long multipart_upload_threshold_tS3Put_8 = 5 * 1024 * 1024;
				
    		tm_tS3Put_8 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_8)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_8)
    			.withS3Client(conn_tS3Put_8)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_8 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_8, inputFile_tS3Put_8).withMetadata(objectMetadata_tS3Put_8);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_8 = tm_tS3Put_8.upload(putRequest_tS3Put_8);
  		
  			upload_tS3Put_8.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_8 = ((java.io.InputStream)fileOrStream_tS3Put_8);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_8 = new S3StreamUtil();
    		byte[] buffer_tS3Put_8 = new byte[partSizeInBytes_tS3Put_8];
    		sourceStream_tS3Put_8.read(buffer_tS3Put_8);
    		long curPartSize_tS3Put_8 = streamUtil_tS3Put_8.getLength(buffer_tS3Put_8);
    		boolean multiUpload_tS3Put_8 = curPartSize_tS3Put_8 == partSizeInBytes_tS3Put_8;
    		
    		if(!multiUpload_tS3Put_8) {
    				objectMetadata_tS3Put_8.setContentLength(curPartSize_tS3Put_8);
    				uploadStream_tS3Put_8 = new java.io.ByteArrayInputStream(buffer_tS3Put_8,0,Long.valueOf(curPartSize_tS3Put_8).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_8 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_8, uploadStream_tS3Put_8, objectMetadata_tS3Put_8);
			
    				
    				

    				
    				conn_tS3Put_8.putObject(putRequest_tS3Put_8);
    		} else {
    				uploadStream_tS3Put_8 = new java.io.ByteArrayInputStream(buffer_tS3Put_8);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_8 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_8 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_8, objectMetadata_tS3Put_8);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_8 = conn_tS3Put_8.initiateMultipartUpload(putRequest_tS3Put_8);
      			String uploadId_tS3Put_8 = initResponse_tS3Put_8.getUploadId();
      			int partNumber_tS3Put_8 = 1;
      			boolean streamHasNext_tS3Put_8 = true;
      			byte[] probeAvailability_tS3Put_8 = new byte[1];
				try {
					while (streamHasNext_tS3Put_8) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_8 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_8)
						.withUploadId(uploadId_tS3Put_8)
                    	.withPartNumber(partNumber_tS3Put_8)
						.withPartSize(curPartSize_tS3Put_8);
            		    uploadRequest_tS3Put_8.setInputStream(uploadStream_tS3Put_8);
            		    streamHasNext_tS3Put_8 = sourceStream_tS3Put_8.read(probeAvailability_tS3Put_8) != -1;
            		    if(!streamHasNext_tS3Put_8){
                    	    uploadRequest_tS3Put_8.setLastPart(true);
                    	}

                		partTags_tS3Put_8.add(conn_tS3Put_8.uploadPart(uploadRequest_tS3Put_8).getPartETag());
                  	    partNumber_tS3Put_8++;

          		     	if(uploadStream_tS3Put_8!=null){
      		         			uploadStream_tS3Put_8.close();
          		     	}
          		     	buffer_tS3Put_8 = new byte[partSizeInBytes_tS3Put_8];
          		     	sourceStream_tS3Put_8.read(buffer_tS3Put_8,1,partSizeInBytes_tS3Put_8-1);
          		     	buffer_tS3Put_8[0] = probeAvailability_tS3Put_8[0];
          		     	probeAvailability_tS3Put_8 = new byte[1];
          		     	curPartSize_tS3Put_8 = streamUtil_tS3Put_8.getLength(buffer_tS3Put_8);
          		     	uploadStream_tS3Put_8 = new java.io.ByteArrayInputStream(buffer_tS3Put_8);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_8 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_8,
                        uploadId_tS3Put_8, partTags_tS3Put_8);
            		conn_tS3Put_8.completeMultipartUpload(compRequest_tS3Put_8);
            } catch (java.lang.Exception uploadException_tS3Put_8) {
  							conn_tS3Put_8.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_8, uploadId_tS3Put_8));
    						throw uploadException_tS3Put_8;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_8){
		
			throw(e_tS3Put_8);
		
	}finally{
		if(useStream_tS3Put_8 && uploadStream_tS3Put_8!=null){
    	uploadStream_tS3Put_8.close();
    }
    
    if(tm_tS3Put_8 != null){
        tm_tS3Put_8.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_8 begin ] stop
 */
	
	/**
	 * [tS3Put_8 main ] start
	 */

	

	
	
	currentComponent="tS3Put_8";

	

 


	tos_count_tS3Put_8++;

/**
 * [tS3Put_8 main ] stop
 */
	
	/**
	 * [tS3Put_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_8";

	

 



/**
 * [tS3Put_8 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_8";

	

 



/**
 * [tS3Put_8 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_8 end ] start
	 */

	

	
	
	currentComponent="tS3Put_8";

	

 

ok_Hash.put("tS3Put_8", true);
end_Hash.put("tS3Put_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk71", 0, "ok");
				}
				tJava_26Process(globalMap);



/**
 * [tS3Put_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_8 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_8";

	

 



/**
 * [tS3Put_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_8_SUBPROCESS_STATE", 1);
	}
	

public void tJava_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_26", false);
		start_Hash.put("tJava_26", System.currentTimeMillis());
		
	
	currentComponent="tJava_26";

	
		int tos_count_tJava_26 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_8_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_8_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_26 begin ] stop
 */
	
	/**
	 * [tJava_26 main ] start
	 */

	

	
	
	currentComponent="tJava_26";

	

 


	tos_count_tJava_26++;

/**
 * [tJava_26 main ] stop
 */
	
	/**
	 * [tJava_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_26";

	

 



/**
 * [tJava_26 process_data_begin ] stop
 */
	
	/**
	 * [tJava_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_26";

	

 



/**
 * [tJava_26 process_data_end ] stop
 */
	
	/**
	 * [tJava_26 end ] start
	 */

	

	
	
	currentComponent="tJava_26";

	

 

ok_Hash.put("tJava_26", true);
end_Hash.put("tJava_26", System.currentTimeMillis());




/**
 * [tJava_26 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_26 finally ] start
	 */

	

	
	
	currentComponent="tJava_26";

	

 



/**
 * [tJava_26 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_26_SUBPROCESS_STATE", 1);
	}
	

public void tDie_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_8", false);
		start_Hash.put("tDie_8", System.currentTimeMillis());
		
	
	currentComponent="tDie_8";

	
		int tos_count_tDie_8 = 0;
		

 



/**
 * [tDie_8 begin ] stop
 */
	
	/**
	 * [tDie_8 main ] start
	 */

	

	
	
	currentComponent="tDie_8";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_8", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_8_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_8_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_8_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_8) {
		logIgnoredError(String.format("tDie_8 - tDie failed to log message due to internal error: %s", e_tDie_8), e_tDie_8);
	}
	
	currentComponent = "tDie_8";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_8_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_8++;

/**
 * [tDie_8 main ] stop
 */
	
	/**
	 * [tDie_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_8";

	

 



/**
 * [tDie_8 process_data_begin ] stop
 */
	
	/**
	 * [tDie_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_8";

	

 



/**
 * [tDie_8 process_data_end ] stop
 */
	
	/**
	 * [tDie_8 end ] start
	 */

	

	
	
	currentComponent="tDie_8";

	

 

ok_Hash.put("tDie_8", true);
end_Hash.put("tDie_8", System.currentTimeMillis());




/**
 * [tDie_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_8 finally ] start
	 */

	

	
	
	currentComponent="tDie_8";

	

 



/**
 * [tDie_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_8_SUBPROCESS_STATE", 1);
	}
	

public void tJava_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_15", false);
		start_Hash.put("tJava_15", System.currentTimeMillis());
		
	
	currentComponent="tJava_15";

	
		int tos_count_tJava_15 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Program_Assignment__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 




System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_15 begin ] stop
 */
	
	/**
	 * [tJava_15 main ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 


	tos_count_tJava_15++;

/**
 * [tJava_15 main ] stop
 */
	
	/**
	 * [tJava_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 



/**
 * [tJava_15 process_data_begin ] stop
 */
	
	/**
	 * [tJava_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 



/**
 * [tJava_15 process_data_end ] stop
 */
	
	/**
	 * [tJava_15 end ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 

ok_Hash.put("tJava_15", true);
end_Hash.put("tJava_15", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk38", 0, "ok");
				}
				tSalesforceInput_12Process(globalMap);



/**
 * [tJava_15 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_15:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tJava_16Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_15 finally ] start
	 */

	

	
	
	currentComponent="tJava_15";

	

 



/**
 * [tJava_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}
	


public static class out28Struct implements routines.system.IPersistableRow<out28Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row57Struct implements routines.system.IPersistableRow<row57Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row57Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row57Struct row57 = new row57Struct();
out28Struct out28 = new out28Struct();





	
	/**
	 * [tWriteJSONField_12_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_12_Out", false);
		start_Hash.put("tWriteJSONField_12_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_12";
	
	currentComponent="tWriteJSONField_12_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out28");
					}
				
		int tos_count_tWriteJSONField_12_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_12_Out = 0;
				boolean needRoot_tWriteJSONField_12_Out  = true;
				
				String  strCompCache_tWriteJSONField_12_Out= null;		
				
						        java.util.Queue<row56Struct> listGroupby_tWriteJSONField_12_Out = new java.util.concurrent.ConcurrentLinkedQueue<row56Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_12_Out extends Thread {
						
									    java.util.Queue<row56Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_12_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_12_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_12_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_12_In", queue);
							globalMap.put("flows_tWriteJSONField_12_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_12_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_12_Out txf_tWriteJSONField_12_Out = new ThreadXMLField_tWriteJSONField_12_Out(listGroupby_tWriteJSONField_12_Out);
					
					txf_tWriteJSONField_12_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_12_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_12_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_12_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_12_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_12_Out nestXMLTool_tWriteJSONField_12_Out = new NestXMLTool_tWriteJSONField_12_Out();

out28Struct  rowStructOutput_tWriteJSONField_12_Out = new out28Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_12_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_12_Out = null;
org.dom4j.Document doc_tWriteJSONField_12_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_12_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_12_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_12_Out.setTrimText(false);
format_tWriteJSONField_12_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_12_Out = new int[1];

 



/**
 * [tWriteJSONField_12_Out begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row57");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
out28Struct out28_tmp = new out28Struct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_12", false);
		start_Hash.put("tSalesforceInput_12", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_12";

	
		int tos_count_tSalesforceInput_12 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_12 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_12 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_12.createRuntimeProperties();
 		                    props_tSalesforceInput_12.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_12.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_12.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_12.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_12.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_12.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_12.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_12.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_12.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_12.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_12.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_12.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_12.module.setValue("moduleName",
 		                    "NoodleCRM__Program_Assignment__History");
 		                    
 		                    props_tSalesforceInput_12.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_12.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_12.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_12.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_12.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_12_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Program_Assignment__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Program_Assignment__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_12_1_fisrt sst_tSalesforceInput_12_1_fisrt = new SchemaSettingTool_tSalesforceInput_12_1_fisrt();
 		                    
 		                    props_tSalesforceInput_12.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_12_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_12.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_12 = props_tSalesforceInput_12.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_12 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_12 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_12 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_12.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_12);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_12.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_12 = props_tSalesforceInput_12.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_12 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_12 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_12 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_12.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_12);
        }
    }
globalMap.put("tSalesforceInput_12_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_12);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_12= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_12_MAPPINGS_URL", mappings_url_tSalesforceInput_12);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_12 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_12";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_12 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_12 = null;
topology_tSalesforceInput_12 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_12 = def_tSalesforceInput_12.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_12, topology_tSalesforceInput_12);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_12 = def_tSalesforceInput_12.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_12 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_12.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_12 = componentRuntime_tSalesforceInput_12.initialize(container_tSalesforceInput_12, props_tSalesforceInput_12);

if (initVr_tSalesforceInput_12.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_12.getMessage());
}

if(componentRuntime_tSalesforceInput_12 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_12 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_12;
	compDriverInitialization_tSalesforceInput_12.runAtDriver(container_tSalesforceInput_12);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_12 = null;
if(componentRuntime_tSalesforceInput_12 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_12 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_12;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_12 = sourceOrSink_tSalesforceInput_12.validate(container_tSalesforceInput_12);
	if (vr_tSalesforceInput_12.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_12.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_12 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_12;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_12 =
            source_tSalesforceInput_12.createReader(container_tSalesforceInput_12);
	reader_tSalesforceInput_12 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_12, container_tSalesforceInput_12);

        boolean multi_output_is_allowed_tSalesforceInput_12 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_12 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_12.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_12 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_12 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_12 = props_tSalesforceInput_12.getSchema(c_tSalesforceInput_12, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_12 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_12, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_12 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_12 = reader_tSalesforceInput_12.start();

    resourceMap.put("reader_tSalesforceInput_12", reader_tSalesforceInput_12);

    for (; available_tSalesforceInput_12; available_tSalesforceInput_12 = reader_tSalesforceInput_12.advance()) {
    	nb_line_tSalesforceInput_12++;

    	
        if (multi_output_is_allowed_tSalesforceInput_12) {
                row57 = null;

        }

        try {
            Object data_tSalesforceInput_12 = reader_tSalesforceInput_12.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_12) {
                    row57 = new row57Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_12 == null) {
            factory_tSalesforceInput_12 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_12.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_12.setWrapped(factory_tSalesforceInput_12.convertToAvro(data_tSalesforceInput_12));
                Object columnValue_0_tSalesforceInput_12 = outgoingEnforcer_tSalesforceInput_12.get(0);
                        row57.Id = (String) (columnValue_0_tSalesforceInput_12);
                Object columnValue_1_tSalesforceInput_12 = outgoingEnforcer_tSalesforceInput_12.get(1);
                    if (columnValue_1_tSalesforceInput_12 == null) {
                        row57.IsDeleted = false;
                    } else {
                            row57.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_12);
                    }
                Object columnValue_2_tSalesforceInput_12 = outgoingEnforcer_tSalesforceInput_12.get(2);
                        row57.ParentId = (String) (columnValue_2_tSalesforceInput_12);
                Object columnValue_3_tSalesforceInput_12 = outgoingEnforcer_tSalesforceInput_12.get(3);
                        row57.CreatedById = (String) (columnValue_3_tSalesforceInput_12);
                Object columnValue_4_tSalesforceInput_12 = outgoingEnforcer_tSalesforceInput_12.get(4);
                        row57.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_12);
                Object columnValue_5_tSalesforceInput_12 = outgoingEnforcer_tSalesforceInput_12.get(5);
                        row57.Field = (String) (columnValue_5_tSalesforceInput_12);
                Object columnValue_6_tSalesforceInput_12 = outgoingEnforcer_tSalesforceInput_12.get(6);
                        row57.OldValue = (String) (columnValue_6_tSalesforceInput_12);
                Object columnValue_7_tSalesforceInput_12 = outgoingEnforcer_tSalesforceInput_12.get(7);
                        row57.NewValue = (String) (columnValue_7_tSalesforceInput_12);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_12) {
        	java.util.Map<String,Object> info_tSalesforceInput_12 = e_tSalesforceInput_12.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_12 = null;
            	if(info_tSalesforceInput_12.containsKey("error")){
            		errorMessage_tSalesforceInput_12 = info_tSalesforceInput_12.get("error");
        		}else if(info_tSalesforceInput_12.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_12 = info_tSalesforceInput_12.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_12 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_12 = "Row "+ nb_line_tSalesforceInput_12 + ": "+errorMessage_tSalesforceInput_12;
    			System.err.println(errorMessage_tSalesforceInput_12);
            	// If the record is reject, the main line record should put NULL
            	row57 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_12 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_12 = null;


 



/**
 * [tSalesforceInput_12 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_12 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_12";

	


 


	tos_count_tSalesforceInput_12++;

/**
 * [tSalesforceInput_12 main ] stop
 */
	
	/**
	 * [tSalesforceInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_12";

	


 



/**
 * [tSalesforceInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row57");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

out28 = null;


// # Output table : 'out28'
out28_tmp.Id = row57.Id ;
out28_tmp.IsDeleted = row57.IsDeleted ;
out28_tmp.ParentId = row57.ParentId ;
out28_tmp.CreatedById = row57.CreatedById ;
out28_tmp.CreatedDate = (row57.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row57.CreatedDate))).getTime())/1000 ;
out28_tmp.Field = row57.Field ;
out28_tmp.OldValue = row57.OldValue ;
out28_tmp.NewValue = row57.NewValue ;
out28 = out28_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "out28"
if(out28 != null) { 



	
	/**
	 * [tWriteJSONField_12_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_12";
	
	currentComponent="tWriteJSONField_12_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out28");
					}
					

	if(txf_tWriteJSONField_12_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_12_Out.getCurrentComponent();
		throw txf_tWriteJSONField_12_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_12_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_12_Out.getLastError();
	}
	nb_line_tWriteJSONField_12_Out++;
	valueMap_tWriteJSONField_12_Out.clear();
	arraysValueMap_tWriteJSONField_12_Out.clear();
	valueMap_tWriteJSONField_12_Out.put("Id",
	(
            out28.Id.toString()
		));
	arraysValueMap_tWriteJSONField_12_Out.put("Id",
	(
            out28.Id.toString()
		));
	valueMap_tWriteJSONField_12_Out.put("IsDeleted",
	(
            String.valueOf(out28.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_12_Out.put("IsDeleted",
	(
            String.valueOf(out28.IsDeleted)
		));
	valueMap_tWriteJSONField_12_Out.put("ParentId",
	(
            out28.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_12_Out.put("ParentId",
	(
            out28.ParentId.toString()
		));
	valueMap_tWriteJSONField_12_Out.put("CreatedById",
	(
            out28.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_12_Out.put("CreatedById",
	(
            out28.CreatedById.toString()
		));
	valueMap_tWriteJSONField_12_Out.put("CreatedDate",
	(
            String.valueOf(out28.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_12_Out.put("CreatedDate",
	(
            String.valueOf(out28.CreatedDate)
		));
	valueMap_tWriteJSONField_12_Out.put("Field",
	(
            out28.Field.toString()
		));
	arraysValueMap_tWriteJSONField_12_Out.put("Field",
	(
            out28.Field.toString()
		));
	valueMap_tWriteJSONField_12_Out.put("OldValue",
	(
		out28.OldValue != null?
            out28.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_12_Out.put("OldValue",
	(
		out28.OldValue != null?
            out28.OldValue.toString():null
		));
	valueMap_tWriteJSONField_12_Out.put("NewValue",
	(
		out28.NewValue != null?
            out28.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_12_Out.put("NewValue",
	(
		out28.NewValue != null?
            out28.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_12_Out = "";
	if(strCompCache_tWriteJSONField_12_Out==null){
		strCompCache_tWriteJSONField_12_Out=strTemp_tWriteJSONField_12_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_12_Out.replaceDefaultNameSpace(doc_tWriteJSONField_12_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_12_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_12_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_12_Out, format_tWriteJSONField_12_Out);
			output_tWriteJSONField_12_Out.write(doc_tWriteJSONField_12_Out);
		    output_tWriteJSONField_12_Out.close();
			
				  		  row56Struct row_tWriteJSONField_12_Out = new row56Struct();
						  
					     		row_tWriteJSONField_12_Out.data = strWriter_tWriteJSONField_12_Out.toString();
					     		listGroupby_tWriteJSONField_12_Out.add(row_tWriteJSONField_12_Out);
					
		    doc_tWriteJSONField_12_Out.clearContent();
			needRoot_tWriteJSONField_12_Out = true;
			for(int i_tWriteJSONField_12_Out=0;i_tWriteJSONField_12_Out<orders_tWriteJSONField_12_Out.length;i_tWriteJSONField_12_Out++){
				orders_tWriteJSONField_12_Out[i_tWriteJSONField_12_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_12_Out != null && groupbyList_tWriteJSONField_12_Out.size() >= 0){
				groupbyList_tWriteJSONField_12_Out.clear();
			}
			strCompCache_tWriteJSONField_12_Out=strTemp_tWriteJSONField_12_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_12_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_12_Out) {
		needRoot_tWriteJSONField_12_Out=false;
		org.dom4j.Element root_tWriteJSONField_12_Out = doc_tWriteJSONField_12_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_12_Out = root_tWriteJSONField_12_Out;
		org.dom4j.Element root_0_tWriteJSONField_12_Out = root_tWriteJSONField_12_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_12_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_12_Out .setText(root_0_tWriteJSONField_12_Out,
		valueMap_tWriteJSONField_12_Out.get("IsDeleted"));
            root_0_tWriteJSONField_12_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_12_Out .setText(root_0_tWriteJSONField_12_Out,"null");
			root_0_tWriteJSONField_12_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_12_Out = root_tWriteJSONField_12_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_12_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_12_Out .setText(root_1_tWriteJSONField_12_Out,
		valueMap_tWriteJSONField_12_Out.get("ParentId"));
			root_1_tWriteJSONField_12_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_12_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_12_Out .setText(root_1_tWriteJSONField_12_Out,"null");
			root_1_tWriteJSONField_12_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_12_Out = root_tWriteJSONField_12_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_12_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_12_Out .setText(root_2_tWriteJSONField_12_Out,
		valueMap_tWriteJSONField_12_Out.get("CreatedById"));
			root_2_tWriteJSONField_12_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_12_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_12_Out .setText(root_2_tWriteJSONField_12_Out,"null");
			root_2_tWriteJSONField_12_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_12_Out = root_tWriteJSONField_12_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_12_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_12_Out .setText(root_3_tWriteJSONField_12_Out,
		valueMap_tWriteJSONField_12_Out.get("CreatedDate"));
            root_3_tWriteJSONField_12_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_12_Out .setText(root_3_tWriteJSONField_12_Out,"null");
			root_3_tWriteJSONField_12_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_12_Out = root_tWriteJSONField_12_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_12_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_12_Out .setText(root_4_tWriteJSONField_12_Out,
		valueMap_tWriteJSONField_12_Out.get("Field"));
			root_4_tWriteJSONField_12_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_12_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_12_Out .setText(root_4_tWriteJSONField_12_Out,"null");
			root_4_tWriteJSONField_12_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_12_Out = root_tWriteJSONField_12_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_12_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_12_Out .setText(root_5_tWriteJSONField_12_Out,
		valueMap_tWriteJSONField_12_Out.get("OldValue"));
			root_5_tWriteJSONField_12_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_12_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_12_Out .setText(root_5_tWriteJSONField_12_Out,"null");
			root_5_tWriteJSONField_12_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_12_Out = root_tWriteJSONField_12_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_12_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_12_Out .setText(root_6_tWriteJSONField_12_Out,
		valueMap_tWriteJSONField_12_Out.get("NewValue"));
			root_6_tWriteJSONField_12_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_12_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_12_Out .setText(root_6_tWriteJSONField_12_Out,"null");
			root_6_tWriteJSONField_12_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_12_Out = subTreeRootParent_tWriteJSONField_12_Out;
	}else{
		subTreeRootParent_tWriteJSONField_12_Out=root4Group_tWriteJSONField_12_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_12_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_12_Out[0]==0){
        	orders_tWriteJSONField_12_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_12_Out.length){
        		orders_tWriteJSONField_12_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_12_Out.elements().add(orders_tWriteJSONField_12_Out[0]++,loop_tWriteJSONField_12_Out);
		if(
		valueMap_tWriteJSONField_12_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_12_Out .setText(loop_tWriteJSONField_12_Out,
		valueMap_tWriteJSONField_12_Out.get("Id"));
			loop_tWriteJSONField_12_Out.addAttribute("type", "string");
			loop_tWriteJSONField_12_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_12_Out .setText(loop_tWriteJSONField_12_Out,"null");
			loop_tWriteJSONField_12_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_12_Out++;

/**
 * [tWriteJSONField_12_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_12_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_12";
	
	currentComponent="tWriteJSONField_12_Out";

	

 



/**
 * [tWriteJSONField_12_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_12_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_12";
	
	currentComponent="tWriteJSONField_12_Out";

	

 



/**
 * [tWriteJSONField_12_Out process_data_end ] stop
 */

} // End of branch "out28"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_12";

	


 



/**
 * [tSalesforceInput_12 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_12 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_12";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_12", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_12.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_12 = reader_tSalesforceInput_12.getReturnValues();
if(resultMap_tSalesforceInput_12!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_12 : resultMap_tSalesforceInput_12.entrySet()) {
		switch(entry_tSalesforceInput_12.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_12.setComponentData("tSalesforceInput_12", "ERROR_MESSAGE", entry_tSalesforceInput_12.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_12.setComponentData("tSalesforceInput_12", "NB_LINE", entry_tSalesforceInput_12.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_12.setComponentData("tSalesforceInput_12", "NB_SUCCESS", entry_tSalesforceInput_12.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_12.setComponentData("tSalesforceInput_12", "NB_REJECT", entry_tSalesforceInput_12.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_12 = new StringBuilder();
            for (int i_tSalesforceInput_12 = 0; i_tSalesforceInput_12 < entry_tSalesforceInput_12.getKey().length(); i_tSalesforceInput_12++) {
                char ch_tSalesforceInput_12 = entry_tSalesforceInput_12.getKey().charAt(i_tSalesforceInput_12);
                if(Character.isUpperCase(ch_tSalesforceInput_12) && i_tSalesforceInput_12> 0) {
                	studio_key_tSalesforceInput_12.append('_');
                }
                studio_key_tSalesforceInput_12.append(ch_tSalesforceInput_12);
            }
			container_tSalesforceInput_12.setComponentData("tSalesforceInput_12", studio_key_tSalesforceInput_12.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_12.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_12", true);
end_Hash.put("tSalesforceInput_12", System.currentTimeMillis());




/**
 * [tSalesforceInput_12 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row57");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tWriteJSONField_12_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_12";
	
	currentComponent="tWriteJSONField_12_Out";

	

if(nb_line_tWriteJSONField_12_Out > 0){  
    nestXMLTool_tWriteJSONField_12_Out.replaceDefaultNameSpace(doc_tWriteJSONField_12_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_12_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_12_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_12_Out, format_tWriteJSONField_12_Out);
	output_tWriteJSONField_12_Out.write(doc_tWriteJSONField_12_Out);
    output_tWriteJSONField_12_Out.close();
					row56Struct row_tWriteJSONField_12_Out = new row56Struct();
						  
					     		row_tWriteJSONField_12_Out.data = strWriter_tWriteJSONField_12_Out.toString();
					     		listGroupby_tWriteJSONField_12_Out.add(row_tWriteJSONField_12_Out);
		    		

}
globalMap.put("tWriteJSONField_12_Out_NB_LINE",nb_line_tWriteJSONField_12_Out);
globalMap.put("tWriteJSONField_12_In_FINISH" + (listGroupby_tWriteJSONField_12_Out==null?"":listGroupby_tWriteJSONField_12_Out.hashCode()), "true");
	
		txf_tWriteJSONField_12_Out.join();
		
		if(txf_tWriteJSONField_12_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_12_Out.getCurrentComponent();
			throw txf_tWriteJSONField_12_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_12_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_12_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_12_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out28");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_12_Out", true);
end_Hash.put("tWriteJSONField_12_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_12_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_12 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_12";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_12")==null){
    if(resourceMap.get("reader_tSalesforceInput_12")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_12")).close();
		} catch (java.io.IOException e_tSalesforceInput_12) {
			String errorMessage_tSalesforceInput_12 = "failed to release the resource in tSalesforceInput_12 :" + e_tSalesforceInput_12.getMessage();
			System.err.println(errorMessage_tSalesforceInput_12);
		}
	}
}
 



/**
 * [tSalesforceInput_12 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_12_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_12";
	
	currentComponent="tWriteJSONField_12_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_12_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_12_In");
		if(resourceMap.get("finish_tWriteJSONField_12_Out") == null){
			globalMap.put("tWriteJSONField_12_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_12_Out==null?"":listGroupby_tWriteJSONField_12_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_12_Out != null) {
		globalMap.put("tWriteJSONField_12_In_FINISH" + (listGroupby_tWriteJSONField_12_Out==null?"":listGroupby_tWriteJSONField_12_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_12_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_12_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_12", false);
		start_Hash.put("tFileArchive_12", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_12";

	
		int tos_count_tFileArchive_12 = 0;
		

 



/**
 * [tFileArchive_12 begin ] stop
 */
	
	/**
	 * [tFileArchive_12 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_12";

	

	

		String sourceFile_tFileArchive_12 = context.staging_S3_dir + "noodlecrm__program_assignment__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_12), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_12 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_12 = context.staging_S3_dir + "noodlecrm__program_assignment__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_12 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_12, zipFile_tFileArchive_12);
    zip_tFileArchive_12.setOverwriteExistTargetZip(true);
	zip_tFileArchive_12.setMakeTargetDir(true);
	zip_tFileArchive_12.setCompressLevel(9);
	zip_tFileArchive_12.setArchiveFormat("gzip");
	zip_tFileArchive_12.setAllFiles(true);
	
	
		zip_tFileArchive_12.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_12_ARCHIVE_FILEPATH",zipFile_tFileArchive_12);
   
   globalMap.put("tFileArchive_12_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_12).getName());

   zip_tFileArchive_12.doZip();


 


	tos_count_tFileArchive_12++;

/**
 * [tFileArchive_12 main ] stop
 */
	
	/**
	 * [tFileArchive_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_12";

	

 



/**
 * [tFileArchive_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_12";

	

 



/**
 * [tFileArchive_12 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_12 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_12";

	

 

ok_Hash.put("tFileArchive_12", true);
end_Hash.put("tFileArchive_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk81", 0, "ok");
				}
				tS3Put_12Process(globalMap);



/**
 * [tFileArchive_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_12 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_12";

	

 



/**
 * [tFileArchive_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_12_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_12", false);
		start_Hash.put("tS3Put_12", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_12";

	
		int tos_count_tS3Put_12 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_12 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_12 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__program_assignment__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__program_assignment__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_12 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_12 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_12 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_12 = context.staging_S3_dir + "noodlecrm__program_assignment__history.json.gz";
	
	boolean useStream_tS3Put_12 = false;
	java.io.InputStream uploadStream_tS3Put_12 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_12 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_12 instanceof String){
		    useStream_tS3Put_12 = false;
		}else if(fileOrStream_tS3Put_12 instanceof java.io.InputStream){
		    useStream_tS3Put_12 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_12 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_12) {
				java.io.File inputFile_tS3Put_12 = new java.io.File((String)fileOrStream_tS3Put_12);
				
				long multipart_upload_threshold_tS3Put_12 = 5 * 1024 * 1024;
				
    		tm_tS3Put_12 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_12)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_12)
    			.withS3Client(conn_tS3Put_12)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_12 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_12, inputFile_tS3Put_12).withMetadata(objectMetadata_tS3Put_12);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_12 = tm_tS3Put_12.upload(putRequest_tS3Put_12);
  		
  			upload_tS3Put_12.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_12 = ((java.io.InputStream)fileOrStream_tS3Put_12);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_12 = new S3StreamUtil();
    		byte[] buffer_tS3Put_12 = new byte[partSizeInBytes_tS3Put_12];
    		sourceStream_tS3Put_12.read(buffer_tS3Put_12);
    		long curPartSize_tS3Put_12 = streamUtil_tS3Put_12.getLength(buffer_tS3Put_12);
    		boolean multiUpload_tS3Put_12 = curPartSize_tS3Put_12 == partSizeInBytes_tS3Put_12;
    		
    		if(!multiUpload_tS3Put_12) {
    				objectMetadata_tS3Put_12.setContentLength(curPartSize_tS3Put_12);
    				uploadStream_tS3Put_12 = new java.io.ByteArrayInputStream(buffer_tS3Put_12,0,Long.valueOf(curPartSize_tS3Put_12).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_12 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_12, uploadStream_tS3Put_12, objectMetadata_tS3Put_12);
			
    				
    				

    				
    				conn_tS3Put_12.putObject(putRequest_tS3Put_12);
    		} else {
    				uploadStream_tS3Put_12 = new java.io.ByteArrayInputStream(buffer_tS3Put_12);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_12 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_12 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_12, objectMetadata_tS3Put_12);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_12 = conn_tS3Put_12.initiateMultipartUpload(putRequest_tS3Put_12);
      			String uploadId_tS3Put_12 = initResponse_tS3Put_12.getUploadId();
      			int partNumber_tS3Put_12 = 1;
      			boolean streamHasNext_tS3Put_12 = true;
      			byte[] probeAvailability_tS3Put_12 = new byte[1];
				try {
					while (streamHasNext_tS3Put_12) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_12 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_12)
						.withUploadId(uploadId_tS3Put_12)
                    	.withPartNumber(partNumber_tS3Put_12)
						.withPartSize(curPartSize_tS3Put_12);
            		    uploadRequest_tS3Put_12.setInputStream(uploadStream_tS3Put_12);
            		    streamHasNext_tS3Put_12 = sourceStream_tS3Put_12.read(probeAvailability_tS3Put_12) != -1;
            		    if(!streamHasNext_tS3Put_12){
                    	    uploadRequest_tS3Put_12.setLastPart(true);
                    	}

                		partTags_tS3Put_12.add(conn_tS3Put_12.uploadPart(uploadRequest_tS3Put_12).getPartETag());
                  	    partNumber_tS3Put_12++;

          		     	if(uploadStream_tS3Put_12!=null){
      		         			uploadStream_tS3Put_12.close();
          		     	}
          		     	buffer_tS3Put_12 = new byte[partSizeInBytes_tS3Put_12];
          		     	sourceStream_tS3Put_12.read(buffer_tS3Put_12,1,partSizeInBytes_tS3Put_12-1);
          		     	buffer_tS3Put_12[0] = probeAvailability_tS3Put_12[0];
          		     	probeAvailability_tS3Put_12 = new byte[1];
          		     	curPartSize_tS3Put_12 = streamUtil_tS3Put_12.getLength(buffer_tS3Put_12);
          		     	uploadStream_tS3Put_12 = new java.io.ByteArrayInputStream(buffer_tS3Put_12);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_12 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_12,
                        uploadId_tS3Put_12, partTags_tS3Put_12);
            		conn_tS3Put_12.completeMultipartUpload(compRequest_tS3Put_12);
            } catch (java.lang.Exception uploadException_tS3Put_12) {
  							conn_tS3Put_12.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_12, uploadId_tS3Put_12));
    						throw uploadException_tS3Put_12;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_12){
		
			throw(e_tS3Put_12);
		
	}finally{
		if(useStream_tS3Put_12 && uploadStream_tS3Put_12!=null){
    	uploadStream_tS3Put_12.close();
    }
    
    if(tm_tS3Put_12 != null){
        tm_tS3Put_12.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_12 begin ] stop
 */
	
	/**
	 * [tS3Put_12 main ] start
	 */

	

	
	
	currentComponent="tS3Put_12";

	

 


	tos_count_tS3Put_12++;

/**
 * [tS3Put_12 main ] stop
 */
	
	/**
	 * [tS3Put_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_12";

	

 



/**
 * [tS3Put_12 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_12";

	

 



/**
 * [tS3Put_12 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_12 end ] start
	 */

	

	
	
	currentComponent="tS3Put_12";

	

 

ok_Hash.put("tS3Put_12", true);
end_Hash.put("tS3Put_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk82", 0, "ok");
				}
				tJava_30Process(globalMap);



/**
 * [tS3Put_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_12 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_12";

	

 



/**
 * [tS3Put_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_12_SUBPROCESS_STATE", 1);
	}
	

public void tJava_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_30", false);
		start_Hash.put("tJava_30", System.currentTimeMillis());
		
	
	currentComponent="tJava_30";

	
		int tos_count_tJava_30 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_12_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_12_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_30 begin ] stop
 */
	
	/**
	 * [tJava_30 main ] start
	 */

	

	
	
	currentComponent="tJava_30";

	

 


	tos_count_tJava_30++;

/**
 * [tJava_30 main ] stop
 */
	
	/**
	 * [tJava_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_30";

	

 



/**
 * [tJava_30 process_data_begin ] stop
 */
	
	/**
	 * [tJava_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_30";

	

 



/**
 * [tJava_30 process_data_end ] stop
 */
	
	/**
	 * [tJava_30 end ] start
	 */

	

	
	
	currentComponent="tJava_30";

	

 

ok_Hash.put("tJava_30", true);
end_Hash.put("tJava_30", System.currentTimeMillis());




/**
 * [tJava_30 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_30 finally ] start
	 */

	

	
	
	currentComponent="tJava_30";

	

 



/**
 * [tJava_30 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_30_SUBPROCESS_STATE", 1);
	}
	

public void tDie_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_12", false);
		start_Hash.put("tDie_12", System.currentTimeMillis());
		
	
	currentComponent="tDie_12";

	
		int tos_count_tDie_12 = 0;
		

 



/**
 * [tDie_12 begin ] stop
 */
	
	/**
	 * [tDie_12 main ] start
	 */

	

	
	
	currentComponent="tDie_12";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_12", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_12_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_12_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_12_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_12) {
		logIgnoredError(String.format("tDie_12 - tDie failed to log message due to internal error: %s", e_tDie_12), e_tDie_12);
	}
	
	currentComponent = "tDie_12";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_12_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_12++;

/**
 * [tDie_12 main ] stop
 */
	
	/**
	 * [tDie_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_12";

	

 



/**
 * [tDie_12 process_data_begin ] stop
 */
	
	/**
	 * [tDie_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_12";

	

 



/**
 * [tDie_12 process_data_end ] stop
 */
	
	/**
	 * [tDie_12 end ] start
	 */

	

	
	
	currentComponent="tDie_12";

	

 

ok_Hash.put("tDie_12", true);
end_Hash.put("tDie_12", System.currentTimeMillis());




/**
 * [tDie_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_12 finally ] start
	 */

	

	
	
	currentComponent="tDie_12";

	

 



/**
 * [tDie_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_12_SUBPROCESS_STATE", 1);
	}
	

public void tJava_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_16", false);
		start_Hash.put("tJava_16", System.currentTimeMillis());
		
	
	currentComponent="tJava_16";

	
		int tos_count_tJava_16 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Program_Concentration__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 



System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_16 begin ] stop
 */
	
	/**
	 * [tJava_16 main ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 


	tos_count_tJava_16++;

/**
 * [tJava_16 main ] stop
 */
	
	/**
	 * [tJava_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 



/**
 * [tJava_16 process_data_begin ] stop
 */
	
	/**
	 * [tJava_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 



/**
 * [tJava_16 process_data_end ] stop
 */
	
	/**
	 * [tJava_16 end ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 

ok_Hash.put("tJava_16", true);
end_Hash.put("tJava_16", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk40", 0, "ok");
				}
				tSalesforceInput_13Process(globalMap);



/**
 * [tJava_16 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_16:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tJava_17Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_16 finally ] start
	 */

	

	
	
	currentComponent="tJava_16";

	

 



/**
 * [tJava_16 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_16_SUBPROCESS_STATE", 1);
	}
	


public static class out29Struct implements routines.system.IPersistableRow<out29Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row59Struct implements routines.system.IPersistableRow<row59Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row59Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row59Struct row59 = new row59Struct();
out29Struct out29 = new out29Struct();





	
	/**
	 * [tWriteJSONField_13_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_13_Out", false);
		start_Hash.put("tWriteJSONField_13_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_13";
	
	currentComponent="tWriteJSONField_13_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out29");
					}
				
		int tos_count_tWriteJSONField_13_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_13_Out = 0;
				boolean needRoot_tWriteJSONField_13_Out  = true;
				
				String  strCompCache_tWriteJSONField_13_Out= null;		
				
						        java.util.Queue<row58Struct> listGroupby_tWriteJSONField_13_Out = new java.util.concurrent.ConcurrentLinkedQueue<row58Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_13_Out extends Thread {
						
									    java.util.Queue<row58Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_13_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_13_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_13_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_13_In", queue);
							globalMap.put("flows_tWriteJSONField_13_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_13_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_13_Out txf_tWriteJSONField_13_Out = new ThreadXMLField_tWriteJSONField_13_Out(listGroupby_tWriteJSONField_13_Out);
					
					txf_tWriteJSONField_13_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_13_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_13_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_13_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_13_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_13_Out nestXMLTool_tWriteJSONField_13_Out = new NestXMLTool_tWriteJSONField_13_Out();

out29Struct  rowStructOutput_tWriteJSONField_13_Out = new out29Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_13_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_13_Out = null;
org.dom4j.Document doc_tWriteJSONField_13_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_13_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_13_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_13_Out.setTrimText(false);
format_tWriteJSONField_13_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_13_Out = new int[1];

 



/**
 * [tWriteJSONField_13_Out begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row59");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
out29Struct out29_tmp = new out29Struct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_13", false);
		start_Hash.put("tSalesforceInput_13", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_13";

	
		int tos_count_tSalesforceInput_13 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_13 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_13 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_13.createRuntimeProperties();
 		                    props_tSalesforceInput_13.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_13.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_13.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_13.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_13.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_13.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_13.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_13.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_13.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_13.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_13.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_13.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_13.module.setValue("moduleName",
 		                    "NoodleCRM__Program_Concentration__History");
 		                    
 		                    props_tSalesforceInput_13.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_13.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_13.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_13.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_13.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_13_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Program_Concentration__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Program_Concentration__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_13_1_fisrt sst_tSalesforceInput_13_1_fisrt = new SchemaSettingTool_tSalesforceInput_13_1_fisrt();
 		                    
 		                    props_tSalesforceInput_13.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_13_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_13.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_13 = props_tSalesforceInput_13.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_13 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_13 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_13 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_13.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_13);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_13.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_13 = props_tSalesforceInput_13.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_13 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_13 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_13 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_13.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_13);
        }
    }
globalMap.put("tSalesforceInput_13_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_13);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_13= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_13_MAPPINGS_URL", mappings_url_tSalesforceInput_13);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_13 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_13";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_13 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_13 = null;
topology_tSalesforceInput_13 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_13 = def_tSalesforceInput_13.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_13, topology_tSalesforceInput_13);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_13 = def_tSalesforceInput_13.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_13 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_13.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_13 = componentRuntime_tSalesforceInput_13.initialize(container_tSalesforceInput_13, props_tSalesforceInput_13);

if (initVr_tSalesforceInput_13.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_13.getMessage());
}

if(componentRuntime_tSalesforceInput_13 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_13 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_13;
	compDriverInitialization_tSalesforceInput_13.runAtDriver(container_tSalesforceInput_13);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_13 = null;
if(componentRuntime_tSalesforceInput_13 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_13 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_13;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_13 = sourceOrSink_tSalesforceInput_13.validate(container_tSalesforceInput_13);
	if (vr_tSalesforceInput_13.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_13.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_13 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_13;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_13 =
            source_tSalesforceInput_13.createReader(container_tSalesforceInput_13);
	reader_tSalesforceInput_13 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_13, container_tSalesforceInput_13);

        boolean multi_output_is_allowed_tSalesforceInput_13 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_13 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_13.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_13 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_13 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_13 = props_tSalesforceInput_13.getSchema(c_tSalesforceInput_13, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_13 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_13, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_13 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_13 = reader_tSalesforceInput_13.start();

    resourceMap.put("reader_tSalesforceInput_13", reader_tSalesforceInput_13);

    for (; available_tSalesforceInput_13; available_tSalesforceInput_13 = reader_tSalesforceInput_13.advance()) {
    	nb_line_tSalesforceInput_13++;

    	
        if (multi_output_is_allowed_tSalesforceInput_13) {
                row59 = null;

        }

        try {
            Object data_tSalesforceInput_13 = reader_tSalesforceInput_13.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_13) {
                    row59 = new row59Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_13 == null) {
            factory_tSalesforceInput_13 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_13.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_13.setWrapped(factory_tSalesforceInput_13.convertToAvro(data_tSalesforceInput_13));
                Object columnValue_0_tSalesforceInput_13 = outgoingEnforcer_tSalesforceInput_13.get(0);
                        row59.Id = (String) (columnValue_0_tSalesforceInput_13);
                Object columnValue_1_tSalesforceInput_13 = outgoingEnforcer_tSalesforceInput_13.get(1);
                    if (columnValue_1_tSalesforceInput_13 == null) {
                        row59.IsDeleted = false;
                    } else {
                            row59.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_13);
                    }
                Object columnValue_2_tSalesforceInput_13 = outgoingEnforcer_tSalesforceInput_13.get(2);
                        row59.ParentId = (String) (columnValue_2_tSalesforceInput_13);
                Object columnValue_3_tSalesforceInput_13 = outgoingEnforcer_tSalesforceInput_13.get(3);
                        row59.CreatedById = (String) (columnValue_3_tSalesforceInput_13);
                Object columnValue_4_tSalesforceInput_13 = outgoingEnforcer_tSalesforceInput_13.get(4);
                        row59.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_13);
                Object columnValue_5_tSalesforceInput_13 = outgoingEnforcer_tSalesforceInput_13.get(5);
                        row59.Field = (String) (columnValue_5_tSalesforceInput_13);
                Object columnValue_6_tSalesforceInput_13 = outgoingEnforcer_tSalesforceInput_13.get(6);
                        row59.OldValue = (String) (columnValue_6_tSalesforceInput_13);
                Object columnValue_7_tSalesforceInput_13 = outgoingEnforcer_tSalesforceInput_13.get(7);
                        row59.NewValue = (String) (columnValue_7_tSalesforceInput_13);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_13) {
        	java.util.Map<String,Object> info_tSalesforceInput_13 = e_tSalesforceInput_13.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_13 = null;
            	if(info_tSalesforceInput_13.containsKey("error")){
            		errorMessage_tSalesforceInput_13 = info_tSalesforceInput_13.get("error");
        		}else if(info_tSalesforceInput_13.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_13 = info_tSalesforceInput_13.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_13 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_13 = "Row "+ nb_line_tSalesforceInput_13 + ": "+errorMessage_tSalesforceInput_13;
    			System.err.println(errorMessage_tSalesforceInput_13);
            	// If the record is reject, the main line record should put NULL
            	row59 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_13 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_13 = null;


 



/**
 * [tSalesforceInput_13 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_13 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_13";

	


 


	tos_count_tSalesforceInput_13++;

/**
 * [tSalesforceInput_13 main ] stop
 */
	
	/**
	 * [tSalesforceInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_13";

	


 



/**
 * [tSalesforceInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row59");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

out29 = null;


// # Output table : 'out29'
out29_tmp.Id = row59.Id ;
out29_tmp.IsDeleted = row59.IsDeleted ;
out29_tmp.ParentId = row59.ParentId ;
out29_tmp.CreatedById = row59.CreatedById ;
out29_tmp.CreatedDate = (row59.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row59.CreatedDate))).getTime())/1000 ;
out29_tmp.Field = row59.Field ;
out29_tmp.OldValue = row59.OldValue ;
out29_tmp.NewValue = row59.NewValue ;
out29 = out29_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "out29"
if(out29 != null) { 



	
	/**
	 * [tWriteJSONField_13_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_13";
	
	currentComponent="tWriteJSONField_13_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out29");
					}
					

	if(txf_tWriteJSONField_13_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_13_Out.getCurrentComponent();
		throw txf_tWriteJSONField_13_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_13_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_13_Out.getLastError();
	}
	nb_line_tWriteJSONField_13_Out++;
	valueMap_tWriteJSONField_13_Out.clear();
	arraysValueMap_tWriteJSONField_13_Out.clear();
	valueMap_tWriteJSONField_13_Out.put("Id",
	(
            out29.Id.toString()
		));
	arraysValueMap_tWriteJSONField_13_Out.put("Id",
	(
            out29.Id.toString()
		));
	valueMap_tWriteJSONField_13_Out.put("IsDeleted",
	(
            String.valueOf(out29.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_13_Out.put("IsDeleted",
	(
            String.valueOf(out29.IsDeleted)
		));
	valueMap_tWriteJSONField_13_Out.put("ParentId",
	(
            out29.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_13_Out.put("ParentId",
	(
            out29.ParentId.toString()
		));
	valueMap_tWriteJSONField_13_Out.put("CreatedById",
	(
            out29.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_13_Out.put("CreatedById",
	(
            out29.CreatedById.toString()
		));
	valueMap_tWriteJSONField_13_Out.put("CreatedDate",
	(
            String.valueOf(out29.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_13_Out.put("CreatedDate",
	(
            String.valueOf(out29.CreatedDate)
		));
	valueMap_tWriteJSONField_13_Out.put("Field",
	(
            out29.Field.toString()
		));
	arraysValueMap_tWriteJSONField_13_Out.put("Field",
	(
            out29.Field.toString()
		));
	valueMap_tWriteJSONField_13_Out.put("OldValue",
	(
		out29.OldValue != null?
            out29.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_13_Out.put("OldValue",
	(
		out29.OldValue != null?
            out29.OldValue.toString():null
		));
	valueMap_tWriteJSONField_13_Out.put("NewValue",
	(
		out29.NewValue != null?
            out29.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_13_Out.put("NewValue",
	(
		out29.NewValue != null?
            out29.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_13_Out = "";
	if(strCompCache_tWriteJSONField_13_Out==null){
		strCompCache_tWriteJSONField_13_Out=strTemp_tWriteJSONField_13_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_13_Out.replaceDefaultNameSpace(doc_tWriteJSONField_13_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_13_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_13_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_13_Out, format_tWriteJSONField_13_Out);
			output_tWriteJSONField_13_Out.write(doc_tWriteJSONField_13_Out);
		    output_tWriteJSONField_13_Out.close();
			
				  		  row58Struct row_tWriteJSONField_13_Out = new row58Struct();
						  
					     		row_tWriteJSONField_13_Out.data = strWriter_tWriteJSONField_13_Out.toString();
					     		listGroupby_tWriteJSONField_13_Out.add(row_tWriteJSONField_13_Out);
					
		    doc_tWriteJSONField_13_Out.clearContent();
			needRoot_tWriteJSONField_13_Out = true;
			for(int i_tWriteJSONField_13_Out=0;i_tWriteJSONField_13_Out<orders_tWriteJSONField_13_Out.length;i_tWriteJSONField_13_Out++){
				orders_tWriteJSONField_13_Out[i_tWriteJSONField_13_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_13_Out != null && groupbyList_tWriteJSONField_13_Out.size() >= 0){
				groupbyList_tWriteJSONField_13_Out.clear();
			}
			strCompCache_tWriteJSONField_13_Out=strTemp_tWriteJSONField_13_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_13_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_13_Out) {
		needRoot_tWriteJSONField_13_Out=false;
		org.dom4j.Element root_tWriteJSONField_13_Out = doc_tWriteJSONField_13_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_13_Out = root_tWriteJSONField_13_Out;
		org.dom4j.Element root_0_tWriteJSONField_13_Out = root_tWriteJSONField_13_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_13_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_13_Out .setText(root_0_tWriteJSONField_13_Out,
		valueMap_tWriteJSONField_13_Out.get("IsDeleted"));
            root_0_tWriteJSONField_13_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_13_Out .setText(root_0_tWriteJSONField_13_Out,"null");
			root_0_tWriteJSONField_13_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_13_Out = root_tWriteJSONField_13_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_13_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_13_Out .setText(root_1_tWriteJSONField_13_Out,
		valueMap_tWriteJSONField_13_Out.get("ParentId"));
			root_1_tWriteJSONField_13_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_13_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_13_Out .setText(root_1_tWriteJSONField_13_Out,"null");
			root_1_tWriteJSONField_13_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_13_Out = root_tWriteJSONField_13_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_13_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_13_Out .setText(root_2_tWriteJSONField_13_Out,
		valueMap_tWriteJSONField_13_Out.get("CreatedById"));
			root_2_tWriteJSONField_13_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_13_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_13_Out .setText(root_2_tWriteJSONField_13_Out,"null");
			root_2_tWriteJSONField_13_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_13_Out = root_tWriteJSONField_13_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_13_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_13_Out .setText(root_3_tWriteJSONField_13_Out,
		valueMap_tWriteJSONField_13_Out.get("CreatedDate"));
            root_3_tWriteJSONField_13_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_13_Out .setText(root_3_tWriteJSONField_13_Out,"null");
			root_3_tWriteJSONField_13_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_13_Out = root_tWriteJSONField_13_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_13_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_13_Out .setText(root_4_tWriteJSONField_13_Out,
		valueMap_tWriteJSONField_13_Out.get("Field"));
			root_4_tWriteJSONField_13_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_13_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_13_Out .setText(root_4_tWriteJSONField_13_Out,"null");
			root_4_tWriteJSONField_13_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_13_Out = root_tWriteJSONField_13_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_13_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_13_Out .setText(root_5_tWriteJSONField_13_Out,
		valueMap_tWriteJSONField_13_Out.get("OldValue"));
			root_5_tWriteJSONField_13_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_13_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_13_Out .setText(root_5_tWriteJSONField_13_Out,"null");
			root_5_tWriteJSONField_13_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_13_Out = root_tWriteJSONField_13_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_13_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_13_Out .setText(root_6_tWriteJSONField_13_Out,
		valueMap_tWriteJSONField_13_Out.get("NewValue"));
			root_6_tWriteJSONField_13_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_13_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_13_Out .setText(root_6_tWriteJSONField_13_Out,"null");
			root_6_tWriteJSONField_13_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_13_Out = subTreeRootParent_tWriteJSONField_13_Out;
	}else{
		subTreeRootParent_tWriteJSONField_13_Out=root4Group_tWriteJSONField_13_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_13_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_13_Out[0]==0){
        	orders_tWriteJSONField_13_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_13_Out.length){
        		orders_tWriteJSONField_13_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_13_Out.elements().add(orders_tWriteJSONField_13_Out[0]++,loop_tWriteJSONField_13_Out);
		if(
		valueMap_tWriteJSONField_13_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_13_Out .setText(loop_tWriteJSONField_13_Out,
		valueMap_tWriteJSONField_13_Out.get("Id"));
			loop_tWriteJSONField_13_Out.addAttribute("type", "string");
			loop_tWriteJSONField_13_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_13_Out .setText(loop_tWriteJSONField_13_Out,"null");
			loop_tWriteJSONField_13_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_13_Out++;

/**
 * [tWriteJSONField_13_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_13_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_13";
	
	currentComponent="tWriteJSONField_13_Out";

	

 



/**
 * [tWriteJSONField_13_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_13_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_13";
	
	currentComponent="tWriteJSONField_13_Out";

	

 



/**
 * [tWriteJSONField_13_Out process_data_end ] stop
 */

} // End of branch "out29"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_13";

	


 



/**
 * [tSalesforceInput_13 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_13 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_13";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_13", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_13.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_13 = reader_tSalesforceInput_13.getReturnValues();
if(resultMap_tSalesforceInput_13!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_13 : resultMap_tSalesforceInput_13.entrySet()) {
		switch(entry_tSalesforceInput_13.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_13.setComponentData("tSalesforceInput_13", "ERROR_MESSAGE", entry_tSalesforceInput_13.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_13.setComponentData("tSalesforceInput_13", "NB_LINE", entry_tSalesforceInput_13.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_13.setComponentData("tSalesforceInput_13", "NB_SUCCESS", entry_tSalesforceInput_13.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_13.setComponentData("tSalesforceInput_13", "NB_REJECT", entry_tSalesforceInput_13.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_13 = new StringBuilder();
            for (int i_tSalesforceInput_13 = 0; i_tSalesforceInput_13 < entry_tSalesforceInput_13.getKey().length(); i_tSalesforceInput_13++) {
                char ch_tSalesforceInput_13 = entry_tSalesforceInput_13.getKey().charAt(i_tSalesforceInput_13);
                if(Character.isUpperCase(ch_tSalesforceInput_13) && i_tSalesforceInput_13> 0) {
                	studio_key_tSalesforceInput_13.append('_');
                }
                studio_key_tSalesforceInput_13.append(ch_tSalesforceInput_13);
            }
			container_tSalesforceInput_13.setComponentData("tSalesforceInput_13", studio_key_tSalesforceInput_13.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_13.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_13", true);
end_Hash.put("tSalesforceInput_13", System.currentTimeMillis());




/**
 * [tSalesforceInput_13 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row59");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tWriteJSONField_13_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_13";
	
	currentComponent="tWriteJSONField_13_Out";

	

if(nb_line_tWriteJSONField_13_Out > 0){  
    nestXMLTool_tWriteJSONField_13_Out.replaceDefaultNameSpace(doc_tWriteJSONField_13_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_13_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_13_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_13_Out, format_tWriteJSONField_13_Out);
	output_tWriteJSONField_13_Out.write(doc_tWriteJSONField_13_Out);
    output_tWriteJSONField_13_Out.close();
					row58Struct row_tWriteJSONField_13_Out = new row58Struct();
						  
					     		row_tWriteJSONField_13_Out.data = strWriter_tWriteJSONField_13_Out.toString();
					     		listGroupby_tWriteJSONField_13_Out.add(row_tWriteJSONField_13_Out);
		    		

}
globalMap.put("tWriteJSONField_13_Out_NB_LINE",nb_line_tWriteJSONField_13_Out);
globalMap.put("tWriteJSONField_13_In_FINISH" + (listGroupby_tWriteJSONField_13_Out==null?"":listGroupby_tWriteJSONField_13_Out.hashCode()), "true");
	
		txf_tWriteJSONField_13_Out.join();
		
		if(txf_tWriteJSONField_13_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_13_Out.getCurrentComponent();
			throw txf_tWriteJSONField_13_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_13_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_13_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_13_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out29");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_13_Out", true);
end_Hash.put("tWriteJSONField_13_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_13_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_13 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_13";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_13")==null){
    if(resourceMap.get("reader_tSalesforceInput_13")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_13")).close();
		} catch (java.io.IOException e_tSalesforceInput_13) {
			String errorMessage_tSalesforceInput_13 = "failed to release the resource in tSalesforceInput_13 :" + e_tSalesforceInput_13.getMessage();
			System.err.println(errorMessage_tSalesforceInput_13);
		}
	}
}
 



/**
 * [tSalesforceInput_13 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_13_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_13";
	
	currentComponent="tWriteJSONField_13_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_13_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_13_In");
		if(resourceMap.get("finish_tWriteJSONField_13_Out") == null){
			globalMap.put("tWriteJSONField_13_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_13_Out==null?"":listGroupby_tWriteJSONField_13_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_13_Out != null) {
		globalMap.put("tWriteJSONField_13_In_FINISH" + (listGroupby_tWriteJSONField_13_Out==null?"":listGroupby_tWriteJSONField_13_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_13_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_13_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_13", false);
		start_Hash.put("tFileArchive_13", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_13";

	
		int tos_count_tFileArchive_13 = 0;
		

 



/**
 * [tFileArchive_13 begin ] stop
 */
	
	/**
	 * [tFileArchive_13 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_13";

	

	

		String sourceFile_tFileArchive_13 = context.staging_S3_dir + "noodlecrm__program_concentration__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_13), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_13 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_13 = context.staging_S3_dir + "noodlecrm__program_concentration__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_13 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_13, zipFile_tFileArchive_13);
    zip_tFileArchive_13.setOverwriteExistTargetZip(true);
	zip_tFileArchive_13.setMakeTargetDir(true);
	zip_tFileArchive_13.setCompressLevel(9);
	zip_tFileArchive_13.setArchiveFormat("gzip");
	zip_tFileArchive_13.setAllFiles(true);
	
	
		zip_tFileArchive_13.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_13_ARCHIVE_FILEPATH",zipFile_tFileArchive_13);
   
   globalMap.put("tFileArchive_13_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_13).getName());

   zip_tFileArchive_13.doZip();


 


	tos_count_tFileArchive_13++;

/**
 * [tFileArchive_13 main ] stop
 */
	
	/**
	 * [tFileArchive_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_13";

	

 



/**
 * [tFileArchive_13 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_13";

	

 



/**
 * [tFileArchive_13 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_13 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_13";

	

 

ok_Hash.put("tFileArchive_13", true);
end_Hash.put("tFileArchive_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk83", 0, "ok");
				}
				tS3Put_13Process(globalMap);



/**
 * [tFileArchive_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_13 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_13";

	

 



/**
 * [tFileArchive_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_13_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_13", false);
		start_Hash.put("tS3Put_13", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_13";

	
		int tos_count_tS3Put_13 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_13 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_13 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__program_concentration__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__program_concentration__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_13 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_13 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_13 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_13 = context.staging_S3_dir + "noodlecrm__program_concentration__history.json.gz";
	
	boolean useStream_tS3Put_13 = false;
	java.io.InputStream uploadStream_tS3Put_13 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_13 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_13 instanceof String){
		    useStream_tS3Put_13 = false;
		}else if(fileOrStream_tS3Put_13 instanceof java.io.InputStream){
		    useStream_tS3Put_13 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_13 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_13) {
				java.io.File inputFile_tS3Put_13 = new java.io.File((String)fileOrStream_tS3Put_13);
				
				long multipart_upload_threshold_tS3Put_13 = 5 * 1024 * 1024;
				
    		tm_tS3Put_13 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_13)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_13)
    			.withS3Client(conn_tS3Put_13)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_13 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_13, inputFile_tS3Put_13).withMetadata(objectMetadata_tS3Put_13);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_13 = tm_tS3Put_13.upload(putRequest_tS3Put_13);
  		
  			upload_tS3Put_13.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_13 = ((java.io.InputStream)fileOrStream_tS3Put_13);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_13 = new S3StreamUtil();
    		byte[] buffer_tS3Put_13 = new byte[partSizeInBytes_tS3Put_13];
    		sourceStream_tS3Put_13.read(buffer_tS3Put_13);
    		long curPartSize_tS3Put_13 = streamUtil_tS3Put_13.getLength(buffer_tS3Put_13);
    		boolean multiUpload_tS3Put_13 = curPartSize_tS3Put_13 == partSizeInBytes_tS3Put_13;
    		
    		if(!multiUpload_tS3Put_13) {
    				objectMetadata_tS3Put_13.setContentLength(curPartSize_tS3Put_13);
    				uploadStream_tS3Put_13 = new java.io.ByteArrayInputStream(buffer_tS3Put_13,0,Long.valueOf(curPartSize_tS3Put_13).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_13 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_13, uploadStream_tS3Put_13, objectMetadata_tS3Put_13);
			
    				
    				

    				
    				conn_tS3Put_13.putObject(putRequest_tS3Put_13);
    		} else {
    				uploadStream_tS3Put_13 = new java.io.ByteArrayInputStream(buffer_tS3Put_13);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_13 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_13 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_13, objectMetadata_tS3Put_13);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_13 = conn_tS3Put_13.initiateMultipartUpload(putRequest_tS3Put_13);
      			String uploadId_tS3Put_13 = initResponse_tS3Put_13.getUploadId();
      			int partNumber_tS3Put_13 = 1;
      			boolean streamHasNext_tS3Put_13 = true;
      			byte[] probeAvailability_tS3Put_13 = new byte[1];
				try {
					while (streamHasNext_tS3Put_13) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_13 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_13)
						.withUploadId(uploadId_tS3Put_13)
                    	.withPartNumber(partNumber_tS3Put_13)
						.withPartSize(curPartSize_tS3Put_13);
            		    uploadRequest_tS3Put_13.setInputStream(uploadStream_tS3Put_13);
            		    streamHasNext_tS3Put_13 = sourceStream_tS3Put_13.read(probeAvailability_tS3Put_13) != -1;
            		    if(!streamHasNext_tS3Put_13){
                    	    uploadRequest_tS3Put_13.setLastPart(true);
                    	}

                		partTags_tS3Put_13.add(conn_tS3Put_13.uploadPart(uploadRequest_tS3Put_13).getPartETag());
                  	    partNumber_tS3Put_13++;

          		     	if(uploadStream_tS3Put_13!=null){
      		         			uploadStream_tS3Put_13.close();
          		     	}
          		     	buffer_tS3Put_13 = new byte[partSizeInBytes_tS3Put_13];
          		     	sourceStream_tS3Put_13.read(buffer_tS3Put_13,1,partSizeInBytes_tS3Put_13-1);
          		     	buffer_tS3Put_13[0] = probeAvailability_tS3Put_13[0];
          		     	probeAvailability_tS3Put_13 = new byte[1];
          		     	curPartSize_tS3Put_13 = streamUtil_tS3Put_13.getLength(buffer_tS3Put_13);
          		     	uploadStream_tS3Put_13 = new java.io.ByteArrayInputStream(buffer_tS3Put_13);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_13 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_13,
                        uploadId_tS3Put_13, partTags_tS3Put_13);
            		conn_tS3Put_13.completeMultipartUpload(compRequest_tS3Put_13);
            } catch (java.lang.Exception uploadException_tS3Put_13) {
  							conn_tS3Put_13.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_13, uploadId_tS3Put_13));
    						throw uploadException_tS3Put_13;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_13){
		
			throw(e_tS3Put_13);
		
	}finally{
		if(useStream_tS3Put_13 && uploadStream_tS3Put_13!=null){
    	uploadStream_tS3Put_13.close();
    }
    
    if(tm_tS3Put_13 != null){
        tm_tS3Put_13.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_13 begin ] stop
 */
	
	/**
	 * [tS3Put_13 main ] start
	 */

	

	
	
	currentComponent="tS3Put_13";

	

 


	tos_count_tS3Put_13++;

/**
 * [tS3Put_13 main ] stop
 */
	
	/**
	 * [tS3Put_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_13";

	

 



/**
 * [tS3Put_13 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_13";

	

 



/**
 * [tS3Put_13 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_13 end ] start
	 */

	

	
	
	currentComponent="tS3Put_13";

	

 

ok_Hash.put("tS3Put_13", true);
end_Hash.put("tS3Put_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk84", 0, "ok");
				}
				tJava_31Process(globalMap);



/**
 * [tS3Put_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_13 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_13";

	

 



/**
 * [tS3Put_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_13_SUBPROCESS_STATE", 1);
	}
	

public void tJava_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_31", false);
		start_Hash.put("tJava_31", System.currentTimeMillis());
		
	
	currentComponent="tJava_31";

	
		int tos_count_tJava_31 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_13_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_13_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_31 begin ] stop
 */
	
	/**
	 * [tJava_31 main ] start
	 */

	

	
	
	currentComponent="tJava_31";

	

 


	tos_count_tJava_31++;

/**
 * [tJava_31 main ] stop
 */
	
	/**
	 * [tJava_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_31";

	

 



/**
 * [tJava_31 process_data_begin ] stop
 */
	
	/**
	 * [tJava_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_31";

	

 



/**
 * [tJava_31 process_data_end ] stop
 */
	
	/**
	 * [tJava_31 end ] start
	 */

	

	
	
	currentComponent="tJava_31";

	

 

ok_Hash.put("tJava_31", true);
end_Hash.put("tJava_31", System.currentTimeMillis());




/**
 * [tJava_31 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_31 finally ] start
	 */

	

	
	
	currentComponent="tJava_31";

	

 



/**
 * [tJava_31 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_31_SUBPROCESS_STATE", 1);
	}
	

public void tDie_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_13", false);
		start_Hash.put("tDie_13", System.currentTimeMillis());
		
	
	currentComponent="tDie_13";

	
		int tos_count_tDie_13 = 0;
		

 



/**
 * [tDie_13 begin ] stop
 */
	
	/**
	 * [tDie_13 main ] start
	 */

	

	
	
	currentComponent="tDie_13";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_13", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_13_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_13_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_13_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_13) {
		logIgnoredError(String.format("tDie_13 - tDie failed to log message due to internal error: %s", e_tDie_13), e_tDie_13);
	}
	
	currentComponent = "tDie_13";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_13_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_13++;

/**
 * [tDie_13 main ] stop
 */
	
	/**
	 * [tDie_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_13";

	

 



/**
 * [tDie_13 process_data_begin ] stop
 */
	
	/**
	 * [tDie_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_13";

	

 



/**
 * [tDie_13 process_data_end ] stop
 */
	
	/**
	 * [tDie_13 end ] start
	 */

	

	
	
	currentComponent="tDie_13";

	

 

ok_Hash.put("tDie_13", true);
end_Hash.put("tDie_13", System.currentTimeMillis());




/**
 * [tDie_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_13 finally ] start
	 */

	

	
	
	currentComponent="tDie_13";

	

 



/**
 * [tDie_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_13_SUBPROCESS_STATE", 1);
	}
	

public void tJava_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_17", false);
		start_Hash.put("tJava_17", System.currentTimeMillis());
		
	
	currentComponent="tJava_17";

	
		int tos_count_tJava_17 = 0;
		



System.out.println("Running For SFDC Object NoodleCRM__Program_Term_Enrollment__History: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 



System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_17 begin ] stop
 */
	
	/**
	 * [tJava_17 main ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 


	tos_count_tJava_17++;

/**
 * [tJava_17 main ] stop
 */
	
	/**
	 * [tJava_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 



/**
 * [tJava_17 process_data_begin ] stop
 */
	
	/**
	 * [tJava_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 



/**
 * [tJava_17 process_data_end ] stop
 */
	
	/**
	 * [tJava_17 end ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 

ok_Hash.put("tJava_17", true);
end_Hash.put("tJava_17", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk42", 0, "ok");
				}
				tSalesforceInput_14Process(globalMap);



/**
 * [tJava_17 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tJava_34Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_17 finally ] start
	 */

	

	
	
	currentComponent="tJava_17";

	

 



/**
 * [tJava_17 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_17_SUBPROCESS_STATE", 1);
	}
	


public static class out30Struct implements routines.system.IPersistableRow<out30Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row61Struct implements routines.system.IPersistableRow<row61Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ParentId;

				public String getParentId () {
					return this.ParentId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ParentId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ParentId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ParentId="+ParentId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row61Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row61Struct row61 = new row61Struct();
out30Struct out30 = new out30Struct();





	
	/**
	 * [tWriteJSONField_14_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_14_Out", false);
		start_Hash.put("tWriteJSONField_14_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_14";
	
	currentComponent="tWriteJSONField_14_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out30");
					}
				
		int tos_count_tWriteJSONField_14_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_14_Out = 0;
				boolean needRoot_tWriteJSONField_14_Out  = true;
				
				String  strCompCache_tWriteJSONField_14_Out= null;		
				
						        java.util.Queue<row60Struct> listGroupby_tWriteJSONField_14_Out = new java.util.concurrent.ConcurrentLinkedQueue<row60Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_14_Out extends Thread {
						
									    java.util.Queue<row60Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_14_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_14_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_14_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_14_In", queue);
							globalMap.put("flows_tWriteJSONField_14_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_14_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_14_Out txf_tWriteJSONField_14_Out = new ThreadXMLField_tWriteJSONField_14_Out(listGroupby_tWriteJSONField_14_Out);
					
					txf_tWriteJSONField_14_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_14_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_14_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_14_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_14_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_14_Out nestXMLTool_tWriteJSONField_14_Out = new NestXMLTool_tWriteJSONField_14_Out();

out30Struct  rowStructOutput_tWriteJSONField_14_Out = new out30Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_14_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_14_Out = null;
org.dom4j.Document doc_tWriteJSONField_14_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_14_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_14_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_14_Out.setTrimText(false);
format_tWriteJSONField_14_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_14_Out = new int[1];

 



/**
 * [tWriteJSONField_14_Out begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row61");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
out30Struct out30_tmp = new out30Struct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_14", false);
		start_Hash.put("tSalesforceInput_14", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_14";

	
		int tos_count_tSalesforceInput_14 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_14 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_14 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_14.createRuntimeProperties();
 		                    props_tSalesforceInput_14.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_14.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_14.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_14.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_14.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_14.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_14.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_14.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_14.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_14.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_14.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_14.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_14.module.setValue("moduleName",
 		                    "NoodleCRM__Program_Term_Enrollment__History");
 		                    
 		                    props_tSalesforceInput_14.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_14.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_14.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_14.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_14.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_14_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"NoodleCRM__Program_Term_Enrollment__History\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ParentId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ParentId\",\"talend.field.dbColumnName\":\"ParentId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ParentId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"NoodleCRM__Program_Term_Enrollment__History\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_14_1_fisrt sst_tSalesforceInput_14_1_fisrt = new SchemaSettingTool_tSalesforceInput_14_1_fisrt();
 		                    
 		                    props_tSalesforceInput_14.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_14_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_14.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_14 = props_tSalesforceInput_14.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_14 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_14 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_14 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_14.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_14);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_14.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_14 = props_tSalesforceInput_14.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_14 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_14 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_14 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_14.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_14);
        }
    }
globalMap.put("tSalesforceInput_14_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_14);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_14= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_14_MAPPINGS_URL", mappings_url_tSalesforceInput_14);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_14 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_14";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_14 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_14 = null;
topology_tSalesforceInput_14 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_14 = def_tSalesforceInput_14.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_14, topology_tSalesforceInput_14);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_14 = def_tSalesforceInput_14.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_14 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_14.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_14 = componentRuntime_tSalesforceInput_14.initialize(container_tSalesforceInput_14, props_tSalesforceInput_14);

if (initVr_tSalesforceInput_14.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_14.getMessage());
}

if(componentRuntime_tSalesforceInput_14 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_14 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_14;
	compDriverInitialization_tSalesforceInput_14.runAtDriver(container_tSalesforceInput_14);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_14 = null;
if(componentRuntime_tSalesforceInput_14 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_14 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_14;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_14 = sourceOrSink_tSalesforceInput_14.validate(container_tSalesforceInput_14);
	if (vr_tSalesforceInput_14.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_14.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_14 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_14;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_14 =
            source_tSalesforceInput_14.createReader(container_tSalesforceInput_14);
	reader_tSalesforceInput_14 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_14, container_tSalesforceInput_14);

        boolean multi_output_is_allowed_tSalesforceInput_14 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_14 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_14.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_14 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_14 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_14 = props_tSalesforceInput_14.getSchema(c_tSalesforceInput_14, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_14 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_14, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_14 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_14 = reader_tSalesforceInput_14.start();

    resourceMap.put("reader_tSalesforceInput_14", reader_tSalesforceInput_14);

    for (; available_tSalesforceInput_14; available_tSalesforceInput_14 = reader_tSalesforceInput_14.advance()) {
    	nb_line_tSalesforceInput_14++;

    	
        if (multi_output_is_allowed_tSalesforceInput_14) {
                row61 = null;

        }

        try {
            Object data_tSalesforceInput_14 = reader_tSalesforceInput_14.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_14) {
                    row61 = new row61Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_14 == null) {
            factory_tSalesforceInput_14 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_14.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_14.setWrapped(factory_tSalesforceInput_14.convertToAvro(data_tSalesforceInput_14));
                Object columnValue_0_tSalesforceInput_14 = outgoingEnforcer_tSalesforceInput_14.get(0);
                        row61.Id = (String) (columnValue_0_tSalesforceInput_14);
                Object columnValue_1_tSalesforceInput_14 = outgoingEnforcer_tSalesforceInput_14.get(1);
                    if (columnValue_1_tSalesforceInput_14 == null) {
                        row61.IsDeleted = false;
                    } else {
                            row61.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_14);
                    }
                Object columnValue_2_tSalesforceInput_14 = outgoingEnforcer_tSalesforceInput_14.get(2);
                        row61.ParentId = (String) (columnValue_2_tSalesforceInput_14);
                Object columnValue_3_tSalesforceInput_14 = outgoingEnforcer_tSalesforceInput_14.get(3);
                        row61.CreatedById = (String) (columnValue_3_tSalesforceInput_14);
                Object columnValue_4_tSalesforceInput_14 = outgoingEnforcer_tSalesforceInput_14.get(4);
                        row61.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_14);
                Object columnValue_5_tSalesforceInput_14 = outgoingEnforcer_tSalesforceInput_14.get(5);
                        row61.Field = (String) (columnValue_5_tSalesforceInput_14);
                Object columnValue_6_tSalesforceInput_14 = outgoingEnforcer_tSalesforceInput_14.get(6);
                        row61.OldValue = (String) (columnValue_6_tSalesforceInput_14);
                Object columnValue_7_tSalesforceInput_14 = outgoingEnforcer_tSalesforceInput_14.get(7);
                        row61.NewValue = (String) (columnValue_7_tSalesforceInput_14);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_14) {
        	java.util.Map<String,Object> info_tSalesforceInput_14 = e_tSalesforceInput_14.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_14 = null;
            	if(info_tSalesforceInput_14.containsKey("error")){
            		errorMessage_tSalesforceInput_14 = info_tSalesforceInput_14.get("error");
        		}else if(info_tSalesforceInput_14.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_14 = info_tSalesforceInput_14.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_14 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_14 = "Row "+ nb_line_tSalesforceInput_14 + ": "+errorMessage_tSalesforceInput_14;
    			System.err.println(errorMessage_tSalesforceInput_14);
            	// If the record is reject, the main line record should put NULL
            	row61 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_14 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_14 = null;


 



/**
 * [tSalesforceInput_14 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_14 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_14";

	


 


	tos_count_tSalesforceInput_14++;

/**
 * [tSalesforceInput_14 main ] stop
 */
	
	/**
	 * [tSalesforceInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_14";

	


 



/**
 * [tSalesforceInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row61");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_14 = false;
		  boolean mainRowRejected_tMap_14 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

out30 = null;


// # Output table : 'out30'
out30_tmp.Id = row61.Id ;
out30_tmp.IsDeleted = row61.IsDeleted ;
out30_tmp.ParentId = row61.ParentId ;
out30_tmp.CreatedById = row61.CreatedById ;
out30_tmp.CreatedDate = (row61.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row61.CreatedDate))).getTime())/1000 ;
out30_tmp.Field = row61.Field ;
out30_tmp.OldValue = row61.OldValue ;
out30_tmp.NewValue = row61.NewValue ;
out30 = out30_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "out30"
if(out30 != null) { 



	
	/**
	 * [tWriteJSONField_14_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_14";
	
	currentComponent="tWriteJSONField_14_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out30");
					}
					

	if(txf_tWriteJSONField_14_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_14_Out.getCurrentComponent();
		throw txf_tWriteJSONField_14_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_14_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_14_Out.getLastError();
	}
	nb_line_tWriteJSONField_14_Out++;
	valueMap_tWriteJSONField_14_Out.clear();
	arraysValueMap_tWriteJSONField_14_Out.clear();
	valueMap_tWriteJSONField_14_Out.put("Id",
	(
            out30.Id.toString()
		));
	arraysValueMap_tWriteJSONField_14_Out.put("Id",
	(
            out30.Id.toString()
		));
	valueMap_tWriteJSONField_14_Out.put("IsDeleted",
	(
            String.valueOf(out30.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_14_Out.put("IsDeleted",
	(
            String.valueOf(out30.IsDeleted)
		));
	valueMap_tWriteJSONField_14_Out.put("ParentId",
	(
            out30.ParentId.toString()
		));
	arraysValueMap_tWriteJSONField_14_Out.put("ParentId",
	(
            out30.ParentId.toString()
		));
	valueMap_tWriteJSONField_14_Out.put("CreatedById",
	(
            out30.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_14_Out.put("CreatedById",
	(
            out30.CreatedById.toString()
		));
	valueMap_tWriteJSONField_14_Out.put("CreatedDate",
	(
            String.valueOf(out30.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_14_Out.put("CreatedDate",
	(
            String.valueOf(out30.CreatedDate)
		));
	valueMap_tWriteJSONField_14_Out.put("Field",
	(
            out30.Field.toString()
		));
	arraysValueMap_tWriteJSONField_14_Out.put("Field",
	(
            out30.Field.toString()
		));
	valueMap_tWriteJSONField_14_Out.put("OldValue",
	(
		out30.OldValue != null?
            out30.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_14_Out.put("OldValue",
	(
		out30.OldValue != null?
            out30.OldValue.toString():null
		));
	valueMap_tWriteJSONField_14_Out.put("NewValue",
	(
		out30.NewValue != null?
            out30.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_14_Out.put("NewValue",
	(
		out30.NewValue != null?
            out30.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_14_Out = "";
	if(strCompCache_tWriteJSONField_14_Out==null){
		strCompCache_tWriteJSONField_14_Out=strTemp_tWriteJSONField_14_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_14_Out.replaceDefaultNameSpace(doc_tWriteJSONField_14_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_14_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_14_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_14_Out, format_tWriteJSONField_14_Out);
			output_tWriteJSONField_14_Out.write(doc_tWriteJSONField_14_Out);
		    output_tWriteJSONField_14_Out.close();
			
				  		  row60Struct row_tWriteJSONField_14_Out = new row60Struct();
						  
					     		row_tWriteJSONField_14_Out.data = strWriter_tWriteJSONField_14_Out.toString();
					     		listGroupby_tWriteJSONField_14_Out.add(row_tWriteJSONField_14_Out);
					
		    doc_tWriteJSONField_14_Out.clearContent();
			needRoot_tWriteJSONField_14_Out = true;
			for(int i_tWriteJSONField_14_Out=0;i_tWriteJSONField_14_Out<orders_tWriteJSONField_14_Out.length;i_tWriteJSONField_14_Out++){
				orders_tWriteJSONField_14_Out[i_tWriteJSONField_14_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_14_Out != null && groupbyList_tWriteJSONField_14_Out.size() >= 0){
				groupbyList_tWriteJSONField_14_Out.clear();
			}
			strCompCache_tWriteJSONField_14_Out=strTemp_tWriteJSONField_14_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_14_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_14_Out) {
		needRoot_tWriteJSONField_14_Out=false;
		org.dom4j.Element root_tWriteJSONField_14_Out = doc_tWriteJSONField_14_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_14_Out = root_tWriteJSONField_14_Out;
		org.dom4j.Element root_0_tWriteJSONField_14_Out = root_tWriteJSONField_14_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_14_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_14_Out .setText(root_0_tWriteJSONField_14_Out,
		valueMap_tWriteJSONField_14_Out.get("IsDeleted"));
            root_0_tWriteJSONField_14_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_14_Out .setText(root_0_tWriteJSONField_14_Out,"null");
			root_0_tWriteJSONField_14_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_14_Out = root_tWriteJSONField_14_Out.addElement("ParentId");
		if(
		valueMap_tWriteJSONField_14_Out.get("ParentId")!=null){
			nestXMLTool_tWriteJSONField_14_Out .setText(root_1_tWriteJSONField_14_Out,
		valueMap_tWriteJSONField_14_Out.get("ParentId"));
			root_1_tWriteJSONField_14_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_14_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_14_Out .setText(root_1_tWriteJSONField_14_Out,"null");
			root_1_tWriteJSONField_14_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_14_Out = root_tWriteJSONField_14_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_14_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_14_Out .setText(root_2_tWriteJSONField_14_Out,
		valueMap_tWriteJSONField_14_Out.get("CreatedById"));
			root_2_tWriteJSONField_14_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_14_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_14_Out .setText(root_2_tWriteJSONField_14_Out,"null");
			root_2_tWriteJSONField_14_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_14_Out = root_tWriteJSONField_14_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_14_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_14_Out .setText(root_3_tWriteJSONField_14_Out,
		valueMap_tWriteJSONField_14_Out.get("CreatedDate"));
            root_3_tWriteJSONField_14_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_14_Out .setText(root_3_tWriteJSONField_14_Out,"null");
			root_3_tWriteJSONField_14_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_14_Out = root_tWriteJSONField_14_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_14_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_14_Out .setText(root_4_tWriteJSONField_14_Out,
		valueMap_tWriteJSONField_14_Out.get("Field"));
			root_4_tWriteJSONField_14_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_14_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_14_Out .setText(root_4_tWriteJSONField_14_Out,"null");
			root_4_tWriteJSONField_14_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_14_Out = root_tWriteJSONField_14_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_14_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_14_Out .setText(root_5_tWriteJSONField_14_Out,
		valueMap_tWriteJSONField_14_Out.get("OldValue"));
			root_5_tWriteJSONField_14_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_14_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_14_Out .setText(root_5_tWriteJSONField_14_Out,"null");
			root_5_tWriteJSONField_14_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_14_Out = root_tWriteJSONField_14_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_14_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_14_Out .setText(root_6_tWriteJSONField_14_Out,
		valueMap_tWriteJSONField_14_Out.get("NewValue"));
			root_6_tWriteJSONField_14_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_14_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_14_Out .setText(root_6_tWriteJSONField_14_Out,"null");
			root_6_tWriteJSONField_14_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_14_Out = subTreeRootParent_tWriteJSONField_14_Out;
	}else{
		subTreeRootParent_tWriteJSONField_14_Out=root4Group_tWriteJSONField_14_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_14_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_14_Out[0]==0){
        	orders_tWriteJSONField_14_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_14_Out.length){
        		orders_tWriteJSONField_14_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_14_Out.elements().add(orders_tWriteJSONField_14_Out[0]++,loop_tWriteJSONField_14_Out);
		if(
		valueMap_tWriteJSONField_14_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_14_Out .setText(loop_tWriteJSONField_14_Out,
		valueMap_tWriteJSONField_14_Out.get("Id"));
			loop_tWriteJSONField_14_Out.addAttribute("type", "string");
			loop_tWriteJSONField_14_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_14_Out .setText(loop_tWriteJSONField_14_Out,"null");
			loop_tWriteJSONField_14_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_14_Out++;

/**
 * [tWriteJSONField_14_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_14_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_14";
	
	currentComponent="tWriteJSONField_14_Out";

	

 



/**
 * [tWriteJSONField_14_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_14_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_14";
	
	currentComponent="tWriteJSONField_14_Out";

	

 



/**
 * [tWriteJSONField_14_Out process_data_end ] stop
 */

} // End of branch "out30"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_14";

	


 



/**
 * [tSalesforceInput_14 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_14 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_14";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_14", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_14.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_14 = reader_tSalesforceInput_14.getReturnValues();
if(resultMap_tSalesforceInput_14!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_14 : resultMap_tSalesforceInput_14.entrySet()) {
		switch(entry_tSalesforceInput_14.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_14.setComponentData("tSalesforceInput_14", "ERROR_MESSAGE", entry_tSalesforceInput_14.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_14.setComponentData("tSalesforceInput_14", "NB_LINE", entry_tSalesforceInput_14.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_14.setComponentData("tSalesforceInput_14", "NB_SUCCESS", entry_tSalesforceInput_14.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_14.setComponentData("tSalesforceInput_14", "NB_REJECT", entry_tSalesforceInput_14.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_14 = new StringBuilder();
            for (int i_tSalesforceInput_14 = 0; i_tSalesforceInput_14 < entry_tSalesforceInput_14.getKey().length(); i_tSalesforceInput_14++) {
                char ch_tSalesforceInput_14 = entry_tSalesforceInput_14.getKey().charAt(i_tSalesforceInput_14);
                if(Character.isUpperCase(ch_tSalesforceInput_14) && i_tSalesforceInput_14> 0) {
                	studio_key_tSalesforceInput_14.append('_');
                }
                studio_key_tSalesforceInput_14.append(ch_tSalesforceInput_14);
            }
			container_tSalesforceInput_14.setComponentData("tSalesforceInput_14", studio_key_tSalesforceInput_14.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_14.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_14", true);
end_Hash.put("tSalesforceInput_14", System.currentTimeMillis());




/**
 * [tSalesforceInput_14 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row61");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tWriteJSONField_14_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_14";
	
	currentComponent="tWriteJSONField_14_Out";

	

if(nb_line_tWriteJSONField_14_Out > 0){  
    nestXMLTool_tWriteJSONField_14_Out.replaceDefaultNameSpace(doc_tWriteJSONField_14_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_14_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_14_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_14_Out, format_tWriteJSONField_14_Out);
	output_tWriteJSONField_14_Out.write(doc_tWriteJSONField_14_Out);
    output_tWriteJSONField_14_Out.close();
					row60Struct row_tWriteJSONField_14_Out = new row60Struct();
						  
					     		row_tWriteJSONField_14_Out.data = strWriter_tWriteJSONField_14_Out.toString();
					     		listGroupby_tWriteJSONField_14_Out.add(row_tWriteJSONField_14_Out);
		    		

}
globalMap.put("tWriteJSONField_14_Out_NB_LINE",nb_line_tWriteJSONField_14_Out);
globalMap.put("tWriteJSONField_14_In_FINISH" + (listGroupby_tWriteJSONField_14_Out==null?"":listGroupby_tWriteJSONField_14_Out.hashCode()), "true");
	
		txf_tWriteJSONField_14_Out.join();
		
		if(txf_tWriteJSONField_14_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_14_Out.getCurrentComponent();
			throw txf_tWriteJSONField_14_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_14_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_14_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_14_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out30");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_14_Out", true);
end_Hash.put("tWriteJSONField_14_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_14_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_14 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_14";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_14")==null){
    if(resourceMap.get("reader_tSalesforceInput_14")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_14")).close();
		} catch (java.io.IOException e_tSalesforceInput_14) {
			String errorMessage_tSalesforceInput_14 = "failed to release the resource in tSalesforceInput_14 :" + e_tSalesforceInput_14.getMessage();
			System.err.println(errorMessage_tSalesforceInput_14);
		}
	}
}
 



/**
 * [tSalesforceInput_14 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_14_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_14";
	
	currentComponent="tWriteJSONField_14_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_14_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_14_In");
		if(resourceMap.get("finish_tWriteJSONField_14_Out") == null){
			globalMap.put("tWriteJSONField_14_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_14_Out==null?"":listGroupby_tWriteJSONField_14_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_14_Out != null) {
		globalMap.put("tWriteJSONField_14_In_FINISH" + (listGroupby_tWriteJSONField_14_Out==null?"":listGroupby_tWriteJSONField_14_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_14_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_14_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_14", false);
		start_Hash.put("tFileArchive_14", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_14";

	
		int tos_count_tFileArchive_14 = 0;
		

 



/**
 * [tFileArchive_14 begin ] stop
 */
	
	/**
	 * [tFileArchive_14 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_14";

	

	

		String sourceFile_tFileArchive_14 = context.staging_S3_dir + "noodlecrm__program_term_enrollment__history.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_14), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_14 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_14 = context.staging_S3_dir + "noodlecrm__program_term_enrollment__history.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_14 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_14, zipFile_tFileArchive_14);
    zip_tFileArchive_14.setOverwriteExistTargetZip(true);
	zip_tFileArchive_14.setMakeTargetDir(true);
	zip_tFileArchive_14.setCompressLevel(9);
	zip_tFileArchive_14.setArchiveFormat("gzip");
	zip_tFileArchive_14.setAllFiles(true);
	
	
		zip_tFileArchive_14.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_14_ARCHIVE_FILEPATH",zipFile_tFileArchive_14);
   
   globalMap.put("tFileArchive_14_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_14).getName());

   zip_tFileArchive_14.doZip();


 


	tos_count_tFileArchive_14++;

/**
 * [tFileArchive_14 main ] stop
 */
	
	/**
	 * [tFileArchive_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_14";

	

 



/**
 * [tFileArchive_14 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_14";

	

 



/**
 * [tFileArchive_14 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_14 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_14";

	

 

ok_Hash.put("tFileArchive_14", true);
end_Hash.put("tFileArchive_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk85", 0, "ok");
				}
				tS3Put_14Process(globalMap);



/**
 * [tFileArchive_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_14 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_14";

	

 



/**
 * [tFileArchive_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_14_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_14", false);
		start_Hash.put("tS3Put_14", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_14";

	
		int tos_count_tS3Put_14 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_14 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_14 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/noodlecrm__program_term_enrollment__history/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/noodlecrm__program_term_enrollment__history_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_14 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_14 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_14 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_14 = context.staging_S3_dir + "noodlecrm__program_term_enrollment__history.json.gz";
	
	boolean useStream_tS3Put_14 = false;
	java.io.InputStream uploadStream_tS3Put_14 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_14 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_14 instanceof String){
		    useStream_tS3Put_14 = false;
		}else if(fileOrStream_tS3Put_14 instanceof java.io.InputStream){
		    useStream_tS3Put_14 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_14 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_14) {
				java.io.File inputFile_tS3Put_14 = new java.io.File((String)fileOrStream_tS3Put_14);
				
				long multipart_upload_threshold_tS3Put_14 = 5 * 1024 * 1024;
				
    		tm_tS3Put_14 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_14)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_14)
    			.withS3Client(conn_tS3Put_14)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_14 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_14, inputFile_tS3Put_14).withMetadata(objectMetadata_tS3Put_14);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_14 = tm_tS3Put_14.upload(putRequest_tS3Put_14);
  		
  			upload_tS3Put_14.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_14 = ((java.io.InputStream)fileOrStream_tS3Put_14);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_14 = new S3StreamUtil();
    		byte[] buffer_tS3Put_14 = new byte[partSizeInBytes_tS3Put_14];
    		sourceStream_tS3Put_14.read(buffer_tS3Put_14);
    		long curPartSize_tS3Put_14 = streamUtil_tS3Put_14.getLength(buffer_tS3Put_14);
    		boolean multiUpload_tS3Put_14 = curPartSize_tS3Put_14 == partSizeInBytes_tS3Put_14;
    		
    		if(!multiUpload_tS3Put_14) {
    				objectMetadata_tS3Put_14.setContentLength(curPartSize_tS3Put_14);
    				uploadStream_tS3Put_14 = new java.io.ByteArrayInputStream(buffer_tS3Put_14,0,Long.valueOf(curPartSize_tS3Put_14).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_14 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_14, uploadStream_tS3Put_14, objectMetadata_tS3Put_14);
			
    				
    				

    				
    				conn_tS3Put_14.putObject(putRequest_tS3Put_14);
    		} else {
    				uploadStream_tS3Put_14 = new java.io.ByteArrayInputStream(buffer_tS3Put_14);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_14 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_14 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_14, objectMetadata_tS3Put_14);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_14 = conn_tS3Put_14.initiateMultipartUpload(putRequest_tS3Put_14);
      			String uploadId_tS3Put_14 = initResponse_tS3Put_14.getUploadId();
      			int partNumber_tS3Put_14 = 1;
      			boolean streamHasNext_tS3Put_14 = true;
      			byte[] probeAvailability_tS3Put_14 = new byte[1];
				try {
					while (streamHasNext_tS3Put_14) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_14 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_14)
						.withUploadId(uploadId_tS3Put_14)
                    	.withPartNumber(partNumber_tS3Put_14)
						.withPartSize(curPartSize_tS3Put_14);
            		    uploadRequest_tS3Put_14.setInputStream(uploadStream_tS3Put_14);
            		    streamHasNext_tS3Put_14 = sourceStream_tS3Put_14.read(probeAvailability_tS3Put_14) != -1;
            		    if(!streamHasNext_tS3Put_14){
                    	    uploadRequest_tS3Put_14.setLastPart(true);
                    	}

                		partTags_tS3Put_14.add(conn_tS3Put_14.uploadPart(uploadRequest_tS3Put_14).getPartETag());
                  	    partNumber_tS3Put_14++;

          		     	if(uploadStream_tS3Put_14!=null){
      		         			uploadStream_tS3Put_14.close();
          		     	}
          		     	buffer_tS3Put_14 = new byte[partSizeInBytes_tS3Put_14];
          		     	sourceStream_tS3Put_14.read(buffer_tS3Put_14,1,partSizeInBytes_tS3Put_14-1);
          		     	buffer_tS3Put_14[0] = probeAvailability_tS3Put_14[0];
          		     	probeAvailability_tS3Put_14 = new byte[1];
          		     	curPartSize_tS3Put_14 = streamUtil_tS3Put_14.getLength(buffer_tS3Put_14);
          		     	uploadStream_tS3Put_14 = new java.io.ByteArrayInputStream(buffer_tS3Put_14);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_14 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_14,
                        uploadId_tS3Put_14, partTags_tS3Put_14);
            		conn_tS3Put_14.completeMultipartUpload(compRequest_tS3Put_14);
            } catch (java.lang.Exception uploadException_tS3Put_14) {
  							conn_tS3Put_14.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_14, uploadId_tS3Put_14));
    						throw uploadException_tS3Put_14;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_14){
		
			throw(e_tS3Put_14);
		
	}finally{
		if(useStream_tS3Put_14 && uploadStream_tS3Put_14!=null){
    	uploadStream_tS3Put_14.close();
    }
    
    if(tm_tS3Put_14 != null){
        tm_tS3Put_14.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_14 begin ] stop
 */
	
	/**
	 * [tS3Put_14 main ] start
	 */

	

	
	
	currentComponent="tS3Put_14";

	

 


	tos_count_tS3Put_14++;

/**
 * [tS3Put_14 main ] stop
 */
	
	/**
	 * [tS3Put_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_14";

	

 



/**
 * [tS3Put_14 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_14";

	

 



/**
 * [tS3Put_14 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_14 end ] start
	 */

	

	
	
	currentComponent="tS3Put_14";

	

 

ok_Hash.put("tS3Put_14", true);
end_Hash.put("tS3Put_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk86", 0, "ok");
				}
				tJava_32Process(globalMap);



/**
 * [tS3Put_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_14 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_14";

	

 



/**
 * [tS3Put_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_14_SUBPROCESS_STATE", 1);
	}
	

public void tJava_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_32_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_32", false);
		start_Hash.put("tJava_32", System.currentTimeMillis());
		
	
	currentComponent="tJava_32";

	
		int tos_count_tJava_32 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_14_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_14_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_32 begin ] stop
 */
	
	/**
	 * [tJava_32 main ] start
	 */

	

	
	
	currentComponent="tJava_32";

	

 


	tos_count_tJava_32++;

/**
 * [tJava_32 main ] stop
 */
	
	/**
	 * [tJava_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_32";

	

 



/**
 * [tJava_32 process_data_begin ] stop
 */
	
	/**
	 * [tJava_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_32";

	

 



/**
 * [tJava_32 process_data_end ] stop
 */
	
	/**
	 * [tJava_32 end ] start
	 */

	

	
	
	currentComponent="tJava_32";

	

 

ok_Hash.put("tJava_32", true);
end_Hash.put("tJava_32", System.currentTimeMillis());




/**
 * [tJava_32 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_32 finally ] start
	 */

	

	
	
	currentComponent="tJava_32";

	

 



/**
 * [tJava_32 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_32_SUBPROCESS_STATE", 1);
	}
	

public void tDie_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_14", false);
		start_Hash.put("tDie_14", System.currentTimeMillis());
		
	
	currentComponent="tDie_14";

	
		int tos_count_tDie_14 = 0;
		

 



/**
 * [tDie_14 begin ] stop
 */
	
	/**
	 * [tDie_14 main ] start
	 */

	

	
	
	currentComponent="tDie_14";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_14", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_14_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_14_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_14_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_14) {
		logIgnoredError(String.format("tDie_14 - tDie failed to log message due to internal error: %s", e_tDie_14), e_tDie_14);
	}
	
	currentComponent = "tDie_14";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_14_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_14++;

/**
 * [tDie_14 main ] stop
 */
	
	/**
	 * [tDie_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_14";

	

 



/**
 * [tDie_14 process_data_begin ] stop
 */
	
	/**
	 * [tDie_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_14";

	

 



/**
 * [tDie_14 process_data_end ] stop
 */
	
	/**
	 * [tDie_14 end ] start
	 */

	

	
	
	currentComponent="tDie_14";

	

 

ok_Hash.put("tDie_14", true);
end_Hash.put("tDie_14", System.currentTimeMillis());




/**
 * [tDie_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_14 finally ] start
	 */

	

	
	
	currentComponent="tDie_14";

	

 



/**
 * [tDie_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_14_SUBPROCESS_STATE", 1);
	}
	

public void tJava_34Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_34_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_34", false);
		start_Hash.put("tJava_34", System.currentTimeMillis());
		
	
	currentComponent="tJava_34";

	
		int tos_count_tJava_34 = 0;
		



System.out.println("Running For SFDC Object ContactHistory: ");

Date new_date = TalendDate.addDate(TalendDate.getCurrentDate(), -1, "dd");
//Date new_till_date = TalendDate.getCurrentDate()



if (!context.filter_date.equals("")) 
{
context.put("year",StringHandling.LEFT(context.filter_date,4));
context.put("month",StringHandling.LEFT((context.filter_date).substring(5),2));
context.put("today",((context.filter_date).replace("-","")));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyy-MM-dd",context.filter_date)));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.parseDate("yyyy-MM-dd",context.filter_date),+1, "dd")));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}

else if(context.filter_date.equals(""))
{
context.put("year",TalendDate.formatDate("yyyy",TalendDate.getCurrentDate()));
context.put("month",TalendDate.formatDate("MM",TalendDate.getCurrentDate()));
context.put("today",TalendDate.formatDate("yyyyMMdd",new_date));
context.put("filter_date",TalendDate.formatDate("yyyy-MM-dd",new_date));
context.put("filter_till_date",TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));

System.out.println("----------------------------------------------");

//System.out.println("Raw Filter Date   :" + context.filter_date);

System.out.println("Folder Year       :"+context.get("year"));
System.out.println("Folder Month      :"+context.get("month"));
System.out.println("File Date         :"+context.get("today"));
System.out.println("Filter Date       :"+context.get("filter_date"));
System.out.println("Filter Till Date  :"+context.get("filter_till_date"));

System.out.println("----------------------------------------------");
}


else
{
System.out.println("Date Format Is not Correct");
}



if(context.sfdc_conn_QueryCondition.equals(""))
// ex: "CreatedDate <= 2021-05-12T00:00:00.000Z "  from staring to till date
{
context.sfdc_conn_QueryCondition="CreatedDate > " + context.get("filter_date")+"T20:00:00.000Z and CreatedDate <= "+context.get("filter_till_date")+"T20:00:00.000Z "; 
} 



System.out.println("Filter Condition : " + context.sfdc_conn_QueryCondition);

System.out.println("----------------------------------------------");













 



/**
 * [tJava_34 begin ] stop
 */
	
	/**
	 * [tJava_34 main ] start
	 */

	

	
	
	currentComponent="tJava_34";

	

 


	tos_count_tJava_34++;

/**
 * [tJava_34 main ] stop
 */
	
	/**
	 * [tJava_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_34";

	

 



/**
 * [tJava_34 process_data_begin ] stop
 */
	
	/**
	 * [tJava_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_34";

	

 



/**
 * [tJava_34 process_data_end ] stop
 */
	
	/**
	 * [tJava_34 end ] start
	 */

	

	
	
	currentComponent="tJava_34";

	

 

ok_Hash.put("tJava_34", true);
end_Hash.put("tJava_34", System.currentTimeMillis());




/**
 * [tJava_34 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_34:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tSalesforceInput_16Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_34 finally ] start
	 */

	

	
	
	currentComponent="tJava_34";

	

 



/**
 * [tJava_34 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_34_SUBPROCESS_STATE", 1);
	}
	


public static class out33Struct implements routines.system.IPersistableRow<out33Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ContactId;

				public String getContactId () {
					return this.ContactId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public long CreatedDate;

				public long getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ContactId = readString(dis);
					
					this.CreatedById = readString(dis);
					
			        this.CreatedDate = dis.readLong();
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ContactId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// long
				
		            	dos.writeLong(this.CreatedDate);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ContactId="+ContactId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row68Struct implements routines.system.IPersistableRow<row68Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public boolean IsDeleted;

				public boolean getIsDeleted () {
					return this.IsDeleted;
				}
				
			    public String ContactId;

				public String getContactId () {
					return this.ContactId;
				}
				
			    public String CreatedById;

				public String getCreatedById () {
					return this.CreatedById;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String Field;

				public String getField () {
					return this.Field;
				}
				
			    public String OldValue;

				public String getOldValue () {
					return this.OldValue;
				}
				
			    public String NewValue;

				public String getNewValue () {
					return this.NewValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
			        this.IsDeleted = dis.readBoolean();
					
					this.ContactId = readString(dis);
					
					this.CreatedById = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.Field = readString(dis);
					
					this.OldValue = readString(dis);
					
					this.NewValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsDeleted);
					
					// String
				
						writeString(this.ContactId,dos);
					
					// String
				
						writeString(this.CreatedById,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// String
				
						writeString(this.Field,dos);
					
					// String
				
						writeString(this.OldValue,dos);
					
					// String
				
						writeString(this.NewValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",IsDeleted="+String.valueOf(IsDeleted));
		sb.append(",ContactId="+ContactId);
		sb.append(",CreatedById="+CreatedById);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",Field="+Field);
		sb.append(",OldValue="+OldValue);
		sb.append(",NewValue="+NewValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row68Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row68Struct row68 = new row68Struct();
out33Struct out33 = new out33Struct();





	
	/**
	 * [tWriteJSONField_16_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_16_Out", false);
		start_Hash.put("tWriteJSONField_16_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_16";
	
	currentComponent="tWriteJSONField_16_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out33");
					}
				
		int tos_count_tWriteJSONField_16_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_16_Out = 0;
				boolean needRoot_tWriteJSONField_16_Out  = true;
				
				String  strCompCache_tWriteJSONField_16_Out= null;		
				
						        java.util.Queue<row67Struct> listGroupby_tWriteJSONField_16_Out = new java.util.concurrent.ConcurrentLinkedQueue<row67Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_16_Out extends Thread {
						
									    java.util.Queue<row67Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_16_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_16_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_16_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_16_In", queue);
							globalMap.put("flows_tWriteJSONField_16_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_16_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_16_Out txf_tWriteJSONField_16_Out = new ThreadXMLField_tWriteJSONField_16_Out(listGroupby_tWriteJSONField_16_Out);
					
					txf_tWriteJSONField_16_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_16_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_16_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_16_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_16_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_16_Out nestXMLTool_tWriteJSONField_16_Out = new NestXMLTool_tWriteJSONField_16_Out();

out33Struct  rowStructOutput_tWriteJSONField_16_Out = new out33Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_16_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_16_Out = null;
org.dom4j.Document doc_tWriteJSONField_16_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_16_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_16_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_16_Out.setTrimText(false);
format_tWriteJSONField_16_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_16_Out = new int[1];

 



/**
 * [tWriteJSONField_16_Out begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row68");
					}
				
		int tos_count_tMap_16 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
out33Struct out33_tmp = new out33Struct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_16", false);
		start_Hash.put("tSalesforceInput_16", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_16";

	
		int tos_count_tSalesforceInput_16 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_16 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_16 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_16.createRuntimeProperties();
 		                    props_tSalesforceInput_16.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_16.setValue("condition",
 		                    context.sfdc_conn_QueryCondition);
 		                    
 		                    props_tSalesforceInput_16.setValue("manualQuery",
 		                    false);
 		                    
 		                    props_tSalesforceInput_16.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_16.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_16.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_16.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_16.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_16.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_16.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_16.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_16.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_16.module.setValue("moduleName",
 		                    "ContactHistory");
 		                    
 		                    props_tSalesforceInput_16.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_16.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_16.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_16.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_16.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_16_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"ContactHistory\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsDeleted\",\"type\":\"boolean\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"IsDeleted\",\"talend.field.dbColumnName\":\"IsDeleted\",\"di.column.talendType\":\"id_Boolean\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"IsDeleted\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"ContactId\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"ContactId\",\"talend.field.dbColumnName\":\"ContactId\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"ContactId\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedById\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"CreatedById\",\"talend.field.dbColumnName\":\"CreatedById\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedById\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Field\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Field\",\"talend.field.dbColumnName\":\"Field\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Field\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"OldValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"OldValue\",\"talend.field.dbColumnName\":\"OldValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"OldValue\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"NewValue\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"NewValue\",\"talend.field.dbColumnName\":\"NewValue\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"255\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"NewValue\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"ContactHistory\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_16_1_fisrt sst_tSalesforceInput_16_1_fisrt = new SchemaSettingTool_tSalesforceInput_16_1_fisrt();
 		                    
 		                    props_tSalesforceInput_16.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_16_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_16.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_16 = props_tSalesforceInput_16.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_16 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_16 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_16 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_16.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_16);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_16.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_16 = props_tSalesforceInput_16.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_16 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_16 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_16 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_16.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_16);
        }
    }
globalMap.put("tSalesforceInput_16_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_16);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.2");
java.net.URL mappings_url_tSalesforceInput_16= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_16_MAPPINGS_URL", mappings_url_tSalesforceInput_16);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_16 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_16";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_16 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_16 = null;
topology_tSalesforceInput_16 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_16 = def_tSalesforceInput_16.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_16, topology_tSalesforceInput_16);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_16 = def_tSalesforceInput_16.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_16 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_16.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_16 = componentRuntime_tSalesforceInput_16.initialize(container_tSalesforceInput_16, props_tSalesforceInput_16);

if (initVr_tSalesforceInput_16.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_16.getMessage());
}

if(componentRuntime_tSalesforceInput_16 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_16 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_16;
	compDriverInitialization_tSalesforceInput_16.runAtDriver(container_tSalesforceInput_16);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_16 = null;
if(componentRuntime_tSalesforceInput_16 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_16 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_16;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_16 = sourceOrSink_tSalesforceInput_16.validate(container_tSalesforceInput_16);
	if (vr_tSalesforceInput_16.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_16.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_16 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_16;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_16 =
            source_tSalesforceInput_16.createReader(container_tSalesforceInput_16);
	reader_tSalesforceInput_16 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_16, container_tSalesforceInput_16);

        boolean multi_output_is_allowed_tSalesforceInput_16 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_16 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_16.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_16 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_16 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_16 = props_tSalesforceInput_16.getSchema(c_tSalesforceInput_16, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_16 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_16, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_16 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_16 = reader_tSalesforceInput_16.start();

    resourceMap.put("reader_tSalesforceInput_16", reader_tSalesforceInput_16);

    for (; available_tSalesforceInput_16; available_tSalesforceInput_16 = reader_tSalesforceInput_16.advance()) {
    	nb_line_tSalesforceInput_16++;

    	
        if (multi_output_is_allowed_tSalesforceInput_16) {
                row68 = null;

        }

        try {
            Object data_tSalesforceInput_16 = reader_tSalesforceInput_16.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_16) {
                    row68 = new row68Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_16 == null) {
            factory_tSalesforceInput_16 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_16.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_16.setWrapped(factory_tSalesforceInput_16.convertToAvro(data_tSalesforceInput_16));
                Object columnValue_0_tSalesforceInput_16 = outgoingEnforcer_tSalesforceInput_16.get(0);
                        row68.Id = (String) (columnValue_0_tSalesforceInput_16);
                Object columnValue_1_tSalesforceInput_16 = outgoingEnforcer_tSalesforceInput_16.get(1);
                    if (columnValue_1_tSalesforceInput_16 == null) {
                        row68.IsDeleted = false;
                    } else {
                            row68.IsDeleted = (boolean) (columnValue_1_tSalesforceInput_16);
                    }
                Object columnValue_2_tSalesforceInput_16 = outgoingEnforcer_tSalesforceInput_16.get(2);
                        row68.ContactId = (String) (columnValue_2_tSalesforceInput_16);
                Object columnValue_3_tSalesforceInput_16 = outgoingEnforcer_tSalesforceInput_16.get(3);
                        row68.CreatedById = (String) (columnValue_3_tSalesforceInput_16);
                Object columnValue_4_tSalesforceInput_16 = outgoingEnforcer_tSalesforceInput_16.get(4);
                        row68.CreatedDate = (java.util.Date) (columnValue_4_tSalesforceInput_16);
                Object columnValue_5_tSalesforceInput_16 = outgoingEnforcer_tSalesforceInput_16.get(5);
                        row68.Field = (String) (columnValue_5_tSalesforceInput_16);
                Object columnValue_6_tSalesforceInput_16 = outgoingEnforcer_tSalesforceInput_16.get(6);
                        row68.OldValue = (String) (columnValue_6_tSalesforceInput_16);
                Object columnValue_7_tSalesforceInput_16 = outgoingEnforcer_tSalesforceInput_16.get(7);
                        row68.NewValue = (String) (columnValue_7_tSalesforceInput_16);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_16) {
        	java.util.Map<String,Object> info_tSalesforceInput_16 = e_tSalesforceInput_16.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_16 = null;
            	if(info_tSalesforceInput_16.containsKey("error")){
            		errorMessage_tSalesforceInput_16 = info_tSalesforceInput_16.get("error");
        		}else if(info_tSalesforceInput_16.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_16 = info_tSalesforceInput_16.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_16 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_16 = "Row "+ nb_line_tSalesforceInput_16 + ": "+errorMessage_tSalesforceInput_16;
    			System.err.println(errorMessage_tSalesforceInput_16);
            	// If the record is reject, the main line record should put NULL
            	row68 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_16 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_16 = null;


 



/**
 * [tSalesforceInput_16 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_16 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_16";

	


 


	tos_count_tSalesforceInput_16++;

/**
 * [tSalesforceInput_16 main ] stop
 */
	
	/**
	 * [tSalesforceInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_16";

	


 



/**
 * [tSalesforceInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row68");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_16 = false;
		  boolean mainRowRejected_tMap_16 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
        // ###############################
        // # Output tables

out33 = null;


// # Output table : 'out33'
out33_tmp.Id = row68.Id ;
out33_tmp.IsDeleted = row68.IsDeleted ;
out33_tmp.ContactId = row68.ContactId ;
out33_tmp.CreatedById = row68.CreatedById ;
out33_tmp.CreatedDate = (row68.CreatedDate == null)
?
null
:(TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",row68.CreatedDate))).getTime())/1000 ;
out33_tmp.Field = row68.Field ;
out33_tmp.OldValue = row68.OldValue ;
out33_tmp.NewValue = row68.NewValue ;
out33 = out33_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
	
	/**
	 * [tMap_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_begin ] stop
 */
// Start of branch "out33"
if(out33 != null) { 



	
	/**
	 * [tWriteJSONField_16_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_16";
	
	currentComponent="tWriteJSONField_16_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out33");
					}
					

	if(txf_tWriteJSONField_16_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_16_Out.getCurrentComponent();
		throw txf_tWriteJSONField_16_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_16_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_16_Out.getLastError();
	}
	nb_line_tWriteJSONField_16_Out++;
	valueMap_tWriteJSONField_16_Out.clear();
	arraysValueMap_tWriteJSONField_16_Out.clear();
	valueMap_tWriteJSONField_16_Out.put("Id",
	(
            out33.Id.toString()
		));
	arraysValueMap_tWriteJSONField_16_Out.put("Id",
	(
            out33.Id.toString()
		));
	valueMap_tWriteJSONField_16_Out.put("IsDeleted",
	(
            String.valueOf(out33.IsDeleted)
		));
	arraysValueMap_tWriteJSONField_16_Out.put("IsDeleted",
	(
            String.valueOf(out33.IsDeleted)
		));
	valueMap_tWriteJSONField_16_Out.put("ContactId",
	(
            out33.ContactId.toString()
		));
	arraysValueMap_tWriteJSONField_16_Out.put("ContactId",
	(
            out33.ContactId.toString()
		));
	valueMap_tWriteJSONField_16_Out.put("CreatedById",
	(
            out33.CreatedById.toString()
		));
	arraysValueMap_tWriteJSONField_16_Out.put("CreatedById",
	(
            out33.CreatedById.toString()
		));
	valueMap_tWriteJSONField_16_Out.put("CreatedDate",
	(
            String.valueOf(out33.CreatedDate)
		));
	arraysValueMap_tWriteJSONField_16_Out.put("CreatedDate",
	(
            String.valueOf(out33.CreatedDate)
		));
	valueMap_tWriteJSONField_16_Out.put("Field",
	(
            out33.Field.toString()
		));
	arraysValueMap_tWriteJSONField_16_Out.put("Field",
	(
            out33.Field.toString()
		));
	valueMap_tWriteJSONField_16_Out.put("OldValue",
	(
		out33.OldValue != null?
            out33.OldValue.toString():null
		));
	arraysValueMap_tWriteJSONField_16_Out.put("OldValue",
	(
		out33.OldValue != null?
            out33.OldValue.toString():null
		));
	valueMap_tWriteJSONField_16_Out.put("NewValue",
	(
		out33.NewValue != null?
            out33.NewValue.toString():null
		));
	arraysValueMap_tWriteJSONField_16_Out.put("NewValue",
	(
		out33.NewValue != null?
            out33.NewValue.toString():null
		));
		String strTemp_tWriteJSONField_16_Out = "";
	if(strCompCache_tWriteJSONField_16_Out==null){
		strCompCache_tWriteJSONField_16_Out=strTemp_tWriteJSONField_16_Out;
		
	}else{  
    		nestXMLTool_tWriteJSONField_16_Out.replaceDefaultNameSpace(doc_tWriteJSONField_16_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_16_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_16_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_16_Out, format_tWriteJSONField_16_Out);
			output_tWriteJSONField_16_Out.write(doc_tWriteJSONField_16_Out);
		    output_tWriteJSONField_16_Out.close();
			
				  		  row67Struct row_tWriteJSONField_16_Out = new row67Struct();
						  
					     		row_tWriteJSONField_16_Out.data = strWriter_tWriteJSONField_16_Out.toString();
					     		listGroupby_tWriteJSONField_16_Out.add(row_tWriteJSONField_16_Out);
					
		    doc_tWriteJSONField_16_Out.clearContent();
			needRoot_tWriteJSONField_16_Out = true;
			for(int i_tWriteJSONField_16_Out=0;i_tWriteJSONField_16_Out<orders_tWriteJSONField_16_Out.length;i_tWriteJSONField_16_Out++){
				orders_tWriteJSONField_16_Out[i_tWriteJSONField_16_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_16_Out != null && groupbyList_tWriteJSONField_16_Out.size() >= 0){
				groupbyList_tWriteJSONField_16_Out.clear();
			}
			strCompCache_tWriteJSONField_16_Out=strTemp_tWriteJSONField_16_Out;
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_16_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_16_Out) {
		needRoot_tWriteJSONField_16_Out=false;
		org.dom4j.Element root_tWriteJSONField_16_Out = doc_tWriteJSONField_16_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_16_Out = root_tWriteJSONField_16_Out;
		org.dom4j.Element root_0_tWriteJSONField_16_Out = root_tWriteJSONField_16_Out.addElement("IsDeleted");
		if(
		valueMap_tWriteJSONField_16_Out.get("IsDeleted")!=null){
			nestXMLTool_tWriteJSONField_16_Out .setText(root_0_tWriteJSONField_16_Out,
		valueMap_tWriteJSONField_16_Out.get("IsDeleted"));
            root_0_tWriteJSONField_16_Out.addAttribute("type", "boolean");
		}
		else {
			nestXMLTool_tWriteJSONField_16_Out .setText(root_0_tWriteJSONField_16_Out,"null");
			root_0_tWriteJSONField_16_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_1_tWriteJSONField_16_Out = root_tWriteJSONField_16_Out.addElement("ContactId");
		if(
		valueMap_tWriteJSONField_16_Out.get("ContactId")!=null){
			nestXMLTool_tWriteJSONField_16_Out .setText(root_1_tWriteJSONField_16_Out,
		valueMap_tWriteJSONField_16_Out.get("ContactId"));
			root_1_tWriteJSONField_16_Out.addAttribute("type", "string");
			root_1_tWriteJSONField_16_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_16_Out .setText(root_1_tWriteJSONField_16_Out,"null");
			root_1_tWriteJSONField_16_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_2_tWriteJSONField_16_Out = root_tWriteJSONField_16_Out.addElement("CreatedById");
		if(
		valueMap_tWriteJSONField_16_Out.get("CreatedById")!=null){
			nestXMLTool_tWriteJSONField_16_Out .setText(root_2_tWriteJSONField_16_Out,
		valueMap_tWriteJSONField_16_Out.get("CreatedById"));
			root_2_tWriteJSONField_16_Out.addAttribute("type", "string");
			root_2_tWriteJSONField_16_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_16_Out .setText(root_2_tWriteJSONField_16_Out,"null");
			root_2_tWriteJSONField_16_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_3_tWriteJSONField_16_Out = root_tWriteJSONField_16_Out.addElement("CreatedDate");
		if(
		valueMap_tWriteJSONField_16_Out.get("CreatedDate")!=null){
			nestXMLTool_tWriteJSONField_16_Out .setText(root_3_tWriteJSONField_16_Out,
		valueMap_tWriteJSONField_16_Out.get("CreatedDate"));
            root_3_tWriteJSONField_16_Out.addAttribute("type", "number");
		}
		else {
			nestXMLTool_tWriteJSONField_16_Out .setText(root_3_tWriteJSONField_16_Out,"null");
			root_3_tWriteJSONField_16_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_4_tWriteJSONField_16_Out = root_tWriteJSONField_16_Out.addElement("Field");
		if(
		valueMap_tWriteJSONField_16_Out.get("Field")!=null){
			nestXMLTool_tWriteJSONField_16_Out .setText(root_4_tWriteJSONField_16_Out,
		valueMap_tWriteJSONField_16_Out.get("Field"));
			root_4_tWriteJSONField_16_Out.addAttribute("type", "string");
			root_4_tWriteJSONField_16_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_16_Out .setText(root_4_tWriteJSONField_16_Out,"null");
			root_4_tWriteJSONField_16_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_5_tWriteJSONField_16_Out = root_tWriteJSONField_16_Out.addElement("OldValue");
		if(
		valueMap_tWriteJSONField_16_Out.get("OldValue")!=null){
			nestXMLTool_tWriteJSONField_16_Out .setText(root_5_tWriteJSONField_16_Out,
		valueMap_tWriteJSONField_16_Out.get("OldValue"));
			root_5_tWriteJSONField_16_Out.addAttribute("type", "string");
			root_5_tWriteJSONField_16_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_16_Out .setText(root_5_tWriteJSONField_16_Out,"null");
			root_5_tWriteJSONField_16_Out.addAttribute("null", "true");
		}
		org.dom4j.Element root_6_tWriteJSONField_16_Out = root_tWriteJSONField_16_Out.addElement("NewValue");
		if(
		valueMap_tWriteJSONField_16_Out.get("NewValue")!=null){
			nestXMLTool_tWriteJSONField_16_Out .setText(root_6_tWriteJSONField_16_Out,
		valueMap_tWriteJSONField_16_Out.get("NewValue"));
			root_6_tWriteJSONField_16_Out.addAttribute("type", "string");
			root_6_tWriteJSONField_16_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_16_Out .setText(root_6_tWriteJSONField_16_Out,"null");
			root_6_tWriteJSONField_16_Out.addAttribute("null", "true");
		}
		root4Group_tWriteJSONField_16_Out = subTreeRootParent_tWriteJSONField_16_Out;
	}else{
		subTreeRootParent_tWriteJSONField_16_Out=root4Group_tWriteJSONField_16_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_16_Out = org.dom4j.DocumentHelper.createElement("Id");
        if(orders_tWriteJSONField_16_Out[0]==0){
        	orders_tWriteJSONField_16_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_16_Out.length){
        		orders_tWriteJSONField_16_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_16_Out.elements().add(orders_tWriteJSONField_16_Out[0]++,loop_tWriteJSONField_16_Out);
		if(
		valueMap_tWriteJSONField_16_Out.get("Id")!=null){
			nestXMLTool_tWriteJSONField_16_Out .setText(loop_tWriteJSONField_16_Out,
		valueMap_tWriteJSONField_16_Out.get("Id"));
			loop_tWriteJSONField_16_Out.addAttribute("type", "string");
			loop_tWriteJSONField_16_Out.addAttribute("class", "string");
				
		}
		else {
			nestXMLTool_tWriteJSONField_16_Out .setText(loop_tWriteJSONField_16_Out,"null");
			loop_tWriteJSONField_16_Out.addAttribute("null", "true");
		}

 


	tos_count_tWriteJSONField_16_Out++;

/**
 * [tWriteJSONField_16_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_16_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_16";
	
	currentComponent="tWriteJSONField_16_Out";

	

 



/**
 * [tWriteJSONField_16_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_16_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_16";
	
	currentComponent="tWriteJSONField_16_Out";

	

 



/**
 * [tWriteJSONField_16_Out process_data_end ] stop
 */

} // End of branch "out33"




	
	/**
	 * [tMap_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_16";

	


 



/**
 * [tSalesforceInput_16 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_16 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_16";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_16", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_16.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_16 = reader_tSalesforceInput_16.getReturnValues();
if(resultMap_tSalesforceInput_16!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_16 : resultMap_tSalesforceInput_16.entrySet()) {
		switch(entry_tSalesforceInput_16.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_16.setComponentData("tSalesforceInput_16", "ERROR_MESSAGE", entry_tSalesforceInput_16.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_16.setComponentData("tSalesforceInput_16", "NB_LINE", entry_tSalesforceInput_16.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_16.setComponentData("tSalesforceInput_16", "NB_SUCCESS", entry_tSalesforceInput_16.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_16.setComponentData("tSalesforceInput_16", "NB_REJECT", entry_tSalesforceInput_16.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_16 = new StringBuilder();
            for (int i_tSalesforceInput_16 = 0; i_tSalesforceInput_16 < entry_tSalesforceInput_16.getKey().length(); i_tSalesforceInput_16++) {
                char ch_tSalesforceInput_16 = entry_tSalesforceInput_16.getKey().charAt(i_tSalesforceInput_16);
                if(Character.isUpperCase(ch_tSalesforceInput_16) && i_tSalesforceInput_16> 0) {
                	studio_key_tSalesforceInput_16.append('_');
                }
                studio_key_tSalesforceInput_16.append(ch_tSalesforceInput_16);
            }
			container_tSalesforceInput_16.setComponentData("tSalesforceInput_16", studio_key_tSalesforceInput_16.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_16.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_16", true);
end_Hash.put("tSalesforceInput_16", System.currentTimeMillis());




/**
 * [tSalesforceInput_16 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row68");
			  	}
			  	
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tWriteJSONField_16_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_16";
	
	currentComponent="tWriteJSONField_16_Out";

	

if(nb_line_tWriteJSONField_16_Out > 0){  
    nestXMLTool_tWriteJSONField_16_Out.replaceDefaultNameSpace(doc_tWriteJSONField_16_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_16_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_16_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_16_Out, format_tWriteJSONField_16_Out);
	output_tWriteJSONField_16_Out.write(doc_tWriteJSONField_16_Out);
    output_tWriteJSONField_16_Out.close();
					row67Struct row_tWriteJSONField_16_Out = new row67Struct();
						  
					     		row_tWriteJSONField_16_Out.data = strWriter_tWriteJSONField_16_Out.toString();
					     		listGroupby_tWriteJSONField_16_Out.add(row_tWriteJSONField_16_Out);
		    		

}
globalMap.put("tWriteJSONField_16_Out_NB_LINE",nb_line_tWriteJSONField_16_Out);
globalMap.put("tWriteJSONField_16_In_FINISH" + (listGroupby_tWriteJSONField_16_Out==null?"":listGroupby_tWriteJSONField_16_Out.hashCode()), "true");
	
		txf_tWriteJSONField_16_Out.join();
		
		if(txf_tWriteJSONField_16_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_16_Out.getCurrentComponent();
			throw txf_tWriteJSONField_16_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_16_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_16_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_16_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out33");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_16_Out", true);
end_Hash.put("tWriteJSONField_16_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_16_Out end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_16 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_16";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_16")==null){
    if(resourceMap.get("reader_tSalesforceInput_16")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_16")).close();
		} catch (java.io.IOException e_tSalesforceInput_16) {
			String errorMessage_tSalesforceInput_16 = "failed to release the resource in tSalesforceInput_16 :" + e_tSalesforceInput_16.getMessage();
			System.err.println(errorMessage_tSalesforceInput_16);
		}
	}
}
 



/**
 * [tSalesforceInput_16 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_16_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_16";
	
	currentComponent="tWriteJSONField_16_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_16_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_16_In");
		if(resourceMap.get("finish_tWriteJSONField_16_Out") == null){
			globalMap.put("tWriteJSONField_16_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_16_Out==null?"":listGroupby_tWriteJSONField_16_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_16_Out != null) {
		globalMap.put("tWriteJSONField_16_In_FINISH" + (listGroupby_tWriteJSONField_16_Out==null?"":listGroupby_tWriteJSONField_16_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_16_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_16_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_16", false);
		start_Hash.put("tFileArchive_16", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_16";

	
		int tos_count_tFileArchive_16 = 0;
		

 



/**
 * [tFileArchive_16 begin ] stop
 */
	
	/**
	 * [tFileArchive_16 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_16";

	

	

		String sourceFile_tFileArchive_16 = context.staging_S3_dir + "contacthistory.json";
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_16), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_16 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_16 = context.staging_S3_dir + "contacthistory.json.gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_16 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_16, zipFile_tFileArchive_16);
    zip_tFileArchive_16.setOverwriteExistTargetZip(true);
	zip_tFileArchive_16.setMakeTargetDir(true);
	zip_tFileArchive_16.setCompressLevel(9);
	zip_tFileArchive_16.setArchiveFormat("gzip");
	zip_tFileArchive_16.setAllFiles(true);
	
	
		zip_tFileArchive_16.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_16_ARCHIVE_FILEPATH",zipFile_tFileArchive_16);
   
   globalMap.put("tFileArchive_16_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_16).getName());

   zip_tFileArchive_16.doZip();


 


	tos_count_tFileArchive_16++;

/**
 * [tFileArchive_16 main ] stop
 */
	
	/**
	 * [tFileArchive_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_16";

	

 



/**
 * [tFileArchive_16 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_16";

	

 



/**
 * [tFileArchive_16 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_16 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_16";

	

 

ok_Hash.put("tFileArchive_16", true);
end_Hash.put("tFileArchive_16", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk90", 0, "ok");
				}
				tS3Put_16Process(globalMap);



/**
 * [tFileArchive_16 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_16 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_16";

	

 



/**
 * [tFileArchive_16 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_16_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Put_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_16", false);
		start_Hash.put("tS3Put_16", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_16";

	
		int tos_count_tS3Put_16 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_16 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_16 = context.nd_s3_data_lake_path_sfdc +"/sfdc_json/contacthistory/latest/university_id="+context.university_code+"/year="+context.get("year")+"/month="+context.get("month")+"/contacthistory_"+context.get("today")+".csv.gz";
	
	int partSizeInBytes_tS3Put_16 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_16 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_16 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_16 = context.staging_S3_dir + "contacthistory.json.gz";
	
	boolean useStream_tS3Put_16 = false;
	java.io.InputStream uploadStream_tS3Put_16 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_16 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_16 instanceof String){
		    useStream_tS3Put_16 = false;
		}else if(fileOrStream_tS3Put_16 instanceof java.io.InputStream){
		    useStream_tS3Put_16 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_16 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_16) {
				java.io.File inputFile_tS3Put_16 = new java.io.File((String)fileOrStream_tS3Put_16);
				
				long multipart_upload_threshold_tS3Put_16 = 5 * 1024 * 1024;
				
    		tm_tS3Put_16 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_16)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_16)
    			.withS3Client(conn_tS3Put_16)
    			.build();
    			
  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_16 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_16, inputFile_tS3Put_16).withMetadata(objectMetadata_tS3Put_16);
			

  			

  		
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_16 = tm_tS3Put_16.upload(putRequest_tS3Put_16);
  		
  			upload_tS3Put_16.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_16 = ((java.io.InputStream)fileOrStream_tS3Put_16);
				
  			class S3StreamUtil {
    	    public int getLength(byte[] output) {
    		    for (int i = output.length - 1; i > 0; i--) {
    			    if (output[i] != 0) {
    				    return i + 1;
    			    }
    		    }
    		    return 0;
    	    }
      	}
      	
      	S3StreamUtil streamUtil_tS3Put_16 = new S3StreamUtil();
    		byte[] buffer_tS3Put_16 = new byte[partSizeInBytes_tS3Put_16];
    		sourceStream_tS3Put_16.read(buffer_tS3Put_16);
    		long curPartSize_tS3Put_16 = streamUtil_tS3Put_16.getLength(buffer_tS3Put_16);
    		boolean multiUpload_tS3Put_16 = curPartSize_tS3Put_16 == partSizeInBytes_tS3Put_16;
    		
    		if(!multiUpload_tS3Put_16) {
    				objectMetadata_tS3Put_16.setContentLength(curPartSize_tS3Put_16);
    				uploadStream_tS3Put_16 = new java.io.ByteArrayInputStream(buffer_tS3Put_16,0,Long.valueOf(curPartSize_tS3Put_16).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_16 = new com.amazonaws.services.s3.model.PutObjectRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_16, uploadStream_tS3Put_16, objectMetadata_tS3Put_16);
			
    				
    				

    				
    				conn_tS3Put_16.putObject(putRequest_tS3Put_16);
    		} else {
    				uploadStream_tS3Put_16 = new java.io.ByteArrayInputStream(buffer_tS3Put_16);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_16 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_16 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_16, objectMetadata_tS3Put_16);
      			
      			

      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_16 = conn_tS3Put_16.initiateMultipartUpload(putRequest_tS3Put_16);
      			String uploadId_tS3Put_16 = initResponse_tS3Put_16.getUploadId();
      			int partNumber_tS3Put_16 = 1;
      			boolean streamHasNext_tS3Put_16 = true;
      			byte[] probeAvailability_tS3Put_16 = new byte[1];
				try {
					while (streamHasNext_tS3Put_16) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_16 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(context.nd_s3_bucket_QA_sfdc)
                    	.withKey(key_tS3Put_16)
						.withUploadId(uploadId_tS3Put_16)
                    	.withPartNumber(partNumber_tS3Put_16)
						.withPartSize(curPartSize_tS3Put_16);
            		    uploadRequest_tS3Put_16.setInputStream(uploadStream_tS3Put_16);
            		    streamHasNext_tS3Put_16 = sourceStream_tS3Put_16.read(probeAvailability_tS3Put_16) != -1;
            		    if(!streamHasNext_tS3Put_16){
                    	    uploadRequest_tS3Put_16.setLastPart(true);
                    	}

                		partTags_tS3Put_16.add(conn_tS3Put_16.uploadPart(uploadRequest_tS3Put_16).getPartETag());
                  	    partNumber_tS3Put_16++;

          		     	if(uploadStream_tS3Put_16!=null){
      		         			uploadStream_tS3Put_16.close();
          		     	}
          		     	buffer_tS3Put_16 = new byte[partSizeInBytes_tS3Put_16];
          		     	sourceStream_tS3Put_16.read(buffer_tS3Put_16,1,partSizeInBytes_tS3Put_16-1);
          		     	buffer_tS3Put_16[0] = probeAvailability_tS3Put_16[0];
          		     	probeAvailability_tS3Put_16 = new byte[1];
          		     	curPartSize_tS3Put_16 = streamUtil_tS3Put_16.getLength(buffer_tS3Put_16);
          		     	uploadStream_tS3Put_16 = new java.io.ByteArrayInputStream(buffer_tS3Put_16);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_16 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_16,
                        uploadId_tS3Put_16, partTags_tS3Put_16);
            		conn_tS3Put_16.completeMultipartUpload(compRequest_tS3Put_16);
            } catch (java.lang.Exception uploadException_tS3Put_16) {
  							conn_tS3Put_16.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(context.nd_s3_bucket_QA_sfdc, key_tS3Put_16, uploadId_tS3Put_16));
    						throw uploadException_tS3Put_16;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_16){
		
			throw(e_tS3Put_16);
		
	}finally{
		if(useStream_tS3Put_16 && uploadStream_tS3Put_16!=null){
    	uploadStream_tS3Put_16.close();
    }
    
    if(tm_tS3Put_16 != null){
        tm_tS3Put_16.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_16 begin ] stop
 */
	
	/**
	 * [tS3Put_16 main ] start
	 */

	

	
	
	currentComponent="tS3Put_16";

	

 


	tos_count_tS3Put_16++;

/**
 * [tS3Put_16 main ] stop
 */
	
	/**
	 * [tS3Put_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_16";

	

 



/**
 * [tS3Put_16 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_16";

	

 



/**
 * [tS3Put_16 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_16 end ] start
	 */

	

	
	
	currentComponent="tS3Put_16";

	

 

ok_Hash.put("tS3Put_16", true);
end_Hash.put("tS3Put_16", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk91", 0, "ok");
				}
				tJava_35Process(globalMap);



/**
 * [tS3Put_16 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_16 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_16";

	

 



/**
 * [tS3Put_16 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_16_SUBPROCESS_STATE", 1);
	}
	

public void tJava_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_35_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_35 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_35", false);
		start_Hash.put("tJava_35", System.currentTimeMillis());
		
	
	currentComponent="tJava_35";

	
		int tos_count_tJava_35 = 0;
		


System.out.println("Step 5: Completed Uploading Latest Run File To Latest Folder");
System.out.println("Step 6: Number of source records from salesforce object  : "+  ((Integer)globalMap.get("tSalesforceInput_16_NB_LINE"))+ " Records and S3 file records count :" +((Integer)globalMap.get("tFileOutputDelimited_16_NB_LINE"))+ " Records");
System.out.println("************************************************************");


 



/**
 * [tJava_35 begin ] stop
 */
	
	/**
	 * [tJava_35 main ] start
	 */

	

	
	
	currentComponent="tJava_35";

	

 


	tos_count_tJava_35++;

/**
 * [tJava_35 main ] stop
 */
	
	/**
	 * [tJava_35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_35";

	

 



/**
 * [tJava_35 process_data_begin ] stop
 */
	
	/**
	 * [tJava_35 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_35";

	

 



/**
 * [tJava_35 process_data_end ] stop
 */
	
	/**
	 * [tJava_35 end ] start
	 */

	

	
	
	currentComponent="tJava_35";

	

 

ok_Hash.put("tJava_35", true);
end_Hash.put("tJava_35", System.currentTimeMillis());




/**
 * [tJava_35 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_35 finally ] start
	 */

	

	
	
	currentComponent="tJava_35";

	

 



/**
 * [tJava_35 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_35_SUBPROCESS_STATE", 1);
	}
	

public void tDie_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_16", false);
		start_Hash.put("tDie_16", System.currentTimeMillis());
		
	
	currentComponent="tDie_16";

	
		int tos_count_tDie_16 = 0;
		

 



/**
 * [tDie_16 begin ] stop
 */
	
	/**
	 * [tDie_16 main ] start
	 */

	

	
	
	currentComponent="tDie_16";

	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_16", 5, "The UserRole object source and target counts are not matching", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_16_DIE_PRIORITY", 5);
	System.err.println("The UserRole object source and target counts are not matching");
	
	globalMap.put("tDie_16_DIE_MESSAGE", "The UserRole object source and target counts are not matching");
	globalMap.put("tDie_16_DIE_MESSAGES", "The UserRole object source and target counts are not matching");
	
	} catch (Exception | Error e_tDie_16) {
		logIgnoredError(String.format("tDie_16 - tDie failed to log message due to internal error: %s", e_tDie_16), e_tDie_16);
	}
	
	currentComponent = "tDie_16";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_16_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_16++;

/**
 * [tDie_16 main ] stop
 */
	
	/**
	 * [tDie_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_16";

	

 



/**
 * [tDie_16 process_data_begin ] stop
 */
	
	/**
	 * [tDie_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_16";

	

 



/**
 * [tDie_16 process_data_end ] stop
 */
	
	/**
	 * [tDie_16 end ] start
	 */

	

	
	
	currentComponent="tDie_16";

	

 

ok_Hash.put("tDie_16", true);
end_Hash.put("tDie_16", System.currentTimeMillis());




/**
 * [tDie_16 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_16 finally ] start
	 */

	

	
	
	currentComponent="tDie_16";

	

 



/**
 * [tDie_16 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_16_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.staging_S3_dir + "opportunityhistory.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_1_In", false);
		start_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	
		int tos_count_tWriteJSONField_1_In = 0;
		

				int nb_line_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_1_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_1_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row34Struct> queue_tWriteJSONField_1_In = (java.util.Queue<row34Struct>) globalMap.get("queue_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH"+(queue_tWriteJSONField_1_In==null?"":queue_tWriteJSONField_1_In.hashCode());
				String str_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_1_In) || !queue_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

                    row34Struct result_tWriteJSONField_1_In = queue_tWriteJSONField_1_In.poll();
                    str_tWriteJSONField_1_In = result_tWriteJSONField_1_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_1_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_1_In.setJsonStandard(jsonStandard_tWriteJSONField_1_In);
        net.sf.json.JSON json_tWriteJSONField_1_In = xmlSerializer_tWriteJSONField_1_In.read(str_tWriteJSONField_1_In);
        row34.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_1_In, jsonStandard_tWriteJSONField_1_In);
    
        nb_line_tWriteJSONField_1_In++;

 


	tos_count_tWriteJSONField_1_In++;

/**
 * [tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row34.data != null) {
                        sb_tFileOutputDelimited_1.append(
                            row34.data
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_1_In==null?"":queue_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_1_In);
			
globalMap.put("tWriteJSONField_1_NB_LINE",nb_line_tWriteJSONField_1_In);
 

ok_Hash.put("tWriteJSONField_1_In", true);
end_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFileArchive_1Process(globalMap);
   			if ((((Integer)globalMap.get("tSalesforceInput_1_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_1_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tDie_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_2_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row36Struct row36 = new row36Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.staging_S3_dir + "hed__program_enrollment__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_2_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_2_In", false);
		start_Hash.put("tWriteJSONField_2_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	
		int tos_count_tWriteJSONField_2_In = 0;
		

				int nb_line_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_2_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_2_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_2_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_2_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row36Struct> queue_tWriteJSONField_2_In = (java.util.Queue<row36Struct>) globalMap.get("queue_tWriteJSONField_2_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_2_In = "tWriteJSONField_2_In_FINISH"+(queue_tWriteJSONField_2_In==null?"":queue_tWriteJSONField_2_In.hashCode());
				String str_tWriteJSONField_2_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_2_In) || !queue_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_tWriteJSONField_2_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_2_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_2_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

                    row36Struct result_tWriteJSONField_2_In = queue_tWriteJSONField_2_In.poll();
                    str_tWriteJSONField_2_In = result_tWriteJSONField_2_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_2_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_2_In.setJsonStandard(jsonStandard_tWriteJSONField_2_In);
        net.sf.json.JSON json_tWriteJSONField_2_In = xmlSerializer_tWriteJSONField_2_In.read(str_tWriteJSONField_2_In);
        row36.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_2_In, jsonStandard_tWriteJSONField_2_In);
    
        nb_line_tWriteJSONField_2_In++;

 


	tos_count_tWriteJSONField_2_In++;

/**
 * [tWriteJSONField_2_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_2_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

 



/**
 * [tWriteJSONField_2_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row36");
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row36.data != null) {
                        sb_tFileOutputDelimited_2.append(
                            row36.data
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_2_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

 



/**
 * [tWriteJSONField_2_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_2_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In = "tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_2_In==null?"":queue_tWriteJSONField_2_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_2_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_2_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_2_In);
			
globalMap.put("tWriteJSONField_2_NB_LINE",nb_line_tWriteJSONField_2_In);
 

ok_Hash.put("tWriteJSONField_2_In", true);
end_Hash.put("tWriteJSONField_2_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_2_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tFileArchive_2Process(globalMap);
   			if ((((Integer)globalMap.get("tSalesforceInput_2_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_2_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tDie_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_2_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

 



/**
 * [tWriteJSONField_2_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_3_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_3_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();




	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File(context.staging_S3_dir + "hed__term__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                        if(fileToDelete_tFileOutputDelimited_3.exists()) {
                            fileToDelete_tFileOutputDelimited_3.delete();
                        }
                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_3_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_3_In", false);
		start_Hash.put("tWriteJSONField_3_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_3";
	
	currentComponent="tWriteJSONField_3_In";

	
		int tos_count_tWriteJSONField_3_In = 0;
		

				int nb_line_tWriteJSONField_3_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_3_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_3_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_3_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_3_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_3_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row38Struct> queue_tWriteJSONField_3_In = (java.util.Queue<row38Struct>) globalMap.get("queue_tWriteJSONField_3_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_3_In = "tWriteJSONField_3_In_FINISH"+(queue_tWriteJSONField_3_In==null?"":queue_tWriteJSONField_3_In.hashCode());
				String str_tWriteJSONField_3_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_3_In) || !queue_tWriteJSONField_3_In.isEmpty()) {
					if (!queue_tWriteJSONField_3_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_3_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_3_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_3";
	
	currentComponent="tWriteJSONField_3_In";

	

                    row38Struct result_tWriteJSONField_3_In = queue_tWriteJSONField_3_In.poll();
                    str_tWriteJSONField_3_In = result_tWriteJSONField_3_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_3_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_3_In.setJsonStandard(jsonStandard_tWriteJSONField_3_In);
        net.sf.json.JSON json_tWriteJSONField_3_In = xmlSerializer_tWriteJSONField_3_In.read(str_tWriteJSONField_3_In);
        row38.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_3_In, jsonStandard_tWriteJSONField_3_In);
    
        nb_line_tWriteJSONField_3_In++;

 


	tos_count_tWriteJSONField_3_In++;

/**
 * [tWriteJSONField_3_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_3_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_3";
	
	currentComponent="tWriteJSONField_3_In";

	

 



/**
 * [tWriteJSONField_3_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row38");
					}
					


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                            if(row38.data != null) {
                        sb_tFileOutputDelimited_3.append(
                            row38.data
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_3_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_3";
	
	currentComponent="tWriteJSONField_3_In";

	

 



/**
 * [tWriteJSONField_3_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_3_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_3";
	
	currentComponent="tWriteJSONField_3_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_3_In = "tWriteJSONField_3_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_3_In==null?"":queue_tWriteJSONField_3_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_3_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_3_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_3_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_3_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_3_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_3_In);
			
globalMap.put("tWriteJSONField_3_NB_LINE",nb_line_tWriteJSONField_3_In);
 

ok_Hash.put("tWriteJSONField_3_In", true);
end_Hash.put("tWriteJSONField_3_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_3_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tFileArchive_3Process(globalMap);
   			if ((((Integer)globalMap.get("tSalesforceInput_3_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_3_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tDie_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_3_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_3";
	
	currentComponent="tWriteJSONField_3_In";

	

 



/**
 * [tWriteJSONField_3_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_3_In_SUBPROCESS_STATE", 1);
	}
	


public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_4_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_4_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row40Struct row40 = new row40Struct();




	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File(context.staging_S3_dir + "noodlecrm__application__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
                        if(fileToDelete_tFileOutputDelimited_4.exists()) {
                            fileToDelete_tFileOutputDelimited_4.delete();
                        }
                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_4_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_4_In", false);
		start_Hash.put("tWriteJSONField_4_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_4";
	
	currentComponent="tWriteJSONField_4_In";

	
		int tos_count_tWriteJSONField_4_In = 0;
		

				int nb_line_tWriteJSONField_4_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_4_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_4_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_4_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_4_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_4_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row40Struct> queue_tWriteJSONField_4_In = (java.util.Queue<row40Struct>) globalMap.get("queue_tWriteJSONField_4_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_4_In = "tWriteJSONField_4_In_FINISH"+(queue_tWriteJSONField_4_In==null?"":queue_tWriteJSONField_4_In.hashCode());
				String str_tWriteJSONField_4_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_4_In) || !queue_tWriteJSONField_4_In.isEmpty()) {
					if (!queue_tWriteJSONField_4_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_4_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_4_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_4";
	
	currentComponent="tWriteJSONField_4_In";

	

                    row40Struct result_tWriteJSONField_4_In = queue_tWriteJSONField_4_In.poll();
                    str_tWriteJSONField_4_In = result_tWriteJSONField_4_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_4_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_4_In.setJsonStandard(jsonStandard_tWriteJSONField_4_In);
        net.sf.json.JSON json_tWriteJSONField_4_In = xmlSerializer_tWriteJSONField_4_In.read(str_tWriteJSONField_4_In);
        row40.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_4_In, jsonStandard_tWriteJSONField_4_In);
    
        nb_line_tWriteJSONField_4_In++;

 


	tos_count_tWriteJSONField_4_In++;

/**
 * [tWriteJSONField_4_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_4_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_4";
	
	currentComponent="tWriteJSONField_4_In";

	

 



/**
 * [tWriteJSONField_4_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row40");
					}
					


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row40.data != null) {
                        sb_tFileOutputDelimited_4.append(
                            row40.data
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_4_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_4";
	
	currentComponent="tWriteJSONField_4_In";

	

 



/**
 * [tWriteJSONField_4_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_4_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_4";
	
	currentComponent="tWriteJSONField_4_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_4_In = "tWriteJSONField_4_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_4_In==null?"":queue_tWriteJSONField_4_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_4_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_4_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_4_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_4_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_4_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_4_In);
			
globalMap.put("tWriteJSONField_4_NB_LINE",nb_line_tWriteJSONField_4_In);
 

ok_Hash.put("tWriteJSONField_4_In", true);
end_Hash.put("tWriteJSONField_4_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_4_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tFileArchive_4Process(globalMap);
   			if ((((Integer)globalMap.get("tSalesforceInput_4_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_4_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tDie_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_4_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_4";
	
	currentComponent="tWriteJSONField_4_In";

	

 



/**
 * [tWriteJSONField_4_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_4_In_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_5_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_5_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();




	
	/**
	 * [tFileOutputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_5", false);
		start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tFileOutputDelimited_5 = 0;
		

String fileName_tFileOutputDelimited_5 = "";
    fileName_tFileOutputDelimited_5 = (new java.io.File(context.staging_S3_dir + "noodlecrm__application_decision__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_5 = null;
    String extension_tFileOutputDelimited_5 = null;
    String directory_tFileOutputDelimited_5 = null;
    if((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        }
        directory_tFileOutputDelimited_5 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_5 = true;
    java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
    globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
            int nb_line_tFileOutputDelimited_5 = 0;
            int splitedFileNo_tFileOutputDelimited_5 = 0;
            int currentRow_tFileOutputDelimited_5 = 0;

            final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
                        if(!dir_tFileOutputDelimited_5.exists()) {
                            dir_tFileOutputDelimited_5.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_5 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
                        if(fileToDelete_tFileOutputDelimited_5.exists()) {
                            fileToDelete_tFileOutputDelimited_5.delete();
                        }
                        outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

 



/**
 * [tFileOutputDelimited_5 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_5_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_5_In", false);
		start_Hash.put("tWriteJSONField_5_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_In";

	
		int tos_count_tWriteJSONField_5_In = 0;
		

				int nb_line_tWriteJSONField_5_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_5_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_5_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_5_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_5_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_5_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row42Struct> queue_tWriteJSONField_5_In = (java.util.Queue<row42Struct>) globalMap.get("queue_tWriteJSONField_5_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_5_In = "tWriteJSONField_5_In_FINISH"+(queue_tWriteJSONField_5_In==null?"":queue_tWriteJSONField_5_In.hashCode());
				String str_tWriteJSONField_5_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_5_In) || !queue_tWriteJSONField_5_In.isEmpty()) {
					if (!queue_tWriteJSONField_5_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_5_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_5_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_In";

	

                    row42Struct result_tWriteJSONField_5_In = queue_tWriteJSONField_5_In.poll();
                    str_tWriteJSONField_5_In = result_tWriteJSONField_5_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_5_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_5_In.setJsonStandard(jsonStandard_tWriteJSONField_5_In);
        net.sf.json.JSON json_tWriteJSONField_5_In = xmlSerializer_tWriteJSONField_5_In.read(str_tWriteJSONField_5_In);
        row42.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_5_In, jsonStandard_tWriteJSONField_5_In);
    
        nb_line_tWriteJSONField_5_In++;

 


	tos_count_tWriteJSONField_5_In++;

/**
 * [tWriteJSONField_5_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_5_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_In";

	

 



/**
 * [tWriteJSONField_5_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row42");
					}
					


                    StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
                            if(row42.data != null) {
                        sb_tFileOutputDelimited_5.append(
                            row42.data
                        );
                            }
                    sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);


                    nb_line_tFileOutputDelimited_5++;
                    resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

                        outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());




 


	tos_count_tFileOutputDelimited_5++;

/**
 * [tFileOutputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	

 



/**
 * [tFileOutputDelimited_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	

 



/**
 * [tFileOutputDelimited_5 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_5_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_In";

	

 



/**
 * [tWriteJSONField_5_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_5_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_5_In = "tWriteJSONField_5_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_5_In==null?"":queue_tWriteJSONField_5_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_5_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_5_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_5_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_5_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_5_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_5_In);
			
globalMap.put("tWriteJSONField_5_NB_LINE",nb_line_tWriteJSONField_5_In);
 

ok_Hash.put("tWriteJSONField_5_In", true);
end_Hash.put("tWriteJSONField_5_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_5_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	



		
			
					if(outtFileOutputDelimited_5!=null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}
				
				globalMap.put("tFileOutputDelimited_5_NB_LINE",nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_5", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_5", true);
end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tFileArchive_5Process(globalMap);
   			if ((((Integer)globalMap.get("tSalesforceInput_5_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_5_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If5", 0, "true");
					}
				tDie_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If5", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_5_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_In";

	

 



/**
 * [tWriteJSONField_5_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	


		if(resourceMap.get("finish_tFileOutputDelimited_5") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_5");
						if(outtFileOutputDelimited_5!=null) {
							outtFileOutputDelimited_5.flush();
							outtFileOutputDelimited_5.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_5_In_SUBPROCESS_STATE", 1);
	}
	


public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_8_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_8_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row48Struct row48 = new row48Struct();




	
	/**
	 * [tFileOutputDelimited_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_8", false);
		start_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tFileOutputDelimited_8 = 0;
		

String fileName_tFileOutputDelimited_8 = "";
    fileName_tFileOutputDelimited_8 = (new java.io.File(context.staging_S3_dir + "noodlecrm__inquiry__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_8 = null;
    String extension_tFileOutputDelimited_8 = null;
    String directory_tFileOutputDelimited_8 = null;
    if((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
            extension_tFileOutputDelimited_8 = "";
        } else {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("."));
            extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("."));
            extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
            extension_tFileOutputDelimited_8 = "";
        }
        directory_tFileOutputDelimited_8 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_8 = true;
    java.io.File filetFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
    globalMap.put("tFileOutputDelimited_8_FILE_NAME",fileName_tFileOutputDelimited_8);
            int nb_line_tFileOutputDelimited_8 = 0;
            int splitedFileNo_tFileOutputDelimited_8 = 0;
            int currentRow_tFileOutputDelimited_8 = 0;

            final String OUT_DELIM_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_8:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_8 != null && directory_tFileOutputDelimited_8.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_8 = new java.io.File(directory_tFileOutputDelimited_8);
                        if(!dir_tFileOutputDelimited_8.exists()) {
                            dir_tFileOutputDelimited_8.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_8 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
                        if(fileToDelete_tFileOutputDelimited_8.exists()) {
                            fileToDelete_tFileOutputDelimited_8.delete();
                        }
                        outtFileOutputDelimited_8 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_8, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_8", outtFileOutputDelimited_8);
resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

 



/**
 * [tFileOutputDelimited_8 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_8_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_8_In", false);
		start_Hash.put("tWriteJSONField_8_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_8";
	
	currentComponent="tWriteJSONField_8_In";

	
		int tos_count_tWriteJSONField_8_In = 0;
		

				int nb_line_tWriteJSONField_8_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_8_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_8_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_8_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_8_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_8_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row48Struct> queue_tWriteJSONField_8_In = (java.util.Queue<row48Struct>) globalMap.get("queue_tWriteJSONField_8_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_8_In = "tWriteJSONField_8_In_FINISH"+(queue_tWriteJSONField_8_In==null?"":queue_tWriteJSONField_8_In.hashCode());
				String str_tWriteJSONField_8_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_8_In) || !queue_tWriteJSONField_8_In.isEmpty()) {
					if (!queue_tWriteJSONField_8_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_8_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_8_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_8";
	
	currentComponent="tWriteJSONField_8_In";

	

                    row48Struct result_tWriteJSONField_8_In = queue_tWriteJSONField_8_In.poll();
                    str_tWriteJSONField_8_In = result_tWriteJSONField_8_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_8_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_8_In.setJsonStandard(jsonStandard_tWriteJSONField_8_In);
        net.sf.json.JSON json_tWriteJSONField_8_In = xmlSerializer_tWriteJSONField_8_In.read(str_tWriteJSONField_8_In);
        row48.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_8_In, jsonStandard_tWriteJSONField_8_In);
    
        nb_line_tWriteJSONField_8_In++;

 


	tos_count_tWriteJSONField_8_In++;

/**
 * [tWriteJSONField_8_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_8_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_8";
	
	currentComponent="tWriteJSONField_8_In";

	

 



/**
 * [tWriteJSONField_8_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row48");
					}
					


                    StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();
                            if(row48.data != null) {
                        sb_tFileOutputDelimited_8.append(
                            row48.data
                        );
                            }
                    sb_tFileOutputDelimited_8.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);


                    nb_line_tFileOutputDelimited_8++;
                    resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

                        outtFileOutputDelimited_8.write(sb_tFileOutputDelimited_8.toString());




 


	tos_count_tFileOutputDelimited_8++;

/**
 * [tFileOutputDelimited_8 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	

 



/**
 * [tFileOutputDelimited_8 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	

 



/**
 * [tFileOutputDelimited_8 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_8_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_8";
	
	currentComponent="tWriteJSONField_8_In";

	

 



/**
 * [tWriteJSONField_8_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_8_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_8";
	
	currentComponent="tWriteJSONField_8_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_8_In = "tWriteJSONField_8_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_8_In==null?"":queue_tWriteJSONField_8_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_8_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_8_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_8_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_8_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_8_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_8_In);
			
globalMap.put("tWriteJSONField_8_NB_LINE",nb_line_tWriteJSONField_8_In);
 

ok_Hash.put("tWriteJSONField_8_In", true);
end_Hash.put("tWriteJSONField_8_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_8_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	



		
			
					if(outtFileOutputDelimited_8!=null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}
				
				globalMap.put("tFileOutputDelimited_8_NB_LINE",nb_line_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME",fileName_tFileOutputDelimited_8);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_8", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_8", true);
end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk25", 0, "ok");
				}
				tFileArchive_8Process(globalMap);
   			if ((((Integer)globalMap.get("tSalesforceInput_8_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_8_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If8", 0, "true");
					}
				tDie_8Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If8", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_8_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_8";
	
	currentComponent="tWriteJSONField_8_In";

	

 



/**
 * [tWriteJSONField_8_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	


		if(resourceMap.get("finish_tFileOutputDelimited_8") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_8 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_8");
						if(outtFileOutputDelimited_8!=null) {
							outtFileOutputDelimited_8.flush();
							outtFileOutputDelimited_8.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_8_In_SUBPROCESS_STATE", 1);
	}
	


public static class row56Struct implements routines.system.IPersistableRow<row56Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row56Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_12_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_12_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row56Struct row56 = new row56Struct();




	
	/**
	 * [tFileOutputDelimited_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_12", false);
		start_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row56");
					}
				
		int tos_count_tFileOutputDelimited_12 = 0;
		

String fileName_tFileOutputDelimited_12 = "";
    fileName_tFileOutputDelimited_12 = (new java.io.File(context.staging_S3_dir + "noodlecrm__program_assignment__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_12 = null;
    String extension_tFileOutputDelimited_12 = null;
    String directory_tFileOutputDelimited_12 = null;
    if((fileName_tFileOutputDelimited_12.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_12.lastIndexOf(".") < fileName_tFileOutputDelimited_12.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
            extension_tFileOutputDelimited_12 = "";
        } else {
            fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0, fileName_tFileOutputDelimited_12.lastIndexOf("."));
            extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(fileName_tFileOutputDelimited_12.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0, fileName_tFileOutputDelimited_12.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_12.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0, fileName_tFileOutputDelimited_12.lastIndexOf("."));
            extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(fileName_tFileOutputDelimited_12.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
            extension_tFileOutputDelimited_12 = "";
        }
        directory_tFileOutputDelimited_12 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_12 = true;
    java.io.File filetFileOutputDelimited_12 = new java.io.File(fileName_tFileOutputDelimited_12);
    globalMap.put("tFileOutputDelimited_12_FILE_NAME",fileName_tFileOutputDelimited_12);
            int nb_line_tFileOutputDelimited_12 = 0;
            int splitedFileNo_tFileOutputDelimited_12 = 0;
            int currentRow_tFileOutputDelimited_12 = 0;

            final String OUT_DELIM_tFileOutputDelimited_12 = /** Start field tFileOutputDelimited_12:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_12:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_12 = /** Start field tFileOutputDelimited_12:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_12:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_12 != null && directory_tFileOutputDelimited_12.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_12 = new java.io.File(directory_tFileOutputDelimited_12);
                        if(!dir_tFileOutputDelimited_12.exists()) {
                            dir_tFileOutputDelimited_12.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_12 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_12 = new java.io.File(fileName_tFileOutputDelimited_12);
                        if(fileToDelete_tFileOutputDelimited_12.exists()) {
                            fileToDelete_tFileOutputDelimited_12.delete();
                        }
                        outtFileOutputDelimited_12 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_12, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_12", outtFileOutputDelimited_12);
resourceMap.put("nb_line_tFileOutputDelimited_12", nb_line_tFileOutputDelimited_12);

 



/**
 * [tFileOutputDelimited_12 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_12_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_12_In", false);
		start_Hash.put("tWriteJSONField_12_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_12";
	
	currentComponent="tWriteJSONField_12_In";

	
		int tos_count_tWriteJSONField_12_In = 0;
		

				int nb_line_tWriteJSONField_12_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_12_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_12_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_12_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_12_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_12_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row56Struct> queue_tWriteJSONField_12_In = (java.util.Queue<row56Struct>) globalMap.get("queue_tWriteJSONField_12_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_12_In = "tWriteJSONField_12_In_FINISH"+(queue_tWriteJSONField_12_In==null?"":queue_tWriteJSONField_12_In.hashCode());
				String str_tWriteJSONField_12_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_12_In) || !queue_tWriteJSONField_12_In.isEmpty()) {
					if (!queue_tWriteJSONField_12_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_12_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_12_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_12";
	
	currentComponent="tWriteJSONField_12_In";

	

                    row56Struct result_tWriteJSONField_12_In = queue_tWriteJSONField_12_In.poll();
                    str_tWriteJSONField_12_In = result_tWriteJSONField_12_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_12_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_12_In.setJsonStandard(jsonStandard_tWriteJSONField_12_In);
        net.sf.json.JSON json_tWriteJSONField_12_In = xmlSerializer_tWriteJSONField_12_In.read(str_tWriteJSONField_12_In);
        row56.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_12_In, jsonStandard_tWriteJSONField_12_In);
    
        nb_line_tWriteJSONField_12_In++;

 


	tos_count_tWriteJSONField_12_In++;

/**
 * [tWriteJSONField_12_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_12_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_12";
	
	currentComponent="tWriteJSONField_12_In";

	

 



/**
 * [tWriteJSONField_12_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row56");
					}
					


                    StringBuilder sb_tFileOutputDelimited_12 = new StringBuilder();
                            if(row56.data != null) {
                        sb_tFileOutputDelimited_12.append(
                            row56.data
                        );
                            }
                    sb_tFileOutputDelimited_12.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_12);


                    nb_line_tFileOutputDelimited_12++;
                    resourceMap.put("nb_line_tFileOutputDelimited_12", nb_line_tFileOutputDelimited_12);

                        outtFileOutputDelimited_12.write(sb_tFileOutputDelimited_12.toString());




 


	tos_count_tFileOutputDelimited_12++;

/**
 * [tFileOutputDelimited_12 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	

 



/**
 * [tFileOutputDelimited_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	

 



/**
 * [tFileOutputDelimited_12 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_12_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_12";
	
	currentComponent="tWriteJSONField_12_In";

	

 



/**
 * [tWriteJSONField_12_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_12_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_12";
	
	currentComponent="tWriteJSONField_12_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_12_In = "tWriteJSONField_12_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_12_In==null?"":queue_tWriteJSONField_12_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_12_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_12_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_12_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_12_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_12_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_12_In);
			
globalMap.put("tWriteJSONField_12_NB_LINE",nb_line_tWriteJSONField_12_In);
 

ok_Hash.put("tWriteJSONField_12_In", true);
end_Hash.put("tWriteJSONField_12_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_12_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_12 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	



		
			
					if(outtFileOutputDelimited_12!=null) {
						outtFileOutputDelimited_12.flush();
						outtFileOutputDelimited_12.close();
					}
				
				globalMap.put("tFileOutputDelimited_12_NB_LINE",nb_line_tFileOutputDelimited_12);
				globalMap.put("tFileOutputDelimited_12_FILE_NAME",fileName_tFileOutputDelimited_12);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_12", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row56");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_12", true);
end_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk39", 0, "ok");
				}
				tFileArchive_12Process(globalMap);
   			if ((((Integer)globalMap.get("tSalesforceInput_12_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_12_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If12", 0, "true");
					}
				tDie_12Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If12", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_12_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_12";
	
	currentComponent="tWriteJSONField_12_In";

	

 



/**
 * [tWriteJSONField_12_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_12 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	


		if(resourceMap.get("finish_tFileOutputDelimited_12") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_12 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_12");
						if(outtFileOutputDelimited_12!=null) {
							outtFileOutputDelimited_12.flush();
							outtFileOutputDelimited_12.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_12_In_SUBPROCESS_STATE", 1);
	}
	


public static class row58Struct implements routines.system.IPersistableRow<row58Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row58Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_13_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_13_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row58Struct row58 = new row58Struct();




	
	/**
	 * [tFileOutputDelimited_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_13", false);
		start_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row58");
					}
				
		int tos_count_tFileOutputDelimited_13 = 0;
		

String fileName_tFileOutputDelimited_13 = "";
    fileName_tFileOutputDelimited_13 = (new java.io.File(context.staging_S3_dir + "noodlecrm__program_concentration__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_13 = null;
    String extension_tFileOutputDelimited_13 = null;
    String directory_tFileOutputDelimited_13 = null;
    if((fileName_tFileOutputDelimited_13.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_13.lastIndexOf(".") < fileName_tFileOutputDelimited_13.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
            extension_tFileOutputDelimited_13 = "";
        } else {
            fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0, fileName_tFileOutputDelimited_13.lastIndexOf("."));
            extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(fileName_tFileOutputDelimited_13.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0, fileName_tFileOutputDelimited_13.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_13.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0, fileName_tFileOutputDelimited_13.lastIndexOf("."));
            extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(fileName_tFileOutputDelimited_13.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
            extension_tFileOutputDelimited_13 = "";
        }
        directory_tFileOutputDelimited_13 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_13 = true;
    java.io.File filetFileOutputDelimited_13 = new java.io.File(fileName_tFileOutputDelimited_13);
    globalMap.put("tFileOutputDelimited_13_FILE_NAME",fileName_tFileOutputDelimited_13);
            int nb_line_tFileOutputDelimited_13 = 0;
            int splitedFileNo_tFileOutputDelimited_13 = 0;
            int currentRow_tFileOutputDelimited_13 = 0;

            final String OUT_DELIM_tFileOutputDelimited_13 = /** Start field tFileOutputDelimited_13:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_13:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_13 = /** Start field tFileOutputDelimited_13:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_13:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_13 != null && directory_tFileOutputDelimited_13.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_13 = new java.io.File(directory_tFileOutputDelimited_13);
                        if(!dir_tFileOutputDelimited_13.exists()) {
                            dir_tFileOutputDelimited_13.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_13 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_13 = new java.io.File(fileName_tFileOutputDelimited_13);
                        if(fileToDelete_tFileOutputDelimited_13.exists()) {
                            fileToDelete_tFileOutputDelimited_13.delete();
                        }
                        outtFileOutputDelimited_13 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_13, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_13", outtFileOutputDelimited_13);
resourceMap.put("nb_line_tFileOutputDelimited_13", nb_line_tFileOutputDelimited_13);

 



/**
 * [tFileOutputDelimited_13 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_13_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_13_In", false);
		start_Hash.put("tWriteJSONField_13_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_13";
	
	currentComponent="tWriteJSONField_13_In";

	
		int tos_count_tWriteJSONField_13_In = 0;
		

				int nb_line_tWriteJSONField_13_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_13_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_13_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_13_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_13_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_13_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row58Struct> queue_tWriteJSONField_13_In = (java.util.Queue<row58Struct>) globalMap.get("queue_tWriteJSONField_13_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_13_In = "tWriteJSONField_13_In_FINISH"+(queue_tWriteJSONField_13_In==null?"":queue_tWriteJSONField_13_In.hashCode());
				String str_tWriteJSONField_13_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_13_In) || !queue_tWriteJSONField_13_In.isEmpty()) {
					if (!queue_tWriteJSONField_13_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_13_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_13_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_13";
	
	currentComponent="tWriteJSONField_13_In";

	

                    row58Struct result_tWriteJSONField_13_In = queue_tWriteJSONField_13_In.poll();
                    str_tWriteJSONField_13_In = result_tWriteJSONField_13_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_13_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_13_In.setJsonStandard(jsonStandard_tWriteJSONField_13_In);
        net.sf.json.JSON json_tWriteJSONField_13_In = xmlSerializer_tWriteJSONField_13_In.read(str_tWriteJSONField_13_In);
        row58.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_13_In, jsonStandard_tWriteJSONField_13_In);
    
        nb_line_tWriteJSONField_13_In++;

 


	tos_count_tWriteJSONField_13_In++;

/**
 * [tWriteJSONField_13_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_13_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_13";
	
	currentComponent="tWriteJSONField_13_In";

	

 



/**
 * [tWriteJSONField_13_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_13 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row58");
					}
					


                    StringBuilder sb_tFileOutputDelimited_13 = new StringBuilder();
                            if(row58.data != null) {
                        sb_tFileOutputDelimited_13.append(
                            row58.data
                        );
                            }
                    sb_tFileOutputDelimited_13.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_13);


                    nb_line_tFileOutputDelimited_13++;
                    resourceMap.put("nb_line_tFileOutputDelimited_13", nb_line_tFileOutputDelimited_13);

                        outtFileOutputDelimited_13.write(sb_tFileOutputDelimited_13.toString());




 


	tos_count_tFileOutputDelimited_13++;

/**
 * [tFileOutputDelimited_13 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	

 



/**
 * [tFileOutputDelimited_13 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	

 



/**
 * [tFileOutputDelimited_13 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_13_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_13";
	
	currentComponent="tWriteJSONField_13_In";

	

 



/**
 * [tWriteJSONField_13_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_13_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_13";
	
	currentComponent="tWriteJSONField_13_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_13_In = "tWriteJSONField_13_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_13_In==null?"":queue_tWriteJSONField_13_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_13_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_13_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_13_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_13_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_13_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_13_In);
			
globalMap.put("tWriteJSONField_13_NB_LINE",nb_line_tWriteJSONField_13_In);
 

ok_Hash.put("tWriteJSONField_13_In", true);
end_Hash.put("tWriteJSONField_13_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_13_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_13 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	



		
			
					if(outtFileOutputDelimited_13!=null) {
						outtFileOutputDelimited_13.flush();
						outtFileOutputDelimited_13.close();
					}
				
				globalMap.put("tFileOutputDelimited_13_NB_LINE",nb_line_tFileOutputDelimited_13);
				globalMap.put("tFileOutputDelimited_13_FILE_NAME",fileName_tFileOutputDelimited_13);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_13", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row58");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_13", true);
end_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk41", 0, "ok");
				}
				tFileArchive_13Process(globalMap);
   			if ((((Integer)globalMap.get("tSalesforceInput_13_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_13_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If13", 0, "true");
					}
				tDie_13Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If13", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_13_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_13";
	
	currentComponent="tWriteJSONField_13_In";

	

 



/**
 * [tWriteJSONField_13_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_13 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_13";

	


		if(resourceMap.get("finish_tFileOutputDelimited_13") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_13 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_13");
						if(outtFileOutputDelimited_13!=null) {
							outtFileOutputDelimited_13.flush();
							outtFileOutputDelimited_13.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_13_In_SUBPROCESS_STATE", 1);
	}
	


public static class row60Struct implements routines.system.IPersistableRow<row60Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row60Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_14_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_14_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row60Struct row60 = new row60Struct();




	
	/**
	 * [tFileOutputDelimited_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_14", false);
		start_Hash.put("tFileOutputDelimited_14", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row60");
					}
				
		int tos_count_tFileOutputDelimited_14 = 0;
		

String fileName_tFileOutputDelimited_14 = "";
    fileName_tFileOutputDelimited_14 = (new java.io.File(context.staging_S3_dir + "noodlecrm__program_term_enrollment__history.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_14 = null;
    String extension_tFileOutputDelimited_14 = null;
    String directory_tFileOutputDelimited_14 = null;
    if((fileName_tFileOutputDelimited_14.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_14.lastIndexOf(".") < fileName_tFileOutputDelimited_14.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
            extension_tFileOutputDelimited_14 = "";
        } else {
            fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(0, fileName_tFileOutputDelimited_14.lastIndexOf("."));
            extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(fileName_tFileOutputDelimited_14.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(0, fileName_tFileOutputDelimited_14.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_14.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(0, fileName_tFileOutputDelimited_14.lastIndexOf("."));
            extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(fileName_tFileOutputDelimited_14.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
            extension_tFileOutputDelimited_14 = "";
        }
        directory_tFileOutputDelimited_14 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_14 = true;
    java.io.File filetFileOutputDelimited_14 = new java.io.File(fileName_tFileOutputDelimited_14);
    globalMap.put("tFileOutputDelimited_14_FILE_NAME",fileName_tFileOutputDelimited_14);
            int nb_line_tFileOutputDelimited_14 = 0;
            int splitedFileNo_tFileOutputDelimited_14 = 0;
            int currentRow_tFileOutputDelimited_14 = 0;

            final String OUT_DELIM_tFileOutputDelimited_14 = /** Start field tFileOutputDelimited_14:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_14:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_14 = /** Start field tFileOutputDelimited_14:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_14:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_14 != null && directory_tFileOutputDelimited_14.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_14 = new java.io.File(directory_tFileOutputDelimited_14);
                        if(!dir_tFileOutputDelimited_14.exists()) {
                            dir_tFileOutputDelimited_14.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_14 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_14 = new java.io.File(fileName_tFileOutputDelimited_14);
                        if(fileToDelete_tFileOutputDelimited_14.exists()) {
                            fileToDelete_tFileOutputDelimited_14.delete();
                        }
                        outtFileOutputDelimited_14 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_14, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_14", outtFileOutputDelimited_14);
resourceMap.put("nb_line_tFileOutputDelimited_14", nb_line_tFileOutputDelimited_14);

 



/**
 * [tFileOutputDelimited_14 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_14_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_14_In", false);
		start_Hash.put("tWriteJSONField_14_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_14";
	
	currentComponent="tWriteJSONField_14_In";

	
		int tos_count_tWriteJSONField_14_In = 0;
		

				int nb_line_tWriteJSONField_14_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_14_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_14_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_14_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_14_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_14_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row60Struct> queue_tWriteJSONField_14_In = (java.util.Queue<row60Struct>) globalMap.get("queue_tWriteJSONField_14_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_14_In = "tWriteJSONField_14_In_FINISH"+(queue_tWriteJSONField_14_In==null?"":queue_tWriteJSONField_14_In.hashCode());
				String str_tWriteJSONField_14_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_14_In) || !queue_tWriteJSONField_14_In.isEmpty()) {
					if (!queue_tWriteJSONField_14_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_14_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_14_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_14";
	
	currentComponent="tWriteJSONField_14_In";

	

                    row60Struct result_tWriteJSONField_14_In = queue_tWriteJSONField_14_In.poll();
                    str_tWriteJSONField_14_In = result_tWriteJSONField_14_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_14_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_14_In.setJsonStandard(jsonStandard_tWriteJSONField_14_In);
        net.sf.json.JSON json_tWriteJSONField_14_In = xmlSerializer_tWriteJSONField_14_In.read(str_tWriteJSONField_14_In);
        row60.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_14_In, jsonStandard_tWriteJSONField_14_In);
    
        nb_line_tWriteJSONField_14_In++;

 


	tos_count_tWriteJSONField_14_In++;

/**
 * [tWriteJSONField_14_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_14_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_14";
	
	currentComponent="tWriteJSONField_14_In";

	

 



/**
 * [tWriteJSONField_14_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_14 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row60");
					}
					


                    StringBuilder sb_tFileOutputDelimited_14 = new StringBuilder();
                            if(row60.data != null) {
                        sb_tFileOutputDelimited_14.append(
                            row60.data
                        );
                            }
                    sb_tFileOutputDelimited_14.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_14);


                    nb_line_tFileOutputDelimited_14++;
                    resourceMap.put("nb_line_tFileOutputDelimited_14", nb_line_tFileOutputDelimited_14);

                        outtFileOutputDelimited_14.write(sb_tFileOutputDelimited_14.toString());




 


	tos_count_tFileOutputDelimited_14++;

/**
 * [tFileOutputDelimited_14 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_14";

	

 



/**
 * [tFileOutputDelimited_14 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_14";

	

 



/**
 * [tFileOutputDelimited_14 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_14_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_14";
	
	currentComponent="tWriteJSONField_14_In";

	

 



/**
 * [tWriteJSONField_14_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_14_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_14";
	
	currentComponent="tWriteJSONField_14_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_14_In = "tWriteJSONField_14_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_14_In==null?"":queue_tWriteJSONField_14_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_14_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_14_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_14_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_14_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_14_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_14_In);
			
globalMap.put("tWriteJSONField_14_NB_LINE",nb_line_tWriteJSONField_14_In);
 

ok_Hash.put("tWriteJSONField_14_In", true);
end_Hash.put("tWriteJSONField_14_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_14_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_14 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_14";

	



		
			
					if(outtFileOutputDelimited_14!=null) {
						outtFileOutputDelimited_14.flush();
						outtFileOutputDelimited_14.close();
					}
				
				globalMap.put("tFileOutputDelimited_14_NB_LINE",nb_line_tFileOutputDelimited_14);
				globalMap.put("tFileOutputDelimited_14_FILE_NAME",fileName_tFileOutputDelimited_14);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_14", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row60");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_14", true);
end_Hash.put("tFileOutputDelimited_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk43", 0, "ok");
				}
				tFileArchive_14Process(globalMap);
   			if ((((Integer)globalMap.get("tSalesforceInput_14_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_14_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If18", 0, "true");
					}
				tDie_14Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If18", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_14_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_14";
	
	currentComponent="tWriteJSONField_14_In";

	

 



/**
 * [tWriteJSONField_14_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_14 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_14";

	


		if(resourceMap.get("finish_tFileOutputDelimited_14") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_14 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_14");
						if(outtFileOutputDelimited_14!=null) {
							outtFileOutputDelimited_14.flush();
							outtFileOutputDelimited_14.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_14_In_SUBPROCESS_STATE", 1);
	}
	


public static class row67Struct implements routines.system.IPersistableRow<row67Struct> {
    final static byte[] commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];
    static byte[] commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length) {
				if(length < 1024 && commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv.length == 0) {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[1024];
				} else {
   					commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length);
			strReturn = new String(commonByteArray_T_NP_31_sfdc_history_s3_sync_job_stv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_T_NP_31_sfdc_history_s3_sync_job_stv) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row67Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_16_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_16_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row67Struct row67 = new row67Struct();




	
	/**
	 * [tFileOutputDelimited_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_16", false);
		start_Hash.put("tFileOutputDelimited_16", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row67");
					}
				
		int tos_count_tFileOutputDelimited_16 = 0;
		

String fileName_tFileOutputDelimited_16 = "";
    fileName_tFileOutputDelimited_16 = (new java.io.File(context.staging_S3_dir + "contacthistory.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_16 = null;
    String extension_tFileOutputDelimited_16 = null;
    String directory_tFileOutputDelimited_16 = null;
    if((fileName_tFileOutputDelimited_16.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_16.lastIndexOf(".") < fileName_tFileOutputDelimited_16.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16;
            extension_tFileOutputDelimited_16 = "";
        } else {
            fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16.substring(0, fileName_tFileOutputDelimited_16.lastIndexOf("."));
            extension_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16.substring(fileName_tFileOutputDelimited_16.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16.substring(0, fileName_tFileOutputDelimited_16.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_16.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16.substring(0, fileName_tFileOutputDelimited_16.lastIndexOf("."));
            extension_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16.substring(fileName_tFileOutputDelimited_16.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16;
            extension_tFileOutputDelimited_16 = "";
        }
        directory_tFileOutputDelimited_16 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_16 = true;
    java.io.File filetFileOutputDelimited_16 = new java.io.File(fileName_tFileOutputDelimited_16);
    globalMap.put("tFileOutputDelimited_16_FILE_NAME",fileName_tFileOutputDelimited_16);
            int nb_line_tFileOutputDelimited_16 = 0;
            int splitedFileNo_tFileOutputDelimited_16 = 0;
            int currentRow_tFileOutputDelimited_16 = 0;

            final String OUT_DELIM_tFileOutputDelimited_16 = /** Start field tFileOutputDelimited_16:FIELDSEPARATOR */"^"/** End field tFileOutputDelimited_16:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_16 = /** Start field tFileOutputDelimited_16:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_16:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_16 != null && directory_tFileOutputDelimited_16.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_16 = new java.io.File(directory_tFileOutputDelimited_16);
                        if(!dir_tFileOutputDelimited_16.exists()) {
                            dir_tFileOutputDelimited_16.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_16 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_16 = new java.io.File(fileName_tFileOutputDelimited_16);
                        if(fileToDelete_tFileOutputDelimited_16.exists()) {
                            fileToDelete_tFileOutputDelimited_16.delete();
                        }
                        outtFileOutputDelimited_16 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_16, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_16", outtFileOutputDelimited_16);
resourceMap.put("nb_line_tFileOutputDelimited_16", nb_line_tFileOutputDelimited_16);

 



/**
 * [tFileOutputDelimited_16 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_16_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_16_In", false);
		start_Hash.put("tWriteJSONField_16_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_16";
	
	currentComponent="tWriteJSONField_16_In";

	
		int tos_count_tWriteJSONField_16_In = 0;
		

				int nb_line_tWriteJSONField_16_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_16_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_16_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_16_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_16_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_16_In.setUseEmptyStrings(true);
				
					   java.util.Queue<row67Struct> queue_tWriteJSONField_16_In = (java.util.Queue<row67Struct>) globalMap.get("queue_tWriteJSONField_16_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_16_In = "tWriteJSONField_16_In_FINISH"+(queue_tWriteJSONField_16_In==null?"":queue_tWriteJSONField_16_In.hashCode());
				String str_tWriteJSONField_16_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_16_In) || !queue_tWriteJSONField_16_In.isEmpty()) {
					if (!queue_tWriteJSONField_16_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_16_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_16_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_16";
	
	currentComponent="tWriteJSONField_16_In";

	

                    row67Struct result_tWriteJSONField_16_In = queue_tWriteJSONField_16_In.poll();
                    str_tWriteJSONField_16_In = result_tWriteJSONField_16_In.data;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_16_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_16_In.setJsonStandard(jsonStandard_tWriteJSONField_16_In);
        net.sf.json.JSON json_tWriteJSONField_16_In = xmlSerializer_tWriteJSONField_16_In.read(str_tWriteJSONField_16_In);
        row67.data = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_16_In, jsonStandard_tWriteJSONField_16_In);
    
        nb_line_tWriteJSONField_16_In++;

 


	tos_count_tWriteJSONField_16_In++;

/**
 * [tWriteJSONField_16_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_16_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_16";
	
	currentComponent="tWriteJSONField_16_In";

	

 



/**
 * [tWriteJSONField_16_In process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_16 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row67");
					}
					


                    StringBuilder sb_tFileOutputDelimited_16 = new StringBuilder();
                            if(row67.data != null) {
                        sb_tFileOutputDelimited_16.append(
                            row67.data
                        );
                            }
                    sb_tFileOutputDelimited_16.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_16);


                    nb_line_tFileOutputDelimited_16++;
                    resourceMap.put("nb_line_tFileOutputDelimited_16", nb_line_tFileOutputDelimited_16);

                        outtFileOutputDelimited_16.write(sb_tFileOutputDelimited_16.toString());




 


	tos_count_tFileOutputDelimited_16++;

/**
 * [tFileOutputDelimited_16 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_16";

	

 



/**
 * [tFileOutputDelimited_16 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_16";

	

 



/**
 * [tFileOutputDelimited_16 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_16_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_16";
	
	currentComponent="tWriteJSONField_16_In";

	

 



/**
 * [tWriteJSONField_16_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_16_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_16";
	
	currentComponent="tWriteJSONField_16_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_16_In = "tWriteJSONField_16_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_16_In==null?"":queue_tWriteJSONField_16_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_16_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_16_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_16_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_16_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_16_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_16_In);
			
globalMap.put("tWriteJSONField_16_NB_LINE",nb_line_tWriteJSONField_16_In);
 

ok_Hash.put("tWriteJSONField_16_In", true);
end_Hash.put("tWriteJSONField_16_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_16_In end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_16 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_16";

	



		
			
					if(outtFileOutputDelimited_16!=null) {
						outtFileOutputDelimited_16.flush();
						outtFileOutputDelimited_16.close();
					}
				
				globalMap.put("tFileOutputDelimited_16_NB_LINE",nb_line_tFileOutputDelimited_16);
				globalMap.put("tFileOutputDelimited_16_FILE_NAME",fileName_tFileOutputDelimited_16);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_16", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row67");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_16", true);
end_Hash.put("tFileOutputDelimited_16", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk89", 0, "ok");
				}
				tFileArchive_16Process(globalMap);
   			if ((((Integer)globalMap.get("tSalesforceInput_16_NB_LINE")).intValue() != ((Integer)globalMap.get("tFileOutputDelimited_16_NB_LINE")).intValue())) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If20", 0, "true");
					}
				tDie_16Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If20", 0, "false");
					}   	 
   				}



/**
 * [tFileOutputDelimited_16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_16_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_16";
	
	currentComponent="tWriteJSONField_16_In";

	

 



/**
 * [tWriteJSONField_16_In finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_16 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_16";

	


		if(resourceMap.get("finish_tFileOutputDelimited_16") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_16 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_16");
						if(outtFileOutputDelimited_16!=null) {
							outtFileOutputDelimited_16.flush();
							outtFileOutputDelimited_16.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_16_In_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "prod";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
    	public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
        }

    	public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
        }
    };
    
    private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";
    
    {
    	globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
    }

    public static void main(String[] args){
        final sfdc_history_s3_sync_job_stv sfdc_history_s3_sync_job_stvClass = new sfdc_history_s3_sync_job_stv();

        int exitCode = sfdc_history_s3_sync_job_stvClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = sfdc_history_s3_sync_job_stv.class.getClassLoader().getResourceAsStream("t_np_31/sfdc_history_s3_sync_job_stv_1_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = sfdc_history_s3_sync_job_stv.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("university_code", "id_String");
                            context.university_code=(String) context.getProperty("university_code");
                        context.setContextType("status", "id_String");
                            context.status=(String) context.getProperty("status");
                        context.setContextType("description", "id_String");
                            context.description=(String) context.getProperty("description");
                        context.setContextType("staging_S3_dir", "id_String");
                            context.staging_S3_dir=(String) context.getProperty("staging_S3_dir");
                        context.setContextType("sfdc_subject_user", "id_String");
                            context.sfdc_subject_user=(String) context.getProperty("sfdc_subject_user");
                        context.setContextType("sfdc_issuer_token", "id_String");
                            context.sfdc_issuer_token=(String) context.getProperty("sfdc_issuer_token");
                        context.setContextType("sfdc_keystore_password", "id_Password");
                            String pwd_sfdc_keystore_password_value = context.getProperty("sfdc_keystore_password");
                            context.sfdc_keystore_password = null;
                            if(pwd_sfdc_keystore_password_value!=null) {
                                if(context_param.containsKey("sfdc_keystore_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.sfdc_keystore_password = pwd_sfdc_keystore_password_value;
                                } else if (!pwd_sfdc_keystore_password_value.isEmpty()) {
                                    try {
                                        context.sfdc_keystore_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_sfdc_keystore_password_value);
                                        context.put("sfdc_keystore_password",context.sfdc_keystore_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("sfdc_conn_QueryCondition", "id_String");
                            context.sfdc_conn_QueryCondition=(String) context.getProperty("sfdc_conn_QueryCondition");
                        context.setContextType("filter_date", "id_String");
                            context.filter_date=(String) context.getProperty("filter_date");
                        context.setContextType("nd_s3_bucket_QA_sfdc", "id_String");
                            context.nd_s3_bucket_QA_sfdc=(String) context.getProperty("nd_s3_bucket_QA_sfdc");
                        context.setContextType("nd_s3_data_lake_path_sfdc", "id_String");
                            context.nd_s3_data_lake_path_sfdc=(String) context.getProperty("nd_s3_data_lake_path_sfdc");
                        context.setContextType("NP_Salesforce_apiVersion", "id_String");
                            context.NP_Salesforce_apiVersion=(String) context.getProperty("NP_Salesforce_apiVersion");
                        context.setContextType("NP_Salesforce_clientId", "id_String");
                            context.NP_Salesforce_clientId=(String) context.getProperty("NP_Salesforce_clientId");
                        context.setContextType("NP_Salesforce_endpoint", "id_String");
                            context.NP_Salesforce_endpoint=(String) context.getProperty("NP_Salesforce_endpoint");
                        context.setContextType("NP_Salesforce_loginType", "id_String");
                            context.NP_Salesforce_loginType=(String) context.getProperty("NP_Salesforce_loginType");
                        context.setContextType("NP_Salesforce_oauth_callbackHost", "id_String");
                            context.NP_Salesforce_oauth_callbackHost=(String) context.getProperty("NP_Salesforce_oauth_callbackHost");
                        context.setContextType("NP_Salesforce_oauth_callbackPort", "id_Integer");
                            try{
                                context.NP_Salesforce_oauth_callbackPort=routines.system.ParserUtils.parseTo_Integer (context.getProperty("NP_Salesforce_oauth_callbackPort"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "NP_Salesforce_oauth_callbackPort", e.getMessage()));
                                context.NP_Salesforce_oauth_callbackPort=null;
                            }
                        context.setContextType("NP_Salesforce_oauth_clientId", "id_String");
                            context.NP_Salesforce_oauth_clientId=(String) context.getProperty("NP_Salesforce_oauth_clientId");
                        context.setContextType("NP_Salesforce_oauth_clientSecret", "id_Password");
                            String pwd_NP_Salesforce_oauth_clientSecret_value = context.getProperty("NP_Salesforce_oauth_clientSecret");
                            context.NP_Salesforce_oauth_clientSecret = null;
                            if(pwd_NP_Salesforce_oauth_clientSecret_value!=null) {
                                if(context_param.containsKey("NP_Salesforce_oauth_clientSecret")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.NP_Salesforce_oauth_clientSecret = pwd_NP_Salesforce_oauth_clientSecret_value;
                                } else if (!pwd_NP_Salesforce_oauth_clientSecret_value.isEmpty()) {
                                    try {
                                        context.NP_Salesforce_oauth_clientSecret = routines.system.PasswordEncryptUtil.decryptPassword(pwd_NP_Salesforce_oauth_clientSecret_value);
                                        context.put("NP_Salesforce_oauth_clientSecret",context.NP_Salesforce_oauth_clientSecret);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("NP_Salesforce_oauth_tokenFile", "id_String");
                            context.NP_Salesforce_oauth_tokenFile=(String) context.getProperty("NP_Salesforce_oauth_tokenFile");
                        context.setContextType("NP_Salesforce_oauth2FlowType", "id_String");
                            context.NP_Salesforce_oauth2FlowType=(String) context.getProperty("NP_Salesforce_oauth2FlowType");
                        context.setContextType("NP_Salesforce_oauth2JwtFlow_audience", "id_String");
                            context.NP_Salesforce_oauth2JwtFlow_audience=(String) context.getProperty("NP_Salesforce_oauth2JwtFlow_audience");
                        context.setContextType("NP_Salesforce_oauth2JwtFlow_certificateAlias", "id_String");
                            context.NP_Salesforce_oauth2JwtFlow_certificateAlias=(String) context.getProperty("NP_Salesforce_oauth2JwtFlow_certificateAlias");
                        context.setContextType("NP_Salesforce_oauth2JwtFlow_expirationTime", "id_Integer");
                            try{
                                context.NP_Salesforce_oauth2JwtFlow_expirationTime=routines.system.ParserUtils.parseTo_Integer (context.getProperty("NP_Salesforce_oauth2JwtFlow_expirationTime"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "NP_Salesforce_oauth2JwtFlow_expirationTime", e.getMessage()));
                                context.NP_Salesforce_oauth2JwtFlow_expirationTime=null;
                            }
                        context.setContextType("NP_Salesforce_oauth2JwtFlow_issuer", "id_String");
                            context.NP_Salesforce_oauth2JwtFlow_issuer=(String) context.getProperty("NP_Salesforce_oauth2JwtFlow_issuer");
                        context.setContextType("NP_Salesforce_oauth2JwtFlow_keyStore", "id_String");
                            context.NP_Salesforce_oauth2JwtFlow_keyStore=(String) context.getProperty("NP_Salesforce_oauth2JwtFlow_keyStore");
                        context.setContextType("NP_Salesforce_oauth2JwtFlow_keyStorePassword", "id_Password");
                            String pwd_NP_Salesforce_oauth2JwtFlow_keyStorePassword_value = context.getProperty("NP_Salesforce_oauth2JwtFlow_keyStorePassword");
                            context.NP_Salesforce_oauth2JwtFlow_keyStorePassword = null;
                            if(pwd_NP_Salesforce_oauth2JwtFlow_keyStorePassword_value!=null) {
                                if(context_param.containsKey("NP_Salesforce_oauth2JwtFlow_keyStorePassword")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.NP_Salesforce_oauth2JwtFlow_keyStorePassword = pwd_NP_Salesforce_oauth2JwtFlow_keyStorePassword_value;
                                } else if (!pwd_NP_Salesforce_oauth2JwtFlow_keyStorePassword_value.isEmpty()) {
                                    try {
                                        context.NP_Salesforce_oauth2JwtFlow_keyStorePassword = routines.system.PasswordEncryptUtil.decryptPassword(pwd_NP_Salesforce_oauth2JwtFlow_keyStorePassword_value);
                                        context.put("NP_Salesforce_oauth2JwtFlow_keyStorePassword",context.NP_Salesforce_oauth2JwtFlow_keyStorePassword);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("NP_Salesforce_oauth2JwtFlow_subject", "id_String");
                            context.NP_Salesforce_oauth2JwtFlow_subject=(String) context.getProperty("NP_Salesforce_oauth2JwtFlow_subject");
                        context.setContextType("NP_Salesforce_proxy_host", "id_String");
                            context.NP_Salesforce_proxy_host=(String) context.getProperty("NP_Salesforce_proxy_host");
                        context.setContextType("NP_Salesforce_proxy_port", "id_Integer");
                            try{
                                context.NP_Salesforce_proxy_port=routines.system.ParserUtils.parseTo_Integer (context.getProperty("NP_Salesforce_proxy_port"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "NP_Salesforce_proxy_port", e.getMessage()));
                                context.NP_Salesforce_proxy_port=null;
                            }
                        context.setContextType("NP_Salesforce_proxy_userPassword_password", "id_Password");
                            String pwd_NP_Salesforce_proxy_userPassword_password_value = context.getProperty("NP_Salesforce_proxy_userPassword_password");
                            context.NP_Salesforce_proxy_userPassword_password = null;
                            if(pwd_NP_Salesforce_proxy_userPassword_password_value!=null) {
                                if(context_param.containsKey("NP_Salesforce_proxy_userPassword_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.NP_Salesforce_proxy_userPassword_password = pwd_NP_Salesforce_proxy_userPassword_password_value;
                                } else if (!pwd_NP_Salesforce_proxy_userPassword_password_value.isEmpty()) {
                                    try {
                                        context.NP_Salesforce_proxy_userPassword_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_NP_Salesforce_proxy_userPassword_password_value);
                                        context.put("NP_Salesforce_proxy_userPassword_password",context.NP_Salesforce_proxy_userPassword_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("NP_Salesforce_proxy_userPassword_userId", "id_String");
                            context.NP_Salesforce_proxy_userPassword_userId=(String) context.getProperty("NP_Salesforce_proxy_userPassword_userId");
                        context.setContextType("NP_Salesforce_sessionDirectory", "id_String");
                            context.NP_Salesforce_sessionDirectory=(String) context.getProperty("NP_Salesforce_sessionDirectory");
                        context.setContextType("NP_Salesforce_timeout", "id_Integer");
                            try{
                                context.NP_Salesforce_timeout=routines.system.ParserUtils.parseTo_Integer (context.getProperty("NP_Salesforce_timeout"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "NP_Salesforce_timeout", e.getMessage()));
                                context.NP_Salesforce_timeout=null;
                            }
                        context.setContextType("NP_Salesforce_userPassword_password", "id_Password");
                            String pwd_NP_Salesforce_userPassword_password_value = context.getProperty("NP_Salesforce_userPassword_password");
                            context.NP_Salesforce_userPassword_password = null;
                            if(pwd_NP_Salesforce_userPassword_password_value!=null) {
                                if(context_param.containsKey("NP_Salesforce_userPassword_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.NP_Salesforce_userPassword_password = pwd_NP_Salesforce_userPassword_password_value;
                                } else if (!pwd_NP_Salesforce_userPassword_password_value.isEmpty()) {
                                    try {
                                        context.NP_Salesforce_userPassword_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_NP_Salesforce_userPassword_password_value);
                                        context.put("NP_Salesforce_userPassword_password",context.NP_Salesforce_userPassword_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("NP_Salesforce_userPassword_securityKey", "id_Password");
                            String pwd_NP_Salesforce_userPassword_securityKey_value = context.getProperty("NP_Salesforce_userPassword_securityKey");
                            context.NP_Salesforce_userPassword_securityKey = null;
                            if(pwd_NP_Salesforce_userPassword_securityKey_value!=null) {
                                if(context_param.containsKey("NP_Salesforce_userPassword_securityKey")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.NP_Salesforce_userPassword_securityKey = pwd_NP_Salesforce_userPassword_securityKey_value;
                                } else if (!pwd_NP_Salesforce_userPassword_securityKey_value.isEmpty()) {
                                    try {
                                        context.NP_Salesforce_userPassword_securityKey = routines.system.PasswordEncryptUtil.decryptPassword(pwd_NP_Salesforce_userPassword_securityKey_value);
                                        context.put("NP_Salesforce_userPassword_securityKey",context.NP_Salesforce_userPassword_securityKey);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("NP_Salesforce_userPassword_userId", "id_String");
                            context.NP_Salesforce_userPassword_userId=(String) context.getProperty("NP_Salesforce_userPassword_userId");
                        context.setContextType("sfdc_audience_url", "id_String");
                            context.sfdc_audience_url=(String) context.getProperty("sfdc_audience_url");
                        context.setContextType("sfdc_certificate_alias", "id_String");
                            context.sfdc_certificate_alias=(String) context.getProperty("sfdc_certificate_alias");
                        context.setContextType("sfdc_keystore_path", "id_String");
                            context.sfdc_keystore_path=(String) context.getProperty("sfdc_keystore_path");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("university_code")) {
                context.university_code = (String) parentContextMap.get("university_code");
            }if (parentContextMap.containsKey("status")) {
                context.status = (String) parentContextMap.get("status");
            }if (parentContextMap.containsKey("description")) {
                context.description = (String) parentContextMap.get("description");
            }if (parentContextMap.containsKey("staging_S3_dir")) {
                context.staging_S3_dir = (String) parentContextMap.get("staging_S3_dir");
            }if (parentContextMap.containsKey("sfdc_subject_user")) {
                context.sfdc_subject_user = (String) parentContextMap.get("sfdc_subject_user");
            }if (parentContextMap.containsKey("sfdc_issuer_token")) {
                context.sfdc_issuer_token = (String) parentContextMap.get("sfdc_issuer_token");
            }if (parentContextMap.containsKey("sfdc_keystore_password")) {
                context.sfdc_keystore_password = (java.lang.String) parentContextMap.get("sfdc_keystore_password");
            }if (parentContextMap.containsKey("sfdc_conn_QueryCondition")) {
                context.sfdc_conn_QueryCondition = (String) parentContextMap.get("sfdc_conn_QueryCondition");
            }if (parentContextMap.containsKey("filter_date")) {
                context.filter_date = (String) parentContextMap.get("filter_date");
            }if (parentContextMap.containsKey("nd_s3_bucket_QA_sfdc")) {
                context.nd_s3_bucket_QA_sfdc = (String) parentContextMap.get("nd_s3_bucket_QA_sfdc");
            }if (parentContextMap.containsKey("nd_s3_data_lake_path_sfdc")) {
                context.nd_s3_data_lake_path_sfdc = (String) parentContextMap.get("nd_s3_data_lake_path_sfdc");
            }if (parentContextMap.containsKey("NP_Salesforce_apiVersion")) {
                context.NP_Salesforce_apiVersion = (String) parentContextMap.get("NP_Salesforce_apiVersion");
            }if (parentContextMap.containsKey("NP_Salesforce_clientId")) {
                context.NP_Salesforce_clientId = (String) parentContextMap.get("NP_Salesforce_clientId");
            }if (parentContextMap.containsKey("NP_Salesforce_endpoint")) {
                context.NP_Salesforce_endpoint = (String) parentContextMap.get("NP_Salesforce_endpoint");
            }if (parentContextMap.containsKey("NP_Salesforce_loginType")) {
                context.NP_Salesforce_loginType = (String) parentContextMap.get("NP_Salesforce_loginType");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth_callbackHost")) {
                context.NP_Salesforce_oauth_callbackHost = (String) parentContextMap.get("NP_Salesforce_oauth_callbackHost");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth_callbackPort")) {
                context.NP_Salesforce_oauth_callbackPort = (Integer) parentContextMap.get("NP_Salesforce_oauth_callbackPort");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth_clientId")) {
                context.NP_Salesforce_oauth_clientId = (String) parentContextMap.get("NP_Salesforce_oauth_clientId");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth_clientSecret")) {
                context.NP_Salesforce_oauth_clientSecret = (java.lang.String) parentContextMap.get("NP_Salesforce_oauth_clientSecret");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth_tokenFile")) {
                context.NP_Salesforce_oauth_tokenFile = (String) parentContextMap.get("NP_Salesforce_oauth_tokenFile");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth2FlowType")) {
                context.NP_Salesforce_oauth2FlowType = (String) parentContextMap.get("NP_Salesforce_oauth2FlowType");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth2JwtFlow_audience")) {
                context.NP_Salesforce_oauth2JwtFlow_audience = (String) parentContextMap.get("NP_Salesforce_oauth2JwtFlow_audience");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth2JwtFlow_certificateAlias")) {
                context.NP_Salesforce_oauth2JwtFlow_certificateAlias = (String) parentContextMap.get("NP_Salesforce_oauth2JwtFlow_certificateAlias");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth2JwtFlow_expirationTime")) {
                context.NP_Salesforce_oauth2JwtFlow_expirationTime = (Integer) parentContextMap.get("NP_Salesforce_oauth2JwtFlow_expirationTime");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth2JwtFlow_issuer")) {
                context.NP_Salesforce_oauth2JwtFlow_issuer = (String) parentContextMap.get("NP_Salesforce_oauth2JwtFlow_issuer");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth2JwtFlow_keyStore")) {
                context.NP_Salesforce_oauth2JwtFlow_keyStore = (String) parentContextMap.get("NP_Salesforce_oauth2JwtFlow_keyStore");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth2JwtFlow_keyStorePassword")) {
                context.NP_Salesforce_oauth2JwtFlow_keyStorePassword = (java.lang.String) parentContextMap.get("NP_Salesforce_oauth2JwtFlow_keyStorePassword");
            }if (parentContextMap.containsKey("NP_Salesforce_oauth2JwtFlow_subject")) {
                context.NP_Salesforce_oauth2JwtFlow_subject = (String) parentContextMap.get("NP_Salesforce_oauth2JwtFlow_subject");
            }if (parentContextMap.containsKey("NP_Salesforce_proxy_host")) {
                context.NP_Salesforce_proxy_host = (String) parentContextMap.get("NP_Salesforce_proxy_host");
            }if (parentContextMap.containsKey("NP_Salesforce_proxy_port")) {
                context.NP_Salesforce_proxy_port = (Integer) parentContextMap.get("NP_Salesforce_proxy_port");
            }if (parentContextMap.containsKey("NP_Salesforce_proxy_userPassword_password")) {
                context.NP_Salesforce_proxy_userPassword_password = (java.lang.String) parentContextMap.get("NP_Salesforce_proxy_userPassword_password");
            }if (parentContextMap.containsKey("NP_Salesforce_proxy_userPassword_userId")) {
                context.NP_Salesforce_proxy_userPassword_userId = (String) parentContextMap.get("NP_Salesforce_proxy_userPassword_userId");
            }if (parentContextMap.containsKey("NP_Salesforce_sessionDirectory")) {
                context.NP_Salesforce_sessionDirectory = (String) parentContextMap.get("NP_Salesforce_sessionDirectory");
            }if (parentContextMap.containsKey("NP_Salesforce_timeout")) {
                context.NP_Salesforce_timeout = (Integer) parentContextMap.get("NP_Salesforce_timeout");
            }if (parentContextMap.containsKey("NP_Salesforce_userPassword_password")) {
                context.NP_Salesforce_userPassword_password = (java.lang.String) parentContextMap.get("NP_Salesforce_userPassword_password");
            }if (parentContextMap.containsKey("NP_Salesforce_userPassword_securityKey")) {
                context.NP_Salesforce_userPassword_securityKey = (java.lang.String) parentContextMap.get("NP_Salesforce_userPassword_securityKey");
            }if (parentContextMap.containsKey("NP_Salesforce_userPassword_userId")) {
                context.NP_Salesforce_userPassword_userId = (String) parentContextMap.get("NP_Salesforce_userPassword_userId");
            }if (parentContextMap.containsKey("sfdc_audience_url")) {
                context.sfdc_audience_url = (String) parentContextMap.get("sfdc_audience_url");
            }if (parentContextMap.containsKey("sfdc_certificate_alias")) {
                context.sfdc_certificate_alias = (String) parentContextMap.get("sfdc_certificate_alias");
            }if (parentContextMap.containsKey("sfdc_keystore_path")) {
                context.sfdc_keystore_path = (String) parentContextMap.get("sfdc_keystore_path");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("sfdc_keystore_password");
			parametersToEncrypt.add("NP_Salesforce_oauth_clientSecret");
			parametersToEncrypt.add("NP_Salesforce_oauth2JwtFlow_keyStorePassword");
			parametersToEncrypt.add("NP_Salesforce_proxy_userPassword_password");
			parametersToEncrypt.add("NP_Salesforce_userPassword_password");
			parametersToEncrypt.add("NP_Salesforce_userPassword_securityKey");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_4) {
globalMap.put("tJava_4_SUBPROCESS_STATE", -1);

e_tJava_4.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : sfdc_history_s3_sync_job_stv");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));



            connections.put("conn_tSalesforceConnection_1", globalMap.get("conn_tSalesforceConnection_1"));


        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1152151 characters generated by Talend Open Studio for Data Integration 
 *     on the May 24, 2021 at 10:01:33 AM PDT
 ************************************************************************************************/